using ConfigServices.Services;
using CultureServices.Resources;
using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace AngularComponentsGeneratedServices.Services
{
    public partial class AngularComponentsGeneratedService : ConfigService, IAngularComponentsGeneratedService
    {
        private void CreateComponentHTMLFile(DLLTypeInfo dllTypeInfoModels, List<DLLTypeInfo> DLLTypeInfoCSSPModelsList)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"<!--");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@"-->");
            sb.AppendLine(@"");

            sb.AppendLine(@"<mat-card>");
            sb.AppendLine(@"  <mat-card-header>");
            sb.AppendLine(@"    <mat-card-title>");
            sb.AppendLine($@"      { dllTypeInfoModels.Name } works!");
            sb.AppendLine($@"      <button mat-button color=""primary"" (click)=""Get{ dllTypeInfoModels.Name }()"">Get { dllTypeInfoModels.Name }</button>");
            sb.AppendLine(@"    </mat-card-title>");
            sb.AppendLine($@"    <mat-card-subtitle>{{{{ { dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }TextModel$.getValue().Title }}}}</mat-card-subtitle>");
            sb.AppendLine(@"  </mat-card-header>");
            sb.AppendLine(@"  <mat-card-content>");
            sb.AppendLine(@"    <mat-list>");
            sb.AppendLine($@"      <mat-list-item *ngFor=""let { dllTypeInfoModels.Name.ToLower() } of { dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }Model$.getValue().{ dllTypeInfoModels.Name }List"">");
            //sb.AppendLine($@"            <span mat-line>");
            int objCount = 0;
            string space = " --- ";
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (objCount % 4 == 0)
                {
                    if (objCount != 0)
                    {
                        sb.AppendLine($@"        </span>");
                    }
                    sb.AppendLine($@"        <span mat-line>");
                    space = "";
                }
                else
                {
                    space = " --- ";
                }

                objCount += 1;
                
                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    sb.AppendLine($@"          <span>{ space }{ dllPropertyInfo.CSSPProp.PropName }: [{{{{ Get{ dllPropertyInfo.CSSPProp.PropType }Text({ dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName }) }}}}]</span>");
                }
                else
                {
                    sb.AppendLine($@"          <span>{ space }{ dllPropertyInfo.CSSPProp.PropName }: [{{{{ { dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName } }}}}]</span>");
                }
            }
            sb.AppendLine($@"        </span>");
            sb.AppendLine(@"       </mat-list-item>");
            sb.AppendLine(@"     </mat-list>");
            sb.AppendLine(@"   </mat-card-content>");
            sb.AppendLine(@" <mat-card-actions>");
            sb.AppendLine(@"   <button mat-button>Allo</button>");
            sb.AppendLine(@" </mat-card-actions>");
            sb.AppendLine(@"</mat-card>");

            DirectoryInfo di = new DirectoryInfo(Config.GetValue<string>("OutputDir").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            if (!di.Exists)
            {
                try
                {
                    di.Create();
                }
                catch (Exception ex)
                {
                    string ErrorText = ex.Message + ex.InnerException != null ? ex.InnerException.Message : "";
                    ActionCommandDBService.ErrorText.AppendLine(ErrorText);
                    return;
                }
            }

            FileInfo fiOutputGen = new FileInfo(Config.GetValue<string>("ComponentHTMLFileName").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()).Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                ActionCommandDBService.ExecutionStatusText.AppendLine($"{ string.Format(CultureServicesRes.Created_, fiOutputGen.FullName) }");
            }

            fiOutputGen = new FileInfo(Config.GetValue<string>("ComponentHTMLFileName").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()).Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            if (fiOutputGen.Exists)
            {
                string fileLine = "Last Write Time [" + fiOutputGen.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }
            else
            {
                string fileLine = "Not Created" + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }

        }
    }
}
