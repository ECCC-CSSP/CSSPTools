using ConfigServices.Services;
using CultureServices.Resources;
using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace AngularComponentsGeneratedServices.Services
{
    public partial class AngularComponentsGeneratedService : ConfigService, IAngularComponentsGeneratedService
    {
        private void CreateHomeComponentHTMLFile(int max, List<DLLTypeInfo> DLLTypeInfoCSSPModelsList, List<string> removeClass)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"<!--");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@"-->");
            sb.AppendLine(@"");

            sb.AppendLine(@"<h2>home works! -- {{ homeService.homeTextModel$.getValue().Title }}</h2>");
            
            int count = 0;
            foreach (DLLTypeInfo dllTypeInfoModels in DLLTypeInfoCSSPModelsList)
            {
                if (!removeClass.Contains(dllTypeInfoModels.Name))
                {
                    if (!dllTypeInfoModels.HasNotMappedAttribute)
                    {
                        count += 1;
                        if (count > max) break;

                        sb.AppendLine($@"<a mat-button routerLink=""{ dllTypeInfoModels.Name.ToLower() }"" routerLinkActive=""active-link"">{ dllTypeInfoModels.Name }({ count })</a>");
                    }
                }
            }

            sb.AppendLine(@"<router-outlet></router-outlet>");

            FileInfo fiOutputGen = new FileInfo(Config.GetValue<string>("HomeComponentHTMLFileName"));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                ActionCommandDBService.ExecutionStatusText.AppendLine($"{ string.Format(CultureServicesRes.Created_, fiOutputGen.FullName) }");
            }

            fiOutputGen = new FileInfo(Config.GetValue<string>("HomeComponentHTMLFileName"));
            if (fiOutputGen.Exists)
            {
                string fileLine = "Last Write Time [" + fiOutputGen.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }
            else
            {
                string fileLine = "Not Created" + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }

        }
    }
}
