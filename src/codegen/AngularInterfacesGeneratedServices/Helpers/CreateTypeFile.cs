using AngularInterfacesGeneratedServices.Resources;
using CSSPEnums;
using CSSPModels;
using GenerateCodeBaseServices.Models;
using GenerateCodeBaseServices.Services;
using ActionCommandDBServices.Models;
using ActionCommandDBServices.Services;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using ValidateAppSettingsServices.Services;
using ValidateAppSettingsServices.Models;
using Microsoft.AspNetCore.Mvc;

namespace AngularInterfacesGeneratedServices.Services
{
    public partial class AngularInterfacesGeneratedService : IAngularInterfacesGeneratedService
    {
        private void CreateTypeFile(DLLTypeInfo dllTypeInfoModels, List<DLLTypeInfo> DLLTypeInfoCSSPModelsList)
        {
            StringBuilder sb = new StringBuilder();
            List<string> fileNameUsedList = new List<string>();
            List<string> removeTypeList = new List<string>()
            {
                "Int32", "Int16", "Int64", "Single", "Float", "Double", "String", "DateTime", "Boolean"
            };
            bool IsExtra = false; ;
            string LastLetter = "";
            string BaseClass = "";
            string ParentClass = "";
            List<string> PropToSkip = new List<string>();

            //if (dllTypeInfoModels.Name == "AppTaskParameter")
            //{
            //    int seilfj = 34;
            //}

            sb.AppendLine(@"/*");
            sb.AppendLine(@" * Auto generated from the CSSPWebToolsAngCodeWriter.proj by clicking on the [AngularInterfacesGenerate.cs] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */");
            sb.AppendLine(@"");

            if (dllTypeInfoModels.Name == "CSSPError")
            {
                sb.AppendLine($"import {{ ValidationResult }} from './validationresult.interface';");
            }
            else if (dllTypeInfoModels.Name == "LastUpdate")
            {
                sb.AppendLine($"import {{ CSSPError }} from './cssperror.interface';");
            }
            else
            {
                if (!dllTypeInfoModels.HasNotMappedAttribute)
                {
                    sb.AppendLine($"import {{ LastUpdate }} from './lastupdate.interface';");
                }
                else
                {
                    if (dllTypeInfoModels.Name.Length > 5)
                    {
                        IsExtra = dllTypeInfoModels.Name.Substring(dllTypeInfoModels.Name.Length - 6).StartsWith("Extra");

                        if (!IsExtra)
                        {
                            sb.AppendLine($"import {{ CSSPError }} from './cssperror.interface';");
                        }
                    }
                    else
                    {
                        sb.AppendLine($"import {{ CSSPError }} from './cssperror.interface';");
                    }
                }
            }

            if (dllTypeInfoModels.Name.Length > 6)
            {
                IsExtra = dllTypeInfoModels.Name.Substring(dllTypeInfoModels.Name.Length - 6).StartsWith("Extra");
                if (IsExtra)
                {
                    LastLetter = dllTypeInfoModels.Name.Substring(dllTypeInfoModels.Name.Length - 1);
                    BaseClass = dllTypeInfoModels.Name.Substring(0, dllTypeInfoModels.Name.Length - 6);
                    switch (LastLetter)
                    {
                        case "A":
                            {
                                ParentClass = BaseClass;
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        case "B":
                            {
                                ParentClass = BaseClass + "ExtraA";
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        case "C":
                            {
                                ParentClass = BaseClass + "ExtraB";
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        case "D":
                            {
                                ParentClass = BaseClass + "ExtraC";
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        case "E":
                            {
                                ParentClass = BaseClass + "ExtraD";
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        case "F":
                            {
                                ParentClass = BaseClass + "ExtraE";
                                fileNameUsedList.Add(ParentClass.ToLower());
                                sb.AppendLine($"import {{ { ParentClass } }} from './{ ParentClass.ToLower() }.interface';");
                            }
                            break;
                        default:
                            break;
                    }

                    foreach (DLLTypeInfo dllTypeInfoModels2 in DLLTypeInfoCSSPModelsList)
                    {
                        if (dllTypeInfoModels2.Name == ParentClass)
                        {
                            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels2.PropertyInfoList.OrderBy(c => c.CSSPProp.PropName))
                            {
                                PropToSkip.Add(dllPropertyInfo.CSSPProp.PropName);
                            }
                        }
                    }
                }
                sb.AppendLine(@"");
            }

            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList.OrderBy(c => c.CSSPProp.PropName))
            {
                string fileName = dllPropertyInfo.CSSPProp.PropType.ToLower();
                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    fileName = fileName.Replace("enum", ".enum");
                    if (!fileNameUsedList.Contains(fileName))
                    {
                        fileNameUsedList.Add(fileName);
                        if (PropToSkip.Contains(dllPropertyInfo.CSSPProp.PropName))
                        {
                            continue;
                        }
                        sb.AppendLine($"import {{ { dllPropertyInfo.CSSPProp.PropType } }} from '../../enums/generated/{ fileName }';");
                    }
                }

                if (!fileNameUsedList.Contains(fileName))
                {
                    if (!(dllPropertyInfo.CSSPProp.PropName == "ValidationResults" || dllPropertyInfo.CSSPProp.PropName == "HasErrors"))
                    {
                        if (!removeTypeList.Contains(dllPropertyInfo.CSSPProp.PropType))
                        {
                            fileNameUsedList.Add(fileName);
                            if (PropToSkip.Contains(dllPropertyInfo.CSSPProp.PropName))
                            {
                                continue;
                            }
                            if (dllPropertyInfo.CSSPProp.IsList)
                            {
                                sb.AppendLine($"import {{ { dllPropertyInfo.CSSPProp.PropType } }} from './{ fileName }.interface';");
                            }
                            else
                            {
                                sb.AppendLine($"import {{ { dllPropertyInfo.CSSPProp.PropType } }} from './{ fileName }.interface';");
                            }
                        }
                    }
                }
            }
            sb.AppendLine(@"");

            string MappedText = "";
            if (dllTypeInfoModels.HasNotMappedAttribute)
            {
                if (IsExtra)
                {
                    MappedText = $" extends { ParentClass }";
                }
                else
                {
                    MappedText = " extends CSSPError";
                }
            }
            else
            {
                if (dllTypeInfoModels.Type.Name == "LastUpdate")
                {
                    MappedText = " extends CSSPError";
                }
                else if (dllTypeInfoModels.Type.Name == "CSSPError")
                {
                    MappedText = "";
                }
                else
                {
                    if (IsExtra)
                    {
                        MappedText = $" extends { ParentClass }";
                    }
                    else
                    {
                        MappedText = " extends LastUpdate";
                    }
                }
            }
            sb.AppendLine($@"export interface { dllTypeInfoModels.Name }{ MappedText } {{");

            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList.OrderBy(c => c.CSSPProp.PropName))
            {
                if (PropToSkip.Contains(dllPropertyInfo.CSSPProp.PropName))
                {
                    continue;
                }

                if (dllTypeInfoModels.Name != "CSSPError")
                {
                    if (dllPropertyInfo.CSSPProp.PropName == "HasErrors" || dllPropertyInfo.CSSPProp.PropName == "ValidationResults")
                    {
                        continue;
                    }
                }

                string IsNull = "";
                if (dllPropertyInfo.CSSPProp.IsNullable)
                {
                    IsNull = "?";
                }

                string typeText = "";
                switch (dllPropertyInfo.CSSPProp.PropType)
                {
                    case "Int32":
                    case "Int16":
                    case "Int64":
                    case "Single":
                    case "Float":
                    case "Double":
                        {
                            typeText = "number";
                        }
                        break;
                    case "String":
                        {
                            typeText = "string";
                            IsNull = "";
                        }
                        break;
                    case "DateTime":
                        {
                            typeText = "Date";
                        }
                        break;
                    case "Boolean":
                        {
                            typeText = "boolean";
                        }
                        break;
                    default:
                        {
                            if (dllPropertyInfo.CSSPProp.PropName == "ValidationResults")
                            {
                                typeText = "ValidationResult";
                            }
                            else
                            {
                                typeText = dllPropertyInfo.CSSPProp.PropType;
                            }
                        }
                        break;
                }
                if (dllPropertyInfo.CSSPProp.IsList)
                {
                    sb.AppendLine($@"    { dllPropertyInfo.CSSPProp.PropName }{ IsNull }: { typeText }[];");
                }
                else
                {
                    sb.AppendLine($@"    { dllPropertyInfo.CSSPProp.PropName }{ IsNull }: { typeText };");
                }
            }

            sb.AppendLine(@"}");

            FileInfo fiOutputGen = new FileInfo(configuration.GetValue<string>("InterfaceFileName").Replace("{TypeName}", dllTypeInfoModels.Name.ToLower()));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                actionCommandDBService.ExecutionStatusText.AppendLine($"{ string.Format(AngularInterfacesGeneratedServicesRes.Created_, fiOutputGen.FullName) }");
            }
        }
    }
}
