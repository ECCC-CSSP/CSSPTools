<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbnormalCompletion" xml:space="preserve">
    <value>Abnormal completion</value>
  </data>
  <data name="ActionOptionsRunTestBuild" xml:space="preserve">
    <value>Action - Options: run || test || build</value>
  </data>
  <data name="AllChildDoExistOnColumnGroup" xml:space="preserve">
    <value>All Child do exist on Column Group</value>
  </data>
  <data name="AllGroupsAndChoicesColumnsHaveAUniqueCSSPID" xml:space="preserve">
    <value>All Groups and Choices Columns have a unique CSSPID</value>
  </data>
  <data name="AllHideColumnsWithInformationHasValidCSSPIDIEExistAndIsChild" xml:space="preserve">
    <value>All Hide Columns with information has valid CSSPID (i.e. exist and is child)</value>
  </data>
  <data name="AllowableCharactersAre" xml:space="preserve">
    <value>Allowable characters are</value>
  </data>
  <data name="AllowableCultures_" xml:space="preserve">
    <value>Allowable cultures [{0}]</value>
  </data>
  <data name="AllTextInCSSPIDColumnDoesNotContainSpace" xml:space="preserve">
    <value>All Text in CSSPID column does not contain space</value>
  </data>
  <data name="AllTextInGroupAndChildColumnsDoesNotContainSpace" xml:space="preserve">
    <value>All Text in Group and Child Columns does not contain space</value>
  </data>
  <data name="AlreadyCreated_" xml:space="preserve">
    <value>Already created [{0}]</value>
  </data>
  <data name="Application" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="ApplicationRequires3ParametersSeparatedBySpace" xml:space="preserve">
    <value>Application requires 3 parameters separated by space</value>
  </data>
  <data name="Checking" xml:space="preserve">
    <value>Checking</value>
  </data>
  <data name="Child" xml:space="preserve">
    <value>Child</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="ColumnGroupDoesNotHaveDuplicates" xml:space="preserve">
    <value>Column Group does not have duplicates</value>
  </data>
  <data name="Command_IsNotImplemented" xml:space="preserve">
    <value>Command [{0}] is not implemented</value>
  </data>
  <data name="ComparedOK" xml:space="preserve">
    <value>Compared OK</value>
  </data>
  <data name="CouldNotCreateDirectory_" xml:space="preserve">
    <value>Could not create directory [{0}]</value>
  </data>
  <data name="CouldNotDeleteStatusFile_Error_" xml:space="preserve">
    <value>Could not delete status file [{0}]. Error: [{1}]</value>
  </data>
  <data name="CouldNotFindActionCommandToDeleteWithAction_AndCommand_" xml:space="preserve">
    <value>Could not find ActionCommand to delete with Action [{0}] and Command [{1}]</value>
  </data>
  <data name="CouldNotFindCommand_StatusInDB" xml:space="preserve">
    <value>Could not find command [{0}] status in DB</value>
  </data>
  <data name="CouldNotFindDirectoryOfSolutionFile_" xml:space="preserve">
    <value>Could not find directory of solution file [{0}]</value>
  </data>
  <data name="CouldNotFindExePath_" xml:space="preserve">
    <value>Could not find exePath [{0}]</value>
  </data>
  <data name="CouldNotFindFile_" xml:space="preserve">
    <value>Could not find file [{0}]</value>
  </data>
  <data name="CouldNotFindParameter" xml:space="preserve">
    <value>Could not find parameter</value>
  </data>
  <data name="CouldNotFindParameter_InAppSettingsJSON" xml:space="preserve">
    <value>Could not find parameter [{0}] in appsettings.json</value>
  </data>
  <data name="CouldNotFindSolutionFile_ToCompile" xml:space="preserve">
    <value>Could not find solution file [{0}] to compile</value>
  </data>
  <data name="CouldNotGetOrCreateAction_Command_InDB_" xml:space="preserve">
    <value>Could not get or create Action [{0}] Command [{1}] in DB [{2}]</value>
  </data>
  <data name="CouldNotGetOrCreateObject_InDB_" xml:space="preserve">
    <value>Could not get or create object [{0}] in DB [{1}]</value>
  </data>
  <data name="CouldNotReadFile_" xml:space="preserve">
    <value>Could not read file [{0}]</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="CreatedNew_" xml:space="preserve">
    <value>Created new [{0}]</value>
  </data>
  <data name="Created_" xml:space="preserve">
    <value>Created [{0}]</value>
  </data>
  <data name="Creating" xml:space="preserve">
    <value>Creating</value>
  </data>
  <data name="CSSPAfterAttributeShouldOnlyBeUsedForDateTimeType" xml:space="preserve">
    <value>CSSPAfterAttribute should only be user for DateTime Type</value>
  </data>
  <data name="CSSPID" xml:space="preserve">
    <value>CSSPID</value>
  </data>
  <data name="CSSPIDAreNotDupliate" xml:space="preserve">
    <value>CSSPID are not duplicated</value>
  </data>
  <data name="CSSPIDIsRequiredForGroupOrChild" xml:space="preserve">
    <value>CSSPID is required for Group or Child</value>
  </data>
  <data name="CSSPIDWithDashAreWellFormed" xml:space="preserve">
    <value>CSSPID with '-' are well formed</value>
  </data>
  <data name="CultureOptionsEnCAFrCA" xml:space="preserve">
    <value>Culture - Options:  en-CA || fr-CA</value>
  </data>
  <data name="DataType" xml:space="preserve">
    <value>DataType</value>
  </data>
  <data name="DoesHaveDescENAndDescFRText" xml:space="preserve">
    <value>does have DescEN and DescFR text</value>
  </data>
  <data name="DoesHaveENandFRText" xml:space="preserve">
    <value>does have EN and FR text</value>
  </data>
  <data name="DoesNotContainSpace" xml:space="preserve">
    <value>does not contain space</value>
  </data>
  <data name="DoesNotExist" xml:space="preserve">
    <value>Does not exist</value>
  </data>
  <data name="DoesNotExistFor" xml:space="preserve">
    <value>does not exist for </value>
  </data>
  <data name="DoesNotExistOnColumnGroup" xml:space="preserve">
    <value>does not exist on Column Group</value>
  </data>
  <data name="DoesNotHaveDescENText" xml:space="preserve">
    <value>does not have DescEN text</value>
  </data>
  <data name="DoesNotHaveDescFRText" xml:space="preserve">
    <value>does not have DescFR text</value>
  </data>
  <data name="DoesNotHaveENText" xml:space="preserve">
    <value>does not have EN text</value>
  </data>
  <data name="DoesNotHaveFRText" xml:space="preserve">
    <value>does not have FR text</value>
  </data>
  <data name="DoesNotHaveReportENText" xml:space="preserve">
    <value>does not have ReportEN text</value>
  </data>
  <data name="DoesNotHaveReportFRText" xml:space="preserve">
    <value>does not have ReportFR text</value>
  </data>
  <data name="Doing" xml:space="preserve">
    <value>doing</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="EachChoiceDoesHaveENAndFRText" xml:space="preserve">
    <value>Each Choice does have EN and FR text</value>
  </data>
  <data name="EachChoiceDoesHaveReportENAndReportFRText" xml:space="preserve">
    <value>Each Choice does have ReportEN and ReportFR text</value>
  </data>
  <data name="EachGroupWithEndingName" xml:space="preserve">
    <value>Each Group with ending name</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorFileDoesNotExist_" xml:space="preserve">
    <value>Error: File does not exist [{0}]</value>
  </data>
  <data name="ErrorWhileCreatingCode_" xml:space="preserve">
    <value>Error while creating code [{0}]</value>
  </data>
  <data name="ErrorWhileRunningCommand_UnderDirectory_" xml:space="preserve">
    <value>Error while running command [{0}] under directory [{1}]</value>
  </data>
  <data name="Error_" xml:space="preserve">
    <value>Error: {0}</value>
  </data>
  <data name="ERROR_IsEqualTo0" xml:space="preserve">
    <value>ERROR [{0}] is equal to 0</value>
  </data>
  <data name="EverythingIsOK" xml:space="preserve">
    <value>Everythiing is OK</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>Example</value>
  </data>
  <data name="ExcelDocReadCompleted" xml:space="preserve">
    <value>Excel doc read completed</value>
  </data>
  <data name="ExePathIsEmpty" xml:space="preserve">
    <value>exePath is empty</value>
  </data>
  <data name="Exist" xml:space="preserve">
    <value>Exist</value>
  </data>
  <data name="ExistOnColumnGroup" xml:space="preserve">
    <value>exist on column group</value>
  </data>
  <data name="FileNotFound_" xml:space="preserve">
    <value>File not found [{0}]</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="GroupChoiceChildLevelIsNullForStartCSSPID" xml:space="preserve">
    <value>Group Choice child level is null for startCSSPID</value>
  </data>
  <data name="HasDescENDescFRText" xml:space="preserve">
    <value>has DescEN/DescFR text</value>
  </data>
  <data name="HasDuplicates" xml:space="preserve">
    <value>has duplicates</value>
  </data>
  <data name="HasENFRText" xml:space="preserve">
    <value>has EN/FR text</value>
  </data>
  <data name="HasNoDuplicates" xml:space="preserve">
    <value>has no duplicates</value>
  </data>
  <data name="HasReportENReportFRText" xml:space="preserve">
    <value>has ReportEN/ReportFR text</value>
  </data>
  <data name="HideCellContains" xml:space="preserve">
    <value>Hide cell contains</value>
  </data>
  <data name="HideCellContainsID" xml:space="preserve">
    <value>Hide cell contains id</value>
  </data>
  <data name="HideCellHasDuplicate" xml:space="preserve">
    <value>Hide cell has duplicate</value>
  </data>
  <data name="IsHidingAllPossibleSelection" xml:space="preserve">
    <value>is hiding all possible selection</value>
  </data>
  <data name="IsNotEmpty" xml:space="preserve">
    <value>is not empty</value>
  </data>
  <data name="IsNotEqualTo" xml:space="preserve">
    <value>is not equal to</value>
  </data>
  <data name="IsNotImplemented" xml:space="preserve">
    <value>is not implemented</value>
  </data>
  <data name="IsNotImplementedYet" xml:space="preserve">
    <value>is not implemented yet</value>
  </data>
  <data name="IsNotUnique" xml:space="preserve">
    <value>is not unique</value>
  </data>
  <data name="IsNull" xml:space="preserve">
    <value>is null</value>
  </data>
  <data name="IsUnique" xml:space="preserve">
    <value>is unique</value>
  </data>
  <data name="MemberName" xml:space="preserve">
    <value>member name</value>
  </data>
  <data name="MissingEndValue" xml:space="preserve">
    <value>missing end value</value>
  </data>
  <data name="NoFileToVerify" xml:space="preserve">
    <value>No file to verify</value>
  </data>
  <data name="OfType" xml:space="preserve">
    <value>of type</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="OnlyTypesIntSingleDoubleCanUseRangeAttribute" xml:space="preserve">
    <value>Only types [Int,Single,Double] can use RangeAttributre</value>
  </data>
  <data name="Parameter" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="Parameter_ShouldBe_" xml:space="preserve">
    <value>Parameter #{0} should be {1}</value>
  </data>
  <data name="PleaseRemoveADash" xml:space="preserve">
    <value>please remove a '-'</value>
  </data>
  <data name="PolSourceGrouping" xml:space="preserve">
    <value>PolSourceGrouping</value>
  </data>
  <data name="PotentialEmptyRowAbove" xml:space="preserve">
    <value>potential empty row above</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="ReadingExcelDocumentAndChecking" xml:space="preserve">
    <value>Reading Excel document and checking</value>
  </data>
  <data name="ReadingSpreadsheet" xml:space="preserve">
    <value>Reading spreadsheet</value>
  </data>
  <data name="RecursiveFound" xml:space="preserve">
    <value>Recursive found</value>
  </data>
  <data name="RequiredAUniqueNumberInFirstColumn" xml:space="preserve">
    <value>required a unique number in first column</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="RunningCommand_UnderDirectory_" xml:space="preserve">
    <value>Running command [{0}] under directory [{1}]</value>
  </data>
  <data name="ServerCommand_Error_" xml:space="preserve">
    <value>Server command [{0}] Error: [{1}]</value>
  </data>
  <data name="ShouldNotContain" xml:space="preserve">
    <value>should not contain</value>
  </data>
  <data name="ShouldNotContainSpace" xml:space="preserve">
    <value>should not contain space</value>
  </data>
  <data name="ShouldNotContainTheStringLengthAttribute" xml:space="preserve">
    <value>should not contain the string length attribute</value>
  </data>
  <data name="ShouldNotUseRangeAttribute" xml:space="preserve">
    <value>should not use RangeAttribute</value>
  </data>
  <data name="ShouldOnlyContainCharactersLike" xml:space="preserve">
    <value>should only contain characters like</value>
  </data>
  <data name="SolutionFileNameExampleCSSPRunsCSSPModelsCSSPServices" xml:space="preserve">
    <value>SolutionFileName - Examples: CSSPEnums || CSSPModels || CSSPServices</value>
  </data>
  <data name="Starting" xml:space="preserve">
    <value>Starting</value>
  </data>
  <data name="StringLengthAttributeCanOnlyBeSetForSystemDotString" xml:space="preserve">
    <value>StringLength Attribute can only be set for System.String</value>
  </data>
  <data name="ThanTheLastValue" xml:space="preserve">
    <value>then the last value</value>
  </data>
  <data name="That" xml:space="preserve">
    <value>that</value>
  </data>
  <data name="ThatCSSPID" xml:space="preserve">
    <value>That CSSPID</value>
  </data>
  <data name="ThatEachHideCellWithInformationContainsValidChildID" xml:space="preserve">
    <value>that each Hide cell with information contains valid child id</value>
  </data>
  <data name="ThatGroup" xml:space="preserve">
    <value>that group</value>
  </data>
  <data name="ThatGroupCSSPID" xml:space="preserve">
    <value>that Group CSSPID</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Type_Enum_NotFound" xml:space="preserve">
    <value>Type [{0}]\tEnum [{1}] -------------- not found</value>
  </data>
  <data name="Type_NotFound" xml:space="preserve">
    <value>Type [{0}] ---------------------- not found</value>
  </data>
  <data name="UnableToLoginAs_WithProvidedPassword" xml:space="preserve">
    <value>Unable to login as [{0}] with provided password</value>
  </data>
  <data name="UnmanagedServerError_" xml:space="preserve">
    <value>Unmanaged server error: [{0}]</value>
  </data>
  <data name="VerifyAppSettingsFile" xml:space="preserve">
    <value>Verify appsettings.json file</value>
  </data>
  <data name="WhichDoesNotExist" xml:space="preserve">
    <value>which does not exist</value>
  </data>
  <data name="WhichIsNotADirectChild" xml:space="preserve">
    <value>which is not a direct child</value>
  </data>
  <data name="WhichTheFirstValueIs" xml:space="preserve">
    <value>which the first value is</value>
  </data>
  <data name="WhichWillDuplicate" xml:space="preserve">
    <value>which will dupliate</value>
  </data>
  <data name="YouCanAddASpaceToFixTheProblem" xml:space="preserve">
    <value>You can add a space to fix the problem</value>
  </data>
  <data name="_IsRequied" xml:space="preserve">
    <value>{0} is required</value>
  </data>
  <data name="__CouldNotBeFound" xml:space="preserve">
    <value>{0}: [{1}] could not be found</value>
  </data>
</root>