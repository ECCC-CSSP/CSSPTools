using CSSPPolSourceGroupingExcelFileRead.Models;
using CSSPPolSourceGroupingExcelFileRead.Services;
using EnumsPolSourceInfoRelatedFiles.Resources;
using Microsoft.Extensions.Configuration;
using StatusAndResultsDBService.Models;
using StatusAndResultsDBService.Services;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace EnumsPolSourceInfoRelatedFiles.Services
{
    public partial class GenerateService : IGenerateService
    {
        #region Variables
        #endregion Variables

        #region Constructors
        #endregion Constructors

        #region Functions public
        #endregion Functions public

        #region Functions private
        private async Task Generate_PolSourceObsInfoEnum()
        {
            StringBuilder sb = new StringBuilder();

            FileInfo fi = new FileInfo(_configuration.GetValue<string>("PolSourceObsInfoEnumGenerated_cs"));

            List<string> groupList = (from c in _polSourceGroupingExcelFileRead.groupChoiceChildLevelList
                                      select c.Group).Distinct().ToList();

            sb.AppendLine(@"/*");
            sb.AppendLine(@" * Auto generated from the CSSPCodeWriter.proj by clicking on the [Generate PolSource Enum code files] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPEnums");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public enum PolSourceObsInfoEnum");
            sb.AppendLine(@"    {");

            foreach (GroupChoiceChildLevel groupChoiceChildLevel in _polSourceGroupingExcelFileRead.groupChoiceChildLevelList)
            {
                if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.Group))
                {
                    if (groupChoiceChildLevel.Group.Substring(groupChoiceChildLevel.Group.Length - 5) == "Start" && string.IsNullOrWhiteSpace(groupChoiceChildLevel.Choice))
                    {
                        sb.AppendLine("");
                        sb.AppendLine($"        { groupChoiceChildLevel.Group } = { groupChoiceChildLevel.CSSPID.ToString() },");
                    }
                    else
                    {
                        sb.AppendLine($"        { groupChoiceChildLevel.Choice } = { groupChoiceChildLevel.CSSPID.ToString() },");

                    }
                }
            }
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            try
            {
                StreamWriter sw = fi.CreateText();
                sw.Write(sb.ToString());
                sw.Close();
            }
            catch (Exception ex)
            {
                sbError.AppendLine($"{ AppRes.Creating } [{ fi.FullName }] ...");
                string InnerException = (ex.InnerException != null ? $"Inner: { ex.InnerException.Message }" : "");
                sbError.AppendLine($"{ AppRes.Error }: { ex.Message }{ InnerException  }");
                //await _statusAndResultsService.Update(command, sbError.ToString(), sbStatus.ToString(), 0);

                return;
            }

            sbStatus.AppendLine($"{ AppRes.Created }: { fi.FullName }");
            //await _statusAndResultsService.Update(command, sbError.ToString(), sbStatus.ToString(), 0);
        }
        #endregion Functions private
    }
}