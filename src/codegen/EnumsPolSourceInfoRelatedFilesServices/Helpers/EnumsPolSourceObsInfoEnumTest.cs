using CultureServices.Resources;
using Microsoft.Extensions.Configuration;
using PolSourceGroupingExcelFileReadServices.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnumsPolSourceInfoRelatedFilesServices.Services
{
    public partial class EnumsPolSourceInfoRelatedFilesService : IEnumsPolSourceInfoRelatedFilesService
    {
        #region Variables
        #endregion Variables

        #region Constructors
        #endregion Constructors

        #region Functions public
        #endregion Functions public

        #region Functions private
        private async Task<bool> Generate_EnumsPolSourceObsInfoEnumTest()
        {
            StringBuilder sb = new StringBuilder();

            FileInfo fi = new FileInfo(Config.GetValue<string>("EnumsPolSourceObsInfoEnumTestGenerated_cs"));

            List<string> groupList = (from c in PolSourceGroupingExcelFileReadService.groupChoiceChildLevelList
                                      select c.Group).Distinct().ToList();

            sb.AppendLine(@"/*");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */");
            sb.AppendLine(@"using CultureServices.Resources;");
            sb.AppendLine(@"using System;");
            sb.AppendLine(@"using Xunit;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPEnums.Tests");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public partial class EnumsTest");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"        [Theory]");
            sb.AppendLine(@"        [InlineData(""en-CA"")]");
            sb.AppendLine(@"        [InlineData(""fr-CA"")]");
            sb.AppendLine(@"        public void GetResValueForTypeAndID_for_PolSourceObsInfoEnum_Test(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            SetupTest(culture);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, null);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.Empty, retStr);");
            sb.AppendLine(@"            string retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.Empty, retStrDesc);");
            sb.AppendLine(@"            string retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.Empty, retStrReport);");
            sb.AppendLine(@"            string retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.Empty, retStrText);");
            sb.AppendLine(@"            string retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.Empty, retStrInit);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, null);");
            sb.AppendLine(@"                retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"                retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"                retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"                retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                switch ((PolSourceObsInfoEnum)i)");
            sb.AppendLine(@"                {");
            foreach (GroupChoiceChildLevel groupChoiceChildLevel in PolSourceGroupingExcelFileReadService.groupChoiceChildLevelList.Where(c => c.Group.Substring(c.Group.Length - 5) == "Start" && c.Choice == "").Distinct().ToList())
            {
                sb.AppendLine($@"                    case PolSourceObsInfoEnum.{ groupChoiceChildLevel.Group }:");
                sb.AppendLine(@"                    {");
                sb.AppendLine($@"                        Assert.Equal(CulturePolSourcesRes.PolSourceInfoEnum{ groupChoiceChildLevel.Group }, retStr);");
                sb.AppendLine($@"                        Assert.Equal(CulturePolSourcesRes.PolSourceInfoEnum{ groupChoiceChildLevel.Group }Desc, retStrDesc);");
                sb.AppendLine(@"                    }");
                sb.AppendLine(@"                    break;");
            }
            foreach (GroupChoiceChildLevel groupChoiceChildLevel in PolSourceGroupingExcelFileReadService.groupChoiceChildLevelList)
            {
                if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.Choice))
                {
                    sb.AppendLine($@"                    case PolSourceObsInfoEnum.{ groupChoiceChildLevel.Choice }:");
                    sb.AppendLine(@"                    {");
                    sb.AppendLine($@"                        Assert.Equal(CulturePolSourcesRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }, retStr);");
                    sb.AppendLine($@"                        Assert.Equal(CulturePolSourcesRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }Report, retStrReport);");
                    if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.TextEN))
                    {
                        sb.AppendLine($@"                        Assert.Equal(CulturePolSourcesRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }Text, retStrText);");
                    }
                    sb.AppendLine(@"                    }");
                    sb.AppendLine(@"                    break;");
                }
            }
            sb.AppendLine(@"                }");
            sb.AppendLine(@"            }");
            sb.AppendLine(@"");
            sb.AppendLine(@"            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, null);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.CSSPError.ToString(), retStr);");
            sb.AppendLine(@"            retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"            Assert.Equal(CultureEnumsRes.CSSPError.ToString(), retStrDesc);");
            sb.AppendLine(@"            retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"            Assert.Equal("""", retStrReport);");
            sb.AppendLine(@"            retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"            Assert.Equal("""", retStrText);");
            sb.AppendLine(@"            retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"            Assert.Equal("""", retStrInit);");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            try
            {
                StreamWriter sw = fi.CreateText();
                sw.Write(sb.ToString());
                sw.Close();
            }
            catch (Exception ex)
            {
                ActionCommandDBService.ErrorText.AppendLine($"{ CultureServicesRes.Creating } [{ fi.FullName }] ...");
                string InnerException = (ex.InnerException != null ? $"Inner: { ex.InnerException.Message }" : "");
                ActionCommandDBService.ErrorText.AppendLine($"{ CultureServicesRes.Error }: { ex.Message }{ InnerException  }");

                return await Task.FromResult(false);
            }

            fi = new FileInfo(Config.GetValue<string>("EnumsPolSourceObsInfoEnumTestGenerated_cs"));
            if (fi.Exists)
            {
                string fileLine = "Last Write Time [" + fi.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fi.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }
            else
            {
                string fileLine = "Not Created" + fi.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine($"{ CultureServicesRes.Created }: { fi.FullName }");

            return await Task.FromResult(true);
        }
        #endregion Functions private
    }
}