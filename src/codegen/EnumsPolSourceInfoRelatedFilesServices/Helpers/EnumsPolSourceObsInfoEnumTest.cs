using EnumsPolSourceInfoRelatedFilesServices.Resources;
using Microsoft.Extensions.Configuration;
using PolSourceGroupingExcelFileReadServices.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace EnumsPolSourceInfoRelatedFilesServices.Services
{
    public partial class EnumsPolSourceInfoRelatedFilesService : IEnumsPolSourceInfoRelatedFilesService
    {
        #region Variables
        #endregion Variables

        #region Constructors
        #endregion Constructors

        #region Functions public
        #endregion Functions public

        #region Functions private
        private async Task<bool> Generate_EnumsPolSourceObsInfoEnumTest()
        {
            StringBuilder sb = new StringBuilder();

            FileInfo fi = new FileInfo(configuration.GetValue<string>("EnumsPolSourceObsInfoEnumTestGenerated_cs"));

            List<string> groupList = (from c in polSourceGroupingExcelFileReadService.groupChoiceChildLevelList
                                      select c.Group).Distinct().ToList();

            sb.AppendLine(@"/*");
            sb.AppendLine(@" * Auto generated from the CSSPCodeWriter.proj by clicking on the [Generate PolSource Enum code files] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"using System;");
            sb.AppendLine(@"using Xunit;");
            sb.AppendLine(@"using System.Collections.Generic;");
            sb.AppendLine(@"using System.Globalization;");
            sb.AppendLine(@"using CSSPEnums.Resources;");
            sb.AppendLine(@"using CSSPEnums.Resources.Generated;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPEnums.Tests");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public partial class EnumsTest");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"        [Fact]");
            sb.AppendLine(@"        public void GetResValueForTypeAndID_for_PolSourceObsInfoEnum_Test()");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo(""en-CA""), new CultureInfo(""fr-CA"") })");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                SetupTest(culture);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, null);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStr);");
            sb.AppendLine(@"                string retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStrDesc);");
            sb.AppendLine(@"                string retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStrReport);");
            sb.AppendLine(@"                string retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStrText);");
            sb.AppendLine(@"                string retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), null, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStrInit);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))");
            sb.AppendLine(@"                {");
            sb.AppendLine(@"                    retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, null);");
            sb.AppendLine(@"                    retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"                    retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"                    retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"                    retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                    switch ((PolSourceObsInfoEnum)i)");
            sb.AppendLine(@"                    {");
            foreach (GroupChoiceChildLevel groupChoiceChildLevel in polSourceGroupingExcelFileReadService.groupChoiceChildLevelList.Where(c => c.Group.Substring(c.Group.Length - 5) == "Start" && c.Choice == "").Distinct().ToList())
            {
                sb.AppendLine($@"                        case PolSourceObsInfoEnum.{ groupChoiceChildLevel.Group }:");
                sb.AppendLine(@"                        {");
                sb.AppendLine($@"                            Assert.Equal(PolSourceInfoEnumGeneratedRes.PolSourceInfoEnum{ groupChoiceChildLevel.Group }, retStr);");
                sb.AppendLine($@"                            Assert.Equal(PolSourceInfoEnumGeneratedRes.PolSourceInfoEnum{ groupChoiceChildLevel.Group }Desc, retStrDesc);");
                sb.AppendLine(@"                        }");
                sb.AppendLine(@"                        break;");
            }
            foreach (GroupChoiceChildLevel groupChoiceChildLevel in polSourceGroupingExcelFileReadService.groupChoiceChildLevelList)
            {
                if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.Choice))
                {
                    sb.AppendLine($@"                        case PolSourceObsInfoEnum.{ groupChoiceChildLevel.Choice }:");
                    sb.AppendLine(@"                        {");
                    sb.AppendLine($@"                            Assert.Equal(PolSourceInfoEnumGeneratedRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }, retStr);");
                    sb.AppendLine($@"                            Assert.Equal(PolSourceInfoEnumGeneratedRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }Report, retStrReport);");
                    if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.TextEN))
                    {
                        sb.AppendLine($@"                            Assert.Equal(PolSourceInfoEnumGeneratedRes.PolSourceInfoEnum{ groupChoiceChildLevel.Choice }Text, retStrText);");
                    }
                    sb.AppendLine(@"                        }");
                    sb.AppendLine(@"                        break;");
                }
            }
            sb.AppendLine(@"                    }");
            sb.AppendLine(@"                }");
            sb.AppendLine(@"");
            sb.AppendLine(@"                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, null);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.CSSPError.ToString(), retStr);");
            sb.AppendLine(@"                retStrDesc = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Description);");
            sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.CSSPError.ToString(), retStrDesc);");
            sb.AppendLine(@"                retStrReport = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Report);");
            sb.AppendLine(@"                Assert.Equal("""", retStrReport);");
            sb.AppendLine(@"                retStrText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Text);");
            sb.AppendLine(@"                Assert.Equal("""", retStrText);");
            sb.AppendLine(@"                retStrInit = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), 1000000, PolSourceObsInfoTypeEnum.Initial);");
            sb.AppendLine(@"                Assert.Equal("""", retStrInit);");
            sb.AppendLine(@"            }");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            try
            {
                StreamWriter sw = fi.CreateText();
                sw.Write(sb.ToString());
                sw.Close();

                throw new Exception("aaaaaaaaaaaaaaaa");
            }
            catch (Exception ex)
            {
                actionCommandDBService.ErrorText.AppendLine($"{ EnumsPolSourceInfoRelatedFilesServicesRes.Creating } [{ fi.FullName }] ...");
                string InnerException = (ex.InnerException != null ? $"Inner: { ex.InnerException.Message }" : "");
                actionCommandDBService.ErrorText.AppendLine($"{ EnumsPolSourceInfoRelatedFilesServicesRes.Error }: { ex.Message }{ InnerException  }");

                return await Task.FromResult(false);
            }

            actionCommandDBService.ExecutionStatusText.AppendLine($"{ EnumsPolSourceInfoRelatedFilesServicesRes.Created }: { fi.FullName }");

            return await Task.FromResult(true);
        }
        #endregion Functions private
    }
}