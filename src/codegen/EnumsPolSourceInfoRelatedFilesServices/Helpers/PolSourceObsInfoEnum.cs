using CultureServices.Resources;
using Microsoft.Extensions.Configuration;
using PolSourceGroupingExcelFileReadServices.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnumsPolSourceInfoRelatedFilesServices.Services
{
    public partial class EnumsPolSourceInfoRelatedFilesService : IEnumsPolSourceInfoRelatedFilesService
    {
        #region Variables
        #endregion Variables

        #region Constructors
        #endregion Constructors

        #region Functions public
        #endregion Functions public

        #region Functions private
        private async Task<bool> Generate_PolSourceObsInfoEnum()
        {
            StringBuilder sb = new StringBuilder();

            FileInfo fi = new FileInfo(Config.GetValue<string>("PolSourceObsInfoEnumGenerated_cs"));

            List<string> groupList = (from c in PolSourceGroupingExcelFileReadService.groupChoiceChildLevelList
                                      select c.Group).Distinct().ToList();

            sb.AppendLine(@"/*");
            sb.AppendLine(@" * Auto generated from the CSSPCodeWriter.proj by clicking on the [Generate PolSource Enum code files] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPEnums");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public enum PolSourceObsInfoEnum");
            sb.AppendLine(@"    {");

            foreach (GroupChoiceChildLevel groupChoiceChildLevel in PolSourceGroupingExcelFileReadService.groupChoiceChildLevelList)
            {
                if (!string.IsNullOrWhiteSpace(groupChoiceChildLevel.Group))
                {
                    if (groupChoiceChildLevel.Group.Substring(groupChoiceChildLevel.Group.Length - 5) == "Start" && string.IsNullOrWhiteSpace(groupChoiceChildLevel.Choice))
                    {
                        sb.AppendLine("");
                        sb.AppendLine($"        { groupChoiceChildLevel.Group } = { groupChoiceChildLevel.CSSPID.ToString() },");
                    }
                    else
                    {
                        sb.AppendLine($"        { groupChoiceChildLevel.Choice } = { groupChoiceChildLevel.CSSPID.ToString() },");

                    }
                }
            }
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            try
            {
                StreamWriter sw = fi.CreateText();
                sw.Write(sb.ToString());
                sw.Close();
            }
            catch (Exception ex)
            {
                ActionCommandDBService.ErrorText.AppendLine($"{ CultureServicesRes.Creating } [{ fi.FullName }] ...");
                string InnerException = (ex.InnerException != null ? $"Inner: { ex.InnerException.Message }" : "");
                ActionCommandDBService.ErrorText.AppendLine($"{ CultureServicesRes.Error }: { ex.Message }{ InnerException  }");

                return await Task.FromResult(false);
            }

            fi = new FileInfo(Config.GetValue<string>("PolSourceObsInfoEnumGenerated_cs"));
            if (fi.Exists)
            {
                string fileLine = "Last Write Time [" + fi.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fi.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }
            else
            {
                string fileLine = "Not Created" + fi.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine($"{ CultureServicesRes.Created }: { fi.FullName }");

            return await Task.FromResult(true);
        }
        #endregion Functions private
    }
}