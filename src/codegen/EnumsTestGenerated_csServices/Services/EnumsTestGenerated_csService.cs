using EnumsTestGenerated_csServices.Resources;
using GenerateCodeBase.Models;
using GenerateCodeBase.Services;
using GenerateCodeStatusDB.Models;
using GenerateCodeStatusDB.Services;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace EnumsTestGenerated_cs.Services
{
    public class EnumsTestGenerated_csService : IEnumsTestGenerated_csService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration configuration { get; set; }
        private IGenerateCodeStatusDBService generateCodeStatusDBService { get; set; }
        private IValidateAppSettingsService validateAppSettingsService { get; set; }
        private List<string> AllowableCultures { get; set; } = new List<string>() { "en-CA", "fr-CA" };
        #endregion Properties

        #region Constructors
        public EnumsTestGenerated_csService(IConfiguration configuration,
            IGenerateCodeStatusDBService generateCodeStatusDBService,
            IValidateAppSettingsService validateAppSettingsService)
        {
            this.configuration = configuration;
            this.generateCodeStatusDBService = generateCodeStatusDBService;
            this.validateAppSettingsService = validateAppSettingsService;
        }
        #endregion Constructors

        #region Functions public
        public async Task<bool> Run(string[] args)
        {
            SetCulture(args);

            ConsoleWriteStart();

            if (!await Setup()) return false;

            if (!await Generate()) return false;

            await ConsoleWriteEnd();

            return true;
        }
        #endregion Functions public

        #region Functions private
        private async Task<bool> Generate()
        {
            GenerateCodeStatus generateCodeStatus = await generateCodeStatusDBService.GetOrCreate();

            if (generateCodeStatus == null)
            {
                await ConsoleWriteError("generateCodeStatus == null");
                return false;
            }

            generateCodeStatusDBService.Status.AppendLine("Generate Starting ...");
            await generateCodeStatusDBService.Update(10);


            StringBuilder sb = new StringBuilder();
            FileInfo fiDLL = new FileInfo(configuration.GetValue<string>("CSSPEnums"));
            FileInfo fi = new FileInfo(configuration.GetValue<string>("EnumsTestGenerated"));

            sb.AppendLine(@"/*");
            sb.AppendLine(@" * Auto generated from the CSSPCodeWriter.proj by clicking on the [EnumsTestGenerate.cs] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"using System;");
            sb.AppendLine(@"using Xunit;");
            sb.AppendLine(@"using System.Collections.Generic;");
            sb.AppendLine(@"using System.Globalization;");
            sb.AppendLine(@"using CSSPEnums.Resources;");
            sb.AppendLine(@"using System.Linq;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPEnums.Tests");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public partial class EnumsTest");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"");

            // Doing Testing Methods GetEnumText public
            sb.AppendLine(@"        #region Testing Method GetResValueForTypeAndID for each Enum value name");
            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();
            foreach (Type type in types)
            {
                if (type.GetTypeInfo().BaseType == typeof(System.Enum))
                {
                    string enumName = type.Name;
                    if (enumName == "PolSourceObsInfoEnum")
                        continue;

                    sb.AppendLine(@"        [Fact]");
                    sb.AppendLine($@"        public void GetResValueForTypeAndID_ForEnum_{ enumName }_Test()");
                    sb.AppendLine(@"        {");
                    sb.AppendLine(@"            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo(""en-CA""), new CultureInfo(""fr-CA"") })");
                    sb.AppendLine(@"            {");
                    sb.AppendLine(@"                SetupTest(culture);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                string retStr = enums.GetResValueForTypeAndID(typeof({ enumName }), -100);");
                    sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                retStr = enums.GetResValueForTypeAndID(typeof({ enumName }), 10000000);");
                    sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                retStr = enums.GetResValueForTypeAndID(typeof({ enumName }), null);");
                    sb.AppendLine(@"                Assert.Equal(CSSPEnumsRes.Empty, retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                foreach (int i in Enum.GetValues(typeof({ enumName })))");
                    sb.AppendLine(@"                {");
                    sb.AppendLine($@"                    retStr = enums.GetResValueForTypeAndID(typeof({ enumName }), i);");
                    sb.AppendLine(@"        ");
                    sb.AppendLine($@"                    switch (({ enumName })i)");
                    sb.AppendLine(@"                    {");
                    foreach (FieldInfo fieldInfo in type.GetFields())
                    {
                        if (fieldInfo.FieldType.GetTypeInfo().BaseType == typeof(System.Enum))
                        {
                            string fName = fieldInfo.Name;
                            sb.AppendLine($@"                        case { enumName }.{ fName }:");
                            if (fName == "CSSPError")
                            {
                                sb.AppendLine(@"                            Assert.Equal(CSSPEnumsRes.Empty, retStr);");
                                sb.AppendLine(@"                            break;");
                            }
                            else
                            {
                                sb.AppendLine($@"                            Assert.Equal(CSSPEnumsRes.{ enumName }{ fName }, retStr);");
                                sb.AppendLine(@"                            break;");
                            }
                        }
                    }
                    sb.AppendLine(@"                        default:");
                    sb.AppendLine(@"                            Assert.Equal(CSSPEnumsRes.Empty, retStr);");
                    sb.AppendLine(@"                            break;");
                    sb.AppendLine(@"                    }");
                    sb.AppendLine(@"                }");
                    sb.AppendLine(@"            }");
                    sb.AppendLine(@"        }");

                }
            }
            sb.AppendLine(@"");
            sb.AppendLine(@"        #endregion Testing Method GetResValueForTypeAndID for each Enum value name");
            sb.AppendLine(@"");


            // Doing Testing Methods Check OK public
            sb.AppendLine(@"        #region Testing Method EnumTypeListOK");
            sb.AppendLine(@"        [Fact]");
            sb.AppendLine(@"        public void Enums_EnumTypeListOK_Test()");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo(""en-CA""), new CultureInfo(""fr-CA"") })");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                SetupTest(culture);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                List<int?> intList = new List<int?>() { (int)PolSourceObsInfoEnum.AgriculturalSourceCrop, (int)PolSourceObsInfoEnum.AgricultureSourcePasture };");
            sb.AppendLine(@"                Assert.Equal((int)PolSourceObsInfoEnum.AgriculturalSourceCrop, intList[0]);");
            sb.AppendLine(@"                Assert.Equal((int)PolSourceObsInfoEnum.AgricultureSourcePasture, intList[1]);");
            sb.AppendLine(@"                string retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);");
            sb.AppendLine(@"                Assert.Equal("""", retStr);");
            sb.AppendLine(@"");
            sb.AppendLine(@"                intList.Add(1000000);");
            sb.AppendLine(@"                retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);");
            sb.AppendLine(@"                Assert.Equal(string.Format(CSSPEnumsRes._IsRequired, ""PolSourceObsInfoEnum""), retStr);");
            sb.AppendLine(@"            }");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"");
            sb.AppendLine(@"        #endregion Testing Method EnumTypeListOK");
            sb.AppendLine(@"");

            sb.AppendLine(@"        #region Testing Method EnumTypeOK for each Enum value name");
            importAssembly = Assembly.LoadFile(fiDLL.FullName);
            types = importAssembly.GetTypes();
            foreach (Type type in types)
            {
                if (type.GetTypeInfo().BaseType == typeof(System.Enum))
                {
                    string enumName = type.Name;

                    sb.AppendLine(@"        [Fact]");
                    sb.AppendLine($@"        public void Enums_{ enumName.Substring(0, enumName.Length - 4) }OK_Test()");
                    sb.AppendLine(@"        {");
                    sb.AppendLine(@"            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo(""en-CA""), new CultureInfo(""fr-CA"") })");
                    sb.AppendLine(@"            {");
                    sb.AppendLine(@"                SetupTest(culture);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                string retStr = enums.EnumTypeOK(typeof({ enumName }), null);");
                    sb.AppendLine(@"                Assert.Equal("""", retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                retStr = enums.EnumTypeOK(typeof({ enumName }), -100);");
                    sb.AppendLine($@"                Assert.Equal(string.Format(CSSPEnumsRes._IsRequired, ""{ enumName }""), retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                retStr = enums.EnumTypeOK(typeof({ enumName }), 10000000);");
                    sb.AppendLine($@"                Assert.Equal(string.Format(CSSPEnumsRes._IsRequired, ""{ enumName }""), retStr);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                foreach (int i in Enum.GetValues(typeof({ enumName })))");
                    sb.AppendLine(@"                {");
                    sb.AppendLine($@"                    retStr = enums.EnumTypeOK(typeof({ enumName }), i);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                    switch (({ enumName })i)");
                    sb.AppendLine(@"                    {");
                    foreach (FieldInfo fieldInfo in type.GetFields())
                    {
                        if (fieldInfo.FieldType.GetTypeInfo().BaseType == typeof(System.Enum))
                        {
                            string fName = fieldInfo.Name;
                            sb.AppendLine($@"                        case { enumName }.{ fName }:");
                        }
                    }
                    sb.AppendLine(@"                            Assert.Equal("""", retStr);");
                    sb.AppendLine(@"                            break;");
                    sb.AppendLine(@"                        default:");
                    sb.AppendLine($@"                            Assert.Equal(string.Format(CSSPEnumsRes._IsRequired, ""{ enumName }""), retStr);");
                    sb.AppendLine(@"                            break;");
                    sb.AppendLine(@"                    }");
                    sb.AppendLine(@"                }");
                    sb.AppendLine(@"            }");
                    sb.AppendLine(@"        }");

                }
            }
            sb.AppendLine(@"");
            sb.AppendLine(@"        #endregion Testing Method EnumTypeOK for each Enum value name");
            sb.AppendLine(@"");


            // Doing Testing Methods TextOrdered public
            sb.AppendLine(@"        #region Testing Method GetEnumTextOrderedList for each Enum value name");
            importAssembly = Assembly.LoadFile(fiDLL.FullName);
            types = importAssembly.GetTypes();
            foreach (Type type in types)
            {
                if (type.GetTypeInfo().BaseType == typeof(System.Enum))
                {
                    string enumName = type.Name;

                    sb.AppendLine(@"        [Fact]");
                    sb.AppendLine($@"        public void Enums_{ enumName }TextOrdered_Test()");
                    sb.AppendLine(@"        {");
                    sb.AppendLine(@"            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo(""en-CA""), new CultureInfo(""fr-CA"") })");
                    sb.AppendLine(@"            {");
                    sb.AppendLine(@"                SetupTest(culture);");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();");
                    sb.AppendLine($@"                foreach (int i in Enum.GetValues(typeof({ enumName })))");
                    sb.AppendLine(@"                {");
                    sb.AppendLine($@"                    enumTextOrderedList.Add(new EnumIDAndText() {{ EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof({ enumName }), i) }});");
                    sb.AppendLine(@"                }");
                    sb.AppendLine(@"                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof({ enumName }));");
                    sb.AppendLine(@"                Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"                EnumIDAndText enumTextOrdered = new EnumIDAndText();");
                    sb.AppendLine(@"                Assert.NotNull(enumTextOrdered);");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)");
                    sb.AppendLine(@"                {");
                    sb.AppendLine(@"                    Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);");
                    sb.AppendLine(@"                    Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);");
                    sb.AppendLine(@"                }");
                    sb.AppendLine(@"            }");
                    sb.AppendLine(@"        }");
                }
            }
            sb.AppendLine(@"");
            sb.AppendLine(@"        #endregion Testing Method GetEnumTextOrderedList for each Enum value name");

            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            using (StreamWriter sw = fi.CreateText())
            {
                sw.Write(sb.ToString());
            }

            generateCodeStatusDBService.Status.AppendLine($"{ AppRes.Created } [{ fi.FullName }] ...");
            generateCodeStatusDBService.Status.AppendLine($"{ AppRes.Done } ...");
            generateCodeStatusDBService.Status.AppendLine("");
            generateCodeStatusDBService.Status.AppendLine("Generate Finished ...");
            await generateCodeStatusDBService.Update(100);

            return true;
        }
        private async Task ConsoleWriteEnd()
        {
            generateCodeStatusDBService.Status.AppendLine("");
            generateCodeStatusDBService.Status.AppendLine($"{ AppRes.Done } ...");
            generateCodeStatusDBService.Status.AppendLine("");
            await generateCodeStatusDBService.Update(100);

            if (!string.IsNullOrWhiteSpace(generateCodeStatusDBService.Error.ToString()))
            {
                Console.WriteLine(generateCodeStatusDBService.Error.ToString());
            }

            Console.WriteLine(generateCodeStatusDBService.Status.ToString());
        }
        private async Task ConsoleWriteError(string errMessage)
        {
            generateCodeStatusDBService.Error.AppendLine(errMessage);
            await generateCodeStatusDBService.Update(0);
            Console.WriteLine(generateCodeStatusDBService.Error.ToString());
            Console.WriteLine(generateCodeStatusDBService.Status.ToString());
        }
        private void ConsoleWriteStart()
        {
            Console.WriteLine($"{ AppRes.Running } { AppRes.Application } { AppDomain.CurrentDomain.FriendlyName }");
            Console.WriteLine("");
            Console.WriteLine($"{ AppRes.Starting } ...");
            Console.WriteLine("");
        }
        private void SetCulture(string[] args)
        {
            string culture = AllowableCultures[0];

            if (args.Count() > 0)
            {
                if (AllowableCultures.Contains(args[0]))
                {
                    culture = args[0];
                }
            }

            AppRes.Culture = new CultureInfo(culture);
        }
        private async Task<bool> Setup()
        {
            generateCodeStatusDBService.Command = configuration.GetValue<string>("Command");
            generateCodeStatusDBService.Culture = new CultureInfo(configuration.GetValue<string>("Culture"));
            validateAppSettingsService.Culture = new CultureInfo(configuration.GetValue<string>("Culture"));

            try
            {
                await generateCodeStatusDBService.GetOrCreate();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }

            validateAppSettingsService.AppSettingParameterList = new List<AppSettingParameter>()
            {
                new AppSettingParameter() { Parameter = "Command", ExpectedValue = "EnumsTestGenerated_cs" },
                new AppSettingParameter() { Parameter = "Culture", ExpectedValue = "", IsCulture = true },
                new AppSettingParameter() { Parameter = "DBFileName", ExpectedValue = "{AppDataPath}\\CSSP\\GenerateCodeStatus.db", IsFile = true, CheckExist = true },
                new AppSettingParameter() { Parameter = "CSSPEnums", ExpectedValue = "C:\\CSSPTools\\src\\dlls\\CSSPEnums\\bin\\Debug\\netcoreapp3.1\\CSSPEnums.dll", IsFile = true, CheckExist = true },
                new AppSettingParameter() { Parameter = "EnumsTestGenerated", ExpectedValue = "C:\\CSSPTools\\src\\tests\\CSSPEnums.Tests\\tests\\Generated\\EnumsTestGenerated.cs", IsFile = true, CheckExist = true },
            };

            validateAppSettingsService.VerifyAppSettings();
            if (!string.IsNullOrWhiteSpace(generateCodeStatusDBService.Error.ToString()))
            {
                await ConsoleWriteError("");
                return false;
            }

            return true;
        }
        #endregion Functions private
    }
}