using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Text;

namespace GenerateAngularComponents
{
    public partial class Startup
    {
        private void CreateComponentEditFile(DLLTypeInfo dllTypeInfoModels, List<DLLTypeInfo> DLLTypeInfoCSSPDBModelsList)
        {
            List<string> usedPropTypeList = new List<string>();
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"/*");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */");
            sb.AppendLine(@"");

            sb.AppendLine(@"import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';");
            sb.AppendLine($@"import {{ { dllTypeInfoModels.Name }Service }} from './{ dllTypeInfoModels.Name.ToLower() }.service';");
            sb.AppendLine($@"import {{ LoadLocales{ dllTypeInfoModels.Name }Text }} from './{ dllTypeInfoModels.Name.ToLower() }.locales';");
            sb.AppendLine(@"import { Subscription } from 'rxjs';");
            bool HasEnums = false;
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    if (!usedPropTypeList.Contains(dllPropertyInfo.CSSPProp.PropType))
                    {
                        HasEnums = true;
                        sb.AppendLine($@"import {{ { dllPropertyInfo.CSSPProp.PropType }_GetOrderedText }} from '../../../enums/generated/{ dllPropertyInfo.CSSPProp.PropType }';");

                        usedPropTypeList.Add(dllPropertyInfo.CSSPProp.PropType);
                    }
                }
            }
            sb.AppendLine($@"import {{ { dllTypeInfoModels.Name } }} from '../../../models/generated/{ dllTypeInfoModels.Name }.model';");
            sb.AppendLine(@"import { FormBuilder, Validators, FormGroup } from '@angular/forms';");
            if (HasEnums)
            {
                sb.AppendLine(@"import { EnumIDAndText } from '../../../models/enumidandtext.model';");
            }
            sb.AppendLine(@"import { HttpClientCommand } from '../../../enums/app.enums';");
            sb.AppendLine(@"");
            sb.AppendLine(@"@Component({");
            sb.AppendLine($@"  selector: 'app-{ dllTypeInfoModels.Name.ToLower() }-edit',");
            sb.AppendLine($@"  templateUrl: './{ dllTypeInfoModels.Name.ToLower() }-edit.component.html',");
            sb.AppendLine($@"  styleUrls: ['./{ dllTypeInfoModels.Name.ToLower() }-edit.component.css'],");
            sb.AppendLine(@"  changeDetection: ChangeDetectionStrategy.OnPush");
            sb.AppendLine(@"})");
            sb.AppendLine($@"export class { dllTypeInfoModels.Name }EditComponent implements OnInit, OnDestroy {{");
            sb.AppendLine(@"  sub: Subscription;");

            usedPropTypeList = new List<string>();
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    if (!usedPropTypeList.Contains(dllPropertyInfo.CSSPProp.PropType))
                    {
                        string PropNameFirstLetterLowerCase = dllPropertyInfo.CSSPProp.PropName;
                        PropNameFirstLetterLowerCase = PropNameFirstLetterLowerCase[0].ToString().ToLower() + PropNameFirstLetterLowerCase.Substring(1);
                        sb.AppendLine($@"  { PropNameFirstLetterLowerCase }List: EnumIDAndText[];");

                        usedPropTypeList.Add(PropNameFirstLetterLowerCase);
                    }
                }
            }
            sb.AppendLine($@"  { dllTypeInfoModels.Name.ToLower() }FormEdit: FormGroup;");
            sb.AppendLine($@"  @Input() { dllTypeInfoModels.Name.ToLower() }: { dllTypeInfoModels.Name } = null;");
            sb.AppendLine($@"  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;");
            sb.AppendLine(@"");
            sb.AppendLine($@"  constructor(public { dllTypeInfoModels.Name.ToLower() }Service: { dllTypeInfoModels.Name }Service, private fb: FormBuilder) {{");
            sb.AppendLine($@"  }}");
            sb.AppendLine(@"");
            sb.AppendLine($@"  GetPut() {{");
            sb.AppendLine($@"    return this.httpClientCommand == HttpClientCommand.Put ? true : false;");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"");
            sb.AppendLine($@"  Put{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }: { dllTypeInfoModels.Name }) {{");
            sb.AppendLine($@"    this.sub = this.{ dllTypeInfoModels.Name.ToLower() }Service.Put{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }).subscribe();");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"");
            sb.AppendLine($@"  Post{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }: { dllTypeInfoModels.Name }) {{");
            sb.AppendLine($@"    this.sub = this.{ dllTypeInfoModels.Name.ToLower() }Service.Post{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }).subscribe();");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"");
            sb.AppendLine(@"  ngOnInit(): void {");

            usedPropTypeList = new List<string>();
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    if (!usedPropTypeList.Contains(dllPropertyInfo.CSSPProp.PropType))
                    {
                        string PropNameFirstLetterLowerCase = dllPropertyInfo.CSSPProp.PropName;
                        PropNameFirstLetterLowerCase = PropNameFirstLetterLowerCase[0].ToString().ToLower() + PropNameFirstLetterLowerCase.Substring(1);
                        sb.AppendLine($@"    this.{ PropNameFirstLetterLowerCase }List = { dllPropertyInfo.CSSPProp.PropType }_GetOrderedText();");

                        usedPropTypeList.Add(PropNameFirstLetterLowerCase);
                    }
                }
            }

            sb.AppendLine(@"    this.FillFormBuilderGroup(this.httpClientCommand);");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"");
            sb.AppendLine(@"  ngOnDestroy() {");
            sb.AppendLine(@"    this.sub?.unsubscribe();");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"");
            sb.AppendLine(@"  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {");
            sb.AppendLine($@"    if (this.{ dllTypeInfoModels.Name.ToLower() }) {{");
            sb.AppendLine(@"      let formGroup: FormGroup = this.fb.group(");
            sb.AppendLine(@"        {");

            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                sb.AppendLine($@"          { dllPropertyInfo.CSSPProp.PropName }: [");
                sb.AppendLine($@"            {{");
                if (dllPropertyInfo.CSSPProp.IsKey)
                {
                    sb.AppendLine($@"              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.{ dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName })),");
                }
                else
                {
                    sb.AppendLine($@"              value: this.{ dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName },");
                }
                sb.AppendLine($@"              disabled: false");
                StringBuilder sbValidators = new StringBuilder();
                
                // doing required
                if (!dllPropertyInfo.CSSPProp.IsNullable)
                {
                    sbValidators.Append($@" Validators.required,");
                }
                // doing min
                if (dllPropertyInfo.CSSPProp.HasCSSPRangeAttribute && dllPropertyInfo.CSSPProp.Min != null)
                {
                    sbValidators.Append($@" Validators.min({ dllPropertyInfo.CSSPProp.Min }),");
                }
                // doing max
                if (dllPropertyInfo.CSSPProp.HasCSSPRangeAttribute && dllPropertyInfo.CSSPProp.Max != null)
                {
                    sbValidators.Append($@" Validators.max({ dllPropertyInfo.CSSPProp.Max }),");
                }
                // doing email
                if (dllPropertyInfo.CSSPProp.HasDataTypeAttribute)
                {
                    if (dllPropertyInfo.CSSPProp.dataType == DataType.EmailAddress)
                    {
                        sbValidators.Append($@" Validators.email,");
                    }
                }
                // doing minLength
                if (dllPropertyInfo.CSSPProp.HasCSSPMinLengthAttribute)
                {
                    sbValidators.Append($@" Validators.minLength({ dllPropertyInfo.CSSPProp.Min }),");
                }
                // doing maxLength
                if (dllPropertyInfo.CSSPProp.HasCSSPMaxLengthAttribute)
                {
                    sbValidators.Append($@" Validators.maxLength({ dllPropertyInfo.CSSPProp.Max }),");
                }
                //// doing pattern
                //if (dllPropertyInfo.CSSPProp.)
                //{
                //    sbValidators.Append($@" Validators.maxLength({ dllPropertyInfo.CSSPProp.Max }),");
                //}

                string ValidatorsStr = sbValidators.ToString();
                if (ValidatorsStr.Length > 0)
                {
                    if (ValidatorsStr.Last() == ",".ToCharArray()[0])
                    {
                        ValidatorsStr = ValidatorsStr.Substring(0, ValidatorsStr.Length - 1);
                    }
                }
                if (string.IsNullOrWhiteSpace(ValidatorsStr))
                {
                    sb.AppendLine($@"            }}],");
                }
                else
                {
                    sb.AppendLine($@"            }}, [{ ValidatorsStr.Trim() }]],");
                }
            }
            sb.AppendLine(@"        }");
            sb.AppendLine(@"      );");
            sb.AppendLine(@"");
            sb.AppendLine($@"      this.{ dllTypeInfoModels.Name.ToLower() }FormEdit = formGroup");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"  }");
            sb.AppendLine(@"}");

            DirectoryInfo di = new DirectoryInfo(Configuration.GetValue<string>("OutputDir").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            if (!di.Exists)
            {
                try
                {
                    di.Create();
                }
                catch (Exception ex)
                {
                    string ErrorText = ex.Message + ex.InnerException != null ? ex.InnerException.Message : "";
                    Console.WriteLine(ErrorText);
                    return;
                }
            }

            FileInfo fiOutputGen = new FileInfo(Configuration.GetValue<string>("ComponentEditFileName").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()).Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                Console.WriteLine($"Created { fiOutputGen.FullName }");
            }
        }
    }
}
