using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Text;

namespace GenerateAngularComponents
{
    public partial class Startup
    {
        private void CreateComponentEditHTMLFile(DLLTypeInfo dllTypeInfoModels, List<DLLTypeInfo> DLLTypeInfoCSSPDBModelsList)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"<!--");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@"-->");
            sb.AppendLine(@"");
            sb.AppendLine($@"<form [formGroup]=""{ dllTypeInfoModels.Name.ToLower() }FormEdit""");
            sb.AppendLine($@"  (ngSubmit)=""GetPut() ? Put{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }FormEdit.value) : Post{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() }FormEdit.value)"">");
            sb.AppendLine(@"  <h3>");
            sb.AppendLine($@"    { dllTypeInfoModels.Name }");
            sb.AppendLine(@"    <button mat-raised-button type=""submit"">");
            sb.AppendLine($@"      <span>{{{{ GetPut() ? ""Put"" : ""Post"" }}}} { dllTypeInfoModels.Name }</span>");
            sb.AppendLine(@"    </button>");
            sb.AppendLine($@"    <mat-progress-bar mode=""indeterminate"" *ngIf=""{ dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }PutModel$.getValue().Working"">");
            sb.AppendLine(@"    </mat-progress-bar>");
            sb.AppendLine($@"    <mat-progress-bar mode=""indeterminate"" *ngIf=""{ dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }PostModel$.getValue().Working"">");
            sb.AppendLine(@"    </mat-progress-bar>");
            sb.AppendLine(@"  </h3>");

            int objCount = 0;
            //string space;
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (objCount % 4 == 0)
                {
                    if (objCount != 0)
                    {
                        sb.AppendLine($@"  </p>");
                    }
                    sb.AppendLine($@"  <p>");
                    //space = "";
                }
                else
                {
                    //space = " --- ";
                }

                objCount += 1;

                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    sb.AppendLine(@"    <mat-form-field>");
                    sb.AppendLine($@"      <mat-label>{ dllPropertyInfo.CSSPProp.PropName }</mat-label>");

                    CreateMatSelectHTML(dllPropertyInfo, sb);

                    CreateMatErrorHTML(dllTypeInfoModels, dllPropertyInfo, sb);

                    sb.AppendLine(@"    </mat-form-field>");

                }
                else
                {
                    sb.AppendLine(@"    <mat-form-field>");
                    sb.AppendLine($@"      <mat-label>{ dllPropertyInfo.CSSPProp.PropName }</mat-label>");

                    CreateMatInputHTML(dllPropertyInfo, sb);

                    CreateMatErrorHTML(dllTypeInfoModels, dllPropertyInfo, sb);

                    sb.AppendLine(@"    </mat-form-field>");
                }
            }

            sb.AppendLine($@"  </p>");
            sb.AppendLine(@"</form>");

            DirectoryInfo di = new DirectoryInfo(Config.GetValue<string>("OutputDir").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            if (!di.Exists)
            {
                try
                {
                    di.Create();
                }
                catch (Exception ex)
                {
                    string ErrorText = ex.Message + ex.InnerException != null ? ex.InnerException.Message : "";
                    Console.WriteLine(ErrorText);
                    return;
                }
            }

            FileInfo fiOutputGen = new FileInfo(Config.GetValue<string>("ComponentEditHTMLFileName").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()).Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                Console.WriteLine($"Created { fiOutputGen.FullName }");
            }
        }
    }
}
