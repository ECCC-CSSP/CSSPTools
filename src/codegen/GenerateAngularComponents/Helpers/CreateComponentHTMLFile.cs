using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Text;

namespace GenerateAngularComponents
{
    public partial class Startup
    {
        private void CreateComponentHTMLFile(DLLTypeInfo dllTypeInfoModels, List<DLLTypeInfo> DLLTypeInfoCSSPDBModelsList)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"<!--");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@"-->");
            sb.AppendLine(@"");

            sb.AppendLine($@"<mat-progress-bar mode=""indeterminate"" *ngIf=""{ dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }GetModel$.getValue()?.Working""></mat-progress-bar>");
            sb.AppendLine(@"<mat-card>");
            sb.AppendLine(@"  <mat-card-header>");
            sb.AppendLine(@"    <mat-card-title>");
            sb.AppendLine($@"      { dllTypeInfoModels.Name } works!");
            sb.AppendLine($@"      <button mat-button color=""primary"" (click)=""Get{ dllTypeInfoModels.Name }List()"">");
            sb.AppendLine($@"        <span>Get { dllTypeInfoModels.Name }</span>");
            sb.AppendLine(@"      </button>");
            sb.AppendLine(@"    </mat-card-title>");
            sb.AppendLine($@"    <mat-card-subtitle>{{{{ { dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }TextModel$.getValue().Title }}}}</mat-card-subtitle>");
            sb.AppendLine(@"  </mat-card-header>");
            sb.AppendLine(@"  <mat-card-content>");
            sb.AppendLine($@"    <div *ngIf=""{ dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }ListModel$.getValue()?.length"">");
            sb.AppendLine($@"      <div *ngFor=""let { dllTypeInfoModels.Name.ToLower() } of { dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }ListModel$.getValue()"">");
            sb.AppendLine(@"        <p>");
            sb.AppendLine($@"          <button mat-raised-button (click)=""Delete{ dllTypeInfoModels.Name }({ dllTypeInfoModels.Name.ToLower() })"">");
            sb.AppendLine($@"            <span>Delete { dllTypeInfoModels.Name }ID [{{{{ { dllTypeInfoModels.Name.ToLower() }.{ dllTypeInfoModels.Name }ID }}}}]&nbsp;&nbsp;&nbsp;</span>");
            sb.AppendLine(@"            <mat-icon>delete</mat-icon>");
            sb.AppendLine(@"          </button>&nbsp;&nbsp;&nbsp;");
            sb.AppendLine($@"          <button mat-raised-button [color]=""GetPutButtonColor({ dllTypeInfoModels.Name.ToLower() })"" (click)=""ShowPut({ dllTypeInfoModels.Name.ToLower() })"">");
            sb.AppendLine($@"            <span>Show Put</span>");
            sb.AppendLine(@"          </button>&nbsp;&nbsp;");
            sb.AppendLine($@"          <button mat-raised-button [color]=""GetPostButtonColor({ dllTypeInfoModels.Name.ToLower() })"" (click)=""ShowPost({ dllTypeInfoModels.Name.ToLower() })"">");
            sb.AppendLine($@"            <span>Show Post</span>");
            sb.AppendLine(@"          </button>&nbsp;&nbsp;");
            sb.AppendLine($@"          <mat-progress-bar mode=""indeterminate"" *ngIf=""{ dllTypeInfoModels.Name.ToLower() }Service.{ dllTypeInfoModels.Name.ToLower() }DeleteModel$.getValue().Working"">");
            sb.AppendLine(@"          </mat-progress-bar>");
            sb.AppendLine(@"        </p>");
            sb.AppendLine($@"        <p *ngIf=""IDToShow === { dllTypeInfoModels.Name.ToLower() }.{ dllTypeInfoModels.Name }ID && showType === GetPutEnum()"">");
            sb.AppendLine($@"          <app-{ dllTypeInfoModels.Name.ToLower() }-edit [{ dllTypeInfoModels.Name.ToLower() }]=""{ dllTypeInfoModels.Name.ToLower() }"" [httpClientCommand]=""GetPutEnum()""></app-{ dllTypeInfoModels.Name.ToLower() }-edit>");
            sb.AppendLine(@"        </p>");
            sb.AppendLine($@"        <p *ngIf=""IDToShow === { dllTypeInfoModels.Name.ToLower() }.{ dllTypeInfoModels.Name }ID && showType === GetPostEnum()"">");
            sb.AppendLine($@"          <app-{ dllTypeInfoModels.Name.ToLower() }-edit [{ dllTypeInfoModels.Name.ToLower() }]=""{ dllTypeInfoModels.Name.ToLower() }"" [httpClientCommand]=""GetPostEnum()""></app-{ dllTypeInfoModels.Name.ToLower() }-edit>");
            sb.AppendLine(@"        </p>");
            sb.AppendLine(@"        <blockquote>");

            int objCount = 0;
            string space;
            foreach (DLLPropertyInfo dllPropertyInfo in dllTypeInfoModels.PropertyInfoList)
            {
                if (objCount % 4 == 0)
                {
                    if (objCount != 0)
                    {
                        sb.AppendLine($@"          </p>");
                    }
                    sb.AppendLine($@"          <p>");
                    space = "";
                }
                else
                {
                    space = " --- ";
                }

                objCount += 1;

                if (dllPropertyInfo.CSSPProp.HasCSSPEnumTypeAttribute)
                {
                    sb.AppendLine($@"            <span>{ space }{ dllPropertyInfo.CSSPProp.PropName }: [{{{{ Get{ dllPropertyInfo.CSSPProp.PropType }Text({ dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName }) }}}}]</span>");
                }
                else
                {
                    sb.AppendLine($@"            <span>{ space }{ dllPropertyInfo.CSSPProp.PropName }: [{{{{ { dllTypeInfoModels.Name.ToLower() }.{ dllPropertyInfo.CSSPProp.PropName } }}}}]</span>");
                }
            }
            sb.AppendLine($@"          </p>");
            sb.AppendLine($@"        </blockquote>");
            sb.AppendLine(@"       </div>");
            sb.AppendLine(@"     </div>");
            sb.AppendLine(@"   </mat-card-content>");
            sb.AppendLine(@" <mat-card-actions>");
            sb.AppendLine(@"   <button mat-button>Allo</button>");
            sb.AppendLine(@" </mat-card-actions>");
            sb.AppendLine(@"</mat-card>");

            DirectoryInfo di = new DirectoryInfo(Configuration.GetValue<string>("OutputDir").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            if (!di.Exists)
            {
                try
                {
                    di.Create();
                }
                catch (Exception ex)
                {
                    string ErrorText = ex.Message + ex.InnerException != null ? ex.InnerException.Message : "";
                    Console.WriteLine(ErrorText);
                    return;
                }
            }

            FileInfo fiOutputGen = new FileInfo(Configuration.GetValue<string>("ComponentHTMLFileName").Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()).Replace("{TypeNameLower}", dllTypeInfoModels.Name.ToLower()));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                Console.WriteLine($"Created { fiOutputGen.FullName }");
            }
        }
    }
}
