using GenerateCodeBaseHelper;
using GenerateCodeBaseServices.Models;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace GenerateAngularComponents
{
    public partial class Startup
    {
        private void CreateHomeComponentHTMLFile(int max, List<DLLTypeInfo> DLLTypeInfoCSSPDBModelsList)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"<!--");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@"-->");
            sb.AppendLine(@"");

            sb.AppendLine(@"<h2>home works! -- {{ homeService.homeTextModel$.getValue().Title }}</h2>");

            int count = 0;
            foreach (DLLTypeInfo dllTypeInfoModels in DLLTypeInfoCSSPDBModelsList)
            {
                if (GenerateCodeBase.SkipType(dllTypeInfoModels.Type))
                {
                    continue;
                }

                if (!dllTypeInfoModels.HasNotMappedAttribute)
                {
                    count += 1;
                    if (count > max) break;

                    sb.AppendLine($@"<a mat-button routerLink=""{ dllTypeInfoModels.Name.ToLower() }"" routerLinkActive=""active-link"">{ dllTypeInfoModels.Name }({ count })</a>");
                }
            }

            sb.AppendLine(@"<router-outlet></router-outlet>");

            FileInfo fiOutputGen = new FileInfo(Configuration.GetValue<string>("HomeComponentHTMLFileName"));
            using (StreamWriter sw2 = fiOutputGen.CreateText())
            {
                sw2.Write(sb.ToString());
                Console.WriteLine($"Created { fiOutputGen.FullName }");
            }
        }
    }
}
