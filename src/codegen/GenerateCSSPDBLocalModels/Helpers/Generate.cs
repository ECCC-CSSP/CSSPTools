using GenerateCodeBaseHelper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GenerateCSSPDBLocalModels
{
    public partial class Startup
    {
        public async Task<bool> Generate()
        {
            Console.WriteLine("Generate Starting ...");

            FileInfo fiDLL = new FileInfo(Config.GetValue<string>("CSSPDBModels"));

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();
            foreach (Type type in types)
            {
                StringBuilder sb = new StringBuilder();

                if (GenerateCodeBase.SkipType(type))
                {
                    continue;
                }

                //if (type.Name == "AppTaskParameter")
                //{
                //    continue;
                //}


                sb.AppendLine(@"/*");
                sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
                sb.AppendLine(@" *");
                sb.AppendLine(@" * Do not edit this file.");
                sb.AppendLine(@" *");
                sb.AppendLine(@" */");
                sb.AppendLine(@"");
                sb.AppendLine(@"using CSSPDBModels;");
                sb.AppendLine(@"using CSSPEnums;");
                sb.AppendLine(@"");
                sb.AppendLine(@"namespace CSSPDBLocalModels");
                sb.AppendLine(@"{");
                sb.AppendLine($@"    public partial class Local{ type.Name } : { type.Name }");
                sb.AppendLine(@"    {");
                sb.AppendLine(@"        #region Properties in DB");
                sb.AppendLine(@"        [CSSPEnumType]");
                sb.AppendLine(@"        public LocalDBCommandEnum LocalDBCommand { get; set; }");
                sb.AppendLine(@"        #endregion Properties in DB");
                sb.AppendLine(@"");
                sb.AppendLine(@"        #region Constructors");
                sb.AppendLine($@"        public Local{ type.Name }() : base()");
                sb.AppendLine(@"        {");
                sb.AppendLine(@"        }");
                sb.AppendLine(@"        #endregion Constructors");
                sb.AppendLine(@"    }");
                sb.AppendLine(@"}");

                FileInfo fiOutputGen = new FileInfo(Config.GetValue<string>("TypeName").Replace("{TypeName}", type.Name));
                using (StreamWriter sw2 = fiOutputGen.CreateText())
                {
                    sw2.Write(sb.ToString());
                }
                Console.WriteLine($"Create New { fiOutputGen.FullName }");
            }

            Console.WriteLine("");
            Console.WriteLine($"Done ...");
            Console.WriteLine("");
            Console.WriteLine("Generate Finished ...");

            return await Task.FromResult(true);
        }
    }
}
