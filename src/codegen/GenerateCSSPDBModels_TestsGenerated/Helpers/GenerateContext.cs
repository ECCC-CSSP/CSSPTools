using CSSPCultureServices.Resources;
using GenerateCodeBaseHelper;
using GenerateCodeBaseServices.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GenerateCSSPDBModels_TestsGenerated
{
    public partial class Startup
    {
        public async Task<bool> GenerateContext()
        {
            StringBuilder sb = new StringBuilder();
            Console.WriteLine("Generate Context Starting ...");

            FileInfo fiDLL = new FileInfo(Configuration.GetValue<string>("CSSPDBModels"));

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();

            sb.AppendLine(@"/*");
            sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"using Microsoft.EntityFrameworkCore;");
            sb.AppendLine(@"using Microsoft.Extensions.Configuration;");
            sb.AppendLine(@"using Microsoft.Extensions.DependencyInjection;");
            sb.AppendLine(@"using System;");
            sb.AppendLine(@"using System.IO;");
            sb.AppendLine(@"using System.Threading.Tasks;");
            sb.AppendLine(@"using Xunit;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPDBModels.Tests");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public partial class ContextTest");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"        #region Variables");
            sb.AppendLine(@"        #endregion Variables");
            sb.AppendLine(@"");
            sb.AppendLine(@"        #region Properties");
            sb.AppendLine(@"        private IConfiguration Configuration { get; set; }");
            sb.AppendLine(@"        private IServiceProvider Provider { get; set; }");
            sb.AppendLine(@"        private IServiceCollection Services { get; set; }");
            sb.AppendLine(@"        #endregion Properties");
            sb.AppendLine(@"");
            sb.AppendLine(@"        #region Constructors");
            sb.AppendLine(@"        public ContextTest() : base()");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        #endregion Constructors");
            sb.AppendLine(@"");
            sb.AppendLine(@"        #region Tests");
            sb.AppendLine(@"        [Theory]");
            sb.AppendLine(@"        [InlineData(""en-CA"")]");
            sb.AppendLine(@"        //[InlineData(""fr-CA"")]");
            sb.AppendLine(@"        public async Task Context_Constructor_Good_Test(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            Assert.True(await Setup(culture));");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        [Theory]");
            sb.AppendLine(@"        [InlineData(""en-CA"")]");
            sb.AppendLine(@"        //[InlineData(""fr-CA"")]");
            sb.AppendLine(@"        public async Task CSSPDBContext_Good_Test(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            Assert.True(await Setup(culture));");
            sb.AppendLine(@"");
            sb.AppendLine(@"            CSSPDBContext csspDBContext = new CSSPDBContext();");
            sb.AppendLine(@"            Assert.NotNull(csspDBContext);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            CSSPDBContext csspDBContext2 = Provider.GetService<CSSPDBContext>();");
            sb.AppendLine(@"            Assert.NotNull(csspDBContext2);");
            sb.AppendLine(@"");
            foreach (Type type in types)
            {
                string plurial = "s";
                if (type.Name == "Address")
                {
                    plurial = "es";
                }

                if (GenerateCodeBase.SkipType(type))
                {
                    continue;
                }

                //if (type.Name != "Address")
                //{
                //    continue;
                //}

                sb.AppendLine($@"            var { type.Name }{ plurial } = csspDBContext2.{ type.Name }{ plurial };");
                sb.AppendLine($@"            Assert.NotNull({ type.Name }{ plurial });");
                sb.AppendLine(@"");
            }
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        [Theory]");
            sb.AppendLine(@"        [InlineData(""en-CA"")]");
            sb.AppendLine(@"        //[InlineData(""fr-CA"")]");
            sb.AppendLine(@"        public async Task CSSPDBLocalContext_Good_Test(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            Assert.True(await Setup(culture));");
            sb.AppendLine(@"");
            sb.AppendLine(@"            CSSPDBLocalContext csspDBLocalContext = new CSSPDBLocalContext();");
            sb.AppendLine(@"            Assert.NotNull(csspDBLocalContext);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            CSSPDBLocalContext csspDBLocalContext2 = Provider.GetService<CSSPDBLocalContext>();");
            sb.AppendLine(@"            Assert.NotNull(csspDBLocalContext2);");
            sb.AppendLine(@"");
            foreach (Type type in types)
            {
                string plurial = "s";
                if (type.Name == "Address")
                {
                    plurial = "es";
                }

                if (GenerateCodeBase.SkipType(type))
                {
                    continue;
                }

                //if (type.Name != "Address")
                //{
                //    continue;
                //}

                sb.AppendLine($@"            var { type.Name }{ plurial } = csspDBLocalContext2.{ type.Name }{ plurial };");
                sb.AppendLine($@"            Assert.NotNull({ type.Name }{ plurial });");
                sb.AppendLine(@"");
            }
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        [Theory]");
            sb.AppendLine(@"        [InlineData(""en-CA"")]");
            sb.AppendLine(@"        //[InlineData(""fr-CA"")]");
            sb.AppendLine(@"        public async Task TestDBContext_Good_Test(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            Assert.True(await Setup(culture));");
            sb.AppendLine(@"");
            sb.AppendLine(@"            TestDBContext testDBContext = new TestDBContext();");
            sb.AppendLine(@"            Assert.NotNull(testDBContext);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            TestDBContext testDBContext2 = Provider.GetService<TestDBContext>();");
            sb.AppendLine(@"            Assert.NotNull(testDBContext2);");
            sb.AppendLine(@"");
            foreach (Type type in types)
            {
                string plurial = "s";
                if (type.Name == "Address")
                {
                    plurial = "es";
                }

                if (GenerateCodeBase.SkipType(type))
                {
                    continue;
                }

                //if (type.Name != "Address")
                //{
                //    continue;
                //}

                sb.AppendLine($@"            var { type.Name }{ plurial } = testDBContext2.{ type.Name }{ plurial };");
                sb.AppendLine($@"            Assert.NotNull({ type.Name }{ plurial });");
                sb.AppendLine(@"");
            }
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        #endregion Tests");
            sb.AppendLine(@"");
            sb.AppendLine(@"        #region private");
            sb.AppendLine(@"        private async Task<bool> Setup(string culture)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            Configuration = new ConfigurationBuilder()");
            sb.AppendLine(@"               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)");
            sb.AppendLine(@"               .AddJsonFile(""appsettings_csspdbmodelstests.json"")");
            sb.AppendLine(@"               .Build();");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Services = new ServiceCollection();");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Services.AddSingleton<IConfiguration>(Configuration);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            /* ---------------------------------------------------------------------------------");
            sb.AppendLine(@"             * using CSSPDB");
            sb.AppendLine(@"             * ---------------------------------------------------------------------------------      ");
            sb.AppendLine(@"             */");
            sb.AppendLine(@"            string CSSPDBConnString = Configuration.GetValue<string>(""CSSPDB"");");
            sb.AppendLine(@"            Assert.NotNull(CSSPDBConnString);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Services.AddDbContext<CSSPDBContext>(options =>");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                options.UseSqlServer(CSSPDBConnString);");
            sb.AppendLine(@"            });");
            sb.AppendLine(@"");
            sb.AppendLine(@"            /* ---------------------------------------------------------------------------------");
            sb.AppendLine(@"             * using TestDB");
            sb.AppendLine(@"             * ---------------------------------------------------------------------------------      ");
            sb.AppendLine(@"             */");
            sb.AppendLine(@"            string TestDBConnString = Configuration.GetValue<string>(""TestDB"");");
            sb.AppendLine(@"            Assert.NotNull(TestDBConnString);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Services.AddDbContext<TestDBContext>(options =>");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                options.UseSqlServer(TestDBConnString);");
            sb.AppendLine(@"            });");
            sb.AppendLine(@"");
            sb.AppendLine(@"            /* ---------------------------------------------------------------------------------");
            sb.AppendLine(@"             * using CSSPDBLocal");
            sb.AppendLine(@"             * ---------------------------------------------------------------------------------      ");
            sb.AppendLine(@"             */");
            sb.AppendLine(@"            string CSSPDBLocal = Configuration.GetValue<string>(""CSSPDBLocal"");");
            sb.AppendLine(@"            Assert.NotNull(CSSPDBLocal);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);");
            sb.AppendLine(@"            Assert.True(fiCSSPDBLocal.Exists);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Services.AddDbContext<CSSPDBLocalContext>(options =>");
            sb.AppendLine(@"            {");
            sb.AppendLine(@"                options.UseSqlite($""Data Source={ fiCSSPDBLocal.FullName }"");");
            sb.AppendLine(@"            });");
            sb.AppendLine(@"");
            sb.AppendLine(@"            Provider = Services.BuildServiceProvider();");
            sb.AppendLine(@"            Assert.NotNull(Provider);");
            sb.AppendLine(@"");
            sb.AppendLine(@"            return await Task.FromResult(true);");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"        #endregion private");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");


            FileInfo fiOutput = new FileInfo(Configuration.GetValue<string>("ContextTestGenerated"));

            using (StreamWriter sw = fiOutput.CreateText())
            {
                sw.Write(sb.ToString());
            }

            Console.WriteLine($"{ string.Format(CSSPCultureServicesRes.Created_, fiOutput.FullName) }");

            Console.WriteLine("");
            Console.WriteLine($"{ CSSPCultureServicesRes.Done } ...");
            Console.WriteLine("");
            Console.WriteLine("Generate Finished ...");

            return await Task.FromResult(true);
        }
    }
}
