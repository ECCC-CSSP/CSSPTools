using GenerateCodeBaseHelper;
using GenerateCodeBaseServices.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GenerateCSSPHelperServices
{
    public partial class Startup
    {
        public async Task<bool> Generate()
        {
            Console.WriteLine("Generate Starting ...");

            #region Variables and loading DLL properties
            FileInfo fiCSSPHelperModelsDLL = new FileInfo(Configuration.GetValue<string>("CSSPHelperModels"));

            List<DLLTypeInfo> DLLTypeInfoCSSPHelperModelsList = new List<DLLTypeInfo>();
            if (GenerateCodeBase.FillDLLTypeInfoList(fiCSSPHelperModelsDLL, DLLTypeInfoCSSPHelperModelsList))
            {
                Console.WriteLine($"Could not find file { fiCSSPHelperModelsDLL.FullName }");
                return false;
            }
            #endregion Variables and loading DLL properties

            foreach (DLLTypeInfo dllTypeInfoModels in DLLTypeInfoCSSPHelperModelsList)
            {
                bool needEnum = false;
                foreach (PropertyInfo prop in dllTypeInfoModels.Type.GetProperties())
                {
                    CSSPProp csspProp = new CSSPProp();
                    if (!GenerateCodeBase.FillCSSPProp(prop, csspProp, dllTypeInfoModels.Type))
                    {
                        return await Task.FromResult(false);
                    }

                    if (csspProp.HasCSSPEnumTypeAttribute)
                    {
                        needEnum = true;
                        break;
                    }
                }

                StringBuilder sb = new StringBuilder();

                string TypeNameLower = "";

                if (dllTypeInfoModels.Type.Name.StartsWith("MWQM"))
                {
                    TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 4).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(4) }";
                }
                else if (dllTypeInfoModels.Type.Name.StartsWith("CSSP"))
                {
                    TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 4).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(4) }";
                }
                else if (dllTypeInfoModels.Type.Name.StartsWith("TV") || dllTypeInfoModels.Type.Name.StartsWith("VP"))
                {
                    TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 2).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(2) }";
                }
                else
                {
                    TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 1).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(1) }";
                }

                if (GenerateCodeBase.SkipType(dllTypeInfoModels.Type))
                {
                    continue;
                }

                //if (dllTypeInfoModels.Type.Name != "Address")
                //{
                //    continue;
                //}
                
                #region Top
                sb.AppendLine(@"/*");
                sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
                sb.AppendLine(@" *");
                sb.AppendLine(@" * Do not edit this file.");
                sb.AppendLine(@" *");
                sb.AppendLine(@" */");
                sb.AppendLine(@"");

                sb.AppendLine(@"using CSSPEnums;");
                sb.AppendLine(@"using CSSPHelperModels;");
                sb.AppendLine(@"using CSSPCultureServices.Resources;");
                sb.AppendLine(@"using CSSPCultureServices.Services;");
                sb.AppendLine(@"using Microsoft.AspNetCore.Mvc;");
                sb.AppendLine(@"using Microsoft.EntityFrameworkCore;");
                sb.AppendLine(@"using System;");
                sb.AppendLine(@"using System.Collections.Generic;");
                sb.AppendLine(@"using System.ComponentModel.DataAnnotations;");
                sb.AppendLine(@"using System.Linq;");
                sb.AppendLine(@"using System.Text.RegularExpressions;");
                sb.AppendLine(@"using System.Threading.Tasks;");
                sb.AppendLine(@"using LoggedInServices;");
                sb.AppendLine(@"using Microsoft.Extensions.Configuration;");
                sb.AppendLine(@"");
                sb.AppendLine($@"namespace CSSPHelperServices");
                sb.AppendLine(@"{");
                #endregion Top

                sb.AppendLine($@"    public interface I{ dllTypeInfoModels.Type.Name }Service");
                sb.AppendLine($@"    {{");
                sb.AppendLine($@"        IEnumerable<ValidationResult> Validate(ValidationContext validationContext);");
                sb.AppendLine($@"    }}");

                sb.AppendLine($@"    public partial class { dllTypeInfoModels.Type.Name }Service : I{ dllTypeInfoModels.Type.Name }Service");
                sb.AppendLine(@"    {");
                sb.AppendLine(@"        #region Variables");
                sb.AppendLine(@"        #endregion Variables");
                sb.AppendLine(@"");
                sb.AppendLine(@"        #region Properties");
                //sb.AppendLine(@"        private ICSSPCultureService CSSPCultureService { get; }");
                if (needEnum)
                {
                    sb.AppendLine(@"        private IEnums enums { get; }");
                }
                sb.AppendLine(@"        #endregion Properties");
                sb.AppendLine(@"");
                sb.AppendLine(@"        #region Constructors");
                if (needEnum)
                {
                    sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }Service(IEnums enums)");
                }
                else
                {
                    sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }Service()");
                }
                sb.AppendLine(@"        {");
                //sb.AppendLine(@"            this.CSSPCultureService = CSSPCultureService;");
                if (needEnum)
                {
                    sb.AppendLine(@"            this.enums = enums;");
                }
                sb.AppendLine(@"        }");
                sb.AppendLine(@"        #endregion Constructors");
                sb.AppendLine(@"");

                sb.AppendLine(@"        #region Functions public");
                if (!await CreateClassServiceFunctionsPrivateGenerateValidateNotMapped(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb)) return await Task.FromResult(false);
                sb.AppendLine(@"        #endregion Functions public");
                sb.AppendLine(@"    }");
                sb.AppendLine(@"");


                sb.AppendLine(@"}");

                string FileName = "";
                FileName = "ClassNameDBFile";

                FileInfo fiOutputGen = null;
                fiOutputGen = new FileInfo(Configuration.GetValue<string>(FileName).Replace("{TypeName}", dllTypeInfoModels.Type.Name));

                using (StreamWriter sw2 = fiOutputGen.CreateText())
                {
                    sw2.Write(sb.ToString());
                }

                Console.WriteLine($"Created { fiOutputGen.FullName }");

            }

            Console.WriteLine("");
            Console.WriteLine($"Done ...");
            Console.WriteLine("");
            Console.WriteLine("Generate Finished ...");

            return true;
        }
    }
}
