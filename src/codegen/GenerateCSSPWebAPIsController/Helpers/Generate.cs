using GenerateCodeBaseHelper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GenerateCSSPWebAPIsController
{
    public partial class Startup
    {
        public async Task<bool> Generate()
        {
            Console.WriteLine("Generate Starting ...");

            Console.WriteLine("No document generated ...");

            Console.WriteLine("Not needed anymore ...");

            FileInfo fiDLL = new FileInfo(Configuration.GetValue<string>("CSSPDBModels"));

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();

            StringBuilder sbForDBServices = new StringBuilder();

            foreach (Type type in types)
            {
                bool ClassNotMapped = false;
                StringBuilder sb = new StringBuilder();
                string TypeName = type.Name;

                string TypeNameLower = "";

                if (type.Name.StartsWith("CSSP"))
                {
                    TypeNameLower = $"{ type.Name.Substring(0, 4).ToLower() }{ type.Name.Substring(4) }";
                }
                else if (type.Name.StartsWith("MWQM"))
                {
                    TypeNameLower = $"{ type.Name.Substring(0, 4).ToLower() }{ type.Name.Substring(4) }";
                }
                else if (type.Name.StartsWith("TV") || type.Name.StartsWith("VP"))
                {
                    TypeNameLower = $"{ type.Name.Substring(0, 2).ToLower() }{ type.Name.Substring(2) }";
                }
                else
                {
                    TypeNameLower = $"{ type.Name.Substring(0, 1).ToLower() }{ type.Name.Substring(1) }";
                }

                if (GenerateCodeBase.SkipType(type))
                {
                    continue;
                }

                //if (type.Name != "Address")
                //{
                //    continue;
                //}

                foreach (CustomAttributeData customAttributeData in type.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        ClassNotMapped = true;
                        break;
                    }
                }

                if (!ClassNotMapped)
                {
                    sbForDBServices.AppendLine($"            services.AddScoped<I{ TypeName }DBService, { TypeName }DBService>();");

                    sb.AppendLine($@"/* Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" * Do not edit this file.");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" */");
                    sb.AppendLine(@"");

                    if (TypeName == "Contact")
                    {
                        sb.AppendLine(@"using CSSPEnums;");
                    }
                    sb.AppendLine(@"using CSSPDBModels;");
                    sb.AppendLine(@"using CSSPDBServices;");
                    sb.AppendLine(@"using CSSPCultureServices.Services;");
                    sb.AppendLine(@"using Microsoft.AspNetCore.Authorization;");
                    sb.AppendLine(@"using Microsoft.AspNetCore.Mvc;");
                    sb.AppendLine(@"using System.Collections.Generic;");
                    sb.AppendLine(@"using System.Threading.Tasks;");
                    sb.AppendLine(@"using LoggedInServices;");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"namespace CSSPWebAPIs.Controllers");
                    sb.AppendLine(@"{");
                    sb.AppendLine($@"    public partial interface I{ TypeName }Controller");
                    sb.AppendLine(@"    {");
                    sb.AppendLine($@"        Task<ActionResult<List<{ TypeName }>>> Get();");
                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"        Task<ActionResult<{ TypeName }>> Get(string Id);");
                    }
                    else
                    {
                        sb.AppendLine($@"        Task<ActionResult<{ TypeName }>> Get(int { TypeName }ID);");
                    }
                    sb.AppendLine($@"        Task<ActionResult<{ TypeName }>> Post({ TypeName } { TypeName });");
                    sb.AppendLine($@"        Task<ActionResult<{ TypeName }>> Put({ TypeName } { TypeName });");
                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"        Task<ActionResult<bool>> Delete(string Id);");
                    }
                    else
                    {
                        sb.AppendLine($@"        Task<ActionResult<bool>> Delete(int { TypeName }ID);");
                    }
                    sb.AppendLine(@"    }");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"    [Route(""api/{culture}/[controller]"")]");
                    sb.AppendLine(@"    [ApiController]");
                    sb.AppendLine(@"    [Authorize]");
                    sb.AppendLine($@"    public partial class { TypeName }Controller : ControllerBase, I{ TypeName }Controller");
                    sb.AppendLine(@"    {");
                    sb.AppendLine(@"        #region Variables");
                    sb.AppendLine(@"        #endregion Variables");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"        #region Properties");
                    sb.AppendLine(@"        private ICSSPCultureService CSSPCultureService { get; }");
                    sb.AppendLine(@"        private ILoggedInService LoggedInService { get; }");
                    sb.AppendLine($@"        private I{ TypeName }DBService { TypeName }DBService {{ get; }}");
                    sb.AppendLine(@"        #endregion Properties");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"        #region Constructors");
                    sb.AppendLine($@"        public { TypeName }Controller(ICSSPCultureService CSSPCultureService, ILoggedInService LoggedInService, I{ TypeName }DBService { TypeName }DBService)");
                    sb.AppendLine(@"        {");
                    sb.AppendLine(@"            this.CSSPCultureService = CSSPCultureService;");
                    sb.AppendLine(@"            this.LoggedInService = LoggedInService;");
                    sb.AppendLine($@"            this.{ TypeName }DBService = { TypeName }DBService;");
                    sb.AppendLine(@"        }");
                    sb.AppendLine(@"        #endregion Constructors");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"        #region Functions public");

                    sb.AppendLine(@"        [HttpGet]");
                    sb.AppendLine($@"        public async Task<ActionResult<List<{ TypeName }>>> Get()");
                    sb.AppendLine(@"        {");
                    sb.AppendLine($@"            CSSPCultureService.SetCulture((string)RouteData.Values[""culture""]);");
                    sb.AppendLine($@"            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"            return await { TypeName }DBService.Get{ TypeName }List();");
                    sb.AppendLine(@"        }");

                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"        [HttpGet(""{{Id}}"")]");
                        sb.AppendLine($@"        public async Task<ActionResult<{ TypeName }>> Get(string Id)");
                    }
                    else
                    {
                        sb.AppendLine($@"        [HttpGet(""{{{ TypeName }ID}}"")]");
                        sb.AppendLine($@"        public async Task<ActionResult<{ TypeName }>> Get(int { TypeName }ID)");
                    }
                    sb.AppendLine(@"        {");
                    sb.AppendLine($@"            CSSPCultureService.SetCulture((string)RouteData.Values[""culture""]);");
                    sb.AppendLine($@"            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);");
                    sb.AppendLine(@"");
                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Get{ TypeName }WithId(Id);");
                    }
                    else
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Get{ TypeName }With{ TypeName }ID({ TypeName }ID);");
                    }
                    sb.AppendLine(@"        }");

                    sb.AppendLine(@"        [HttpPost]");
                    sb.AppendLine($@"        public async Task<ActionResult<{ TypeName }>> Post({ TypeName } { TypeName })");
                    sb.AppendLine(@"        {");
                    sb.AppendLine($@"            CSSPCultureService.SetCulture((string)RouteData.Values[""culture""]);");
                    sb.AppendLine($@"            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);");
                    sb.AppendLine(@"");
                    if (TypeName == "Contact")
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Post({ TypeName }, AddContactTypeEnum.Register);");
                    }
                    else
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Post({ TypeName });");
                    }
                    sb.AppendLine(@"        }");

                    sb.AppendLine(@"        [HttpPut]");
                    sb.AppendLine($@"        public async Task<ActionResult<{ TypeName }>> Put({ TypeName } { TypeName })");
                    sb.AppendLine(@"        {");
                    sb.AppendLine($@"            CSSPCultureService.SetCulture((string)RouteData.Values[""culture""]);");
                    sb.AppendLine($@"            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);");
                    sb.AppendLine(@"");
                    sb.AppendLine($@"            return await { TypeName }DBService.Put({ TypeName });");
                    sb.AppendLine(@"        }");

                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"        [HttpDelete(""{{Id}}"")]");
                        sb.AppendLine($@"        public async Task<ActionResult<bool>> Delete(string Id)");
                    }
                    else
                    {
                        sb.AppendLine($@"        [HttpDelete(""{{{ TypeName }ID}}"")]");
                        sb.AppendLine($@"        public async Task<ActionResult<bool>> Delete(int { TypeName }ID)");
                    }
                    sb.AppendLine(@"        {");
                    sb.AppendLine($@"            CSSPCultureService.SetCulture((string)RouteData.Values[""culture""]);");
                    sb.AppendLine($@"            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);");
                    sb.AppendLine(@"");
                    if (TypeName == "AspNetUser")
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Delete(Id);");
                    }
                    else
                    {
                        sb.AppendLine($@"            return await { TypeName }DBService.Delete({ TypeName }ID);");
                    }
                    sb.AppendLine(@"        }");

                    sb.AppendLine(@"        #endregion Functions public");
                    sb.AppendLine(@"");
                    sb.AppendLine(@"        #region Functions private");
                    sb.AppendLine(@"        #endregion Functions private");
                    sb.AppendLine(@"    }");
                    sb.AppendLine(@"}");

                    string fileName = "TypeNameFile";

                    FileInfo fiOutputGen = null;
                    fiOutputGen = new FileInfo(Configuration.GetValue<string>(fileName).Replace("{TypeName}", TypeName));

                    using (StreamWriter sw2 = fiOutputGen.CreateText())
                    {
                        sw2.Write(sb.ToString());
                    }

                    Console.WriteLine($"Created { fiOutputGen.FullName }");
                }
            }

            StringBuilder sb2 = new StringBuilder();

            sb2.AppendLine($@"/* Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb2.AppendLine(@" *");
            sb2.AppendLine(@" * Do not edit this file.");
            sb2.AppendLine(@" *");
            sb2.AppendLine(@" */");
            sb2.AppendLine(@"");
            sb2.AppendLine(@"using CSSPDBServices;");
            sb2.AppendLine(@"using Microsoft.Extensions.DependencyInjection;");
            sb2.AppendLine(@"");
            sb2.AppendLine(@"namespace CSSPWebAPIs");
            sb2.AppendLine(@"{");
            sb2.AppendLine(@"    public partial class Startup");
            sb2.AppendLine(@"    {");
            sb2.AppendLine(@"        private void LoadAllDBServices(IServiceCollection services)");
            sb2.AppendLine(@"        {");
            sb2.AppendLine(sbForDBServices.ToString());
            sb2.AppendLine(@"        }");
            sb2.AppendLine(@"    }");
            sb2.AppendLine(@"}");

            string fileNameLoadAll = "LoadAllDBServices";

            FileInfo fiOutputGenServices = null;
            fiOutputGenServices = new FileInfo(Configuration.GetValue<string>(fileNameLoadAll));

            using (StreamWriter sw2 = fiOutputGenServices.CreateText())
            {
                sw2.Write(sb2.ToString());
            }

            Console.WriteLine($"Created { fiOutputGenServices.FullName }");

            Console.WriteLine("");
            Console.WriteLine($"Done ...");
            Console.WriteLine("");
            Console.WriteLine("Generate Finished ...");

            return await Task.FromResult(true);
        }
    }
}
