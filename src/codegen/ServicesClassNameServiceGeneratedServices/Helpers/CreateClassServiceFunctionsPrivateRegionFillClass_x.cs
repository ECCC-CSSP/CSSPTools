using CSSPCultureServices.Resources;
using GenerateCodeBaseServices.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace ServicesClassNameServiceGeneratedServices.Services
{
    public partial class ServicesClassNameServiceGeneratedService : IServicesClassNameServiceGeneratedService
    {
        private async Task<bool> CreateClassServiceFunctionsPrivateRegionFillClass_x(DLLTypeInfo dllTypeInfo, List<DLLTypeInfo> DLLTypeInfoCSSPModelsList, string TypeName, string TypeNameLower)
        {
            if (TypeName == "AspNetUser")
            {
                return await Task.FromResult(true);
            }

            List<string> ClassNameList = new List<string>() { $"{ TypeName }ExtraA", $"{ TypeName }ExtraB", $"{ TypeName }ExtraC", $"{ TypeName }ExtraD", $"{ TypeName }ExtraE" };
            foreach (string ClassName in ClassNameList)
            {
                StringBuilder sb = new StringBuilder();
                bool ClassContainsEnum = false;
                DLLTypeInfo currentDLLTypeInfo = null;

                foreach (DLLTypeInfo dllTypeInfo2 in DLLTypeInfoCSSPModelsList)
                {
                    if (dllTypeInfo2.Name == ClassName)
                    {
                        currentDLLTypeInfo = dllTypeInfo2;
                    }
                }

                if (currentDLLTypeInfo == null)
                {
                    continue;
                }

                #region Top
                sb.AppendLine(@"/*");
                sb.AppendLine(@" * Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button");
                sb.AppendLine(@" *");
                sb.AppendLine(@" * Do not edit this file.");
                sb.AppendLine(@" *");
                sb.AppendLine(@" */ ");
                sb.AppendLine(@"");
                sb.AppendLine(@"using CSSPEnums;");
                sb.AppendLine(@"using CSSPModels;");
                sb.AppendLine(@"using CSSPModels.Resources;");
                sb.AppendLine(@"using CSSPServices.Resources;");
                sb.AppendLine(@"using Microsoft.EntityFrameworkCore;");
                sb.AppendLine(@"using System;");
                sb.AppendLine(@"using System.Collections.Generic;");
                sb.AppendLine(@"using System.ComponentModel.DataAnnotations;");
                sb.AppendLine(@"using System.Linq;");
                sb.AppendLine(@"using System.Reflection;");
                sb.AppendLine(@"using System.Security.Principal;");
                sb.AppendLine(@"using System.Text;");
                sb.AppendLine(@"using System.Text.RegularExpressions;");
                sb.AppendLine(@"using System.Threading;");
                sb.AppendLine(@"using System.Threading.Tasks;");
                sb.AppendLine(@"");
                sb.AppendLine(@"namespace CSSPServices");
                sb.AppendLine(@"{");
                #endregion Top

                sb.AppendLine($@"    public partial class { TypeName }Service");
                sb.AppendLine(@"    {");
                sb.AppendLine($@"        #region Functions private Generated Fill{ currentDLLTypeInfo.Name }");

                sb.AppendLine($@"        private IQueryable<{ currentDLLTypeInfo.Name }> Fill{ currentDLLTypeInfo.Name }()");
                sb.AppendLine(@"        {");

                foreach (DLLPropertyInfo dllPropertyInfo in currentDLLTypeInfo.PropertyInfoList)
                {
                    CSSPProp csspProp = new CSSPProp();
                    if (!GenerateCodeBaseService.FillCSSPProp(dllPropertyInfo.PropertyInfo, csspProp, currentDLLTypeInfo.Type))
                    {
                        //ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(AppRes.ErrorWhileCreatingCode_, csspProp.CSSPError) }");
                        return await Task.FromResult(false);
                    }
                    if (csspProp.HasCSSPEnumTypeAttribute)
                    {
                        ClassContainsEnum = true;
                        break;
                    }
                }

                if (ClassContainsEnum)
                {
                    sb.AppendLine(@"            Enums enums = new Enums(LanguageRequest);");
                    sb.AppendLine(@"");
                    List<string> EnumTypeNameAddedList = new List<string>();
                    foreach (DLLPropertyInfo dllPropertyInfo in currentDLLTypeInfo.PropertyInfoList)
                    {
                        if (dllPropertyInfo.PropertyInfo.GetGetMethod().IsVirtual)
                        {
                            continue;
                        }

                        if (dllPropertyInfo.PropertyInfo.Name == "ValidationResults")
                        {
                            continue;
                        }

                        CSSPProp csspProp = new CSSPProp();
                        if (!GenerateCodeBaseService.FillCSSPProp(dllPropertyInfo.PropertyInfo, csspProp, currentDLLTypeInfo.Type))
                        {
                            //ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(AppRes.ErrorWhileCreatingCode_, csspProp.CSSPError) }");
                            return await Task.FromResult(false);
                        }
                        if (csspProp.HasCSSPEnumTypeTextAttribute)
                        {
                            if (!EnumTypeNameAddedList.Contains(csspProp.EnumTypeName))
                            {
                                sb.AppendLine($@"            List<EnumIDAndText> { csspProp.EnumTypeName }List = enums.GetEnumTextOrderedList(typeof({ csspProp.EnumTypeName }));");
                                EnumTypeNameAddedList.Add(csspProp.EnumTypeName);
                            }
                        }
                    }
                    sb.AppendLine(@"");
                }

                if (TypeName == "Address")
                {
                    sb.AppendLine($@"             IQueryable<{ currentDLLTypeInfo.Name }> { currentDLLTypeInfo.Name }Query = (from c in db.{ TypeName }es");
                }
                else
                {
                    sb.AppendLine($@"             IQueryable<{ currentDLLTypeInfo.Name }> { currentDLLTypeInfo.Name }Query = (from c in db.{ TypeName }s");
                }

                List<string> PropertyConstructedList = new List<string>();

                foreach (DLLPropertyInfo dllPropertyInfo in currentDLLTypeInfo.PropertyInfoList)
                {
                    if (dllPropertyInfo.PropertyInfo.GetGetMethod().IsVirtual)
                    {
                        continue;
                    }

                    if (dllPropertyInfo.PropertyInfo.Name == "ValidationResults")
                    {
                        continue;
                    }

                    CSSPProp csspProp = new CSSPProp();
                    if (!GenerateCodeBaseService.FillCSSPProp(dllPropertyInfo.PropertyInfo, csspProp, currentDLLTypeInfo.Type))
                    {
                        //ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(AppRes.ErrorWhileCreatingCode_, csspProp.CSSPError) }");
                        return await Task.FromResult(false);
                    }
                    if (csspProp.HasCSSPEnumTypeAttribute)
                    {
                        ClassContainsEnum = true;
                    }
                    if (csspProp.HasCSSPEnumTypeTextAttribute)
                    {
                        sb.AppendLine($@"                let { csspProp.PropName } = (from e in { csspProp.EnumTypeName }List");
                        sb.AppendLine($@"                    where e.EnumID == (int?)c.{ csspProp.EnumType }");
                        sb.AppendLine(@"                    select e.EnumText).FirstOrDefault()");
                    }
                    if (csspProp.HasCSSPFillAttribute)
                    {
                        sb.AppendLine($@"                let { csspProp.PropName } = (from cl in db.{ csspProp.FillTypeName }{ csspProp.FillPlurial }");
                        sb.AppendLine($@"                    where cl.{ csspProp.FillFieldID } == c.{ csspProp.FillEqualField }");
                        if (csspProp.FillNeedLanguage)
                        {
                            sb.AppendLine(@"                    && cl.Language == LanguageRequest");
                        }
                        if (!string.IsNullOrWhiteSpace(csspProp.FillReturnField))
                        {
                            sb.AppendLine($@"                    select cl.{ csspProp.FillReturnField }).FirstOrDefault()");
                        }
                        else
                        {
                            if (csspProp.FillIsList)
                            {
                                sb.AppendLine(@"                    select cl)");
                            }
                            else
                            {
                                sb.AppendLine(@"                    select cl).FirstOrDefault()");
                            }
                        }

                        PropertyConstructedList.Add(dllPropertyInfo.PropertyInfo.Name);
                    }
                }
                sb.AppendLine($@"                    select new { currentDLLTypeInfo.Name }");
                sb.AppendLine(@"                    {");
                foreach (DLLPropertyInfo dllPropertyInfo in currentDLLTypeInfo.PropertyInfoList)
                {
                    if (dllPropertyInfo.PropertyInfo.GetGetMethod().IsVirtual)
                    {
                        continue;
                    }

                    if (dllPropertyInfo.PropertyInfo.Name == "ValidationResults" || dllPropertyInfo.PropertyInfo.Name == "HasErrors" || dllPropertyInfo.PropertyInfo.Name.EndsWith("Report") || dllPropertyInfo.PropertyInfo.Name.EndsWith("Report"))
                    {
                        continue;
                    }

                    CSSPProp csspProp = new CSSPProp();
                    if (!GenerateCodeBaseService.FillCSSPProp(dllPropertyInfo.PropertyInfo, csspProp, currentDLLTypeInfo.Type))
                    {
                        //ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(AppRes.ErrorWhileCreatingCode_, csspProp.CSSPError) }");
                        return await Task.FromResult(false);
                    }
                    if (currentDLLTypeInfo.Name == "ContactLogin" && dllPropertyInfo.PropertyInfo.Name == "PasswordHash")
                    {
                        continue;
                    }
                    if (currentDLLTypeInfo.Name == "ContactLogin" && dllPropertyInfo.PropertyInfo.Name == "PasswordSalt")
                    {
                        continue;
                    }

                    if (dllPropertyInfo.PropertyInfo.Name == $"{ currentDLLTypeInfo.Name }Test")
                    {
                        sb.AppendLine($@"                        { csspProp.PropName } = ""Testing Report"",");
                    }
                    else if (PropertyConstructedList.Contains(dllPropertyInfo.PropertyInfo.Name))
                    {
                        sb.AppendLine($@"                        { csspProp.PropName } = { csspProp.PropName },");
                    }
                    else if (csspProp.HasCSSPEnumTypeTextAttribute)
                    {
                        sb.AppendLine($@"                        { csspProp.PropName } = { csspProp.PropName },");
                    }
                    else
                    {
                        sb.AppendLine($@"                        { csspProp.PropName } = c.{ csspProp.PropName },");
                    }
                }
                sb.AppendLine(@"                        HasErrors = false,");
                sb.AppendLine(@"                        ValidationResults = null,");
                sb.AppendLine(@"                    }).AsNoTracking();");
                sb.AppendLine(@"");
                sb.AppendLine($@"            return { currentDLLTypeInfo.Name }Query;");
                sb.AppendLine(@"        }");
                sb.AppendLine($@"        #endregion Functions private Generated Fill{ currentDLLTypeInfo.Name }");
                sb.AppendLine(@"");
                sb.AppendLine(@"    }");
                sb.AppendLine(@"}");

                DirectoryInfo di;
                di = new DirectoryInfo($@"C:\CSSPCode\CSSPServices\CSSPServices\src\Extra{ ClassName.Substring(ClassName.Length - 1) }\");

                if (!di.Exists)
                {
                    try
                    {
                        di.Create();
                    }
                    catch (Exception)
                    {
                        ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(CSSPCultureServicesRes.CouldNotCreateDirectory_, di.FullName) }");
                        return await Task.FromResult(false);
                    }
                }

                FileInfo fiOutputGen = new FileInfo($@"{ di.FullName }\{ currentDLLTypeInfo.Name }Service.cs");

                using (StreamWriter sw = fiOutputGen.CreateText())
                {
                    sw.Write(sb.ToString());
                }

                ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(CSSPCultureServicesRes.Created_, fiOutputGen.FullName) }");
            }

            return await Task.FromResult(true);
        }
    }
}
