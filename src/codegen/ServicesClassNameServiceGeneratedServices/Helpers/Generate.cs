using ActionCommandDBServices.Models;
using CSSPCultureServices.Resources;
using GenerateCodeBaseServices.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace ServicesClassNameServiceGeneratedServices.Services
{
    public partial class ServicesClassNameServiceGeneratedService : IServicesClassNameServiceGeneratedService
    {
        private async Task<bool> Generate()
        {
            ActionResult<ActionCommand> actionActionCommand = await ActionCommandDBService.Get();

            if (((ObjectResult)actionActionCommand.Result).StatusCode == 400)
            {
                await ActionCommandDBService.ConsoleWriteError("actionCommand == null");
                return false;
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine("Generate Starting ...");
            ActionCommandDBService.PercentCompleted = 10;
            await ActionCommandDBService.Update();

            #region Variables and loading DLL properties
            FileInfo fiCSSPModelsDLL = new FileInfo(Config.GetValue<string>("CSSPModels"));

            List<DLLTypeInfo> DLLTypeInfoCSSPModelsList = new List<DLLTypeInfo>();
            if (GenerateCodeBaseService.FillDLLTypeInfoList(fiCSSPModelsDLL, DLLTypeInfoCSSPModelsList))
            {
                ActionCommandDBService.ErrorText.AppendLine($"{ string.Format(CSSPCultureServicesRes.CouldNotFindFile_, fiCSSPModelsDLL.FullName) }");
                return false;
            }
            #endregion Variables and loading DLL properties

            foreach (string DBType in new List<string>() { "DB", "DBLocal", "DBLocalIM" })
            {
                foreach (DLLTypeInfo dllTypeInfoModels in DLLTypeInfoCSSPModelsList)
                {
                    bool NotMappedClass = false;
                    StringBuilder sb = new StringBuilder();

                    string TypeNameLower = "";

                    if (dllTypeInfoModels.Type.Name.StartsWith("MWQM"))
                    {
                        TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 4).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(4) }";
                    }
                    else if (dllTypeInfoModels.Type.Name.StartsWith("CSSP"))
                    {
                        TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 4).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(4) }";
                    }
                    else if (dllTypeInfoModels.Type.Name.StartsWith("TV") || dllTypeInfoModels.Type.Name.StartsWith("VP"))
                    {
                        TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 2).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(2) }";
                    }
                    else
                    {
                        TypeNameLower = $"{ dllTypeInfoModels.Type.Name.Substring(0, 1).ToLower() }{ dllTypeInfoModels.Type.Name.Substring(1) }";
                    }

                    if (GenerateCodeBaseService.SkipType(dllTypeInfoModels.Type))
                    {
                        continue;
                    }

                    //if (dllTypeInfoModels.Type.Name != "Address")
                    //{
                    //    continue;
                    //}

                    if (dllTypeInfoModels.HasNotMappedAttribute)
                    {
                        NotMappedClass = true;
                    }
                    else
                    {
                        NotMappedClass = false;
                    }

                    #region Top
                    sb.AppendLine(@"/*");
                    sb.AppendLine($@" * Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" * Do not edit this file.");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" */");
                    sb.AppendLine(@"");

                    sb.AppendLine(@"using CSSPEnums;");
                    sb.AppendLine(@"using CSSPModels;");
                    sb.AppendLine(@"using CSSPCultureServices.Resources;");
                    sb.AppendLine(@"using CSSPCultureServices.Services;");
                    sb.AppendLine(@"using Microsoft.AspNetCore.Mvc;");
                    sb.AppendLine(@"using Microsoft.EntityFrameworkCore;");
                    sb.AppendLine(@"using System;");
                    sb.AppendLine(@"using System.Collections.Generic;");
                    sb.AppendLine(@"using System.ComponentModel.DataAnnotations;");
                    sb.AppendLine(@"using System.Linq;");
                    sb.AppendLine(@"using System.Text.RegularExpressions;");
                    sb.AppendLine(@"using System.Threading.Tasks;");
                    if (DBType == "DB")
                    {
                        sb.AppendLine(@"using LoggedInServices;");
                    }
                    if (DBType == "DBLocal")
                    {
                        sb.AppendLine(@"using LocalServices;");
                    }
                    if (DBType == "DBLocalIM")
                    {
                        sb.AppendLine(@"using LocalServices;");
                    }
                    sb.AppendLine(@"using Microsoft.Extensions.Configuration;");
                    if (dllTypeInfoModels.Type.Name == "Contact")
                    {
                        sb.AppendLine(@"using Microsoft.AspNetCore.Identity;");
                        sb.AppendLine(@"using Microsoft.IdentityModel.Tokens;");
                        sb.AppendLine(@"using System.IdentityModel.Tokens.Jwt;");
                        sb.AppendLine(@"using System.Security.Claims;");
                        sb.AppendLine(@"using System.Text;");
                    }
                    sb.AppendLine(@"");
                    sb.AppendLine($@"namespace CSSP{ DBType }Services");
                    sb.AppendLine(@"{");
                    #endregion Top

                    if (!NotMappedClass)
                    {

                        #region Interface
                        sb.AppendLine($@"    public partial interface I{ dllTypeInfoModels.Type.Name }{ DBType }Service");
                        sb.AppendLine(@"    {");
                        if (dllTypeInfoModels.Type.Name == "AspNetUser")
                        {
                            sb.AppendLine($@"        Task<ActionResult<bool>> Delete(string Id);");
                        }
                        else
                        {
                            sb.AppendLine($@"        Task<ActionResult<bool>> Delete(int { dllTypeInfoModels.Type.Name }ID);");
                        }
                        sb.AppendLine($@"        Task<ActionResult<List<{ dllTypeInfoModels.Type.Name }>>> Get{ dllTypeInfoModels.Type.Name }List(int skip = 0, int take = 100);");
                        if (dllTypeInfoModels.Type.Name == "AspNetUser")
                        {
                            sb.AppendLine($@"        Task<ActionResult<{ dllTypeInfoModels.Type.Name }>> Get{ dllTypeInfoModels.Type.Name }WithId(string Id);");
                        }
                        else
                        {
                            sb.AppendLine($@"        Task<ActionResult<{ dllTypeInfoModels.Type.Name }>> Get{ dllTypeInfoModels.Type.Name }With{ dllTypeInfoModels.Type.Name }ID(int { dllTypeInfoModels.Type.Name }ID);");
                        }
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            sb.AppendLine($@"        Task<ActionResult<{ dllTypeInfoModels.Type.Name }>> Post({ dllTypeInfoModels.Type.Name } { dllTypeInfoModels.Type.Name.ToLower() }, AddContactTypeEnum addContactType);");
                        }
                        else
                        {
                            sb.AppendLine($@"        Task<ActionResult<{ dllTypeInfoModels.Type.Name }>> Post({ dllTypeInfoModels.Type.Name } { dllTypeInfoModels.Type.Name.ToLower() });");
                        }
                        sb.AppendLine($@"        Task<ActionResult<{ dllTypeInfoModels.Type.Name }>> Put({ dllTypeInfoModels.Type.Name } { dllTypeInfoModels.Type.Name.ToLower() });");
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                sb.AppendLine($@"        Task<ActionResult<Contact>> Login(LoginModel loginModel);");
                                sb.AppendLine($@"        Task<ActionResult<string>> AzureStore();");
                                sb.AppendLine($@"        Task<ActionResult<Contact>> Register(RegisterModel registerModel);");
                            }
                            if (DBType == "DBLocal")
                            {
                            }
                            if (DBType == "DBLocalIM")
                            {
                            }
                        }
                        sb.AppendLine(@"    }");
                        #endregion Interface

                        sb.AppendLine($@"    public partial class { dllTypeInfoModels.Type.Name }{ DBType }Service : ControllerBase, I{ dllTypeInfoModels.Type.Name }{ DBType }Service");
                        sb.AppendLine(@"    {");
                        sb.AppendLine(@"        #region Variables");
                        sb.AppendLine(@"        #endregion Variables");
                        sb.AppendLine(@"");
                        sb.AppendLine(@"        #region Properties");
                        if (DBType == "DB")
                        {
                            sb.AppendLine(@"        private CSSPDBContext db { get; }");
                        }
                        if (DBType == "DBLocal")
                        {
                            sb.AppendLine(@"        private CSSPDBLocalContext dbLocal { get; }");
                        }
                        if (DBType == "DBLocalIM")
                        {
                            sb.AppendLine(@"        private CSSPDBInMemoryContext dbLocalIM { get; }");
                        }
                        sb.AppendLine(@"        private IConfiguration Configuration { get; }");
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                sb.AppendLine(@"        private UserManager<ApplicationUser> UserManager { get; }");
                                sb.AppendLine(@"        private IAspNetUserDBService AspNetUserDBService { get; }");
                                sb.AppendLine(@"        private ILoginModelService LoginModelService { get; }");
                                sb.AppendLine(@"        private IRegisterModelService RegisterModelService { get; }");
                            }
                            if (DBType == "DBLocal")
                            {
                                sb.AppendLine(@"        private IAspNetUserDBLocalService AspNetUserDBLocalService { get; }");
                            }
                            if (DBType == "DBLocalIM")
                            {
                                sb.AppendLine(@"        private IAspNetUserDBLocalIMService AspNetUserDBLocalIMService { get; }");
                            }
                        }
                        sb.AppendLine(@"        private ICSSPCultureService CSSPCultureService { get; }");
                        if (DBType == "DB")
                        {
                            sb.AppendLine(@"        private ILoggedInService LoggedInService { get; }");
                        }
                        if (DBType == "DBLocal")
                        {
                            sb.AppendLine(@"        private ILocalService LocalService { get; }");
                        }
                        if (DBType == "DBLocalIM")
                        {
                            sb.AppendLine(@"        private ILocalService LocalService { get; }");
                        }
                        sb.AppendLine(@"        private IEnums enums { get; }");
                        sb.AppendLine(@"        private IEnumerable<ValidationResult> ValidationResults { get; set; }");
                        sb.AppendLine(@"        #endregion Properties");
                        sb.AppendLine(@"");
                        sb.AppendLine(@"        #region Constructors");
                        if (dllTypeInfoModels.Type.Name == "AspNetUser"
                            || dllTypeInfoModels.Type.Name == "TVItemUserAuthorization"
                            || dllTypeInfoModels.Type.Name == "TVTypeUserAuthorization")
                        {
                            sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }{ DBType }Service(ICSSPCultureService CSSPCultureService, IEnums enums,");
                            if (DBType == "DB")
                            {
                                sb.AppendLine($@"           ILoggedInService LoggedInService,");
                                sb.AppendLine($@"           CSSPDBContext db)");
                            }
                            if (DBType == "DBLocal")
                            {
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBLocalContext dbLocal)");
                            }
                            if (DBType == "DBLocalIM")
                            {
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBInMemoryContext dbLocalIM)");
                            }
                        }
                        else if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }{ DBType }Service(IConfiguration Configuration,");
                                sb.AppendLine($@"           ICSSPCultureService CSSPCultureService, IEnums enums,");
                                if (DBType == "DB")
                                {
                                    sb.AppendLine($@"           IAspNetUserDBService AspNetUserDBService,");
                                }
                                if (DBType == "DBLocal")
                                {
                                    sb.AppendLine($@"           IAspNetUserDBLocalService AspNetUserDBLocalService,");
                                }
                                if (DBType == "DBLocalIM")
                                {
                                    sb.AppendLine($@"           IAspNetUserDBLocalIMService AspNetUserDBLocalIMService,");
                                }
                                sb.AppendLine($@"           ILoginModelService LoginModelService,");
                                sb.AppendLine($@"           IRegisterModelService RegisterModelService,");
                                sb.AppendLine($@"           ILoggedInService LoggedInService,");
                                sb.AppendLine($@"           CSSPDBContext db, UserManager<ApplicationUser> UserManager)");
                            }
                            if (DBType == "DBLocal")
                            {
                                sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }{ DBType }Service(IConfiguration Configuration,");
                                sb.AppendLine($@"           ICSSPCultureService CSSPCultureService, IEnums enums,");
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBLocalContext dbLocal)");
                            }
                            if (DBType == "DBLocalIM")
                            {
                                sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }{ DBType }Service(IConfiguration Configuration,");
                                sb.AppendLine($@"           ICSSPCultureService CSSPCultureService, IEnums enums,");
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBInMemoryContext dbLocalIM)");
                            }

                        }
                        else
                        {
                            sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }{ DBType }Service(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,");
                            if (DBType == "DB")
                            {
                                sb.AppendLine($@"           ILoggedInService LoggedInService,");
                                sb.AppendLine($@"           CSSPDBContext db)");
                            }
                            if (DBType == "DBLocal")
                            {
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBLocalContext dbLocal)");
                            }
                            if (DBType == "DBLocalIM")
                            {
                                sb.AppendLine($@"           ILocalService LocalService,");
                                sb.AppendLine($@"           CSSPDBInMemoryContext dbLocalIM)");
                            }
                        }
                        sb.AppendLine(@"        {");
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                sb.AppendLine(@"            this.UserManager = UserManager;");
                                if (DBType == "DB")
                                {
                                    sb.AppendLine(@"            this.AspNetUserDBService = AspNetUserDBService;");
                                }
                                if (DBType == "DBLocal")
                                {
                                    sb.AppendLine(@"            this.AspNetUserDBLocalService = AspNetUserLocalDBService;");
                                }
                                if (DBType == "DBLocalIM")
                                {
                                    sb.AppendLine(@"            this.AspNetUserDBLocalIMService = AspNetUserLocalIMDBService;");
                                }
                                sb.AppendLine(@"            this.LoginModelService = LoginModelService;");
                                sb.AppendLine(@"            this.RegisterModelService = RegisterModelService;");
                            }
                            if (DBType == "DBLocal")
                            {
                            }
                            if (DBType == "DBLocalIM")
                            {
                            }
                        }
                        sb.AppendLine(@"            this.Configuration = Configuration;");
                        sb.AppendLine(@"            this.CSSPCultureService = CSSPCultureService;");
                        if (DBType == "DB")
                        {
                            sb.AppendLine(@"            this.LoggedInService = LoggedInService;");
                        }
                        if (DBType == "DBLocal")
                        {
                            sb.AppendLine(@"            this.LocalService = LocalService;");
                        }
                        if (DBType == "DBLocalIM")
                        {
                            sb.AppendLine(@"            this.LocalService = LocalService;");
                        }
                        sb.AppendLine(@"            this.enums = enums;");
                        if (DBType == "DB")
                        {
                            sb.AppendLine(@"            this.db = db;");
                        }
                        if (DBType == "DBLocal")
                        {
                            sb.AppendLine(@"            this.dbLocal = dbLocal;");
                        }
                        if (DBType == "DBLocalIM")
                        {
                            sb.AppendLine(@"            this.dbLocalIM = dbLocalIM;");
                        }
                        if (dllTypeInfoModels.Type.Name == "AspNetUser"
                            || dllTypeInfoModels.Type.Name == "Contact"
                            || dllTypeInfoModels.Type.Name == "TVItemUserAuthorization"
                            || dllTypeInfoModels.Type.Name == "TVTypeUserAuthorization")
                        {
                            //sb.AppendLine(@"            this.dbLogin = dbLogin;");
                        }
                        sb.AppendLine(@"        }");
                        sb.AppendLine(@"        #endregion Constructors");
                        sb.AppendLine(@"");
                    }
                    else
                    {
                        sb.AppendLine($@"    public interface I{ dllTypeInfoModels.Type.Name }Service");
                        sb.AppendLine($@"    {{");
                        sb.AppendLine($@"        IEnumerable<ValidationResult> Validate(ValidationContext validationContext);");
                        sb.AppendLine($@"    }}");

                        sb.AppendLine($@"    public partial class { dllTypeInfoModels.Type.Name }Service : I{ dllTypeInfoModels.Type.Name }Service");
                        sb.AppendLine(@"    {");
                        sb.AppendLine(@"        #region Variables");
                        sb.AppendLine(@"        #endregion Variables");
                        sb.AppendLine(@"");
                        sb.AppendLine(@"        #region Properties");
                        sb.AppendLine(@"        private ICSSPCultureService CSSPCultureService { get; }");
                        sb.AppendLine(@"        private IEnums enums { get; }");
                        sb.AppendLine(@"        #endregion Properties");
                        sb.AppendLine(@"");
                        sb.AppendLine(@"        #region Constructors");
                        sb.AppendLine($@"        public { dllTypeInfoModels.Type.Name }Service(ICSSPCultureService CSSPCultureService, IEnums enums)");
                        sb.AppendLine(@"        {");
                        sb.AppendLine(@"            this.CSSPCultureService = CSSPCultureService;");
                        sb.AppendLine(@"            this.enums = enums;");
                        sb.AppendLine(@"        }");
                        sb.AppendLine(@"        #endregion Constructors");
                        sb.AppendLine(@"");
                    }

                    if (!NotMappedClass)
                    {
                        sb.AppendLine(@"        #region Functions public ");
                        if (!await CreateClassServiceFunctionsPublicGenerateGet(dllTypeInfoModels, DLLTypeInfoCSSPModelsList, dllTypeInfoModels.Type.Name, TypeNameLower, sb, DBType)) return await Task.FromResult(false);
                        if (!await CreateClassServiceFunctionsPublicGenerateCRUD(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb, DBType)) return await Task.FromResult(false);
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                if (!await CreateLogin(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb)) return await Task.FromResult(false);
                                if (!await CreateAzureStore(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb)) return await Task.FromResult(false);
                            }
                            if (DBType == "DBLocal")
                            {
                            }
                            if (DBType == "DBLocalIM")
                            {
                            }
                        }
                        sb.AppendLine(@"        #endregion Functions public");
                        sb.AppendLine(@"");

                        sb.AppendLine(@"        #region Functions private");
                        if (dllTypeInfoModels.Type.Name == "Contact")
                        {
                            if (DBType == "DB")
                            {
                                if (!await CreateGetContactWithId(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb)) return await Task.FromResult(false);
                            }
                            if (DBType == "DBLocal")
                            {
                            }
                            if (DBType == "DBLocalIM")
                            {
                            }
                        }
                        if (!await CreateClassServiceFunctionsPrivateGenerateValidate(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb, DBType)) return await Task.FromResult(false);
                        sb.AppendLine(@"        #endregion Functions private");
                        sb.AppendLine(@"    }");
                        sb.AppendLine(@"");
                    }
                    else
                    {
                        sb.AppendLine(@"        #region Functions public");
                        if (!await CreateClassServiceFunctionsPrivateGenerateValidateNotMapped(dllTypeInfoModels, dllTypeInfoModels.Type.Name, TypeNameLower, sb, DBType)) return await Task.FromResult(false);
                        sb.AppendLine(@"        #endregion Functions public");
                        sb.AppendLine(@"    }");
                        sb.AppendLine(@"");
                    }


                    sb.AppendLine(@"}");

                    string FileName = "";
                    if (DBType == "DB")
                    {
                        FileName = "ClassNameDBFile";
                    }
                    if (DBType == "DBLocal")
                    {
                        FileName = "ClassNameDBLocalFile";
                    }
                    if (DBType == "DBLocalIM")
                    {
                        FileName = "ClassNameDBLocalIMFile";
                    }

                    FileInfo fiOutputGen = null;
                    fiOutputGen = new FileInfo(Config.GetValue<string>(FileName).Replace("{TypeName}", dllTypeInfoModels.Type.Name));

                    using (StreamWriter sw2 = fiOutputGen.CreateText())
                    {
                        sw2.Write(sb.ToString());
                    }

                    fiOutputGen = new FileInfo(Config.GetValue<string>(FileName).Replace("{TypeName}", dllTypeInfoModels.Type.Name));
                    if (fiOutputGen.Exists)
                    {
                        string fileLine = "Last Write Time [" + fiOutputGen.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fiOutputGen.FullName;
                        ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
                    }
                    else
                    {
                        string fileLine = "Not Created" + fiOutputGen.FullName;
                        ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
                    }

                    ActionCommandDBService.ExecutionStatusText.AppendLine($"{ string.Format(CSSPCultureServicesRes.Created_, fiOutputGen.FullName) }");

                }
            }
            ActionCommandDBService.ExecutionStatusText.AppendLine("");
            ActionCommandDBService.ExecutionStatusText.AppendLine($"{ CSSPCultureServicesRes.Done } ...");
            ActionCommandDBService.ExecutionStatusText.AppendLine("");
            ActionCommandDBService.ExecutionStatusText.AppendLine("Generate Finished ...");
            ActionCommandDBService.PercentCompleted = 100;
            await ActionCommandDBService.Update();


            return true;
        }
    }
}
