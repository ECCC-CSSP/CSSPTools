using CSSPEnums;
using CSSPModels;
using GenerateCodeBaseServices.Models;
using GenerateCodeBaseServices.Services;
using ActionCommandDBServices.Models;
using ActionCommandDBServices.Services;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using ServicesExtensionEnumCastingGeneratedServices.Resources;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ValidateAppSettingsServices.Services;
using ValidateAppSettingsServices.Models;

namespace ServicesClassNameServiceGeneratedServices.Services
{
    public partial class ServicesExtensionEnumCastingGeneratedService : IServicesExtensionEnumCastingGeneratedService
    {
        private async Task<bool> Generate()
        {
            ActionResult<ActionCommand> actionActionCommand = await actionCommandDBService.GetOrCreate();

            if (((ObjectResult)actionActionCommand.Result).StatusCode == 400)
            {
                await actionCommandDBService.ConsoleWriteError("actionCommand == null");
                return await Task.FromResult(false);
            }

            actionCommandDBService.ExecutionStatusText.AppendLine("Generate Starting ...");
            actionCommandDBService.PercentCompleted = 10;
            await actionCommandDBService.Update();

            StringBuilder sb = new StringBuilder();
            List<string> ClassToRemove = new List<string>()
            {
                "Enums", "EnumIDAndText", "CSSPEnumsRes", "PolSourceInfoEnumGeneratedRes", "<PrivateImplementationDetails>", "<>c"
            };

            FileInfo fiDLL = new FileInfo(configuration.GetValue<string>("CSSPEnums"));

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();

            sb.AppendLine(@" /* Auto generated from the CSSPCodeWriter.proj by clicking on the [_ExtensionEnumCastingGenerated.cs] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"");
            sb.AppendLine(@"using CSSPEnums;");
            sb.AppendLine(@"using CSSPModels;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPServices");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public static class ExtentionEnumCasting");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"        public static object GetEnumCasting(WhereInfo whereInfo)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            switch (whereInfo.EnumType.Name)");
            sb.AppendLine(@"            {");
            foreach (Type type in types)
            {
                if (ClassToRemove.Contains(type.Name))
                {
                    continue;
                }

                sb.AppendLine($@"               case ""{ type.Name }"":");
                sb.AppendLine($@"                   return ({ type.Name })whereInfo.ValueInt;");
            }
            sb.AppendLine(@"               default:");
            sb.AppendLine(@"                   return null;");
            sb.AppendLine(@"            }");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            FileInfo fiOutputGen = new FileInfo(configuration.GetValue<string>("ExtensionEnumCastingGenerated"));
            using (StreamWriter sw = fiOutputGen.CreateText())
            {
                sw.Write(sb.ToString());
            }

            actionCommandDBService.ExecutionStatusText.AppendLine("");
            actionCommandDBService.ExecutionStatusText.AppendLine($"{ ServicesExtensionEnumCastingGeneratedServicesRes.Done } ...");
            actionCommandDBService.ExecutionStatusText.AppendLine("");
            actionCommandDBService.ExecutionStatusText.AppendLine("Generate Finished ...");
            actionCommandDBService.PercentCompleted = 100;
            await actionCommandDBService.Update();

            return await Task.FromResult(true);
        }
    }
}
