using ActionCommandDBServices.Models;
using CultureServices.Resources;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace ServicesClassNameServiceGeneratedServices.Services
{
    public partial class ServicesExtensionEnumCastingGeneratedService : IServicesExtensionEnumCastingGeneratedService
    {
        private async Task<bool> Generate()
        {
            ActionResult<ActionCommand> actionActionCommand = await ActionCommandDBService.Get();

            if (((ObjectResult)actionActionCommand.Result).StatusCode == 400)
            {
                await ActionCommandDBService.ConsoleWriteError("actionCommand == null");
                return await Task.FromResult(false);
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine("Generate Starting ...");
            ActionCommandDBService.PercentCompleted = 10;
            await ActionCommandDBService.Update();

            StringBuilder sb = new StringBuilder();
            List<string> ClassToRemove = new List<string>()
            {
                "Enums", "EnumIDAndText", "CSSPEnumsRes", "PolSourceInfoEnumGeneratedRes", "<PrivateImplementationDetails>", "<>c"
            };

            FileInfo fiDLL = new FileInfo(Config.GetValue<string>("CSSPEnums"));

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();

            sb.AppendLine($@"/* Auto generated from { AppDomain.CurrentDomain.BaseDirectory }{ AppDomain.CurrentDomain.FriendlyName}.exe");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"");
            sb.AppendLine(@"using CSSPEnums;");
            sb.AppendLine(@"using CSSPModels;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPServices");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public static class ExtentionEnumCasting");
            sb.AppendLine(@"    {");
            //sb.AppendLine(@"        public static object GetEnumCasting(WhereInfo whereInfo)");
            //sb.AppendLine(@"        {");
            //sb.AppendLine(@"            switch (whereInfo.EnumType.Name)");
            //sb.AppendLine(@"            {");
            //foreach (Type type in types)
            //{
            //    if (ClassToRemove.Contains(type.Name))
            //    {
            //        continue;
            //    }

            //    sb.AppendLine($@"               case ""{ type.Name }"":");
            //    sb.AppendLine($@"                   return ({ type.Name })whereInfo.ValueInt;");
            //}
            //sb.AppendLine(@"               default:");
            //sb.AppendLine(@"                   return null;");
            //sb.AppendLine(@"            }");
            //sb.AppendLine(@"        }");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            FileInfo fiOutputGen = new FileInfo(Config.GetValue<string>("ExtensionEnumCastingGenerated"));
            using (StreamWriter sw = fiOutputGen.CreateText())
            {
                sw.Write(sb.ToString());
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine($"Created [{ fiOutputGen.FullName }] ...");

            fiOutputGen = new FileInfo(Config.GetValue<string>("ExtensionEnumCastingGenerated"));
            if (fiOutputGen.Exists)
            {
                string fileLine = "Last Write Time [" + fiOutputGen.LastWriteTime.ToString("yyyy MMMM dd HH:mm:ss") + "] " + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }
            else
            {
                string fileLine = "Not Created" + fiOutputGen.FullName;
                ActionCommandDBService.FilesStatusText.AppendLine(fileLine);
            }

            ActionCommandDBService.ExecutionStatusText.AppendLine("");
            ActionCommandDBService.ExecutionStatusText.AppendLine($"{ CultureServicesRes.Done } ...");
            ActionCommandDBService.ExecutionStatusText.AppendLine("");
            ActionCommandDBService.ExecutionStatusText.AppendLine("Generate Finished ...");
            ActionCommandDBService.PercentCompleted = 100;
            await ActionCommandDBService.Update();

            return await Task.FromResult(true);
        }
    }
}
