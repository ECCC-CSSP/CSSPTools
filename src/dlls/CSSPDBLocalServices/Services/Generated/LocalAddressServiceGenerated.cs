/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalAddressDBService
    {
        Task<ActionResult<bool>> Delete(int LocalAddressID);
        Task<ActionResult<List<LocalAddress>>> GetLocalAddressList(int skip = 0, int take = 100);
        Task<ActionResult<LocalAddress>> GetLocalAddressWithAddressID(int AddressID);
        Task<ActionResult<LocalAddress>> Post(LocalAddress localaddress);
        Task<ActionResult<LocalAddress>> Put(LocalAddress localaddress);
    }
    public partial class LocalAddressDBService : ControllerBase, ILocalAddressDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalAddressDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalAddress>> GetLocalAddressWithAddressID(int AddressID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalAddress localAddress = (from c in db.LocalAddresses.AsNoTracking()
                    where c.AddressID == AddressID
                    select c).FirstOrDefault();

            if (localAddress == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localAddress));
        }
        public async Task<ActionResult<List<LocalAddress>>> GetLocalAddressList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalAddress> localAddressList = (from c in db.LocalAddresses.AsNoTracking() orderby c.AddressID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localAddressList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalAddressID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalAddress localAddress = (from c in db.LocalAddresses
                    where c.AddressID == LocalAddressID
                    select c).FirstOrDefault();

            if (localAddress == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalAddress", "LocalAddressID", LocalAddressID.ToString())));
            }

            try
            {
                db.LocalAddresses.Remove(localAddress);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalAddress>> Post(LocalAddress localAddress)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localAddress), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalAddresses.Add(localAddress);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localAddress));
        }
        public async Task<ActionResult<LocalAddress>> Put(LocalAddress localAddress)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localAddress), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalAddresses.Update(localAddress);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localAddress));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalAddress localAddress = validationContext.ObjectInstance as LocalAddress;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localAddress.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localAddress.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localAddress.AddressID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AddressID"), new[] { nameof(localAddress.AddressID) });
                }

                if (!(from c in db.LocalAddresses.AsNoTracking() select c).Where(c => c.AddressID == localAddress.AddressID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "Address", "AddressID", localAddress.AddressID.ToString()), new[] { nameof(localAddress.AddressID) });
                }
            }

            LocalTVItem localTVItemAddressTVItemID = null;
            localTVItemAddressTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAddress.AddressTVItemID select c).FirstOrDefault();

            if (localTVItemAddressTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "AddressTVItemID", localAddress.AddressTVItemID.ToString()), new[] { nameof(localAddress.AddressTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Address,
                };
                if (!AllowableTVTypes.Contains(localTVItemAddressTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "AddressTVItemID", "Address"), new[] { nameof(localAddress.AddressTVItemID) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), (int?)localAddress.AddressType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AddressType"), new[] { nameof(localAddress.AddressType) });
            }

            LocalTVItem localTVItemCountryTVItemID = null;
            localTVItemCountryTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAddress.CountryTVItemID select c).FirstOrDefault();

            if (localTVItemCountryTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "CountryTVItemID", localAddress.CountryTVItemID.ToString()), new[] { nameof(localAddress.CountryTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Country,
                };
                if (!AllowableTVTypes.Contains(localTVItemCountryTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "CountryTVItemID", "Country"), new[] { nameof(localAddress.CountryTVItemID) });
                }
            }

            LocalTVItem localTVItemProvinceTVItemID = null;
            localTVItemProvinceTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAddress.ProvinceTVItemID select c).FirstOrDefault();

            if (localTVItemProvinceTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "ProvinceTVItemID", localAddress.ProvinceTVItemID.ToString()), new[] { nameof(localAddress.ProvinceTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Province,
                };
                if (!AllowableTVTypes.Contains(localTVItemProvinceTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ProvinceTVItemID", "Province"), new[] { nameof(localAddress.ProvinceTVItemID) });
                }
            }

            LocalTVItem localTVItemMunicipalityTVItemID = null;
            localTVItemMunicipalityTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAddress.MunicipalityTVItemID select c).FirstOrDefault();

            if (localTVItemMunicipalityTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MunicipalityTVItemID", localAddress.MunicipalityTVItemID.ToString()), new[] { nameof(localAddress.MunicipalityTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Municipality,
                };
                if (!AllowableTVTypes.Contains(localTVItemMunicipalityTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MunicipalityTVItemID", "Municipality"), new[] { nameof(localAddress.MunicipalityTVItemID) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localAddress.StreetName) && localAddress.StreetName.Length > 200)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "StreetName", "200"), new[] { nameof(localAddress.StreetName) });
            }

            if (!string.IsNullOrWhiteSpace(localAddress.StreetNumber) && localAddress.StreetNumber.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "StreetNumber", "50"), new[] { nameof(localAddress.StreetNumber) });
            }

            if (localAddress.StreetType != null)
            {
                retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), (int?)localAddress.StreetType);
                if (localAddress.StreetType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "StreetType"), new[] { nameof(localAddress.StreetType) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localAddress.PostalCode) && (localAddress.PostalCode.Length < 6 || localAddress.PostalCode.Length > 11))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "PostalCode", "6", "11"), new[] { nameof(localAddress.PostalCode) });
            }

            if (!string.IsNullOrWhiteSpace(localAddress.GoogleAddressText) && (localAddress.GoogleAddressText.Length < 10 || localAddress.GoogleAddressText.Length > 200))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "GoogleAddressText", "10", "200"), new[] { nameof(localAddress.GoogleAddressText) });
            }

            if (localAddress.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localAddress.LastUpdateDate_UTC) });
            }
            else
            {
                if (localAddress.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localAddress.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAddress.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localAddress.LastUpdateContactTVItemID.ToString()), new[] { nameof(localAddress.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localAddress.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
