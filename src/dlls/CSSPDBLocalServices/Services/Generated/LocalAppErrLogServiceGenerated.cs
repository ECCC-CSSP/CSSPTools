/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalAppErrLogDBService
    {
        Task<ActionResult<bool>> Delete(int LocalAppErrLogID);
        Task<ActionResult<List<LocalAppErrLog>>> GetLocalAppErrLogList(int skip = 0, int take = 100);
        Task<ActionResult<LocalAppErrLog>> GetLocalAppErrLogWithAppErrLogID(int AppErrLogID);
        Task<ActionResult<LocalAppErrLog>> Post(LocalAppErrLog localapperrlog);
        Task<ActionResult<LocalAppErrLog>> Put(LocalAppErrLog localapperrlog);
    }
    public partial class LocalAppErrLogDBService : ControllerBase, ILocalAppErrLogDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalAppErrLogDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalAppErrLog>> GetLocalAppErrLogWithAppErrLogID(int AppErrLogID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalAppErrLog localAppErrLog = (from c in db.LocalAppErrLogs.AsNoTracking()
                    where c.AppErrLogID == AppErrLogID
                    select c).FirstOrDefault();

            if (localAppErrLog == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localAppErrLog));
        }
        public async Task<ActionResult<List<LocalAppErrLog>>> GetLocalAppErrLogList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalAppErrLog> localAppErrLogList = (from c in db.LocalAppErrLogs.AsNoTracking() orderby c.AppErrLogID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localAppErrLogList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalAppErrLogID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalAppErrLog localAppErrLog = (from c in db.LocalAppErrLogs
                    where c.AppErrLogID == LocalAppErrLogID
                    select c).FirstOrDefault();

            if (localAppErrLog == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalAppErrLog", "LocalAppErrLogID", LocalAppErrLogID.ToString())));
            }

            try
            {
                db.LocalAppErrLogs.Remove(localAppErrLog);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalAppErrLog>> Post(LocalAppErrLog localAppErrLog)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localAppErrLog), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalAppErrLogs.Add(localAppErrLog);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localAppErrLog));
        }
        public async Task<ActionResult<LocalAppErrLog>> Put(LocalAppErrLog localAppErrLog)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localAppErrLog), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalAppErrLogs.Update(localAppErrLog);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localAppErrLog));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalAppErrLog localAppErrLog = validationContext.ObjectInstance as LocalAppErrLog;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localAppErrLog.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localAppErrLog.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localAppErrLog.AppErrLogID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AppErrLogID"), new[] { nameof(localAppErrLog.AppErrLogID) });
                }

                if (!(from c in db.LocalAppErrLogs.AsNoTracking() select c).Where(c => c.AppErrLogID == localAppErrLog.AppErrLogID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "AppErrLog", "AppErrLogID", localAppErrLog.AppErrLogID.ToString()), new[] { nameof(localAppErrLog.AppErrLogID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localAppErrLog.Tag))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Tag"), new[] { nameof(localAppErrLog.Tag) });
            }

            if (!string.IsNullOrWhiteSpace(localAppErrLog.Tag) && localAppErrLog.Tag.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Tag", "100"), new[] { nameof(localAppErrLog.Tag) });
            }

            if (localAppErrLog.LineNumber < 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "LineNumber", "1"), new[] { nameof(localAppErrLog.LineNumber) });
            }

            if (string.IsNullOrWhiteSpace(localAppErrLog.Source))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Source"), new[] { nameof(localAppErrLog.Source) });
            }

            //Source has no StringLength Attribute

            if (string.IsNullOrWhiteSpace(localAppErrLog.Message))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Message"), new[] { nameof(localAppErrLog.Message) });
            }

            //Message has no StringLength Attribute

            if (localAppErrLog.DateTime_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "DateTime_UTC"), new[] { nameof(localAppErrLog.DateTime_UTC) });
            }
            else
            {
                if (localAppErrLog.DateTime_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "DateTime_UTC", "1980"), new[] { nameof(localAppErrLog.DateTime_UTC) });
                }
            }

            if (localAppErrLog.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localAppErrLog.LastUpdateDate_UTC) });
            }
            else
            {
                if (localAppErrLog.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localAppErrLog.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localAppErrLog.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localAppErrLog.LastUpdateContactTVItemID.ToString()), new[] { nameof(localAppErrLog.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localAppErrLog.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
