/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalBoxModelResultDBService
    {
        Task<ActionResult<bool>> Delete(int LocalBoxModelResultID);
        Task<ActionResult<List<LocalBoxModelResult>>> GetLocalBoxModelResultList(int skip = 0, int take = 100);
        Task<ActionResult<LocalBoxModelResult>> GetLocalBoxModelResultWithBoxModelResultID(int BoxModelResultID);
        Task<ActionResult<LocalBoxModelResult>> Post(LocalBoxModelResult localboxmodelresult);
        Task<ActionResult<LocalBoxModelResult>> Put(LocalBoxModelResult localboxmodelresult);
    }
    public partial class LocalBoxModelResultDBService : ControllerBase, ILocalBoxModelResultDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalBoxModelResultDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalBoxModelResult>> GetLocalBoxModelResultWithBoxModelResultID(int BoxModelResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalBoxModelResult localBoxModelResult = (from c in db.LocalBoxModelResults.AsNoTracking()
                    where c.BoxModelResultID == BoxModelResultID
                    select c).FirstOrDefault();

            if (localBoxModelResult == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localBoxModelResult));
        }
        public async Task<ActionResult<List<LocalBoxModelResult>>> GetLocalBoxModelResultList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalBoxModelResult> localBoxModelResultList = (from c in db.LocalBoxModelResults.AsNoTracking() orderby c.BoxModelResultID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localBoxModelResultList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalBoxModelResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalBoxModelResult localBoxModelResult = (from c in db.LocalBoxModelResults
                    where c.BoxModelResultID == LocalBoxModelResultID
                    select c).FirstOrDefault();

            if (localBoxModelResult == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalBoxModelResult", "LocalBoxModelResultID", LocalBoxModelResultID.ToString())));
            }

            try
            {
                db.LocalBoxModelResults.Remove(localBoxModelResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalBoxModelResult>> Post(LocalBoxModelResult localBoxModelResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localBoxModelResult), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalBoxModelResults.Add(localBoxModelResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localBoxModelResult));
        }
        public async Task<ActionResult<LocalBoxModelResult>> Put(LocalBoxModelResult localBoxModelResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localBoxModelResult), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalBoxModelResults.Update(localBoxModelResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localBoxModelResult));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalBoxModelResult localBoxModelResult = validationContext.ObjectInstance as LocalBoxModelResult;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localBoxModelResult.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localBoxModelResult.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localBoxModelResult.BoxModelResultID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "BoxModelResultID"), new[] { nameof(localBoxModelResult.BoxModelResultID) });
                }

                if (!(from c in db.LocalBoxModelResults.AsNoTracking() select c).Where(c => c.BoxModelResultID == localBoxModelResult.BoxModelResultID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "BoxModelResult", "BoxModelResultID", localBoxModelResult.BoxModelResultID.ToString()), new[] { nameof(localBoxModelResult.BoxModelResultID) });
                }
            }

            LocalBoxModel localBoxModelBoxModelID = null;
            localBoxModelBoxModelID = (from c in db.LocalBoxModels.AsNoTracking() where c.BoxModelID == localBoxModelResult.BoxModelID select c).FirstOrDefault();

            if (localBoxModelBoxModelID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalBoxModel", "BoxModelID", localBoxModelResult.BoxModelID.ToString()), new[] { nameof(localBoxModelResult.BoxModelID) });
            }

            retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), (int?)localBoxModelResult.BoxModelResultType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "BoxModelResultType"), new[] { nameof(localBoxModelResult.BoxModelResultType) });
            }

            if (localBoxModelResult.Volume_m3 < 0)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "Volume_m3", "0"), new[] { nameof(localBoxModelResult.Volume_m3) });
            }

            if (localBoxModelResult.Surface_m2 < 0)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "Surface_m2", "0"), new[] { nameof(localBoxModelResult.Surface_m2) });
            }

            if (localBoxModelResult.Radius_m < 0 || localBoxModelResult.Radius_m > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Radius_m", "0", "100000"), new[] { nameof(localBoxModelResult.Radius_m) });
            }

            if (localBoxModelResult.LeftSideDiameterLineAngle_deg != null)
            {
                if (localBoxModelResult.LeftSideDiameterLineAngle_deg < 0 || localBoxModelResult.LeftSideDiameterLineAngle_deg > 360)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "LeftSideDiameterLineAngle_deg", "0", "360"), new[] { nameof(localBoxModelResult.LeftSideDiameterLineAngle_deg) });
                }
            }

            if (localBoxModelResult.CircleCenterLatitude != null)
            {
                if (localBoxModelResult.CircleCenterLatitude < -90 || localBoxModelResult.CircleCenterLatitude > 90)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "CircleCenterLatitude", "-90", "90"), new[] { nameof(localBoxModelResult.CircleCenterLatitude) });
                }
            }

            if (localBoxModelResult.CircleCenterLongitude != null)
            {
                if (localBoxModelResult.CircleCenterLongitude < -180 || localBoxModelResult.CircleCenterLongitude > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "CircleCenterLongitude", "-180", "180"), new[] { nameof(localBoxModelResult.CircleCenterLongitude) });
                }
            }

            if (localBoxModelResult.RectLength_m < 0 || localBoxModelResult.RectLength_m > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "RectLength_m", "0", "100000"), new[] { nameof(localBoxModelResult.RectLength_m) });
            }

            if (localBoxModelResult.RectWidth_m < 0 || localBoxModelResult.RectWidth_m > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "RectWidth_m", "0", "100000"), new[] { nameof(localBoxModelResult.RectWidth_m) });
            }

            if (localBoxModelResult.LeftSideLineAngle_deg != null)
            {
                if (localBoxModelResult.LeftSideLineAngle_deg < 0 || localBoxModelResult.LeftSideLineAngle_deg > 360)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "LeftSideLineAngle_deg", "0", "360"), new[] { nameof(localBoxModelResult.LeftSideLineAngle_deg) });
                }
            }

            if (localBoxModelResult.LeftSideLineStartLatitude != null)
            {
                if (localBoxModelResult.LeftSideLineStartLatitude < -90 || localBoxModelResult.LeftSideLineStartLatitude > 90)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "LeftSideLineStartLatitude", "-90", "90"), new[] { nameof(localBoxModelResult.LeftSideLineStartLatitude) });
                }
            }

            if (localBoxModelResult.LeftSideLineStartLongitude != null)
            {
                if (localBoxModelResult.LeftSideLineStartLongitude < -180 || localBoxModelResult.LeftSideLineStartLongitude > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "LeftSideLineStartLongitude", "-180", "180"), new[] { nameof(localBoxModelResult.LeftSideLineStartLongitude) });
                }
            }

            if (localBoxModelResult.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localBoxModelResult.LastUpdateDate_UTC) });
            }
            else
            {
                if (localBoxModelResult.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localBoxModelResult.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localBoxModelResult.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localBoxModelResult.LastUpdateContactTVItemID.ToString()), new[] { nameof(localBoxModelResult.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localBoxModelResult.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
