/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalBoxModelDBService
    {
        Task<ActionResult<bool>> Delete(int LocalBoxModelID);
        Task<ActionResult<List<LocalBoxModel>>> GetLocalBoxModelList(int skip = 0, int take = 100);
        Task<ActionResult<LocalBoxModel>> GetLocalBoxModelWithBoxModelID(int BoxModelID);
        Task<ActionResult<LocalBoxModel>> Post(LocalBoxModel localboxmodel);
        Task<ActionResult<LocalBoxModel>> Put(LocalBoxModel localboxmodel);
    }
    public partial class LocalBoxModelDBService : ControllerBase, ILocalBoxModelDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalBoxModelDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalBoxModel>> GetLocalBoxModelWithBoxModelID(int BoxModelID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalBoxModel localBoxModel = (from c in db.LocalBoxModels.AsNoTracking()
                    where c.BoxModelID == BoxModelID
                    select c).FirstOrDefault();

            if (localBoxModel == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localBoxModel));
        }
        public async Task<ActionResult<List<LocalBoxModel>>> GetLocalBoxModelList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalBoxModel> localBoxModelList = (from c in db.LocalBoxModels.AsNoTracking() orderby c.BoxModelID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localBoxModelList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalBoxModelID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalBoxModel localBoxModel = (from c in db.LocalBoxModels
                    where c.BoxModelID == LocalBoxModelID
                    select c).FirstOrDefault();

            if (localBoxModel == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalBoxModel", "LocalBoxModelID", LocalBoxModelID.ToString())));
            }

            try
            {
                db.LocalBoxModels.Remove(localBoxModel);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalBoxModel>> Post(LocalBoxModel localBoxModel)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localBoxModel), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalBoxModels.Add(localBoxModel);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localBoxModel));
        }
        public async Task<ActionResult<LocalBoxModel>> Put(LocalBoxModel localBoxModel)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localBoxModel), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalBoxModels.Update(localBoxModel);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localBoxModel));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalBoxModel localBoxModel = validationContext.ObjectInstance as LocalBoxModel;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localBoxModel.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localBoxModel.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localBoxModel.BoxModelID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "BoxModelID"), new[] { nameof(localBoxModel.BoxModelID) });
                }

                if (!(from c in db.LocalBoxModels.AsNoTracking() select c).Where(c => c.BoxModelID == localBoxModel.BoxModelID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "BoxModel", "BoxModelID", localBoxModel.BoxModelID.ToString()), new[] { nameof(localBoxModel.BoxModelID) });
                }
            }

            LocalTVItem localTVItemInfrastructureTVItemID = null;
            localTVItemInfrastructureTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localBoxModel.InfrastructureTVItemID select c).FirstOrDefault();

            if (localTVItemInfrastructureTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "InfrastructureTVItemID", localBoxModel.InfrastructureTVItemID.ToString()), new[] { nameof(localBoxModel.InfrastructureTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Infrastructure,
                };
                if (!AllowableTVTypes.Contains(localTVItemInfrastructureTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "InfrastructureTVItemID", "Infrastructure"), new[] { nameof(localBoxModel.InfrastructureTVItemID) });
                }
            }

            if (localBoxModel.Discharge_m3_day < 0 || localBoxModel.Discharge_m3_day > 10000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Discharge_m3_day", "0", "10000"), new[] { nameof(localBoxModel.Discharge_m3_day) });
            }

            if (localBoxModel.Depth_m < 0 || localBoxModel.Depth_m > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Depth_m", "0", "1000"), new[] { nameof(localBoxModel.Depth_m) });
            }

            if (localBoxModel.Temperature_C < -15 || localBoxModel.Temperature_C > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Temperature_C", "-15", "40"), new[] { nameof(localBoxModel.Temperature_C) });
            }

            if (localBoxModel.Dilution < 0 || localBoxModel.Dilution > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Dilution", "0", "10000000"), new[] { nameof(localBoxModel.Dilution) });
            }

            if (localBoxModel.DecayRate_per_day < 0 || localBoxModel.DecayRate_per_day > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DecayRate_per_day", "0", "100"), new[] { nameof(localBoxModel.DecayRate_per_day) });
            }

            if (localBoxModel.FCUntreated_MPN_100ml < 0 || localBoxModel.FCUntreated_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FCUntreated_MPN_100ml", "0", "10000000"), new[] { nameof(localBoxModel.FCUntreated_MPN_100ml) });
            }

            if (localBoxModel.FCPreDisinfection_MPN_100ml < 0 || localBoxModel.FCPreDisinfection_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FCPreDisinfection_MPN_100ml", "0", "10000000"), new[] { nameof(localBoxModel.FCPreDisinfection_MPN_100ml) });
            }

            if (localBoxModel.Concentration_MPN_100ml < 0 || localBoxModel.Concentration_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Concentration_MPN_100ml", "0", "10000000"), new[] { nameof(localBoxModel.Concentration_MPN_100ml) });
            }

            if (localBoxModel.T90_hour < 0)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "T90_hour", "0"), new[] { nameof(localBoxModel.T90_hour) });
            }

            if (localBoxModel.DischargeDuration_hour < 0 || localBoxModel.DischargeDuration_hour > 24)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DischargeDuration_hour", "0", "24"), new[] { nameof(localBoxModel.DischargeDuration_hour) });
            }

            if (localBoxModel.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localBoxModel.LastUpdateDate_UTC) });
            }
            else
            {
                if (localBoxModel.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localBoxModel.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localBoxModel.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localBoxModel.LastUpdateContactTVItemID.ToString()), new[] { nameof(localBoxModel.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localBoxModel.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
