/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalClimateDataValueDBService
    {
        Task<ActionResult<bool>> Delete(int LocalClimateDataValueID);
        Task<ActionResult<List<LocalClimateDataValue>>> GetLocalClimateDataValueList(int skip = 0, int take = 100);
        Task<ActionResult<LocalClimateDataValue>> GetLocalClimateDataValueWithClimateDataValueID(int ClimateDataValueID);
        Task<ActionResult<LocalClimateDataValue>> Post(LocalClimateDataValue localclimatedatavalue);
        Task<ActionResult<LocalClimateDataValue>> Put(LocalClimateDataValue localclimatedatavalue);
    }
    public partial class LocalClimateDataValueDBService : ControllerBase, ILocalClimateDataValueDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClimateDataValueDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalClimateDataValue>> GetLocalClimateDataValueWithClimateDataValueID(int ClimateDataValueID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalClimateDataValue localClimateDataValue = (from c in db.LocalClimateDataValues.AsNoTracking()
                    where c.ClimateDataValueID == ClimateDataValueID
                    select c).FirstOrDefault();

            if (localClimateDataValue == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localClimateDataValue));
        }
        public async Task<ActionResult<List<LocalClimateDataValue>>> GetLocalClimateDataValueList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalClimateDataValue> localClimateDataValueList = (from c in db.LocalClimateDataValues.AsNoTracking() orderby c.ClimateDataValueID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localClimateDataValueList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalClimateDataValueID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalClimateDataValue localClimateDataValue = (from c in db.LocalClimateDataValues
                    where c.ClimateDataValueID == LocalClimateDataValueID
                    select c).FirstOrDefault();

            if (localClimateDataValue == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalClimateDataValue", "LocalClimateDataValueID", LocalClimateDataValueID.ToString())));
            }

            try
            {
                db.LocalClimateDataValues.Remove(localClimateDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalClimateDataValue>> Post(LocalClimateDataValue localClimateDataValue)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localClimateDataValue), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalClimateDataValues.Add(localClimateDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localClimateDataValue));
        }
        public async Task<ActionResult<LocalClimateDataValue>> Put(LocalClimateDataValue localClimateDataValue)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localClimateDataValue), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalClimateDataValues.Update(localClimateDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localClimateDataValue));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalClimateDataValue localClimateDataValue = validationContext.ObjectInstance as LocalClimateDataValue;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localClimateDataValue.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localClimateDataValue.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localClimateDataValue.ClimateDataValueID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ClimateDataValueID"), new[] { nameof(localClimateDataValue.ClimateDataValueID) });
                }

                if (!(from c in db.LocalClimateDataValues.AsNoTracking() select c).Where(c => c.ClimateDataValueID == localClimateDataValue.ClimateDataValueID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ClimateDataValue", "ClimateDataValueID", localClimateDataValue.ClimateDataValueID.ToString()), new[] { nameof(localClimateDataValue.ClimateDataValueID) });
                }
            }

            LocalClimateSite localClimateSiteClimateSiteID = null;
            localClimateSiteClimateSiteID = (from c in db.LocalClimateSites.AsNoTracking() where c.ClimateSiteID == localClimateDataValue.ClimateSiteID select c).FirstOrDefault();

            if (localClimateSiteClimateSiteID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalClimateSite", "ClimateSiteID", localClimateDataValue.ClimateSiteID.ToString()), new[] { nameof(localClimateDataValue.ClimateSiteID) });
            }

            if (localClimateDataValue.DateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "DateTime_Local"), new[] { nameof(localClimateDataValue.DateTime_Local) });
            }
            else
            {
                if (localClimateDataValue.DateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "DateTime_Local", "1980"), new[] { nameof(localClimateDataValue.DateTime_Local) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), (int?)localClimateDataValue.StorageDataType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "StorageDataType"), new[] { nameof(localClimateDataValue.StorageDataType) });
            }

            if (localClimateDataValue.Snow_cm != null)
            {
                if (localClimateDataValue.Snow_cm < 0 || localClimateDataValue.Snow_cm > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Snow_cm", "0", "10000"), new[] { nameof(localClimateDataValue.Snow_cm) });
                }
            }

            if (localClimateDataValue.Rainfall_mm != null)
            {
                if (localClimateDataValue.Rainfall_mm < 0 || localClimateDataValue.Rainfall_mm > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Rainfall_mm", "0", "10000"), new[] { nameof(localClimateDataValue.Rainfall_mm) });
                }
            }

            if (localClimateDataValue.RainfallEntered_mm != null)
            {
                if (localClimateDataValue.RainfallEntered_mm < 0 || localClimateDataValue.RainfallEntered_mm > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "RainfallEntered_mm", "0", "10000"), new[] { nameof(localClimateDataValue.RainfallEntered_mm) });
                }
            }

            if (localClimateDataValue.TotalPrecip_mm_cm != null)
            {
                if (localClimateDataValue.TotalPrecip_mm_cm < 0 || localClimateDataValue.TotalPrecip_mm_cm > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TotalPrecip_mm_cm", "0", "10000"), new[] { nameof(localClimateDataValue.TotalPrecip_mm_cm) });
                }
            }

            if (localClimateDataValue.MaxTemp_C != null)
            {
                if (localClimateDataValue.MaxTemp_C < -50 || localClimateDataValue.MaxTemp_C > 50)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MaxTemp_C", "-50", "50"), new[] { nameof(localClimateDataValue.MaxTemp_C) });
                }
            }

            if (localClimateDataValue.MinTemp_C != null)
            {
                if (localClimateDataValue.MinTemp_C < -50 || localClimateDataValue.MinTemp_C > 50)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MinTemp_C", "-50", "50"), new[] { nameof(localClimateDataValue.MinTemp_C) });
                }
            }

            if (localClimateDataValue.HeatDegDays_C != null)
            {
                if (localClimateDataValue.HeatDegDays_C < -1000 || localClimateDataValue.HeatDegDays_C > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "HeatDegDays_C", "-1000", "100"), new[] { nameof(localClimateDataValue.HeatDegDays_C) });
                }
            }

            if (localClimateDataValue.CoolDegDays_C != null)
            {
                if (localClimateDataValue.CoolDegDays_C < -1000 || localClimateDataValue.CoolDegDays_C > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "CoolDegDays_C", "-1000", "100"), new[] { nameof(localClimateDataValue.CoolDegDays_C) });
                }
            }

            if (localClimateDataValue.SnowOnGround_cm != null)
            {
                if (localClimateDataValue.SnowOnGround_cm < 0 || localClimateDataValue.SnowOnGround_cm > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SnowOnGround_cm", "0", "10000"), new[] { nameof(localClimateDataValue.SnowOnGround_cm) });
                }
            }

            if (localClimateDataValue.DirMaxGust_0North != null)
            {
                if (localClimateDataValue.DirMaxGust_0North < 0 || localClimateDataValue.DirMaxGust_0North > 360)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DirMaxGust_0North", "0", "360"), new[] { nameof(localClimateDataValue.DirMaxGust_0North) });
                }
            }

            if (localClimateDataValue.SpdMaxGust_kmh != null)
            {
                if (localClimateDataValue.SpdMaxGust_kmh < 0 || localClimateDataValue.SpdMaxGust_kmh > 300)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SpdMaxGust_kmh", "0", "300"), new[] { nameof(localClimateDataValue.SpdMaxGust_kmh) });
                }
            }

            //HourlyValues has no StringLength Attribute

            if (localClimateDataValue.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localClimateDataValue.LastUpdateDate_UTC) });
            }
            else
            {
                if (localClimateDataValue.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localClimateDataValue.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localClimateDataValue.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localClimateDataValue.LastUpdateContactTVItemID.ToString()), new[] { nameof(localClimateDataValue.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localClimateDataValue.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
