/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalClimateSiteDBService
    {
        Task<ActionResult<bool>> Delete(int LocalClimateSiteID);
        Task<ActionResult<List<LocalClimateSite>>> GetLocalClimateSiteList(int skip = 0, int take = 100);
        Task<ActionResult<LocalClimateSite>> GetLocalClimateSiteWithClimateSiteID(int ClimateSiteID);
        Task<ActionResult<LocalClimateSite>> Post(LocalClimateSite localclimatesite);
        Task<ActionResult<LocalClimateSite>> Put(LocalClimateSite localclimatesite);
    }
    public partial class LocalClimateSiteDBService : ControllerBase, ILocalClimateSiteDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClimateSiteDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalClimateSite>> GetLocalClimateSiteWithClimateSiteID(int ClimateSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalClimateSite localClimateSite = (from c in db.LocalClimateSites.AsNoTracking()
                    where c.ClimateSiteID == ClimateSiteID
                    select c).FirstOrDefault();

            if (localClimateSite == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localClimateSite));
        }
        public async Task<ActionResult<List<LocalClimateSite>>> GetLocalClimateSiteList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalClimateSite> localClimateSiteList = (from c in db.LocalClimateSites.AsNoTracking() orderby c.ClimateSiteID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localClimateSiteList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalClimateSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalClimateSite localClimateSite = (from c in db.LocalClimateSites
                    where c.ClimateSiteID == LocalClimateSiteID
                    select c).FirstOrDefault();

            if (localClimateSite == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalClimateSite", "LocalClimateSiteID", LocalClimateSiteID.ToString())));
            }

            try
            {
                db.LocalClimateSites.Remove(localClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalClimateSite>> Post(LocalClimateSite localClimateSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localClimateSite), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalClimateSites.Add(localClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localClimateSite));
        }
        public async Task<ActionResult<LocalClimateSite>> Put(LocalClimateSite localClimateSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localClimateSite), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalClimateSites.Update(localClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localClimateSite));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalClimateSite localClimateSite = validationContext.ObjectInstance as LocalClimateSite;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localClimateSite.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localClimateSite.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localClimateSite.ClimateSiteID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ClimateSiteID"), new[] { nameof(localClimateSite.ClimateSiteID) });
                }

                if (!(from c in db.LocalClimateSites.AsNoTracking() select c).Where(c => c.ClimateSiteID == localClimateSite.ClimateSiteID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ClimateSite", "ClimateSiteID", localClimateSite.ClimateSiteID.ToString()), new[] { nameof(localClimateSite.ClimateSiteID) });
                }
            }

            LocalTVItem localTVItemClimateSiteTVItemID = null;
            localTVItemClimateSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localClimateSite.ClimateSiteTVItemID select c).FirstOrDefault();

            if (localTVItemClimateSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "ClimateSiteTVItemID", localClimateSite.ClimateSiteTVItemID.ToString()), new[] { nameof(localClimateSite.ClimateSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.ClimateSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemClimateSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ClimateSiteTVItemID", "ClimateSite"), new[] { nameof(localClimateSite.ClimateSiteTVItemID) });
                }
            }

            if (localClimateSite.ECDBID != null)
            {
                if (localClimateSite.ECDBID < 1 || localClimateSite.ECDBID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ECDBID", "1", "100000"), new[] { nameof(localClimateSite.ECDBID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localClimateSite.ClimateSiteName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ClimateSiteName"), new[] { nameof(localClimateSite.ClimateSiteName) });
            }

            if (!string.IsNullOrWhiteSpace(localClimateSite.ClimateSiteName) && localClimateSite.ClimateSiteName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ClimateSiteName", "100"), new[] { nameof(localClimateSite.ClimateSiteName) });
            }

            if (string.IsNullOrWhiteSpace(localClimateSite.Province))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Province"), new[] { nameof(localClimateSite.Province) });
            }

            if (!string.IsNullOrWhiteSpace(localClimateSite.Province) && localClimateSite.Province.Length > 4)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Province", "4"), new[] { nameof(localClimateSite.Province) });
            }

            if (localClimateSite.Elevation_m != null)
            {
                if (localClimateSite.Elevation_m < 0 || localClimateSite.Elevation_m > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Elevation_m", "0", "10000"), new[] { nameof(localClimateSite.Elevation_m) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localClimateSite.ClimateID) && localClimateSite.ClimateID.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ClimateID", "10"), new[] { nameof(localClimateSite.ClimateID) });
            }

            if (localClimateSite.WMOID != null)
            {
                if (localClimateSite.WMOID < 1 || localClimateSite.WMOID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "WMOID", "1", "100000"), new[] { nameof(localClimateSite.WMOID) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localClimateSite.TCID) && localClimateSite.TCID.Length > 3)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "TCID", "3"), new[] { nameof(localClimateSite.TCID) });
            }

            if (localClimateSite.TimeOffset_hour != null)
            {
                if (localClimateSite.TimeOffset_hour < -10 || localClimateSite.TimeOffset_hour > 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TimeOffset_hour", "-10", "0"), new[] { nameof(localClimateSite.TimeOffset_hour) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localClimateSite.File_desc) && localClimateSite.File_desc.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "File_desc", "50"), new[] { nameof(localClimateSite.File_desc) });
            }

            if (localClimateSite.HourlyStartDate_Local != null && ((DateTime)localClimateSite.HourlyStartDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "HourlyStartDate_Local", "1980"), new[] { nameof(localClimateSite.HourlyStartDate_Local) });
            }

            if (localClimateSite.HourlyEndDate_Local != null && ((DateTime)localClimateSite.HourlyEndDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "HourlyEndDate_Local", "1980"), new[] { nameof(localClimateSite.HourlyEndDate_Local) });
            }

            if (localClimateSite.DailyStartDate_Local != null && ((DateTime)localClimateSite.DailyStartDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "DailyStartDate_Local", "1980"), new[] { nameof(localClimateSite.DailyStartDate_Local) });
            }

            if (localClimateSite.DailyEndDate_Local != null && ((DateTime)localClimateSite.DailyEndDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "DailyEndDate_Local", "1980"), new[] { nameof(localClimateSite.DailyEndDate_Local) });
            }

            if (localClimateSite.MonthlyStartDate_Local != null && ((DateTime)localClimateSite.MonthlyStartDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "MonthlyStartDate_Local", "1980"), new[] { nameof(localClimateSite.MonthlyStartDate_Local) });
            }

            if (localClimateSite.MonthlyEndDate_Local != null && ((DateTime)localClimateSite.MonthlyEndDate_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "MonthlyEndDate_Local", "1980"), new[] { nameof(localClimateSite.MonthlyEndDate_Local) });
            }

            if (localClimateSite.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localClimateSite.LastUpdateDate_UTC) });
            }
            else
            {
                if (localClimateSite.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localClimateSite.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localClimateSite.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localClimateSite.LastUpdateContactTVItemID.ToString()), new[] { nameof(localClimateSite.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localClimateSite.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
