/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalContactDBService
    {
        Task<ActionResult<bool>> Delete(int LocalContactID);
        Task<ActionResult<List<LocalContact>>> GetLocalContactList(int skip = 0, int take = 100);
        Task<ActionResult<LocalContact>> GetLocalContactWithContactID(int ContactID);
        Task<ActionResult<LocalContact>> Post(LocalContact localcontact);
        Task<ActionResult<LocalContact>> Put(LocalContact localcontact);
    }
    public partial class LocalContactDBService : ControllerBase, ILocalContactDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalContactDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalContact>> GetLocalContactWithContactID(int ContactID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalContact localContact = (from c in db.LocalContacts.AsNoTracking()
                    where c.ContactID == ContactID
                    select c).FirstOrDefault();

            if (localContact == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localContact));
        }
        public async Task<ActionResult<List<LocalContact>>> GetLocalContactList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalContact> localContactList = (from c in db.LocalContacts.AsNoTracking() orderby c.ContactID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localContactList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalContactID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalContact localContact = (from c in db.LocalContacts
                    where c.ContactID == LocalContactID
                    select c).FirstOrDefault();

            if (localContact == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalContact", "LocalContactID", LocalContactID.ToString())));
            }

            try
            {
                db.LocalContacts.Remove(localContact);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalContact>> Post(LocalContact localContact)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localContact), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalContacts.Add(localContact);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localContact));
        }
        public async Task<ActionResult<LocalContact>> Put(LocalContact localContact)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localContact), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalContacts.Update(localContact);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localContact));
        }
        #endregion Functions public

        #region Functions private
        private async Task<ActionResult<LocalContact>> GetLocalContactWithId(string Id)
        {
            LocalContact localContact = (from c in db.LocalContacts.AsNoTracking()
                               where c.Id == Id
                               select c).FirstOrDefault();

            if (localContact == null)
            {
                return await Task.FromResult(NotFound());
            }

            return await Task.FromResult(Ok(localContact));
        }
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalContact localContact = validationContext.ObjectInstance as LocalContact;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localContact.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localContact.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localContact.ContactID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ContactID"), new[] { nameof(localContact.ContactID) });
                }

                if (!(from c in db.LocalContacts.AsNoTracking() select c).Where(c => c.ContactID == localContact.ContactID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "Contact", "ContactID", localContact.ContactID.ToString()), new[] { nameof(localContact.ContactID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localContact.Id))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Id"), new[] { nameof(localContact.Id) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.Id) && localContact.Id.Length > 450)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Id", "450"), new[] { nameof(localContact.Id) });
            }

            LocalTVItem localTVItemContactTVItemID = null;
            localTVItemContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localContact.ContactTVItemID select c).FirstOrDefault();

            if (localTVItemContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "ContactTVItemID", localContact.ContactTVItemID.ToString()), new[] { nameof(localContact.ContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ContactTVItemID", "Contact"), new[] { nameof(localContact.ContactTVItemID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localContact.LoginEmail))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LoginEmail"), new[] { nameof(localContact.LoginEmail) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.LoginEmail) && (localContact.LoginEmail.Length < 6 || localContact.LoginEmail.Length > 255))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "LoginEmail", "6", "255"), new[] { nameof(localContact.LoginEmail) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.LoginEmail))
            {
                Regex regex = new Regex(@"^([\w\!\#$\%\&\'*\+\-\/\=\?\^`{\|\}\~]+\.)*[\w\!\#$\%\&\'‌​*\+\-\/\=\?\^`{\|\}\~]+@((((([a-zA-Z0-9]{1}[a-zA-Z0-9\-]{0,62}[a-zA-Z0-9]{1})|[‌​a-zA-Z])\.)+[a-zA-Z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)$");
                if (!regex.IsMatch(localContact.LoginEmail))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotAValidEmail, "LoginEmail"), new[] { nameof(localContact.LoginEmail) });
                }
            }

            if (string.IsNullOrWhiteSpace(localContact.FirstName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FirstName"), new[] { nameof(localContact.FirstName) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.FirstName) && localContact.FirstName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "FirstName", "100"), new[] { nameof(localContact.FirstName) });
            }

            if (string.IsNullOrWhiteSpace(localContact.LastName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastName"), new[] { nameof(localContact.LastName) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.LastName) && localContact.LastName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "LastName", "100"), new[] { nameof(localContact.LastName) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.Initial) && localContact.Initial.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Initial", "50"), new[] { nameof(localContact.Initial) });
            }

            if (string.IsNullOrWhiteSpace(localContact.WebName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "WebName"), new[] { nameof(localContact.WebName) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.WebName) && localContact.WebName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "WebName", "100"), new[] { nameof(localContact.WebName) });
            }

            if (localContact.ContactTitle != null)
            {
                retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), (int?)localContact.ContactTitle);
                if (localContact.ContactTitle == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ContactTitle"), new[] { nameof(localContact.ContactTitle) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localContact.SamplingPlanner_ProvincesTVItemID) && localContact.SamplingPlanner_ProvincesTVItemID.Length > 200)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SamplingPlanner_ProvincesTVItemID", "200"), new[] { nameof(localContact.SamplingPlanner_ProvincesTVItemID) });
            }

            if (!string.IsNullOrWhiteSpace(localContact.Token) && localContact.Token.Length > 255)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Token", "255"), new[] { nameof(localContact.Token) });
            }

            if (localContact.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localContact.LastUpdateDate_UTC) });
            }
            else
            {
                if (localContact.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localContact.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localContact.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localContact.LastUpdateContactTVItemID.ToString()), new[] { nameof(localContact.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localContact.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
