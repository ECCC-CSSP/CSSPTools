/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalDocTemplateDBService
    {
        Task<ActionResult<bool>> Delete(int LocalDocTemplateID);
        Task<ActionResult<List<LocalDocTemplate>>> GetLocalDocTemplateList(int skip = 0, int take = 100);
        Task<ActionResult<LocalDocTemplate>> GetLocalDocTemplateWithDocTemplateID(int DocTemplateID);
        Task<ActionResult<LocalDocTemplate>> Post(LocalDocTemplate localdoctemplate);
        Task<ActionResult<LocalDocTemplate>> Put(LocalDocTemplate localdoctemplate);
    }
    public partial class LocalDocTemplateDBService : ControllerBase, ILocalDocTemplateDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalDocTemplateDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalDocTemplate>> GetLocalDocTemplateWithDocTemplateID(int DocTemplateID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalDocTemplate localDocTemplate = (from c in db.LocalDocTemplates.AsNoTracking()
                    where c.DocTemplateID == DocTemplateID
                    select c).FirstOrDefault();

            if (localDocTemplate == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localDocTemplate));
        }
        public async Task<ActionResult<List<LocalDocTemplate>>> GetLocalDocTemplateList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalDocTemplate> localDocTemplateList = (from c in db.LocalDocTemplates.AsNoTracking() orderby c.DocTemplateID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localDocTemplateList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalDocTemplateID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalDocTemplate localDocTemplate = (from c in db.LocalDocTemplates
                    where c.DocTemplateID == LocalDocTemplateID
                    select c).FirstOrDefault();

            if (localDocTemplate == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalDocTemplate", "LocalDocTemplateID", LocalDocTemplateID.ToString())));
            }

            try
            {
                db.LocalDocTemplates.Remove(localDocTemplate);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalDocTemplate>> Post(LocalDocTemplate localDocTemplate)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localDocTemplate), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalDocTemplates.Add(localDocTemplate);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localDocTemplate));
        }
        public async Task<ActionResult<LocalDocTemplate>> Put(LocalDocTemplate localDocTemplate)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localDocTemplate), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalDocTemplates.Update(localDocTemplate);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localDocTemplate));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalDocTemplate localDocTemplate = validationContext.ObjectInstance as LocalDocTemplate;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localDocTemplate.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localDocTemplate.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localDocTemplate.DocTemplateID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "DocTemplateID"), new[] { nameof(localDocTemplate.DocTemplateID) });
                }

                if (!(from c in db.LocalDocTemplates.AsNoTracking() select c).Where(c => c.DocTemplateID == localDocTemplate.DocTemplateID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "DocTemplate", "DocTemplateID", localDocTemplate.DocTemplateID.ToString()), new[] { nameof(localDocTemplate.DocTemplateID) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), (int?)localDocTemplate.Language);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Language"), new[] { nameof(localDocTemplate.Language) });
            }

            retStr = enums.EnumTypeOK(typeof(TVTypeEnum), (int?)localDocTemplate.TVType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TVType"), new[] { nameof(localDocTemplate.TVType) });
            }

            LocalTVItem localTVItemTVFileTVItemID = null;
            localTVItemTVFileTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localDocTemplate.TVFileTVItemID select c).FirstOrDefault();

            if (localTVItemTVFileTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "TVFileTVItemID", localDocTemplate.TVFileTVItemID.ToString()), new[] { nameof(localDocTemplate.TVFileTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.File,
                };
                if (!AllowableTVTypes.Contains(localTVItemTVFileTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "TVFileTVItemID", "File"), new[] { nameof(localDocTemplate.TVFileTVItemID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localDocTemplate.FileName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FileName"), new[] { nameof(localDocTemplate.FileName) });
            }

            if (!string.IsNullOrWhiteSpace(localDocTemplate.FileName) && localDocTemplate.FileName.Length > 150)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "FileName", "150"), new[] { nameof(localDocTemplate.FileName) });
            }

            if (localDocTemplate.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localDocTemplate.LastUpdateDate_UTC) });
            }
            else
            {
                if (localDocTemplate.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localDocTemplate.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localDocTemplate.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localDocTemplate.LastUpdateContactTVItemID.ToString()), new[] { nameof(localDocTemplate.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localDocTemplate.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
