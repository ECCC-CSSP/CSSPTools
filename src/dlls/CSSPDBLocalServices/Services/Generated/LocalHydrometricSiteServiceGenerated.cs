/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalHydrometricSiteDBService
    {
        Task<ActionResult<bool>> Delete(int LocalHydrometricSiteID);
        Task<ActionResult<List<LocalHydrometricSite>>> GetLocalHydrometricSiteList(int skip = 0, int take = 100);
        Task<ActionResult<LocalHydrometricSite>> GetLocalHydrometricSiteWithHydrometricSiteID(int HydrometricSiteID);
        Task<ActionResult<LocalHydrometricSite>> Post(LocalHydrometricSite localhydrometricsite);
        Task<ActionResult<LocalHydrometricSite>> Put(LocalHydrometricSite localhydrometricsite);
    }
    public partial class LocalHydrometricSiteDBService : ControllerBase, ILocalHydrometricSiteDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalHydrometricSiteDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalHydrometricSite>> GetLocalHydrometricSiteWithHydrometricSiteID(int HydrometricSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalHydrometricSite localHydrometricSite = (from c in db.LocalHydrometricSites.AsNoTracking()
                    where c.HydrometricSiteID == HydrometricSiteID
                    select c).FirstOrDefault();

            if (localHydrometricSite == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localHydrometricSite));
        }
        public async Task<ActionResult<List<LocalHydrometricSite>>> GetLocalHydrometricSiteList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalHydrometricSite> localHydrometricSiteList = (from c in db.LocalHydrometricSites.AsNoTracking() orderby c.HydrometricSiteID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localHydrometricSiteList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalHydrometricSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalHydrometricSite localHydrometricSite = (from c in db.LocalHydrometricSites
                    where c.HydrometricSiteID == LocalHydrometricSiteID
                    select c).FirstOrDefault();

            if (localHydrometricSite == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalHydrometricSite", "LocalHydrometricSiteID", LocalHydrometricSiteID.ToString())));
            }

            try
            {
                db.LocalHydrometricSites.Remove(localHydrometricSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalHydrometricSite>> Post(LocalHydrometricSite localHydrometricSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localHydrometricSite), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalHydrometricSites.Add(localHydrometricSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localHydrometricSite));
        }
        public async Task<ActionResult<LocalHydrometricSite>> Put(LocalHydrometricSite localHydrometricSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localHydrometricSite), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalHydrometricSites.Update(localHydrometricSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localHydrometricSite));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalHydrometricSite localHydrometricSite = validationContext.ObjectInstance as LocalHydrometricSite;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localHydrometricSite.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localHydrometricSite.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localHydrometricSite.HydrometricSiteID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "HydrometricSiteID"), new[] { nameof(localHydrometricSite.HydrometricSiteID) });
                }

                if (!(from c in db.LocalHydrometricSites.AsNoTracking() select c).Where(c => c.HydrometricSiteID == localHydrometricSite.HydrometricSiteID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "HydrometricSite", "HydrometricSiteID", localHydrometricSite.HydrometricSiteID.ToString()), new[] { nameof(localHydrometricSite.HydrometricSiteID) });
                }
            }

            LocalTVItem localTVItemHydrometricSiteTVItemID = null;
            localTVItemHydrometricSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localHydrometricSite.HydrometricSiteTVItemID select c).FirstOrDefault();

            if (localTVItemHydrometricSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "HydrometricSiteTVItemID", localHydrometricSite.HydrometricSiteTVItemID.ToString()), new[] { nameof(localHydrometricSite.HydrometricSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.HydrometricSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemHydrometricSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "HydrometricSiteTVItemID", "HydrometricSite"), new[] { nameof(localHydrometricSite.HydrometricSiteTVItemID) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localHydrometricSite.FedSiteNumber) && localHydrometricSite.FedSiteNumber.Length > 7)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "FedSiteNumber", "7"), new[] { nameof(localHydrometricSite.FedSiteNumber) });
            }

            if (!string.IsNullOrWhiteSpace(localHydrometricSite.QuebecSiteNumber) && localHydrometricSite.QuebecSiteNumber.Length > 7)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "QuebecSiteNumber", "7"), new[] { nameof(localHydrometricSite.QuebecSiteNumber) });
            }

            if (string.IsNullOrWhiteSpace(localHydrometricSite.HydrometricSiteName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "HydrometricSiteName"), new[] { nameof(localHydrometricSite.HydrometricSiteName) });
            }

            if (!string.IsNullOrWhiteSpace(localHydrometricSite.HydrometricSiteName) && localHydrometricSite.HydrometricSiteName.Length > 200)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "HydrometricSiteName", "200"), new[] { nameof(localHydrometricSite.HydrometricSiteName) });
            }

            if (!string.IsNullOrWhiteSpace(localHydrometricSite.Description) && localHydrometricSite.Description.Length > 200)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Description", "200"), new[] { nameof(localHydrometricSite.Description) });
            }

            if (string.IsNullOrWhiteSpace(localHydrometricSite.Province))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Province"), new[] { nameof(localHydrometricSite.Province) });
            }

            if (!string.IsNullOrWhiteSpace(localHydrometricSite.Province) && localHydrometricSite.Province.Length > 4)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Province", "4"), new[] { nameof(localHydrometricSite.Province) });
            }

            if (localHydrometricSite.Elevation_m != null)
            {
                if (localHydrometricSite.Elevation_m < 0 || localHydrometricSite.Elevation_m > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Elevation_m", "0", "10000"), new[] { nameof(localHydrometricSite.Elevation_m) });
                }
            }

            if (localHydrometricSite.StartDate_Local != null && ((DateTime)localHydrometricSite.StartDate_Local).Year < 1849)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "StartDate_Local", "1849"), new[] { nameof(localHydrometricSite.StartDate_Local) });
            }

            if (localHydrometricSite.EndDate_Local != null && ((DateTime)localHydrometricSite.EndDate_Local).Year < 1849)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "EndDate_Local", "1849"), new[] { nameof(localHydrometricSite.EndDate_Local) });
            }

            if (localHydrometricSite.StartDate_Local > localHydrometricSite.EndDate_Local)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._DateIsBiggerThan_, "EndDate_Local", "LocalHydrometricSiteStartDate_Local"), new[] { nameof(localHydrometricSite.EndDate_Local) });
            }

            if (localHydrometricSite.TimeOffset_hour != null)
            {
                if (localHydrometricSite.TimeOffset_hour < -10 || localHydrometricSite.TimeOffset_hour > 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TimeOffset_hour", "-10", "0"), new[] { nameof(localHydrometricSite.TimeOffset_hour) });
                }
            }

            if (localHydrometricSite.DrainageArea_km2 != null)
            {
                if (localHydrometricSite.DrainageArea_km2 < 0 || localHydrometricSite.DrainageArea_km2 > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DrainageArea_km2", "0", "1000000"), new[] { nameof(localHydrometricSite.DrainageArea_km2) });
                }
            }

            if (localHydrometricSite.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localHydrometricSite.LastUpdateDate_UTC) });
            }
            else
            {
                if (localHydrometricSite.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localHydrometricSite.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localHydrometricSite.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localHydrometricSite.LastUpdateContactTVItemID.ToString()), new[] { nameof(localHydrometricSite.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localHydrometricSite.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
