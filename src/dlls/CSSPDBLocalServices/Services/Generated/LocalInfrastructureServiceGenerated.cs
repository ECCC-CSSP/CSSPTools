/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalInfrastructureDBService
    {
        Task<ActionResult<bool>> Delete(int LocalInfrastructureID);
        Task<ActionResult<List<LocalInfrastructure>>> GetLocalInfrastructureList(int skip = 0, int take = 100);
        Task<ActionResult<LocalInfrastructure>> GetLocalInfrastructureWithInfrastructureID(int InfrastructureID);
        Task<ActionResult<LocalInfrastructure>> Post(LocalInfrastructure localinfrastructure);
        Task<ActionResult<LocalInfrastructure>> Put(LocalInfrastructure localinfrastructure);
    }
    public partial class LocalInfrastructureDBService : ControllerBase, ILocalInfrastructureDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalInfrastructureDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalInfrastructure>> GetLocalInfrastructureWithInfrastructureID(int InfrastructureID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalInfrastructure localInfrastructure = (from c in db.LocalInfrastructures.AsNoTracking()
                    where c.InfrastructureID == InfrastructureID
                    select c).FirstOrDefault();

            if (localInfrastructure == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localInfrastructure));
        }
        public async Task<ActionResult<List<LocalInfrastructure>>> GetLocalInfrastructureList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalInfrastructure> localInfrastructureList = (from c in db.LocalInfrastructures.AsNoTracking() orderby c.InfrastructureID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localInfrastructureList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalInfrastructureID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalInfrastructure localInfrastructure = (from c in db.LocalInfrastructures
                    where c.InfrastructureID == LocalInfrastructureID
                    select c).FirstOrDefault();

            if (localInfrastructure == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalInfrastructure", "LocalInfrastructureID", LocalInfrastructureID.ToString())));
            }

            try
            {
                db.LocalInfrastructures.Remove(localInfrastructure);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalInfrastructure>> Post(LocalInfrastructure localInfrastructure)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localInfrastructure), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalInfrastructures.Add(localInfrastructure);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localInfrastructure));
        }
        public async Task<ActionResult<LocalInfrastructure>> Put(LocalInfrastructure localInfrastructure)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localInfrastructure), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalInfrastructures.Update(localInfrastructure);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localInfrastructure));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalInfrastructure localInfrastructure = validationContext.ObjectInstance as LocalInfrastructure;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localInfrastructure.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localInfrastructure.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localInfrastructure.InfrastructureID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "InfrastructureID"), new[] { nameof(localInfrastructure.InfrastructureID) });
                }

                if (!(from c in db.LocalInfrastructures.AsNoTracking() select c).Where(c => c.InfrastructureID == localInfrastructure.InfrastructureID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "Infrastructure", "InfrastructureID", localInfrastructure.InfrastructureID.ToString()), new[] { nameof(localInfrastructure.InfrastructureID) });
                }
            }

            LocalTVItem localTVItemInfrastructureTVItemID = null;
            localTVItemInfrastructureTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localInfrastructure.InfrastructureTVItemID select c).FirstOrDefault();

            if (localTVItemInfrastructureTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "InfrastructureTVItemID", localInfrastructure.InfrastructureTVItemID.ToString()), new[] { nameof(localInfrastructure.InfrastructureTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Infrastructure,
                };
                if (!AllowableTVTypes.Contains(localTVItemInfrastructureTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "InfrastructureTVItemID", "Infrastructure"), new[] { nameof(localInfrastructure.InfrastructureTVItemID) });
                }
            }

            if (localInfrastructure.PrismID != null)
            {
                if (localInfrastructure.PrismID < 0 || localInfrastructure.PrismID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PrismID", "0", "100000"), new[] { nameof(localInfrastructure.PrismID) });
                }
            }

            if (localInfrastructure.TPID != null)
            {
                if (localInfrastructure.TPID < 0 || localInfrastructure.TPID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TPID", "0", "100000"), new[] { nameof(localInfrastructure.TPID) });
                }
            }

            if (localInfrastructure.LSID != null)
            {
                if (localInfrastructure.LSID < 0 || localInfrastructure.LSID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "LSID", "0", "100000"), new[] { nameof(localInfrastructure.LSID) });
                }
            }

            if (localInfrastructure.SiteID != null)
            {
                if (localInfrastructure.SiteID < 0 || localInfrastructure.SiteID > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SiteID", "0", "100000"), new[] { nameof(localInfrastructure.SiteID) });
                }
            }

            if (localInfrastructure.Site != null)
            {
                if (localInfrastructure.Site < 0 || localInfrastructure.Site > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Site", "0", "100000"), new[] { nameof(localInfrastructure.Site) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localInfrastructure.InfrastructureCategory) && (localInfrastructure.InfrastructureCategory.Length < 1 || localInfrastructure.InfrastructureCategory.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "InfrastructureCategory", "1", "1"), new[] { nameof(localInfrastructure.InfrastructureCategory) });
            }

            if (localInfrastructure.InfrastructureType != null)
            {
                retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), (int?)localInfrastructure.InfrastructureType);
                if (localInfrastructure.InfrastructureType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "InfrastructureType"), new[] { nameof(localInfrastructure.InfrastructureType) });
                }
            }

            if (localInfrastructure.FacilityType != null)
            {
                retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), (int?)localInfrastructure.FacilityType);
                if (localInfrastructure.FacilityType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FacilityType"), new[] { nameof(localInfrastructure.FacilityType) });
                }
            }

            if (localInfrastructure.NumberOfCells != null)
            {
                if (localInfrastructure.NumberOfCells < 0 || localInfrastructure.NumberOfCells > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfCells", "0", "10"), new[] { nameof(localInfrastructure.NumberOfCells) });
                }
            }

            if (localInfrastructure.NumberOfAeratedCells != null)
            {
                if (localInfrastructure.NumberOfAeratedCells < 0 || localInfrastructure.NumberOfAeratedCells > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfAeratedCells", "0", "10"), new[] { nameof(localInfrastructure.NumberOfAeratedCells) });
                }
            }

            if (localInfrastructure.AerationType != null)
            {
                retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), (int?)localInfrastructure.AerationType);
                if (localInfrastructure.AerationType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AerationType"), new[] { nameof(localInfrastructure.AerationType) });
                }
            }

            if (localInfrastructure.PreliminaryTreatmentType != null)
            {
                retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), (int?)localInfrastructure.PreliminaryTreatmentType);
                if (localInfrastructure.PreliminaryTreatmentType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "PreliminaryTreatmentType"), new[] { nameof(localInfrastructure.PreliminaryTreatmentType) });
                }
            }

            if (localInfrastructure.PrimaryTreatmentType != null)
            {
                retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), (int?)localInfrastructure.PrimaryTreatmentType);
                if (localInfrastructure.PrimaryTreatmentType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "PrimaryTreatmentType"), new[] { nameof(localInfrastructure.PrimaryTreatmentType) });
                }
            }

            if (localInfrastructure.SecondaryTreatmentType != null)
            {
                retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), (int?)localInfrastructure.SecondaryTreatmentType);
                if (localInfrastructure.SecondaryTreatmentType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SecondaryTreatmentType"), new[] { nameof(localInfrastructure.SecondaryTreatmentType) });
                }
            }

            if (localInfrastructure.TertiaryTreatmentType != null)
            {
                retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), (int?)localInfrastructure.TertiaryTreatmentType);
                if (localInfrastructure.TertiaryTreatmentType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TertiaryTreatmentType"), new[] { nameof(localInfrastructure.TertiaryTreatmentType) });
                }
            }

            if (localInfrastructure.TreatmentType != null)
            {
                retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), (int?)localInfrastructure.TreatmentType);
                if (localInfrastructure.TreatmentType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TreatmentType"), new[] { nameof(localInfrastructure.TreatmentType) });
                }
            }

            if (localInfrastructure.DisinfectionType != null)
            {
                retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), (int?)localInfrastructure.DisinfectionType);
                if (localInfrastructure.DisinfectionType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "DisinfectionType"), new[] { nameof(localInfrastructure.DisinfectionType) });
                }
            }

            if (localInfrastructure.CollectionSystemType != null)
            {
                retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), (int?)localInfrastructure.CollectionSystemType);
                if (localInfrastructure.CollectionSystemType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "CollectionSystemType"), new[] { nameof(localInfrastructure.CollectionSystemType) });
                }
            }

            if (localInfrastructure.AlarmSystemType != null)
            {
                retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), (int?)localInfrastructure.AlarmSystemType);
                if (localInfrastructure.AlarmSystemType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AlarmSystemType"), new[] { nameof(localInfrastructure.AlarmSystemType) });
                }
            }

            if (localInfrastructure.DesignFlow_m3_day != null)
            {
                if (localInfrastructure.DesignFlow_m3_day < 0 || localInfrastructure.DesignFlow_m3_day > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DesignFlow_m3_day", "0", "1000000"), new[] { nameof(localInfrastructure.DesignFlow_m3_day) });
                }
            }

            if (localInfrastructure.AverageFlow_m3_day != null)
            {
                if (localInfrastructure.AverageFlow_m3_day < 0 || localInfrastructure.AverageFlow_m3_day > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AverageFlow_m3_day", "0", "1000000"), new[] { nameof(localInfrastructure.AverageFlow_m3_day) });
                }
            }

            if (localInfrastructure.PeakFlow_m3_day != null)
            {
                if (localInfrastructure.PeakFlow_m3_day < 0 || localInfrastructure.PeakFlow_m3_day > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PeakFlow_m3_day", "0", "1000000"), new[] { nameof(localInfrastructure.PeakFlow_m3_day) });
                }
            }

            if (localInfrastructure.PopServed != null)
            {
                if (localInfrastructure.PopServed < 0 || localInfrastructure.PopServed > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PopServed", "0", "1000000"), new[] { nameof(localInfrastructure.PopServed) });
                }
            }

            if (localInfrastructure.ValveType != null)
            {
                retStr = enums.EnumTypeOK(typeof(ValveTypeEnum), (int?)localInfrastructure.ValveType);
                if (localInfrastructure.ValveType == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ValveType"), new[] { nameof(localInfrastructure.ValveType) });
                }
            }

            if (localInfrastructure.PercFlowOfTotal != null)
            {
                if (localInfrastructure.PercFlowOfTotal < 0 || localInfrastructure.PercFlowOfTotal > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PercFlowOfTotal", "0", "100"), new[] { nameof(localInfrastructure.PercFlowOfTotal) });
                }
            }

            if (localInfrastructure.TimeOffset_hour != null)
            {
                if (localInfrastructure.TimeOffset_hour < -10 || localInfrastructure.TimeOffset_hour > 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TimeOffset_hour", "-10", "0"), new[] { nameof(localInfrastructure.TimeOffset_hour) });
                }
            }

            //TempCatchAllRemoveLater has no StringLength Attribute

            if (localInfrastructure.AverageDepth_m != null)
            {
                if (localInfrastructure.AverageDepth_m < 0 || localInfrastructure.AverageDepth_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AverageDepth_m", "0", "1000"), new[] { nameof(localInfrastructure.AverageDepth_m) });
                }
            }

            if (localInfrastructure.NumberOfPorts != null)
            {
                if (localInfrastructure.NumberOfPorts < 1 || localInfrastructure.NumberOfPorts > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfPorts", "1", "1000"), new[] { nameof(localInfrastructure.NumberOfPorts) });
                }
            }

            if (localInfrastructure.PortDiameter_m != null)
            {
                if (localInfrastructure.PortDiameter_m < 0 || localInfrastructure.PortDiameter_m > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortDiameter_m", "0", "10"), new[] { nameof(localInfrastructure.PortDiameter_m) });
                }
            }

            if (localInfrastructure.PortSpacing_m != null)
            {
                if (localInfrastructure.PortSpacing_m < 0 || localInfrastructure.PortSpacing_m > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortSpacing_m", "0", "10000"), new[] { nameof(localInfrastructure.PortSpacing_m) });
                }
            }

            if (localInfrastructure.PortElevation_m != null)
            {
                if (localInfrastructure.PortElevation_m < 0 || localInfrastructure.PortElevation_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortElevation_m", "0", "1000"), new[] { nameof(localInfrastructure.PortElevation_m) });
                }
            }

            if (localInfrastructure.VerticalAngle_deg != null)
            {
                if (localInfrastructure.VerticalAngle_deg < -90 || localInfrastructure.VerticalAngle_deg > 90)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "VerticalAngle_deg", "-90", "90"), new[] { nameof(localInfrastructure.VerticalAngle_deg) });
                }
            }

            if (localInfrastructure.HorizontalAngle_deg != null)
            {
                if (localInfrastructure.HorizontalAngle_deg < -180 || localInfrastructure.HorizontalAngle_deg > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "HorizontalAngle_deg", "-180", "180"), new[] { nameof(localInfrastructure.HorizontalAngle_deg) });
                }
            }

            if (localInfrastructure.DecayRate_per_day != null)
            {
                if (localInfrastructure.DecayRate_per_day < 0 || localInfrastructure.DecayRate_per_day > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DecayRate_per_day", "0", "100"), new[] { nameof(localInfrastructure.DecayRate_per_day) });
                }
            }

            if (localInfrastructure.NearFieldVelocity_m_s != null)
            {
                if (localInfrastructure.NearFieldVelocity_m_s < 0 || localInfrastructure.NearFieldVelocity_m_s > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NearFieldVelocity_m_s", "0", "10"), new[] { nameof(localInfrastructure.NearFieldVelocity_m_s) });
                }
            }

            if (localInfrastructure.FarFieldVelocity_m_s != null)
            {
                if (localInfrastructure.FarFieldVelocity_m_s < 0 || localInfrastructure.FarFieldVelocity_m_s > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FarFieldVelocity_m_s", "0", "10"), new[] { nameof(localInfrastructure.FarFieldVelocity_m_s) });
                }
            }

            if (localInfrastructure.ReceivingWaterSalinity_PSU != null)
            {
                if (localInfrastructure.ReceivingWaterSalinity_PSU < 0 || localInfrastructure.ReceivingWaterSalinity_PSU > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ReceivingWaterSalinity_PSU", "0", "40"), new[] { nameof(localInfrastructure.ReceivingWaterSalinity_PSU) });
                }
            }

            if (localInfrastructure.ReceivingWaterTemperature_C != null)
            {
                if (localInfrastructure.ReceivingWaterTemperature_C < -10 || localInfrastructure.ReceivingWaterTemperature_C > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ReceivingWaterTemperature_C", "-10", "40"), new[] { nameof(localInfrastructure.ReceivingWaterTemperature_C) });
                }
            }

            if (localInfrastructure.ReceivingWater_MPN_per_100ml != null)
            {
                if (localInfrastructure.ReceivingWater_MPN_per_100ml < 0 || localInfrastructure.ReceivingWater_MPN_per_100ml > 10000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ReceivingWater_MPN_per_100ml", "0", "10000000"), new[] { nameof(localInfrastructure.ReceivingWater_MPN_per_100ml) });
                }
            }

            if (localInfrastructure.DistanceFromShore_m != null)
            {
                if (localInfrastructure.DistanceFromShore_m < 0 || localInfrastructure.DistanceFromShore_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DistanceFromShore_m", "0", "1000"), new[] { nameof(localInfrastructure.DistanceFromShore_m) });
                }
            }

            if (localInfrastructure.SeeOtherMunicipalityTVItemID != null)
            {
                LocalTVItem localTVItemSeeOtherMunicipalityTVItemID = null;
                localTVItemSeeOtherMunicipalityTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localInfrastructure.SeeOtherMunicipalityTVItemID select c).FirstOrDefault();

                if (localTVItemSeeOtherMunicipalityTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "SeeOtherMunicipalityTVItemID", (localInfrastructure.SeeOtherMunicipalityTVItemID == null ? "" : localInfrastructure.SeeOtherMunicipalityTVItemID.ToString())), new[] { nameof(localInfrastructure.SeeOtherMunicipalityTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.Infrastructure,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemSeeOtherMunicipalityTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SeeOtherMunicipalityTVItemID", "Infrastructure"), new[] { nameof(localInfrastructure.SeeOtherMunicipalityTVItemID) });
                    }
                }
            }

            if (localInfrastructure.CivicAddressTVItemID != null)
            {
                LocalTVItem localTVItemCivicAddressTVItemID = null;
                localTVItemCivicAddressTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localInfrastructure.CivicAddressTVItemID select c).FirstOrDefault();

                if (localTVItemCivicAddressTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "CivicAddressTVItemID", (localInfrastructure.CivicAddressTVItemID == null ? "" : localInfrastructure.CivicAddressTVItemID.ToString())), new[] { nameof(localInfrastructure.CivicAddressTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.Address,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemCivicAddressTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "CivicAddressTVItemID", "Address"), new[] { nameof(localInfrastructure.CivicAddressTVItemID) });
                    }
                }
            }

            if (localInfrastructure.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localInfrastructure.LastUpdateDate_UTC) });
            }
            else
            {
                if (localInfrastructure.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localInfrastructure.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localInfrastructure.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localInfrastructure.LastUpdateContactTVItemID.ToString()), new[] { nameof(localInfrastructure.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localInfrastructure.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
