/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalLabSheetDetailDBService
    {
        Task<ActionResult<bool>> Delete(int LocalLabSheetDetailID);
        Task<ActionResult<List<LocalLabSheetDetail>>> GetLocalLabSheetDetailList(int skip = 0, int take = 100);
        Task<ActionResult<LocalLabSheetDetail>> GetLocalLabSheetDetailWithLabSheetDetailID(int LabSheetDetailID);
        Task<ActionResult<LocalLabSheetDetail>> Post(LocalLabSheetDetail locallabsheetdetail);
        Task<ActionResult<LocalLabSheetDetail>> Put(LocalLabSheetDetail locallabsheetdetail);
    }
    public partial class LocalLabSheetDetailDBService : ControllerBase, ILocalLabSheetDetailDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetDetailDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalLabSheetDetail>> GetLocalLabSheetDetailWithLabSheetDetailID(int LabSheetDetailID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalLabSheetDetail localLabSheetDetail = (from c in db.LocalLabSheetDetails.AsNoTracking()
                    where c.LabSheetDetailID == LabSheetDetailID
                    select c).FirstOrDefault();

            if (localLabSheetDetail == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localLabSheetDetail));
        }
        public async Task<ActionResult<List<LocalLabSheetDetail>>> GetLocalLabSheetDetailList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalLabSheetDetail> localLabSheetDetailList = (from c in db.LocalLabSheetDetails.AsNoTracking() orderby c.LabSheetDetailID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localLabSheetDetailList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalLabSheetDetailID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalLabSheetDetail localLabSheetDetail = (from c in db.LocalLabSheetDetails
                    where c.LabSheetDetailID == LocalLabSheetDetailID
                    select c).FirstOrDefault();

            if (localLabSheetDetail == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalLabSheetDetail", "LocalLabSheetDetailID", LocalLabSheetDetailID.ToString())));
            }

            try
            {
                db.LocalLabSheetDetails.Remove(localLabSheetDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalLabSheetDetail>> Post(LocalLabSheetDetail localLabSheetDetail)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheetDetail), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheetDetails.Add(localLabSheetDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheetDetail));
        }
        public async Task<ActionResult<LocalLabSheetDetail>> Put(LocalLabSheetDetail localLabSheetDetail)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheetDetail), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheetDetails.Update(localLabSheetDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheetDetail));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalLabSheetDetail localLabSheetDetail = validationContext.ObjectInstance as LocalLabSheetDetail;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localLabSheetDetail.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localLabSheetDetail.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localLabSheetDetail.LabSheetDetailID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetDetailID"), new[] { nameof(localLabSheetDetail.LabSheetDetailID) });
                }

                if (!(from c in db.LocalLabSheetDetails.AsNoTracking() select c).Where(c => c.LabSheetDetailID == localLabSheetDetail.LabSheetDetailID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LabSheetDetail", "LabSheetDetailID", localLabSheetDetail.LabSheetDetailID.ToString()), new[] { nameof(localLabSheetDetail.LabSheetDetailID) });
                }
            }

            LocalLabSheet localLabSheetLabSheetID = null;
            localLabSheetLabSheetID = (from c in db.LocalLabSheets.AsNoTracking() where c.LabSheetID == localLabSheetDetail.LabSheetID select c).FirstOrDefault();

            if (localLabSheetLabSheetID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalLabSheet", "LabSheetID", localLabSheetDetail.LabSheetID.ToString()), new[] { nameof(localLabSheetDetail.LabSheetID) });
            }

            LocalSamplingPlan localSamplingPlanSamplingPlanID = null;
            localSamplingPlanSamplingPlanID = (from c in db.LocalSamplingPlans.AsNoTracking() where c.SamplingPlanID == localLabSheetDetail.SamplingPlanID select c).FirstOrDefault();

            if (localSamplingPlanSamplingPlanID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalSamplingPlan", "SamplingPlanID", localLabSheetDetail.SamplingPlanID.ToString()), new[] { nameof(localLabSheetDetail.SamplingPlanID) });
            }

            LocalTVItem localTVItemSubsectorTVItemID = null;
            localTVItemSubsectorTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheetDetail.SubsectorTVItemID select c).FirstOrDefault();

            if (localTVItemSubsectorTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "SubsectorTVItemID", localLabSheetDetail.SubsectorTVItemID.ToString()), new[] { nameof(localLabSheetDetail.SubsectorTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Subsector,
                };
                if (!AllowableTVTypes.Contains(localTVItemSubsectorTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), new[] { nameof(localLabSheetDetail.SubsectorTVItemID) });
                }
            }

            if (localLabSheetDetail.Version < 1 || localLabSheetDetail.Version > 5)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Version", "1", "5"), new[] { nameof(localLabSheetDetail.Version) });
            }

            if (localLabSheetDetail.RunDate.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "RunDate"), new[] { nameof(localLabSheetDetail.RunDate) });
            }
            else
            {
                if (localLabSheetDetail.RunDate.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "RunDate", "1980"), new[] { nameof(localLabSheetDetail.RunDate) });
                }
            }

            if (string.IsNullOrWhiteSpace(localLabSheetDetail.Tides))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Tides"), new[] { nameof(localLabSheetDetail.Tides) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Tides) && (localLabSheetDetail.Tides.Length < 1 || localLabSheetDetail.Tides.Length > 7))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Tides", "1", "7"), new[] { nameof(localLabSheetDetail.Tides) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.SampleCrewInitials) && localLabSheetDetail.SampleCrewInitials.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SampleCrewInitials", "20"), new[] { nameof(localLabSheetDetail.SampleCrewInitials) });
            }

            if (localLabSheetDetail.WaterBathCount != null)
            {
                if (localLabSheetDetail.WaterBathCount < 1 || localLabSheetDetail.WaterBathCount > 3)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "WaterBathCount", "1", "3"), new[] { nameof(localLabSheetDetail.WaterBathCount) });
                }
            }

            if (localLabSheetDetail.IncubationBath1StartTime != null && ((DateTime)localLabSheetDetail.IncubationBath1StartTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath1StartTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath1StartTime) });
            }

            if (localLabSheetDetail.IncubationBath2StartTime != null && ((DateTime)localLabSheetDetail.IncubationBath2StartTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath2StartTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath2StartTime) });
            }

            if (localLabSheetDetail.IncubationBath3StartTime != null && ((DateTime)localLabSheetDetail.IncubationBath3StartTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath3StartTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath3StartTime) });
            }

            if (localLabSheetDetail.IncubationBath1EndTime != null && ((DateTime)localLabSheetDetail.IncubationBath1EndTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath1EndTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath1EndTime) });
            }

            if (localLabSheetDetail.IncubationBath2EndTime != null && ((DateTime)localLabSheetDetail.IncubationBath2EndTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath2EndTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath2EndTime) });
            }

            if (localLabSheetDetail.IncubationBath3EndTime != null && ((DateTime)localLabSheetDetail.IncubationBath3EndTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "IncubationBath3EndTime", "1980"), new[] { nameof(localLabSheetDetail.IncubationBath3EndTime) });
            }

            if (localLabSheetDetail.IncubationBath1TimeCalculated_minutes != null)
            {
                if (localLabSheetDetail.IncubationBath1TimeCalculated_minutes < 0 || localLabSheetDetail.IncubationBath1TimeCalculated_minutes > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IncubationBath1TimeCalculated_minutes", "0", "10000"), new[] { nameof(localLabSheetDetail.IncubationBath1TimeCalculated_minutes) });
                }
            }

            if (localLabSheetDetail.IncubationBath2TimeCalculated_minutes != null)
            {
                if (localLabSheetDetail.IncubationBath2TimeCalculated_minutes < 0 || localLabSheetDetail.IncubationBath2TimeCalculated_minutes > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IncubationBath2TimeCalculated_minutes", "0", "10000"), new[] { nameof(localLabSheetDetail.IncubationBath2TimeCalculated_minutes) });
                }
            }

            if (localLabSheetDetail.IncubationBath3TimeCalculated_minutes != null)
            {
                if (localLabSheetDetail.IncubationBath3TimeCalculated_minutes < 0 || localLabSheetDetail.IncubationBath3TimeCalculated_minutes > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IncubationBath3TimeCalculated_minutes", "0", "10000"), new[] { nameof(localLabSheetDetail.IncubationBath3TimeCalculated_minutes) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.WaterBath1) && localLabSheetDetail.WaterBath1.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "WaterBath1", "10"), new[] { nameof(localLabSheetDetail.WaterBath1) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.WaterBath2) && localLabSheetDetail.WaterBath2.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "WaterBath2", "10"), new[] { nameof(localLabSheetDetail.WaterBath2) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.WaterBath3) && localLabSheetDetail.WaterBath3.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "WaterBath3", "10"), new[] { nameof(localLabSheetDetail.WaterBath3) });
            }

            if (localLabSheetDetail.TCField1 != null)
            {
                if (localLabSheetDetail.TCField1 < -10 || localLabSheetDetail.TCField1 > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCField1", "-10", "40"), new[] { nameof(localLabSheetDetail.TCField1) });
                }
            }

            if (localLabSheetDetail.TCLab1 != null)
            {
                if (localLabSheetDetail.TCLab1 < -10 || localLabSheetDetail.TCLab1 > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCLab1", "-10", "40"), new[] { nameof(localLabSheetDetail.TCLab1) });
                }
            }

            if (localLabSheetDetail.TCField2 != null)
            {
                if (localLabSheetDetail.TCField2 < -10 || localLabSheetDetail.TCField2 > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCField2", "-10", "40"), new[] { nameof(localLabSheetDetail.TCField2) });
                }
            }

            if (localLabSheetDetail.TCLab2 != null)
            {
                if (localLabSheetDetail.TCLab2 < -10 || localLabSheetDetail.TCLab2 > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCLab2", "-10", "40"), new[] { nameof(localLabSheetDetail.TCLab2) });
                }
            }

            if (localLabSheetDetail.TCFirst != null)
            {
                if (localLabSheetDetail.TCFirst < -10 || localLabSheetDetail.TCFirst > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCFirst", "-10", "40"), new[] { nameof(localLabSheetDetail.TCFirst) });
                }
            }

            if (localLabSheetDetail.TCAverage != null)
            {
                if (localLabSheetDetail.TCAverage < -10 || localLabSheetDetail.TCAverage > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TCAverage", "-10", "40"), new[] { nameof(localLabSheetDetail.TCAverage) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.ControlLot) && localLabSheetDetail.ControlLot.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ControlLot", "100"), new[] { nameof(localLabSheetDetail.ControlLot) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Positive35) && (localLabSheetDetail.Positive35.Length < 1 || localLabSheetDetail.Positive35.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Positive35", "1", "1"), new[] { nameof(localLabSheetDetail.Positive35) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.NonTarget35) && (localLabSheetDetail.NonTarget35.Length < 1 || localLabSheetDetail.NonTarget35.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "NonTarget35", "1", "1"), new[] { nameof(localLabSheetDetail.NonTarget35) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Negative35) && (localLabSheetDetail.Negative35.Length < 1 || localLabSheetDetail.Negative35.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Negative35", "1", "1"), new[] { nameof(localLabSheetDetail.Negative35) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath1Positive44_5) && (localLabSheetDetail.Bath1Positive44_5.Length < 1 || localLabSheetDetail.Bath1Positive44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath1Positive44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath1Positive44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath2Positive44_5) && (localLabSheetDetail.Bath2Positive44_5.Length < 1 || localLabSheetDetail.Bath2Positive44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath2Positive44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath2Positive44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath3Positive44_5) && (localLabSheetDetail.Bath3Positive44_5.Length < 1 || localLabSheetDetail.Bath3Positive44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath3Positive44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath3Positive44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath1NonTarget44_5) && (localLabSheetDetail.Bath1NonTarget44_5.Length < 1 || localLabSheetDetail.Bath1NonTarget44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath1NonTarget44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath1NonTarget44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath2NonTarget44_5) && (localLabSheetDetail.Bath2NonTarget44_5.Length < 1 || localLabSheetDetail.Bath2NonTarget44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath2NonTarget44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath2NonTarget44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath3NonTarget44_5) && (localLabSheetDetail.Bath3NonTarget44_5.Length < 1 || localLabSheetDetail.Bath3NonTarget44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath3NonTarget44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath3NonTarget44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath1Negative44_5) && (localLabSheetDetail.Bath1Negative44_5.Length < 1 || localLabSheetDetail.Bath1Negative44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath1Negative44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath1Negative44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath2Negative44_5) && (localLabSheetDetail.Bath2Negative44_5.Length < 1 || localLabSheetDetail.Bath2Negative44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath2Negative44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath2Negative44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath3Negative44_5) && (localLabSheetDetail.Bath3Negative44_5.Length < 1 || localLabSheetDetail.Bath3Negative44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath3Negative44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath3Negative44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Blank35) && (localLabSheetDetail.Blank35.Length < 1 || localLabSheetDetail.Blank35.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Blank35", "1", "1"), new[] { nameof(localLabSheetDetail.Blank35) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath1Blank44_5) && (localLabSheetDetail.Bath1Blank44_5.Length < 1 || localLabSheetDetail.Bath1Blank44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath1Blank44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath1Blank44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath2Blank44_5) && (localLabSheetDetail.Bath2Blank44_5.Length < 1 || localLabSheetDetail.Bath2Blank44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath2Blank44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath2Blank44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Bath3Blank44_5) && (localLabSheetDetail.Bath3Blank44_5.Length < 1 || localLabSheetDetail.Bath3Blank44_5.Length > 1))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "Bath3Blank44_5", "1", "1"), new[] { nameof(localLabSheetDetail.Bath3Blank44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Lot35) && localLabSheetDetail.Lot35.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Lot35", "20"), new[] { nameof(localLabSheetDetail.Lot35) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Lot44_5) && localLabSheetDetail.Lot44_5.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Lot44_5", "20"), new[] { nameof(localLabSheetDetail.Lot44_5) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.Weather) && localLabSheetDetail.Weather.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Weather", "250"), new[] { nameof(localLabSheetDetail.Weather) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.RunComment) && localLabSheetDetail.RunComment.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "RunComment", "250"), new[] { nameof(localLabSheetDetail.RunComment) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.RunWeatherComment) && localLabSheetDetail.RunWeatherComment.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "RunWeatherComment", "250"), new[] { nameof(localLabSheetDetail.RunWeatherComment) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.SampleBottleLotNumber) && localLabSheetDetail.SampleBottleLotNumber.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SampleBottleLotNumber", "20"), new[] { nameof(localLabSheetDetail.SampleBottleLotNumber) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.SalinitiesReadBy) && localLabSheetDetail.SalinitiesReadBy.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SalinitiesReadBy", "20"), new[] { nameof(localLabSheetDetail.SalinitiesReadBy) });
            }

            if (localLabSheetDetail.SalinitiesReadDate != null && ((DateTime)localLabSheetDetail.SalinitiesReadDate).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "SalinitiesReadDate", "1980"), new[] { nameof(localLabSheetDetail.SalinitiesReadDate) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.ResultsReadBy) && localLabSheetDetail.ResultsReadBy.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ResultsReadBy", "20"), new[] { nameof(localLabSheetDetail.ResultsReadBy) });
            }

            if (localLabSheetDetail.ResultsReadDate != null && ((DateTime)localLabSheetDetail.ResultsReadDate).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "ResultsReadDate", "1980"), new[] { nameof(localLabSheetDetail.ResultsReadDate) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetDetail.ResultsRecordedBy) && localLabSheetDetail.ResultsRecordedBy.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ResultsRecordedBy", "20"), new[] { nameof(localLabSheetDetail.ResultsRecordedBy) });
            }

            if (localLabSheetDetail.ResultsRecordedDate != null && ((DateTime)localLabSheetDetail.ResultsRecordedDate).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "ResultsRecordedDate", "1980"), new[] { nameof(localLabSheetDetail.ResultsRecordedDate) });
            }

            if (localLabSheetDetail.DailyDuplicateRLog != null)
            {
                if (localLabSheetDetail.DailyDuplicateRLog < 0 || localLabSheetDetail.DailyDuplicateRLog > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DailyDuplicateRLog", "0", "100"), new[] { nameof(localLabSheetDetail.DailyDuplicateRLog) });
                }
            }

            if (localLabSheetDetail.DailyDuplicatePrecisionCriteria != null)
            {
                if (localLabSheetDetail.DailyDuplicatePrecisionCriteria < 0 || localLabSheetDetail.DailyDuplicatePrecisionCriteria > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DailyDuplicatePrecisionCriteria", "0", "100"), new[] { nameof(localLabSheetDetail.DailyDuplicatePrecisionCriteria) });
                }
            }

            if (localLabSheetDetail.IntertechDuplicateRLog != null)
            {
                if (localLabSheetDetail.IntertechDuplicateRLog < 0 || localLabSheetDetail.IntertechDuplicateRLog > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IntertechDuplicateRLog", "0", "100"), new[] { nameof(localLabSheetDetail.IntertechDuplicateRLog) });
                }
            }

            if (localLabSheetDetail.IntertechDuplicatePrecisionCriteria != null)
            {
                if (localLabSheetDetail.IntertechDuplicatePrecisionCriteria < 0 || localLabSheetDetail.IntertechDuplicatePrecisionCriteria > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IntertechDuplicatePrecisionCriteria", "0", "100"), new[] { nameof(localLabSheetDetail.IntertechDuplicatePrecisionCriteria) });
                }
            }

            if (localLabSheetDetail.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localLabSheetDetail.LastUpdateDate_UTC) });
            }
            else
            {
                if (localLabSheetDetail.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localLabSheetDetail.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheetDetail.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localLabSheetDetail.LastUpdateContactTVItemID.ToString()), new[] { nameof(localLabSheetDetail.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localLabSheetDetail.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
