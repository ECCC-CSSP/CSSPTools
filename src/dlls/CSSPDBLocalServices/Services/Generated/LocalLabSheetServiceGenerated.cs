/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalLabSheetDBService
    {
        Task<ActionResult<bool>> Delete(int LocalLabSheetID);
        Task<ActionResult<List<LocalLabSheet>>> GetLocalLabSheetList(int skip = 0, int take = 100);
        Task<ActionResult<LocalLabSheet>> GetLocalLabSheetWithLabSheetID(int LabSheetID);
        Task<ActionResult<LocalLabSheet>> Post(LocalLabSheet locallabsheet);
        Task<ActionResult<LocalLabSheet>> Put(LocalLabSheet locallabsheet);
    }
    public partial class LocalLabSheetDBService : ControllerBase, ILocalLabSheetDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalLabSheet>> GetLocalLabSheetWithLabSheetID(int LabSheetID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalLabSheet localLabSheet = (from c in db.LocalLabSheets.AsNoTracking()
                    where c.LabSheetID == LabSheetID
                    select c).FirstOrDefault();

            if (localLabSheet == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localLabSheet));
        }
        public async Task<ActionResult<List<LocalLabSheet>>> GetLocalLabSheetList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalLabSheet> localLabSheetList = (from c in db.LocalLabSheets.AsNoTracking() orderby c.LabSheetID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localLabSheetList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalLabSheetID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalLabSheet localLabSheet = (from c in db.LocalLabSheets
                    where c.LabSheetID == LocalLabSheetID
                    select c).FirstOrDefault();

            if (localLabSheet == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalLabSheet", "LocalLabSheetID", LocalLabSheetID.ToString())));
            }

            try
            {
                db.LocalLabSheets.Remove(localLabSheet);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalLabSheet>> Post(LocalLabSheet localLabSheet)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheet), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheets.Add(localLabSheet);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheet));
        }
        public async Task<ActionResult<LocalLabSheet>> Put(LocalLabSheet localLabSheet)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheet), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheets.Update(localLabSheet);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheet));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalLabSheet localLabSheet = validationContext.ObjectInstance as LocalLabSheet;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localLabSheet.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localLabSheet.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localLabSheet.LabSheetID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetID"), new[] { nameof(localLabSheet.LabSheetID) });
                }

                if (!(from c in db.LocalLabSheets.AsNoTracking() select c).Where(c => c.LabSheetID == localLabSheet.LabSheetID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LabSheet", "LabSheetID", localLabSheet.LabSheetID.ToString()), new[] { nameof(localLabSheet.LabSheetID) });
                }
            }

            if (localLabSheet.OtherServerLabSheetID < 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "OtherServerLabSheetID", "1"), new[] { nameof(localLabSheet.OtherServerLabSheetID) });
            }

            LocalSamplingPlan localSamplingPlanSamplingPlanID = null;
            localSamplingPlanSamplingPlanID = (from c in db.LocalSamplingPlans.AsNoTracking() where c.SamplingPlanID == localLabSheet.SamplingPlanID select c).FirstOrDefault();

            if (localSamplingPlanSamplingPlanID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalSamplingPlan", "SamplingPlanID", localLabSheet.SamplingPlanID.ToString()), new[] { nameof(localLabSheet.SamplingPlanID) });
            }

            if (string.IsNullOrWhiteSpace(localLabSheet.SamplingPlanName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SamplingPlanName"), new[] { nameof(localLabSheet.SamplingPlanName) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheet.SamplingPlanName) && (localLabSheet.SamplingPlanName.Length < 1 || localLabSheet.SamplingPlanName.Length > 250))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "SamplingPlanName", "1", "250"), new[] { nameof(localLabSheet.SamplingPlanName) });
            }

            if (localLabSheet.Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MinValueIs_, "Year", "1980"), new[] { nameof(localLabSheet.Year) });
            }

            if (localLabSheet.Month < 1 || localLabSheet.Month > 12)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Month", "1", "12"), new[] { nameof(localLabSheet.Month) });
            }

            if (localLabSheet.Day < 1 || localLabSheet.Day > 31)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Day", "1", "31"), new[] { nameof(localLabSheet.Day) });
            }

            if (localLabSheet.RunNumber < 1 || localLabSheet.RunNumber > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "RunNumber", "1", "100"), new[] { nameof(localLabSheet.RunNumber) });
            }

            LocalTVItem localTVItemSubsectorTVItemID = null;
            localTVItemSubsectorTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheet.SubsectorTVItemID select c).FirstOrDefault();

            if (localTVItemSubsectorTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "SubsectorTVItemID", localLabSheet.SubsectorTVItemID.ToString()), new[] { nameof(localLabSheet.SubsectorTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Subsector,
                };
                if (!AllowableTVTypes.Contains(localTVItemSubsectorTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), new[] { nameof(localLabSheet.SubsectorTVItemID) });
                }
            }

            if (localLabSheet.MWQMRunTVItemID != null)
            {
                LocalTVItem localTVItemMWQMRunTVItemID = null;
                localTVItemMWQMRunTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheet.MWQMRunTVItemID select c).FirstOrDefault();

                if (localTVItemMWQMRunTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "MWQMRunTVItemID", (localLabSheet.MWQMRunTVItemID == null ? "" : localLabSheet.MWQMRunTVItemID.ToString())), new[] { nameof(localLabSheet.MWQMRunTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.MWQMRun,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemMWQMRunTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MWQMRunTVItemID", "MWQMRun"), new[] { nameof(localLabSheet.MWQMRunTVItemID) });
                    }
                }
            }

            retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), (int?)localLabSheet.SamplingPlanType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SamplingPlanType"), new[] { nameof(localLabSheet.SamplingPlanType) });
            }

            retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), (int?)localLabSheet.SampleType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleType"), new[] { nameof(localLabSheet.SampleType) });
            }

            retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), (int?)localLabSheet.LabSheetType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetType"), new[] { nameof(localLabSheet.LabSheetType) });
            }

            retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), (int?)localLabSheet.LabSheetStatus);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetStatus"), new[] { nameof(localLabSheet.LabSheetStatus) });
            }

            if (string.IsNullOrWhiteSpace(localLabSheet.FileName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FileName"), new[] { nameof(localLabSheet.FileName) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheet.FileName) && (localLabSheet.FileName.Length < 1 || localLabSheet.FileName.Length > 250))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "FileName", "1", "250"), new[] { nameof(localLabSheet.FileName) });
            }

            if (localLabSheet.FileLastModifiedDate_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FileLastModifiedDate_Local"), new[] { nameof(localLabSheet.FileLastModifiedDate_Local) });
            }
            else
            {
                if (localLabSheet.FileLastModifiedDate_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "FileLastModifiedDate_Local", "1980"), new[] { nameof(localLabSheet.FileLastModifiedDate_Local) });
                }
            }

            if (string.IsNullOrWhiteSpace(localLabSheet.FileContent))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "FileContent"), new[] { nameof(localLabSheet.FileContent) });
            }

            //FileContent has no StringLength Attribute

            if (localLabSheet.AcceptedOrRejectedByContactTVItemID != null)
            {
                LocalTVItem localTVItemAcceptedOrRejectedByContactTVItemID = null;
                localTVItemAcceptedOrRejectedByContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheet.AcceptedOrRejectedByContactTVItemID select c).FirstOrDefault();

                if (localTVItemAcceptedOrRejectedByContactTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "AcceptedOrRejectedByContactTVItemID", (localLabSheet.AcceptedOrRejectedByContactTVItemID == null ? "" : localLabSheet.AcceptedOrRejectedByContactTVItemID.ToString())), new[] { nameof(localLabSheet.AcceptedOrRejectedByContactTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.Contact,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemAcceptedOrRejectedByContactTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "AcceptedOrRejectedByContactTVItemID", "Contact"), new[] { nameof(localLabSheet.AcceptedOrRejectedByContactTVItemID) });
                    }
                }
            }

            if (localLabSheet.AcceptedOrRejectedDateTime != null && ((DateTime)localLabSheet.AcceptedOrRejectedDateTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "AcceptedOrRejectedDateTime", "1980"), new[] { nameof(localLabSheet.AcceptedOrRejectedDateTime) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheet.RejectReason) && localLabSheet.RejectReason.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "RejectReason", "250"), new[] { nameof(localLabSheet.RejectReason) });
            }

            if (localLabSheet.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localLabSheet.LastUpdateDate_UTC) });
            }
            else
            {
                if (localLabSheet.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localLabSheet.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheet.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localLabSheet.LastUpdateContactTVItemID.ToString()), new[] { nameof(localLabSheet.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localLabSheet.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
