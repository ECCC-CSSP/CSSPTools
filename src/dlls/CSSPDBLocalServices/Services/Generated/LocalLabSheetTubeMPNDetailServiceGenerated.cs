/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalLabSheetTubeMPNDetailDBService
    {
        Task<ActionResult<bool>> Delete(int LocalLabSheetTubeMPNDetailID);
        Task<ActionResult<List<LocalLabSheetTubeMPNDetail>>> GetLocalLabSheetTubeMPNDetailList(int skip = 0, int take = 100);
        Task<ActionResult<LocalLabSheetTubeMPNDetail>> GetLocalLabSheetTubeMPNDetailWithLabSheetTubeMPNDetailID(int LabSheetTubeMPNDetailID);
        Task<ActionResult<LocalLabSheetTubeMPNDetail>> Post(LocalLabSheetTubeMPNDetail locallabsheettubempndetail);
        Task<ActionResult<LocalLabSheetTubeMPNDetail>> Put(LocalLabSheetTubeMPNDetail locallabsheettubempndetail);
    }
    public partial class LocalLabSheetTubeMPNDetailDBService : ControllerBase, ILocalLabSheetTubeMPNDetailDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetTubeMPNDetailDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalLabSheetTubeMPNDetail>> GetLocalLabSheetTubeMPNDetailWithLabSheetTubeMPNDetailID(int LabSheetTubeMPNDetailID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail = (from c in db.LocalLabSheetTubeMPNDetails.AsNoTracking()
                    where c.LabSheetTubeMPNDetailID == LabSheetTubeMPNDetailID
                    select c).FirstOrDefault();

            if (localLabSheetTubeMPNDetail == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localLabSheetTubeMPNDetail));
        }
        public async Task<ActionResult<List<LocalLabSheetTubeMPNDetail>>> GetLocalLabSheetTubeMPNDetailList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalLabSheetTubeMPNDetail> localLabSheetTubeMPNDetailList = (from c in db.LocalLabSheetTubeMPNDetails.AsNoTracking() orderby c.LabSheetTubeMPNDetailID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localLabSheetTubeMPNDetailList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalLabSheetTubeMPNDetailID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail = (from c in db.LocalLabSheetTubeMPNDetails
                    where c.LabSheetTubeMPNDetailID == LocalLabSheetTubeMPNDetailID
                    select c).FirstOrDefault();

            if (localLabSheetTubeMPNDetail == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalLabSheetTubeMPNDetail", "LocalLabSheetTubeMPNDetailID", LocalLabSheetTubeMPNDetailID.ToString())));
            }

            try
            {
                db.LocalLabSheetTubeMPNDetails.Remove(localLabSheetTubeMPNDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalLabSheetTubeMPNDetail>> Post(LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheetTubeMPNDetail), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheetTubeMPNDetails.Add(localLabSheetTubeMPNDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheetTubeMPNDetail));
        }
        public async Task<ActionResult<LocalLabSheetTubeMPNDetail>> Put(LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localLabSheetTubeMPNDetail), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalLabSheetTubeMPNDetails.Update(localLabSheetTubeMPNDetail);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localLabSheetTubeMPNDetail));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail = validationContext.ObjectInstance as LocalLabSheetTubeMPNDetail;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localLabSheetTubeMPNDetail.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localLabSheetTubeMPNDetail.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetTubeMPNDetailID"), new[] { nameof(localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID) });
                }

                if (!(from c in db.LocalLabSheetTubeMPNDetails.AsNoTracking() select c).Where(c => c.LabSheetTubeMPNDetailID == localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LabSheetTubeMPNDetail", "LabSheetTubeMPNDetailID", localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID.ToString()), new[] { nameof(localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID) });
                }
            }

            LocalLabSheetDetail localLabSheetDetailLabSheetDetailID = null;
            localLabSheetDetailLabSheetDetailID = (from c in db.LocalLabSheetDetails.AsNoTracking() where c.LabSheetDetailID == localLabSheetTubeMPNDetail.LabSheetDetailID select c).FirstOrDefault();

            if (localLabSheetDetailLabSheetDetailID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalLabSheetDetail", "LabSheetDetailID", localLabSheetTubeMPNDetail.LabSheetDetailID.ToString()), new[] { nameof(localLabSheetTubeMPNDetail.LabSheetDetailID) });
            }

            if (localLabSheetTubeMPNDetail.Ordinal < 0 || localLabSheetTubeMPNDetail.Ordinal > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "1000"), new[] { nameof(localLabSheetTubeMPNDetail.Ordinal) });
            }

            LocalTVItem localTVItemMWQMSiteTVItemID = null;
            localTVItemMWQMSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheetTubeMPNDetail.MWQMSiteTVItemID select c).FirstOrDefault();

            if (localTVItemMWQMSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MWQMSiteTVItemID", localLabSheetTubeMPNDetail.MWQMSiteTVItemID.ToString()), new[] { nameof(localLabSheetTubeMPNDetail.MWQMSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MWQMSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemMWQMSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MWQMSiteTVItemID", "MWQMSite"), new[] { nameof(localLabSheetTubeMPNDetail.MWQMSiteTVItemID) });
                }
            }

            if (localLabSheetTubeMPNDetail.SampleDateTime != null && ((DateTime)localLabSheetTubeMPNDetail.SampleDateTime).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "SampleDateTime", "1980"), new[] { nameof(localLabSheetTubeMPNDetail.SampleDateTime) });
            }

            if (localLabSheetTubeMPNDetail.MPN != null)
            {
                if (localLabSheetTubeMPNDetail.MPN < 1 || localLabSheetTubeMPNDetail.MPN > 10000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MPN", "1", "10000000"), new[] { nameof(localLabSheetTubeMPNDetail.MPN) });
                }
            }

            if (localLabSheetTubeMPNDetail.Tube10 != null)
            {
                if (localLabSheetTubeMPNDetail.Tube10 < 0 || localLabSheetTubeMPNDetail.Tube10 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube10", "0", "5"), new[] { nameof(localLabSheetTubeMPNDetail.Tube10) });
                }
            }

            if (localLabSheetTubeMPNDetail.Tube1_0 != null)
            {
                if (localLabSheetTubeMPNDetail.Tube1_0 < 0 || localLabSheetTubeMPNDetail.Tube1_0 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube1_0", "0", "5"), new[] { nameof(localLabSheetTubeMPNDetail.Tube1_0) });
                }
            }

            if (localLabSheetTubeMPNDetail.Tube0_1 != null)
            {
                if (localLabSheetTubeMPNDetail.Tube0_1 < 0 || localLabSheetTubeMPNDetail.Tube0_1 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube0_1", "0", "5"), new[] { nameof(localLabSheetTubeMPNDetail.Tube0_1) });
                }
            }

            if (localLabSheetTubeMPNDetail.Salinity != null)
            {
                if (localLabSheetTubeMPNDetail.Salinity < 0 || localLabSheetTubeMPNDetail.Salinity > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Salinity", "0", "40"), new[] { nameof(localLabSheetTubeMPNDetail.Salinity) });
                }
            }

            if (localLabSheetTubeMPNDetail.Temperature != null)
            {
                if (localLabSheetTubeMPNDetail.Temperature < -10 || localLabSheetTubeMPNDetail.Temperature > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Temperature", "-10", "40"), new[] { nameof(localLabSheetTubeMPNDetail.Temperature) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetail.ProcessedBy) && localLabSheetTubeMPNDetail.ProcessedBy.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ProcessedBy", "10"), new[] { nameof(localLabSheetTubeMPNDetail.ProcessedBy) });
            }

            retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), (int?)localLabSheetTubeMPNDetail.SampleType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleType"), new[] { nameof(localLabSheetTubeMPNDetail.SampleType) });
            }

            if (!string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetail.SiteComment) && localLabSheetTubeMPNDetail.SiteComment.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SiteComment", "250"), new[] { nameof(localLabSheetTubeMPNDetail.SiteComment) });
            }

            if (localLabSheetTubeMPNDetail.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localLabSheetTubeMPNDetail.LastUpdateDate_UTC) });
            }
            else
            {
                if (localLabSheetTubeMPNDetail.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localLabSheetTubeMPNDetail.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localLabSheetTubeMPNDetail.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localLabSheetTubeMPNDetail.LastUpdateContactTVItemID.ToString()), new[] { nameof(localLabSheetTubeMPNDetail.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localLabSheetTubeMPNDetail.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
