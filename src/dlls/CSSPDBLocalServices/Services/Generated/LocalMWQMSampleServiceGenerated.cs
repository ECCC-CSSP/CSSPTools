/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMWQMSampleDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMWQMSampleID);
        Task<ActionResult<List<LocalMWQMSample>>> GetLocalMWQMSampleList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMWQMSample>> GetLocalMWQMSampleWithMWQMSampleID(int MWQMSampleID);
        Task<ActionResult<LocalMWQMSample>> Post(LocalMWQMSample localmwqmsample);
        Task<ActionResult<LocalMWQMSample>> Put(LocalMWQMSample localmwqmsample);
    }
    public partial class LocalMWQMSampleDBService : ControllerBase, ILocalMWQMSampleDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSampleDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMWQMSample>> GetLocalMWQMSampleWithMWQMSampleID(int MWQMSampleID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMWQMSample localMWQMSample = (from c in db.LocalMWQMSamples.AsNoTracking()
                    where c.MWQMSampleID == MWQMSampleID
                    select c).FirstOrDefault();

            if (localMWQMSample == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMWQMSample));
        }
        public async Task<ActionResult<List<LocalMWQMSample>>> GetLocalMWQMSampleList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMWQMSample> localMWQMSampleList = (from c in db.LocalMWQMSamples.AsNoTracking() orderby c.MWQMSampleID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMWQMSampleList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMWQMSampleID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMWQMSample localMWQMSample = (from c in db.LocalMWQMSamples
                    where c.MWQMSampleID == LocalMWQMSampleID
                    select c).FirstOrDefault();

            if (localMWQMSample == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMWQMSample", "LocalMWQMSampleID", LocalMWQMSampleID.ToString())));
            }

            try
            {
                db.LocalMWQMSamples.Remove(localMWQMSample);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMWQMSample>> Post(LocalMWQMSample localMWQMSample)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSample), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSamples.Add(localMWQMSample);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSample));
        }
        public async Task<ActionResult<LocalMWQMSample>> Put(LocalMWQMSample localMWQMSample)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSample), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSamples.Update(localMWQMSample);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSample));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMWQMSample localMWQMSample = validationContext.ObjectInstance as LocalMWQMSample;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMWQMSample.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMWQMSample.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMWQMSample.MWQMSampleID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MWQMSampleID"), new[] { nameof(localMWQMSample.MWQMSampleID) });
                }

                if (!(from c in db.LocalMWQMSamples.AsNoTracking() select c).Where(c => c.MWQMSampleID == localMWQMSample.MWQMSampleID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MWQMSample", "MWQMSampleID", localMWQMSample.MWQMSampleID.ToString()), new[] { nameof(localMWQMSample.MWQMSampleID) });
                }
            }

            LocalTVItem localTVItemMWQMSiteTVItemID = null;
            localTVItemMWQMSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSample.MWQMSiteTVItemID select c).FirstOrDefault();

            if (localTVItemMWQMSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MWQMSiteTVItemID", localMWQMSample.MWQMSiteTVItemID.ToString()), new[] { nameof(localMWQMSample.MWQMSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MWQMSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemMWQMSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MWQMSiteTVItemID", "MWQMSite"), new[] { nameof(localMWQMSample.MWQMSiteTVItemID) });
                }
            }

            LocalTVItem localTVItemMWQMRunTVItemID = null;
            localTVItemMWQMRunTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSample.MWQMRunTVItemID select c).FirstOrDefault();

            if (localTVItemMWQMRunTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MWQMRunTVItemID", localMWQMSample.MWQMRunTVItemID.ToString()), new[] { nameof(localMWQMSample.MWQMRunTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MWQMRun,
                };
                if (!AllowableTVTypes.Contains(localTVItemMWQMRunTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MWQMRunTVItemID", "MWQMRun"), new[] { nameof(localMWQMSample.MWQMRunTVItemID) });
                }
            }

            if (localMWQMSample.SampleDateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleDateTime_Local"), new[] { nameof(localMWQMSample.SampleDateTime_Local) });
            }
            else
            {
                if (localMWQMSample.SampleDateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "SampleDateTime_Local", "1980"), new[] { nameof(localMWQMSample.SampleDateTime_Local) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSample.TimeText) && localMWQMSample.TimeText.Length > 6)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "TimeText", "6"), new[] { nameof(localMWQMSample.TimeText) });
            }

            if (localMWQMSample.Depth_m != null)
            {
                if (localMWQMSample.Depth_m < 0 || localMWQMSample.Depth_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Depth_m", "0", "1000"), new[] { nameof(localMWQMSample.Depth_m) });
                }
            }

            if (localMWQMSample.FecCol_MPN_100ml < 0 || localMWQMSample.FecCol_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FecCol_MPN_100ml", "0", "10000000"), new[] { nameof(localMWQMSample.FecCol_MPN_100ml) });
            }

            if (localMWQMSample.Salinity_PPT != null)
            {
                if (localMWQMSample.Salinity_PPT < 0 || localMWQMSample.Salinity_PPT > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Salinity_PPT", "0", "40"), new[] { nameof(localMWQMSample.Salinity_PPT) });
                }
            }

            if (localMWQMSample.WaterTemp_C != null)
            {
                if (localMWQMSample.WaterTemp_C < -10 || localMWQMSample.WaterTemp_C > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "WaterTemp_C", "-10", "40"), new[] { nameof(localMWQMSample.WaterTemp_C) });
                }
            }

            if (localMWQMSample.PH != null)
            {
                if (localMWQMSample.PH < 0 || localMWQMSample.PH > 14)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PH", "0", "14"), new[] { nameof(localMWQMSample.PH) });
                }
            }

            if (string.IsNullOrWhiteSpace(localMWQMSample.SampleTypesText))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleTypesText"), new[] { nameof(localMWQMSample.SampleTypesText) });
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSample.SampleTypesText) && localMWQMSample.SampleTypesText.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SampleTypesText", "50"), new[] { nameof(localMWQMSample.SampleTypesText) });
            }

            if (localMWQMSample.SampleType_old != null)
            {
                retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), (int?)localMWQMSample.SampleType_old);
                if (localMWQMSample.SampleType_old == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleType_old"), new[] { nameof(localMWQMSample.SampleType_old) });
                }
            }

            if (localMWQMSample.Tube_10 != null)
            {
                if (localMWQMSample.Tube_10 < 0 || localMWQMSample.Tube_10 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube_10", "0", "5"), new[] { nameof(localMWQMSample.Tube_10) });
                }
            }

            if (localMWQMSample.Tube_1_0 != null)
            {
                if (localMWQMSample.Tube_1_0 < 0 || localMWQMSample.Tube_1_0 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube_1_0", "0", "5"), new[] { nameof(localMWQMSample.Tube_1_0) });
                }
            }

            if (localMWQMSample.Tube_0_1 != null)
            {
                if (localMWQMSample.Tube_0_1 < 0 || localMWQMSample.Tube_0_1 > 5)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Tube_0_1", "0", "5"), new[] { nameof(localMWQMSample.Tube_0_1) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSample.ProcessedBy) && localMWQMSample.ProcessedBy.Length > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ProcessedBy", "10"), new[] { nameof(localMWQMSample.ProcessedBy) });
            }

            if (localMWQMSample.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMWQMSample.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMWQMSample.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMWQMSample.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSample.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMWQMSample.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMWQMSample.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMWQMSample.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
