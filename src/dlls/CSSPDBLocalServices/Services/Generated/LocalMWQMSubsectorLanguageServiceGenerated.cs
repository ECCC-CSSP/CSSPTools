/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMWQMSubsectorLanguageDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMWQMSubsectorLanguageID);
        Task<ActionResult<List<LocalMWQMSubsectorLanguage>>> GetLocalMWQMSubsectorLanguageList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMWQMSubsectorLanguage>> GetLocalMWQMSubsectorLanguageWithMWQMSubsectorLanguageID(int MWQMSubsectorLanguageID);
        Task<ActionResult<LocalMWQMSubsectorLanguage>> Post(LocalMWQMSubsectorLanguage localmwqmsubsectorlanguage);
        Task<ActionResult<LocalMWQMSubsectorLanguage>> Put(LocalMWQMSubsectorLanguage localmwqmsubsectorlanguage);
    }
    public partial class LocalMWQMSubsectorLanguageDBService : ControllerBase, ILocalMWQMSubsectorLanguageDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSubsectorLanguageDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMWQMSubsectorLanguage>> GetLocalMWQMSubsectorLanguageWithMWQMSubsectorLanguageID(int MWQMSubsectorLanguageID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMWQMSubsectorLanguage localMWQMSubsectorLanguage = (from c in db.LocalMWQMSubsectorLanguages.AsNoTracking()
                    where c.MWQMSubsectorLanguageID == MWQMSubsectorLanguageID
                    select c).FirstOrDefault();

            if (localMWQMSubsectorLanguage == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMWQMSubsectorLanguage));
        }
        public async Task<ActionResult<List<LocalMWQMSubsectorLanguage>>> GetLocalMWQMSubsectorLanguageList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMWQMSubsectorLanguage> localMWQMSubsectorLanguageList = (from c in db.LocalMWQMSubsectorLanguages.AsNoTracking() orderby c.MWQMSubsectorLanguageID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMWQMSubsectorLanguageList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMWQMSubsectorLanguageID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMWQMSubsectorLanguage localMWQMSubsectorLanguage = (from c in db.LocalMWQMSubsectorLanguages
                    where c.MWQMSubsectorLanguageID == LocalMWQMSubsectorLanguageID
                    select c).FirstOrDefault();

            if (localMWQMSubsectorLanguage == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMWQMSubsectorLanguage", "LocalMWQMSubsectorLanguageID", LocalMWQMSubsectorLanguageID.ToString())));
            }

            try
            {
                db.LocalMWQMSubsectorLanguages.Remove(localMWQMSubsectorLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMWQMSubsectorLanguage>> Post(LocalMWQMSubsectorLanguage localMWQMSubsectorLanguage)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSubsectorLanguage), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSubsectorLanguages.Add(localMWQMSubsectorLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSubsectorLanguage));
        }
        public async Task<ActionResult<LocalMWQMSubsectorLanguage>> Put(LocalMWQMSubsectorLanguage localMWQMSubsectorLanguage)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSubsectorLanguage), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSubsectorLanguages.Update(localMWQMSubsectorLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSubsectorLanguage));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMWQMSubsectorLanguage localMWQMSubsectorLanguage = validationContext.ObjectInstance as LocalMWQMSubsectorLanguage;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMWQMSubsectorLanguage.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMWQMSubsectorLanguage.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMWQMSubsectorLanguage.MWQMSubsectorLanguageID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MWQMSubsectorLanguageID"), new[] { nameof(localMWQMSubsectorLanguage.MWQMSubsectorLanguageID) });
                }

                if (!(from c in db.LocalMWQMSubsectorLanguages.AsNoTracking() select c).Where(c => c.MWQMSubsectorLanguageID == localMWQMSubsectorLanguage.MWQMSubsectorLanguageID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MWQMSubsectorLanguage", "MWQMSubsectorLanguageID", localMWQMSubsectorLanguage.MWQMSubsectorLanguageID.ToString()), new[] { nameof(localMWQMSubsectorLanguage.MWQMSubsectorLanguageID) });
                }
            }

            LocalMWQMSubsector localMWQMSubsectorMWQMSubsectorID = null;
            localMWQMSubsectorMWQMSubsectorID = (from c in db.LocalMWQMSubsectors.AsNoTracking() where c.MWQMSubsectorID == localMWQMSubsectorLanguage.MWQMSubsectorID select c).FirstOrDefault();

            if (localMWQMSubsectorMWQMSubsectorID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMWQMSubsector", "MWQMSubsectorID", localMWQMSubsectorLanguage.MWQMSubsectorID.ToString()), new[] { nameof(localMWQMSubsectorLanguage.MWQMSubsectorID) });
            }

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), (int?)localMWQMSubsectorLanguage.Language);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Language"), new[] { nameof(localMWQMSubsectorLanguage.Language) });
            }

            if (string.IsNullOrWhiteSpace(localMWQMSubsectorLanguage.SubsectorDesc))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SubsectorDesc"), new[] { nameof(localMWQMSubsectorLanguage.SubsectorDesc) });
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSubsectorLanguage.SubsectorDesc) && localMWQMSubsectorLanguage.SubsectorDesc.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SubsectorDesc", "250"), new[] { nameof(localMWQMSubsectorLanguage.SubsectorDesc) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localMWQMSubsectorLanguage.TranslationStatusSubsectorDesc);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusSubsectorDesc"), new[] { nameof(localMWQMSubsectorLanguage.TranslationStatusSubsectorDesc) });
            }

            //LogBook has no StringLength Attribute

            if (localMWQMSubsectorLanguage.TranslationStatusLogBook != null)
            {
                retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localMWQMSubsectorLanguage.TranslationStatusLogBook);
                if (localMWQMSubsectorLanguage.TranslationStatusLogBook == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusLogBook"), new[] { nameof(localMWQMSubsectorLanguage.TranslationStatusLogBook) });
                }
            }

            if (localMWQMSubsectorLanguage.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMWQMSubsectorLanguage.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMWQMSubsectorLanguage.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMWQMSubsectorLanguage.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSubsectorLanguage.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMWQMSubsectorLanguage.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMWQMSubsectorLanguage.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMWQMSubsectorLanguage.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
