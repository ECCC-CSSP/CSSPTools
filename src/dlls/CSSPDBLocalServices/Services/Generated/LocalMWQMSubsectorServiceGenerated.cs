/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMWQMSubsectorDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMWQMSubsectorID);
        Task<ActionResult<List<LocalMWQMSubsector>>> GetLocalMWQMSubsectorList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMWQMSubsector>> GetLocalMWQMSubsectorWithMWQMSubsectorID(int MWQMSubsectorID);
        Task<ActionResult<LocalMWQMSubsector>> Post(LocalMWQMSubsector localmwqmsubsector);
        Task<ActionResult<LocalMWQMSubsector>> Put(LocalMWQMSubsector localmwqmsubsector);
    }
    public partial class LocalMWQMSubsectorDBService : ControllerBase, ILocalMWQMSubsectorDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSubsectorDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMWQMSubsector>> GetLocalMWQMSubsectorWithMWQMSubsectorID(int MWQMSubsectorID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMWQMSubsector localMWQMSubsector = (from c in db.LocalMWQMSubsectors.AsNoTracking()
                    where c.MWQMSubsectorID == MWQMSubsectorID
                    select c).FirstOrDefault();

            if (localMWQMSubsector == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMWQMSubsector));
        }
        public async Task<ActionResult<List<LocalMWQMSubsector>>> GetLocalMWQMSubsectorList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMWQMSubsector> localMWQMSubsectorList = (from c in db.LocalMWQMSubsectors.AsNoTracking() orderby c.MWQMSubsectorID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMWQMSubsectorList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMWQMSubsectorID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMWQMSubsector localMWQMSubsector = (from c in db.LocalMWQMSubsectors
                    where c.MWQMSubsectorID == LocalMWQMSubsectorID
                    select c).FirstOrDefault();

            if (localMWQMSubsector == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMWQMSubsector", "LocalMWQMSubsectorID", LocalMWQMSubsectorID.ToString())));
            }

            try
            {
                db.LocalMWQMSubsectors.Remove(localMWQMSubsector);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMWQMSubsector>> Post(LocalMWQMSubsector localMWQMSubsector)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSubsector), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSubsectors.Add(localMWQMSubsector);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSubsector));
        }
        public async Task<ActionResult<LocalMWQMSubsector>> Put(LocalMWQMSubsector localMWQMSubsector)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMWQMSubsector), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMWQMSubsectors.Update(localMWQMSubsector);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMWQMSubsector));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMWQMSubsector localMWQMSubsector = validationContext.ObjectInstance as LocalMWQMSubsector;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMWQMSubsector.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMWQMSubsector.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMWQMSubsector.MWQMSubsectorID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MWQMSubsectorID"), new[] { nameof(localMWQMSubsector.MWQMSubsectorID) });
                }

                if (!(from c in db.LocalMWQMSubsectors.AsNoTracking() select c).Where(c => c.MWQMSubsectorID == localMWQMSubsector.MWQMSubsectorID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MWQMSubsector", "MWQMSubsectorID", localMWQMSubsector.MWQMSubsectorID.ToString()), new[] { nameof(localMWQMSubsector.MWQMSubsectorID) });
                }
            }

            LocalTVItem localTVItemMWQMSubsectorTVItemID = null;
            localTVItemMWQMSubsectorTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSubsector.MWQMSubsectorTVItemID select c).FirstOrDefault();

            if (localTVItemMWQMSubsectorTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MWQMSubsectorTVItemID", localMWQMSubsector.MWQMSubsectorTVItemID.ToString()), new[] { nameof(localMWQMSubsector.MWQMSubsectorTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Subsector,
                };
                if (!AllowableTVTypes.Contains(localTVItemMWQMSubsectorTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MWQMSubsectorTVItemID", "Subsector"), new[] { nameof(localMWQMSubsector.MWQMSubsectorTVItemID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localMWQMSubsector.SubsectorHistoricKey))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SubsectorHistoricKey"), new[] { nameof(localMWQMSubsector.SubsectorHistoricKey) });
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSubsector.SubsectorHistoricKey) && localMWQMSubsector.SubsectorHistoricKey.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SubsectorHistoricKey", "20"), new[] { nameof(localMWQMSubsector.SubsectorHistoricKey) });
            }

            if (!string.IsNullOrWhiteSpace(localMWQMSubsector.TideLocationSIDText) && localMWQMSubsector.TideLocationSIDText.Length > 20)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "TideLocationSIDText", "20"), new[] { nameof(localMWQMSubsector.TideLocationSIDText) });
            }

            if (localMWQMSubsector.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMWQMSubsector.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMWQMSubsector.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMWQMSubsector.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMWQMSubsector.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMWQMSubsector.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMWQMSubsector.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMWQMSubsector.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
