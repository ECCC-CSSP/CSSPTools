/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMikeBoundaryConditionDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMikeBoundaryConditionID);
        Task<ActionResult<List<LocalMikeBoundaryCondition>>> GetLocalMikeBoundaryConditionList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMikeBoundaryCondition>> GetLocalMikeBoundaryConditionWithMikeBoundaryConditionID(int MikeBoundaryConditionID);
        Task<ActionResult<LocalMikeBoundaryCondition>> Post(LocalMikeBoundaryCondition localmikeboundarycondition);
        Task<ActionResult<LocalMikeBoundaryCondition>> Put(LocalMikeBoundaryCondition localmikeboundarycondition);
    }
    public partial class LocalMikeBoundaryConditionDBService : ControllerBase, ILocalMikeBoundaryConditionDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeBoundaryConditionDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMikeBoundaryCondition>> GetLocalMikeBoundaryConditionWithMikeBoundaryConditionID(int MikeBoundaryConditionID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMikeBoundaryCondition localMikeBoundaryCondition = (from c in db.LocalMikeBoundaryConditions.AsNoTracking()
                    where c.MikeBoundaryConditionID == MikeBoundaryConditionID
                    select c).FirstOrDefault();

            if (localMikeBoundaryCondition == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMikeBoundaryCondition));
        }
        public async Task<ActionResult<List<LocalMikeBoundaryCondition>>> GetLocalMikeBoundaryConditionList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMikeBoundaryCondition> localMikeBoundaryConditionList = (from c in db.LocalMikeBoundaryConditions.AsNoTracking() orderby c.MikeBoundaryConditionID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMikeBoundaryConditionList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMikeBoundaryConditionID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMikeBoundaryCondition localMikeBoundaryCondition = (from c in db.LocalMikeBoundaryConditions
                    where c.MikeBoundaryConditionID == LocalMikeBoundaryConditionID
                    select c).FirstOrDefault();

            if (localMikeBoundaryCondition == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMikeBoundaryCondition", "LocalMikeBoundaryConditionID", LocalMikeBoundaryConditionID.ToString())));
            }

            try
            {
                db.LocalMikeBoundaryConditions.Remove(localMikeBoundaryCondition);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMikeBoundaryCondition>> Post(LocalMikeBoundaryCondition localMikeBoundaryCondition)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeBoundaryCondition), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeBoundaryConditions.Add(localMikeBoundaryCondition);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeBoundaryCondition));
        }
        public async Task<ActionResult<LocalMikeBoundaryCondition>> Put(LocalMikeBoundaryCondition localMikeBoundaryCondition)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeBoundaryCondition), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeBoundaryConditions.Update(localMikeBoundaryCondition);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeBoundaryCondition));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMikeBoundaryCondition localMikeBoundaryCondition = validationContext.ObjectInstance as LocalMikeBoundaryCondition;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMikeBoundaryCondition.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMikeBoundaryCondition.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMikeBoundaryCondition.MikeBoundaryConditionID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeBoundaryConditionID"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionID) });
                }

                if (!(from c in db.LocalMikeBoundaryConditions.AsNoTracking() select c).Where(c => c.MikeBoundaryConditionID == localMikeBoundaryCondition.MikeBoundaryConditionID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MikeBoundaryCondition", "MikeBoundaryConditionID", localMikeBoundaryCondition.MikeBoundaryConditionID.ToString()), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionID) });
                }
            }

            LocalTVItem localTVItemMikeBoundaryConditionTVItemID = null;
            localTVItemMikeBoundaryConditionTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeBoundaryCondition.MikeBoundaryConditionTVItemID select c).FirstOrDefault();

            if (localTVItemMikeBoundaryConditionTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MikeBoundaryConditionTVItemID", localMikeBoundaryCondition.MikeBoundaryConditionTVItemID.ToString()), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MikeBoundaryConditionMesh,
                    TVTypeEnum.MikeBoundaryConditionWebTide,
                };
                if (!AllowableTVTypes.Contains(localTVItemMikeBoundaryConditionTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MikeBoundaryConditionTVItemID", "MikeBoundaryConditionMesh,MikeBoundaryConditionWebTide"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionTVItemID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionCode))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeBoundaryConditionCode"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionCode) });
            }

            if (!string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionCode) && localMikeBoundaryCondition.MikeBoundaryConditionCode.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "MikeBoundaryConditionCode", "100"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionCode) });
            }

            if (string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeBoundaryConditionName"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionName) });
            }

            if (!string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionName) && localMikeBoundaryCondition.MikeBoundaryConditionName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "MikeBoundaryConditionName", "100"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionName) });
            }

            if (localMikeBoundaryCondition.MikeBoundaryConditionLength_m < 1 || localMikeBoundaryCondition.MikeBoundaryConditionLength_m > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MikeBoundaryConditionLength_m", "1", "100000"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionLength_m) });
            }

            if (string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionFormat))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeBoundaryConditionFormat"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionFormat) });
            }

            if (!string.IsNullOrWhiteSpace(localMikeBoundaryCondition.MikeBoundaryConditionFormat) && localMikeBoundaryCondition.MikeBoundaryConditionFormat.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "MikeBoundaryConditionFormat", "100"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionFormat) });
            }

            retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), (int?)localMikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeBoundaryConditionLevelOrVelocity"), new[] { nameof(localMikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity) });
            }

            retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), (int?)localMikeBoundaryCondition.WebTideDataSet);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "WebTideDataSet"), new[] { nameof(localMikeBoundaryCondition.WebTideDataSet) });
            }

            if (localMikeBoundaryCondition.NumberOfWebTideNodes < 0 || localMikeBoundaryCondition.NumberOfWebTideNodes > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfWebTideNodes", "0", "1000"), new[] { nameof(localMikeBoundaryCondition.NumberOfWebTideNodes) });
            }

            if (string.IsNullOrWhiteSpace(localMikeBoundaryCondition.WebTideDataFromStartToEndDate))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "WebTideDataFromStartToEndDate"), new[] { nameof(localMikeBoundaryCondition.WebTideDataFromStartToEndDate) });
            }

            //WebTideDataFromStartToEndDate has no StringLength Attribute

            retStr = enums.EnumTypeOK(typeof(TVTypeEnum), (int?)localMikeBoundaryCondition.TVType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TVType"), new[] { nameof(localMikeBoundaryCondition.TVType) });
            }

            if (localMikeBoundaryCondition.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMikeBoundaryCondition.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMikeBoundaryCondition.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMikeBoundaryCondition.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeBoundaryCondition.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMikeBoundaryCondition.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMikeBoundaryCondition.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMikeBoundaryCondition.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
