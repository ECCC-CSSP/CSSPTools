/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMikeScenarioResultDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMikeScenarioResultID);
        Task<ActionResult<List<LocalMikeScenarioResult>>> GetLocalMikeScenarioResultList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMikeScenarioResult>> GetLocalMikeScenarioResultWithMikeScenarioResultID(int MikeScenarioResultID);
        Task<ActionResult<LocalMikeScenarioResult>> Post(LocalMikeScenarioResult localmikescenarioresult);
        Task<ActionResult<LocalMikeScenarioResult>> Put(LocalMikeScenarioResult localmikescenarioresult);
    }
    public partial class LocalMikeScenarioResultDBService : ControllerBase, ILocalMikeScenarioResultDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeScenarioResultDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMikeScenarioResult>> GetLocalMikeScenarioResultWithMikeScenarioResultID(int MikeScenarioResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMikeScenarioResult localMikeScenarioResult = (from c in db.LocalMikeScenarioResults.AsNoTracking()
                    where c.MikeScenarioResultID == MikeScenarioResultID
                    select c).FirstOrDefault();

            if (localMikeScenarioResult == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMikeScenarioResult));
        }
        public async Task<ActionResult<List<LocalMikeScenarioResult>>> GetLocalMikeScenarioResultList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMikeScenarioResult> localMikeScenarioResultList = (from c in db.LocalMikeScenarioResults.AsNoTracking() orderby c.MikeScenarioResultID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMikeScenarioResultList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMikeScenarioResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMikeScenarioResult localMikeScenarioResult = (from c in db.LocalMikeScenarioResults
                    where c.MikeScenarioResultID == LocalMikeScenarioResultID
                    select c).FirstOrDefault();

            if (localMikeScenarioResult == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMikeScenarioResult", "LocalMikeScenarioResultID", LocalMikeScenarioResultID.ToString())));
            }

            try
            {
                db.LocalMikeScenarioResults.Remove(localMikeScenarioResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMikeScenarioResult>> Post(LocalMikeScenarioResult localMikeScenarioResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeScenarioResult), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeScenarioResults.Add(localMikeScenarioResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeScenarioResult));
        }
        public async Task<ActionResult<LocalMikeScenarioResult>> Put(LocalMikeScenarioResult localMikeScenarioResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeScenarioResult), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeScenarioResults.Update(localMikeScenarioResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeScenarioResult));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMikeScenarioResult localMikeScenarioResult = validationContext.ObjectInstance as LocalMikeScenarioResult;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMikeScenarioResult.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMikeScenarioResult.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMikeScenarioResult.MikeScenarioResultID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeScenarioResultID"), new[] { nameof(localMikeScenarioResult.MikeScenarioResultID) });
                }

                if (!(from c in db.LocalMikeScenarioResults.AsNoTracking() select c).Where(c => c.MikeScenarioResultID == localMikeScenarioResult.MikeScenarioResultID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MikeScenarioResult", "MikeScenarioResultID", localMikeScenarioResult.MikeScenarioResultID.ToString()), new[] { nameof(localMikeScenarioResult.MikeScenarioResultID) });
                }
            }

            LocalTVItem localTVItemMikeScenarioTVItemID = null;
            localTVItemMikeScenarioTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenarioResult.MikeScenarioTVItemID select c).FirstOrDefault();

            if (localTVItemMikeScenarioTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MikeScenarioTVItemID", localMikeScenarioResult.MikeScenarioTVItemID.ToString()), new[] { nameof(localMikeScenarioResult.MikeScenarioTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MikeScenario,
                };
                if (!AllowableTVTypes.Contains(localTVItemMikeScenarioTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MikeScenarioTVItemID", "MikeScenario"), new[] { nameof(localMikeScenarioResult.MikeScenarioTVItemID) });
                }
            }

            //MikeResultsJSON has no StringLength Attribute

            if (localMikeScenarioResult.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMikeScenarioResult.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMikeScenarioResult.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMikeScenarioResult.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenarioResult.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMikeScenarioResult.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMikeScenarioResult.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMikeScenarioResult.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
