/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMikeScenarioDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMikeScenarioID);
        Task<ActionResult<List<LocalMikeScenario>>> GetLocalMikeScenarioList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMikeScenario>> GetLocalMikeScenarioWithMikeScenarioID(int MikeScenarioID);
        Task<ActionResult<LocalMikeScenario>> Post(LocalMikeScenario localmikescenario);
        Task<ActionResult<LocalMikeScenario>> Put(LocalMikeScenario localmikescenario);
    }
    public partial class LocalMikeScenarioDBService : ControllerBase, ILocalMikeScenarioDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeScenarioDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMikeScenario>> GetLocalMikeScenarioWithMikeScenarioID(int MikeScenarioID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMikeScenario localMikeScenario = (from c in db.LocalMikeScenarios.AsNoTracking()
                    where c.MikeScenarioID == MikeScenarioID
                    select c).FirstOrDefault();

            if (localMikeScenario == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMikeScenario));
        }
        public async Task<ActionResult<List<LocalMikeScenario>>> GetLocalMikeScenarioList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMikeScenario> localMikeScenarioList = (from c in db.LocalMikeScenarios.AsNoTracking() orderby c.MikeScenarioID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMikeScenarioList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMikeScenarioID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMikeScenario localMikeScenario = (from c in db.LocalMikeScenarios
                    where c.MikeScenarioID == LocalMikeScenarioID
                    select c).FirstOrDefault();

            if (localMikeScenario == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMikeScenario", "LocalMikeScenarioID", LocalMikeScenarioID.ToString())));
            }

            try
            {
                db.LocalMikeScenarios.Remove(localMikeScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMikeScenario>> Post(LocalMikeScenario localMikeScenario)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeScenario), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeScenarios.Add(localMikeScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeScenario));
        }
        public async Task<ActionResult<LocalMikeScenario>> Put(LocalMikeScenario localMikeScenario)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeScenario), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeScenarios.Update(localMikeScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeScenario));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMikeScenario localMikeScenario = validationContext.ObjectInstance as LocalMikeScenario;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMikeScenario.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMikeScenario.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMikeScenario.MikeScenarioID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeScenarioID"), new[] { nameof(localMikeScenario.MikeScenarioID) });
                }

                if (!(from c in db.LocalMikeScenarios.AsNoTracking() select c).Where(c => c.MikeScenarioID == localMikeScenario.MikeScenarioID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MikeScenario", "MikeScenarioID", localMikeScenario.MikeScenarioID.ToString()), new[] { nameof(localMikeScenario.MikeScenarioID) });
                }
            }

            LocalTVItem localTVItemMikeScenarioTVItemID = null;
            localTVItemMikeScenarioTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenario.MikeScenarioTVItemID select c).FirstOrDefault();

            if (localTVItemMikeScenarioTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MikeScenarioTVItemID", localMikeScenario.MikeScenarioTVItemID.ToString()), new[] { nameof(localMikeScenario.MikeScenarioTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.MikeScenario,
                };
                if (!AllowableTVTypes.Contains(localTVItemMikeScenarioTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MikeScenarioTVItemID", "MikeScenario"), new[] { nameof(localMikeScenario.MikeScenarioTVItemID) });
                }
            }

            if (localMikeScenario.ParentMikeScenarioID != null)
            {
                LocalMikeScenario localMikeScenarioParentMikeScenarioID = null;
                localMikeScenarioParentMikeScenarioID = (from c in db.LocalMikeScenarios.AsNoTracking() where c.MikeScenarioID == localMikeScenario.ParentMikeScenarioID select c).FirstOrDefault();

                if (localMikeScenarioParentMikeScenarioID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MikeScenario", "ParentMikeScenarioID", (localMikeScenario.ParentMikeScenarioID == null ? "" : localMikeScenario.ParentMikeScenarioID.ToString())), new[] { nameof(localMikeScenario.ParentMikeScenarioID) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), (int?)localMikeScenario.ScenarioStatus);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ScenarioStatus"), new[] { nameof(localMikeScenario.ScenarioStatus) });
            }

            //ErrorInfo has no StringLength Attribute

            if (localMikeScenario.MikeScenarioStartDateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeScenarioStartDateTime_Local"), new[] { nameof(localMikeScenario.MikeScenarioStartDateTime_Local) });
            }
            else
            {
                if (localMikeScenario.MikeScenarioStartDateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "MikeScenarioStartDateTime_Local", "1980"), new[] { nameof(localMikeScenario.MikeScenarioStartDateTime_Local) });
                }
            }

            if (localMikeScenario.MikeScenarioEndDateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeScenarioEndDateTime_Local"), new[] { nameof(localMikeScenario.MikeScenarioEndDateTime_Local) });
            }
            else
            {
                if (localMikeScenario.MikeScenarioEndDateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "MikeScenarioEndDateTime_Local", "1980"), new[] { nameof(localMikeScenario.MikeScenarioEndDateTime_Local) });
                }
            }

            if (localMikeScenario.MikeScenarioStartExecutionDateTime_Local != null && ((DateTime)localMikeScenario.MikeScenarioStartExecutionDateTime_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "MikeScenarioStartExecutionDateTime_Local", "1980"), new[] { nameof(localMikeScenario.MikeScenarioStartExecutionDateTime_Local) });
            }

            if (localMikeScenario.MikeScenarioExecutionTime_min != null)
            {
                if (localMikeScenario.MikeScenarioExecutionTime_min < 1 || localMikeScenario.MikeScenarioExecutionTime_min > 100000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MikeScenarioExecutionTime_min", "1", "100000"), new[] { nameof(localMikeScenario.MikeScenarioExecutionTime_min) });
                }
            }

            if (localMikeScenario.WindSpeed_km_h < 0 || localMikeScenario.WindSpeed_km_h > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "WindSpeed_km_h", "0", "100"), new[] { nameof(localMikeScenario.WindSpeed_km_h) });
            }

            if (localMikeScenario.WindDirection_deg < 0 || localMikeScenario.WindDirection_deg > 360)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "WindDirection_deg", "0", "360"), new[] { nameof(localMikeScenario.WindDirection_deg) });
            }

            if (localMikeScenario.DecayFactor_per_day < 0 || localMikeScenario.DecayFactor_per_day > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DecayFactor_per_day", "0", "100"), new[] { nameof(localMikeScenario.DecayFactor_per_day) });
            }

            if (localMikeScenario.DecayFactorAmplitude < 0 || localMikeScenario.DecayFactorAmplitude > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DecayFactorAmplitude", "0", "100"), new[] { nameof(localMikeScenario.DecayFactorAmplitude) });
            }

            if (localMikeScenario.ResultFrequency_min < 0 || localMikeScenario.ResultFrequency_min > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ResultFrequency_min", "0", "100"), new[] { nameof(localMikeScenario.ResultFrequency_min) });
            }

            if (localMikeScenario.AmbientTemperature_C < -10 || localMikeScenario.AmbientTemperature_C > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AmbientTemperature_C", "-10", "40"), new[] { nameof(localMikeScenario.AmbientTemperature_C) });
            }

            if (localMikeScenario.AmbientSalinity_PSU < 0 || localMikeScenario.AmbientSalinity_PSU > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AmbientSalinity_PSU", "0", "40"), new[] { nameof(localMikeScenario.AmbientSalinity_PSU) });
            }

            if (localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID != null)
            {
                LocalTVItem localTVItemUseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = null;
                localTVItemUseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID select c).FirstOrDefault();

                if (localTVItemUseSalinityAndTemperatureInitialConditionFromTVFileTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID", (localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID == null ? "" : localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID.ToString())), new[] { nameof(localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.File,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemUseSalinityAndTemperatureInitialConditionFromTVFileTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID", "File"), new[] { nameof(localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID) });
                    }
                }
            }

            if (localMikeScenario.ForSimulatingMWQMRunTVItemID != null)
            {
                LocalTVItem localTVItemForSimulatingMWQMRunTVItemID = null;
                localTVItemForSimulatingMWQMRunTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenario.ForSimulatingMWQMRunTVItemID select c).FirstOrDefault();

                if (localTVItemForSimulatingMWQMRunTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "ForSimulatingMWQMRunTVItemID", (localMikeScenario.ForSimulatingMWQMRunTVItemID == null ? "" : localMikeScenario.ForSimulatingMWQMRunTVItemID.ToString())), new[] { nameof(localMikeScenario.ForSimulatingMWQMRunTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.MWQMRun,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemForSimulatingMWQMRunTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ForSimulatingMWQMRunTVItemID", "MWQMRun"), new[] { nameof(localMikeScenario.ForSimulatingMWQMRunTVItemID) });
                    }
                }
            }

            if (localMikeScenario.ManningNumber < 0 || localMikeScenario.ManningNumber > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ManningNumber", "0", "100"), new[] { nameof(localMikeScenario.ManningNumber) });
            }

            if (localMikeScenario.NumberOfElements != null)
            {
                if (localMikeScenario.NumberOfElements < 1 || localMikeScenario.NumberOfElements > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfElements", "1", "1000000"), new[] { nameof(localMikeScenario.NumberOfElements) });
                }
            }

            if (localMikeScenario.NumberOfTimeSteps != null)
            {
                if (localMikeScenario.NumberOfTimeSteps < 1 || localMikeScenario.NumberOfTimeSteps > 1000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfTimeSteps", "1", "1000000"), new[] { nameof(localMikeScenario.NumberOfTimeSteps) });
                }
            }

            if (localMikeScenario.NumberOfSigmaLayers != null)
            {
                if (localMikeScenario.NumberOfSigmaLayers < 0 || localMikeScenario.NumberOfSigmaLayers > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfSigmaLayers", "0", "100"), new[] { nameof(localMikeScenario.NumberOfSigmaLayers) });
                }
            }

            if (localMikeScenario.NumberOfZLayers != null)
            {
                if (localMikeScenario.NumberOfZLayers < 0 || localMikeScenario.NumberOfZLayers > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfZLayers", "0", "100"), new[] { nameof(localMikeScenario.NumberOfZLayers) });
                }
            }

            if (localMikeScenario.NumberOfHydroOutputParameters != null)
            {
                if (localMikeScenario.NumberOfHydroOutputParameters < 0 || localMikeScenario.NumberOfHydroOutputParameters > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfHydroOutputParameters", "0", "100"), new[] { nameof(localMikeScenario.NumberOfHydroOutputParameters) });
                }
            }

            if (localMikeScenario.NumberOfTransOutputParameters != null)
            {
                if (localMikeScenario.NumberOfTransOutputParameters < 0 || localMikeScenario.NumberOfTransOutputParameters > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfTransOutputParameters", "0", "100"), new[] { nameof(localMikeScenario.NumberOfTransOutputParameters) });
                }
            }

            if (localMikeScenario.EstimatedHydroFileSize != null)
            {
                if (localMikeScenario.EstimatedHydroFileSize < 0 || localMikeScenario.EstimatedHydroFileSize > 100000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EstimatedHydroFileSize", "0", "100000000"), new[] { nameof(localMikeScenario.EstimatedHydroFileSize) });
                }
            }

            if (localMikeScenario.EstimatedTransFileSize != null)
            {
                if (localMikeScenario.EstimatedTransFileSize < 0 || localMikeScenario.EstimatedTransFileSize > 100000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EstimatedTransFileSize", "0", "100000000"), new[] { nameof(localMikeScenario.EstimatedTransFileSize) });
                }
            }

            if (localMikeScenario.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMikeScenario.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMikeScenario.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMikeScenario.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeScenario.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMikeScenario.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMikeScenario.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMikeScenario.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
