/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalMikeSourceStartEndDBService
    {
        Task<ActionResult<bool>> Delete(int LocalMikeSourceStartEndID);
        Task<ActionResult<List<LocalMikeSourceStartEnd>>> GetLocalMikeSourceStartEndList(int skip = 0, int take = 100);
        Task<ActionResult<LocalMikeSourceStartEnd>> GetLocalMikeSourceStartEndWithMikeSourceStartEndID(int MikeSourceStartEndID);
        Task<ActionResult<LocalMikeSourceStartEnd>> Post(LocalMikeSourceStartEnd localmikesourcestartend);
        Task<ActionResult<LocalMikeSourceStartEnd>> Put(LocalMikeSourceStartEnd localmikesourcestartend);
    }
    public partial class LocalMikeSourceStartEndDBService : ControllerBase, ILocalMikeSourceStartEndDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeSourceStartEndDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalMikeSourceStartEnd>> GetLocalMikeSourceStartEndWithMikeSourceStartEndID(int MikeSourceStartEndID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalMikeSourceStartEnd localMikeSourceStartEnd = (from c in db.LocalMikeSourceStartEnds.AsNoTracking()
                    where c.MikeSourceStartEndID == MikeSourceStartEndID
                    select c).FirstOrDefault();

            if (localMikeSourceStartEnd == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localMikeSourceStartEnd));
        }
        public async Task<ActionResult<List<LocalMikeSourceStartEnd>>> GetLocalMikeSourceStartEndList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalMikeSourceStartEnd> localMikeSourceStartEndList = (from c in db.LocalMikeSourceStartEnds.AsNoTracking() orderby c.MikeSourceStartEndID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localMikeSourceStartEndList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalMikeSourceStartEndID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalMikeSourceStartEnd localMikeSourceStartEnd = (from c in db.LocalMikeSourceStartEnds
                    where c.MikeSourceStartEndID == LocalMikeSourceStartEndID
                    select c).FirstOrDefault();

            if (localMikeSourceStartEnd == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMikeSourceStartEnd", "LocalMikeSourceStartEndID", LocalMikeSourceStartEndID.ToString())));
            }

            try
            {
                db.LocalMikeSourceStartEnds.Remove(localMikeSourceStartEnd);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalMikeSourceStartEnd>> Post(LocalMikeSourceStartEnd localMikeSourceStartEnd)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeSourceStartEnd), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeSourceStartEnds.Add(localMikeSourceStartEnd);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeSourceStartEnd));
        }
        public async Task<ActionResult<LocalMikeSourceStartEnd>> Put(LocalMikeSourceStartEnd localMikeSourceStartEnd)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localMikeSourceStartEnd), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalMikeSourceStartEnds.Update(localMikeSourceStartEnd);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localMikeSourceStartEnd));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalMikeSourceStartEnd localMikeSourceStartEnd = validationContext.ObjectInstance as LocalMikeSourceStartEnd;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localMikeSourceStartEnd.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localMikeSourceStartEnd.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localMikeSourceStartEnd.MikeSourceStartEndID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "MikeSourceStartEndID"), new[] { nameof(localMikeSourceStartEnd.MikeSourceStartEndID) });
                }

                if (!(from c in db.LocalMikeSourceStartEnds.AsNoTracking() select c).Where(c => c.MikeSourceStartEndID == localMikeSourceStartEnd.MikeSourceStartEndID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "MikeSourceStartEnd", "MikeSourceStartEndID", localMikeSourceStartEnd.MikeSourceStartEndID.ToString()), new[] { nameof(localMikeSourceStartEnd.MikeSourceStartEndID) });
                }
            }

            LocalMikeSource localMikeSourceMikeSourceID = null;
            localMikeSourceMikeSourceID = (from c in db.LocalMikeSources.AsNoTracking() where c.MikeSourceID == localMikeSourceStartEnd.MikeSourceID select c).FirstOrDefault();

            if (localMikeSourceMikeSourceID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalMikeSource", "MikeSourceID", localMikeSourceStartEnd.MikeSourceID.ToString()), new[] { nameof(localMikeSourceStartEnd.MikeSourceID) });
            }

            if (localMikeSourceStartEnd.StartDateAndTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "StartDateAndTime_Local"), new[] { nameof(localMikeSourceStartEnd.StartDateAndTime_Local) });
            }
            else
            {
                if (localMikeSourceStartEnd.StartDateAndTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "StartDateAndTime_Local", "1980"), new[] { nameof(localMikeSourceStartEnd.StartDateAndTime_Local) });
                }
            }

            if (localMikeSourceStartEnd.EndDateAndTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "EndDateAndTime_Local"), new[] { nameof(localMikeSourceStartEnd.EndDateAndTime_Local) });
            }
            else
            {
                if (localMikeSourceStartEnd.EndDateAndTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "EndDateAndTime_Local", "1980"), new[] { nameof(localMikeSourceStartEnd.EndDateAndTime_Local) });
                }
            }

            if (localMikeSourceStartEnd.StartDateAndTime_Local > localMikeSourceStartEnd.EndDateAndTime_Local)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._DateIsBiggerThan_, "EndDateAndTime_Local", "LocalMikeSourceStartEndStartDateAndTime_Local"), new[] { nameof(localMikeSourceStartEnd.EndDateAndTime_Local) });
            }

            if (localMikeSourceStartEnd.SourceFlowStart_m3_day < 0 || localMikeSourceStartEnd.SourceFlowStart_m3_day > 1000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceFlowStart_m3_day", "0", "1000000"), new[] { nameof(localMikeSourceStartEnd.SourceFlowStart_m3_day) });
            }

            if (localMikeSourceStartEnd.SourceFlowEnd_m3_day < 0 || localMikeSourceStartEnd.SourceFlowEnd_m3_day > 1000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceFlowEnd_m3_day", "0", "1000000"), new[] { nameof(localMikeSourceStartEnd.SourceFlowEnd_m3_day) });
            }

            if (localMikeSourceStartEnd.SourcePollutionStart_MPN_100ml < 0 || localMikeSourceStartEnd.SourcePollutionStart_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourcePollutionStart_MPN_100ml", "0", "10000000"), new[] { nameof(localMikeSourceStartEnd.SourcePollutionStart_MPN_100ml) });
            }

            if (localMikeSourceStartEnd.SourcePollutionEnd_MPN_100ml < 0 || localMikeSourceStartEnd.SourcePollutionEnd_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourcePollutionEnd_MPN_100ml", "0", "10000000"), new[] { nameof(localMikeSourceStartEnd.SourcePollutionEnd_MPN_100ml) });
            }

            if (localMikeSourceStartEnd.SourceTemperatureStart_C < -10 || localMikeSourceStartEnd.SourceTemperatureStart_C > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceTemperatureStart_C", "-10", "40"), new[] { nameof(localMikeSourceStartEnd.SourceTemperatureStart_C) });
            }

            if (localMikeSourceStartEnd.SourceTemperatureEnd_C < -10 || localMikeSourceStartEnd.SourceTemperatureEnd_C > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceTemperatureEnd_C", "-10", "40"), new[] { nameof(localMikeSourceStartEnd.SourceTemperatureEnd_C) });
            }

            if (localMikeSourceStartEnd.SourceSalinityStart_PSU < 0 || localMikeSourceStartEnd.SourceSalinityStart_PSU > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceSalinityStart_PSU", "0", "40"), new[] { nameof(localMikeSourceStartEnd.SourceSalinityStart_PSU) });
            }

            if (localMikeSourceStartEnd.SourceSalinityEnd_PSU < 0 || localMikeSourceStartEnd.SourceSalinityEnd_PSU > 40)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceSalinityEnd_PSU", "0", "40"), new[] { nameof(localMikeSourceStartEnd.SourceSalinityEnd_PSU) });
            }

            if (localMikeSourceStartEnd.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localMikeSourceStartEnd.LastUpdateDate_UTC) });
            }
            else
            {
                if (localMikeSourceStartEnd.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localMikeSourceStartEnd.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localMikeSourceStartEnd.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localMikeSourceStartEnd.LastUpdateContactTVItemID.ToString()), new[] { nameof(localMikeSourceStartEnd.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localMikeSourceStartEnd.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
