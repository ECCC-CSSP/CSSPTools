/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalPolSourceGroupingLanguageDBService
    {
        Task<ActionResult<bool>> Delete(int LocalPolSourceGroupingLanguageID);
        Task<ActionResult<List<LocalPolSourceGroupingLanguage>>> GetLocalPolSourceGroupingLanguageList(int skip = 0, int take = 100);
        Task<ActionResult<LocalPolSourceGroupingLanguage>> GetLocalPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(int PolSourceGroupingLanguageID);
        Task<ActionResult<LocalPolSourceGroupingLanguage>> Post(LocalPolSourceGroupingLanguage localpolsourcegroupinglanguage);
        Task<ActionResult<LocalPolSourceGroupingLanguage>> Put(LocalPolSourceGroupingLanguage localpolsourcegroupinglanguage);
    }
    public partial class LocalPolSourceGroupingLanguageDBService : ControllerBase, ILocalPolSourceGroupingLanguageDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceGroupingLanguageDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalPolSourceGroupingLanguage>> GetLocalPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(int PolSourceGroupingLanguageID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage = (from c in db.LocalPolSourceGroupingLanguages.AsNoTracking()
                    where c.PolSourceGroupingLanguageID == PolSourceGroupingLanguageID
                    select c).FirstOrDefault();

            if (localPolSourceGroupingLanguage == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localPolSourceGroupingLanguage));
        }
        public async Task<ActionResult<List<LocalPolSourceGroupingLanguage>>> GetLocalPolSourceGroupingLanguageList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalPolSourceGroupingLanguage> localPolSourceGroupingLanguageList = (from c in db.LocalPolSourceGroupingLanguages.AsNoTracking() orderby c.PolSourceGroupingLanguageID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localPolSourceGroupingLanguageList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalPolSourceGroupingLanguageID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage = (from c in db.LocalPolSourceGroupingLanguages
                    where c.PolSourceGroupingLanguageID == LocalPolSourceGroupingLanguageID
                    select c).FirstOrDefault();

            if (localPolSourceGroupingLanguage == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalPolSourceGroupingLanguage", "LocalPolSourceGroupingLanguageID", LocalPolSourceGroupingLanguageID.ToString())));
            }

            try
            {
                db.LocalPolSourceGroupingLanguages.Remove(localPolSourceGroupingLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalPolSourceGroupingLanguage>> Post(LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localPolSourceGroupingLanguage), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalPolSourceGroupingLanguages.Add(localPolSourceGroupingLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localPolSourceGroupingLanguage));
        }
        public async Task<ActionResult<LocalPolSourceGroupingLanguage>> Put(LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localPolSourceGroupingLanguage), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalPolSourceGroupingLanguages.Update(localPolSourceGroupingLanguage);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localPolSourceGroupingLanguage));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage = validationContext.ObjectInstance as LocalPolSourceGroupingLanguage;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localPolSourceGroupingLanguage.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localPolSourceGroupingLanguage.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localPolSourceGroupingLanguage.PolSourceGroupingLanguageID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "PolSourceGroupingLanguageID"), new[] { nameof(localPolSourceGroupingLanguage.PolSourceGroupingLanguageID) });
                }

                if (!(from c in db.LocalPolSourceGroupingLanguages.AsNoTracking() select c).Where(c => c.PolSourceGroupingLanguageID == localPolSourceGroupingLanguage.PolSourceGroupingLanguageID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "PolSourceGroupingLanguage", "PolSourceGroupingLanguageID", localPolSourceGroupingLanguage.PolSourceGroupingLanguageID.ToString()), new[] { nameof(localPolSourceGroupingLanguage.PolSourceGroupingLanguageID) });
                }
            }

            LocalPolSourceGrouping localPolSourceGroupingPolSourceGroupingID = null;
            localPolSourceGroupingPolSourceGroupingID = (from c in db.LocalPolSourceGroupings.AsNoTracking() where c.PolSourceGroupingID == localPolSourceGroupingLanguage.PolSourceGroupingID select c).FirstOrDefault();

            if (localPolSourceGroupingPolSourceGroupingID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalPolSourceGrouping", "PolSourceGroupingID", localPolSourceGroupingLanguage.PolSourceGroupingID.ToString()), new[] { nameof(localPolSourceGroupingLanguage.PolSourceGroupingID) });
            }

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), (int?)localPolSourceGroupingLanguage.Language);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Language"), new[] { nameof(localPolSourceGroupingLanguage.Language) });
            }

            if (string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.SourceName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SourceName"), new[] { nameof(localPolSourceGroupingLanguage.SourceName) });
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.SourceName) && localPolSourceGroupingLanguage.SourceName.Length > 500)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SourceName", "500"), new[] { nameof(localPolSourceGroupingLanguage.SourceName) });
            }

            if (localPolSourceGroupingLanguage.SourceNameOrder < 0 || localPolSourceGroupingLanguage.SourceNameOrder > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SourceNameOrder", "0", "1000"), new[] { nameof(localPolSourceGroupingLanguage.SourceNameOrder) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localPolSourceGroupingLanguage.TranslationStatusSourceName);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusSourceName"), new[] { nameof(localPolSourceGroupingLanguage.TranslationStatusSourceName) });
            }

            if (string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Init))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Init"), new[] { nameof(localPolSourceGroupingLanguage.Init) });
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Init) && localPolSourceGroupingLanguage.Init.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Init", "50"), new[] { nameof(localPolSourceGroupingLanguage.Init) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localPolSourceGroupingLanguage.TranslationStatusInit);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusInit"), new[] { nameof(localPolSourceGroupingLanguage.TranslationStatusInit) });
            }

            if (string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Description))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Description"), new[] { nameof(localPolSourceGroupingLanguage.Description) });
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Description) && localPolSourceGroupingLanguage.Description.Length > 500)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Description", "500"), new[] { nameof(localPolSourceGroupingLanguage.Description) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localPolSourceGroupingLanguage.TranslationStatusDescription);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusDescription"), new[] { nameof(localPolSourceGroupingLanguage.TranslationStatusDescription) });
            }

            if (string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Report))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Report"), new[] { nameof(localPolSourceGroupingLanguage.Report) });
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Report) && localPolSourceGroupingLanguage.Report.Length > 500)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Report", "500"), new[] { nameof(localPolSourceGroupingLanguage.Report) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localPolSourceGroupingLanguage.TranslationStatusReport);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusReport"), new[] { nameof(localPolSourceGroupingLanguage.TranslationStatusReport) });
            }

            if (string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Text))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Text"), new[] { nameof(localPolSourceGroupingLanguage.Text) });
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceGroupingLanguage.Text) && localPolSourceGroupingLanguage.Text.Length > 500)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Text", "500"), new[] { nameof(localPolSourceGroupingLanguage.Text) });
            }

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), (int?)localPolSourceGroupingLanguage.TranslationStatusText);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TranslationStatusText"), new[] { nameof(localPolSourceGroupingLanguage.TranslationStatusText) });
            }

            if (localPolSourceGroupingLanguage.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localPolSourceGroupingLanguage.LastUpdateDate_UTC) });
            }
            else
            {
                if (localPolSourceGroupingLanguage.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localPolSourceGroupingLanguage.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localPolSourceGroupingLanguage.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localPolSourceGroupingLanguage.LastUpdateContactTVItemID.ToString()), new[] { nameof(localPolSourceGroupingLanguage.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localPolSourceGroupingLanguage.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
