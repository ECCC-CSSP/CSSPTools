/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalPolSourceSiteDBService
    {
        Task<ActionResult<bool>> Delete(int LocalPolSourceSiteID);
        Task<ActionResult<List<LocalPolSourceSite>>> GetLocalPolSourceSiteList(int skip = 0, int take = 100);
        Task<ActionResult<LocalPolSourceSite>> GetLocalPolSourceSiteWithPolSourceSiteID(int PolSourceSiteID);
        Task<ActionResult<LocalPolSourceSite>> Post(LocalPolSourceSite localpolsourcesite);
        Task<ActionResult<LocalPolSourceSite>> Put(LocalPolSourceSite localpolsourcesite);
    }
    public partial class LocalPolSourceSiteDBService : ControllerBase, ILocalPolSourceSiteDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceSiteDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalPolSourceSite>> GetLocalPolSourceSiteWithPolSourceSiteID(int PolSourceSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalPolSourceSite localPolSourceSite = (from c in db.LocalPolSourceSites.AsNoTracking()
                    where c.PolSourceSiteID == PolSourceSiteID
                    select c).FirstOrDefault();

            if (localPolSourceSite == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localPolSourceSite));
        }
        public async Task<ActionResult<List<LocalPolSourceSite>>> GetLocalPolSourceSiteList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalPolSourceSite> localPolSourceSiteList = (from c in db.LocalPolSourceSites.AsNoTracking() orderby c.PolSourceSiteID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localPolSourceSiteList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalPolSourceSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalPolSourceSite localPolSourceSite = (from c in db.LocalPolSourceSites
                    where c.PolSourceSiteID == LocalPolSourceSiteID
                    select c).FirstOrDefault();

            if (localPolSourceSite == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalPolSourceSite", "LocalPolSourceSiteID", LocalPolSourceSiteID.ToString())));
            }

            try
            {
                db.LocalPolSourceSites.Remove(localPolSourceSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalPolSourceSite>> Post(LocalPolSourceSite localPolSourceSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localPolSourceSite), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalPolSourceSites.Add(localPolSourceSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localPolSourceSite));
        }
        public async Task<ActionResult<LocalPolSourceSite>> Put(LocalPolSourceSite localPolSourceSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localPolSourceSite), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalPolSourceSites.Update(localPolSourceSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localPolSourceSite));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalPolSourceSite localPolSourceSite = validationContext.ObjectInstance as LocalPolSourceSite;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localPolSourceSite.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localPolSourceSite.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localPolSourceSite.PolSourceSiteID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "PolSourceSiteID"), new[] { nameof(localPolSourceSite.PolSourceSiteID) });
                }

                if (!(from c in db.LocalPolSourceSites.AsNoTracking() select c).Where(c => c.PolSourceSiteID == localPolSourceSite.PolSourceSiteID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "PolSourceSite", "PolSourceSiteID", localPolSourceSite.PolSourceSiteID.ToString()), new[] { nameof(localPolSourceSite.PolSourceSiteID) });
                }
            }

            LocalTVItem localTVItemPolSourceSiteTVItemID = null;
            localTVItemPolSourceSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localPolSourceSite.PolSourceSiteTVItemID select c).FirstOrDefault();

            if (localTVItemPolSourceSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "PolSourceSiteTVItemID", localPolSourceSite.PolSourceSiteTVItemID.ToString()), new[] { nameof(localPolSourceSite.PolSourceSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.PolSourceSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemPolSourceSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "PolSourceSiteTVItemID", "PolSourceSite"), new[] { nameof(localPolSourceSite.PolSourceSiteTVItemID) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localPolSourceSite.Temp_Locator_CanDelete) && localPolSourceSite.Temp_Locator_CanDelete.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Temp_Locator_CanDelete", "50"), new[] { nameof(localPolSourceSite.Temp_Locator_CanDelete) });
            }

            if (localPolSourceSite.Oldsiteid != null)
            {
                if (localPolSourceSite.Oldsiteid < 0 || localPolSourceSite.Oldsiteid > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Oldsiteid", "0", "1000"), new[] { nameof(localPolSourceSite.Oldsiteid) });
                }
            }

            if (localPolSourceSite.Site != null)
            {
                if (localPolSourceSite.Site < 0 || localPolSourceSite.Site > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Site", "0", "1000"), new[] { nameof(localPolSourceSite.Site) });
                }
            }

            if (localPolSourceSite.SiteID != null)
            {
                if (localPolSourceSite.SiteID < 0 || localPolSourceSite.SiteID > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "SiteID", "0", "1000"), new[] { nameof(localPolSourceSite.SiteID) });
                }
            }

            if (localPolSourceSite.InactiveReason != null)
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), (int?)localPolSourceSite.InactiveReason);
                if (localPolSourceSite.InactiveReason == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "InactiveReason"), new[] { nameof(localPolSourceSite.InactiveReason) });
                }
            }

            if (localPolSourceSite.CivicAddressTVItemID != null)
            {
                LocalTVItem localTVItemCivicAddressTVItemID = null;
                localTVItemCivicAddressTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localPolSourceSite.CivicAddressTVItemID select c).FirstOrDefault();

                if (localTVItemCivicAddressTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "CivicAddressTVItemID", (localPolSourceSite.CivicAddressTVItemID == null ? "" : localPolSourceSite.CivicAddressTVItemID.ToString())), new[] { nameof(localPolSourceSite.CivicAddressTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.Address,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemCivicAddressTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "CivicAddressTVItemID", "Address"), new[] { nameof(localPolSourceSite.CivicAddressTVItemID) });
                    }
                }
            }

            if (localPolSourceSite.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localPolSourceSite.LastUpdateDate_UTC) });
            }
            else
            {
                if (localPolSourceSite.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localPolSourceSite.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localPolSourceSite.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localPolSourceSite.LastUpdateContactTVItemID.ToString()), new[] { nameof(localPolSourceSite.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localPolSourceSite.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
