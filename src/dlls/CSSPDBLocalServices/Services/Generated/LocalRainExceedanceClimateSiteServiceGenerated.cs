/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalRainExceedanceClimateSiteDBService
    {
        Task<ActionResult<bool>> Delete(int LocalRainExceedanceClimateSiteID);
        Task<ActionResult<List<LocalRainExceedanceClimateSite>>> GetLocalRainExceedanceClimateSiteList(int skip = 0, int take = 100);
        Task<ActionResult<LocalRainExceedanceClimateSite>> GetLocalRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(int RainExceedanceClimateSiteID);
        Task<ActionResult<LocalRainExceedanceClimateSite>> Post(LocalRainExceedanceClimateSite localrainexceedanceclimatesite);
        Task<ActionResult<LocalRainExceedanceClimateSite>> Put(LocalRainExceedanceClimateSite localrainexceedanceclimatesite);
    }
    public partial class LocalRainExceedanceClimateSiteDBService : ControllerBase, ILocalRainExceedanceClimateSiteDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRainExceedanceClimateSiteDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalRainExceedanceClimateSite>> GetLocalRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(int RainExceedanceClimateSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalRainExceedanceClimateSite localRainExceedanceClimateSite = (from c in db.LocalRainExceedanceClimateSites.AsNoTracking()
                    where c.RainExceedanceClimateSiteID == RainExceedanceClimateSiteID
                    select c).FirstOrDefault();

            if (localRainExceedanceClimateSite == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localRainExceedanceClimateSite));
        }
        public async Task<ActionResult<List<LocalRainExceedanceClimateSite>>> GetLocalRainExceedanceClimateSiteList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalRainExceedanceClimateSite> localRainExceedanceClimateSiteList = (from c in db.LocalRainExceedanceClimateSites.AsNoTracking() orderby c.RainExceedanceClimateSiteID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localRainExceedanceClimateSiteList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalRainExceedanceClimateSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalRainExceedanceClimateSite localRainExceedanceClimateSite = (from c in db.LocalRainExceedanceClimateSites
                    where c.RainExceedanceClimateSiteID == LocalRainExceedanceClimateSiteID
                    select c).FirstOrDefault();

            if (localRainExceedanceClimateSite == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalRainExceedanceClimateSite", "LocalRainExceedanceClimateSiteID", LocalRainExceedanceClimateSiteID.ToString())));
            }

            try
            {
                db.LocalRainExceedanceClimateSites.Remove(localRainExceedanceClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalRainExceedanceClimateSite>> Post(LocalRainExceedanceClimateSite localRainExceedanceClimateSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRainExceedanceClimateSite), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRainExceedanceClimateSites.Add(localRainExceedanceClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRainExceedanceClimateSite));
        }
        public async Task<ActionResult<LocalRainExceedanceClimateSite>> Put(LocalRainExceedanceClimateSite localRainExceedanceClimateSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRainExceedanceClimateSite), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRainExceedanceClimateSites.Update(localRainExceedanceClimateSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRainExceedanceClimateSite));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalRainExceedanceClimateSite localRainExceedanceClimateSite = validationContext.ObjectInstance as LocalRainExceedanceClimateSite;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localRainExceedanceClimateSite.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localRainExceedanceClimateSite.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localRainExceedanceClimateSite.RainExceedanceClimateSiteID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "RainExceedanceClimateSiteID"), new[] { nameof(localRainExceedanceClimateSite.RainExceedanceClimateSiteID) });
                }

                if (!(from c in db.LocalRainExceedanceClimateSites.AsNoTracking() select c).Where(c => c.RainExceedanceClimateSiteID == localRainExceedanceClimateSite.RainExceedanceClimateSiteID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "RainExceedanceClimateSite", "RainExceedanceClimateSiteID", localRainExceedanceClimateSite.RainExceedanceClimateSiteID.ToString()), new[] { nameof(localRainExceedanceClimateSite.RainExceedanceClimateSiteID) });
                }
            }

            LocalTVItem localTVItemRainExceedanceTVItemID = null;
            localTVItemRainExceedanceTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRainExceedanceClimateSite.RainExceedanceTVItemID select c).FirstOrDefault();

            if (localTVItemRainExceedanceTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "RainExceedanceTVItemID", localRainExceedanceClimateSite.RainExceedanceTVItemID.ToString()), new[] { nameof(localRainExceedanceClimateSite.RainExceedanceTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.RainExceedance,
                };
                if (!AllowableTVTypes.Contains(localTVItemRainExceedanceTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "RainExceedanceTVItemID", "RainExceedance"), new[] { nameof(localRainExceedanceClimateSite.RainExceedanceTVItemID) });
                }
            }

            LocalTVItem localTVItemClimateSiteTVItemID = null;
            localTVItemClimateSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRainExceedanceClimateSite.ClimateSiteTVItemID select c).FirstOrDefault();

            if (localTVItemClimateSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "ClimateSiteTVItemID", localRainExceedanceClimateSite.ClimateSiteTVItemID.ToString()), new[] { nameof(localRainExceedanceClimateSite.ClimateSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.ClimateSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemClimateSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ClimateSiteTVItemID", "ClimateSite"), new[] { nameof(localRainExceedanceClimateSite.ClimateSiteTVItemID) });
                }
            }

            if (localRainExceedanceClimateSite.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localRainExceedanceClimateSite.LastUpdateDate_UTC) });
            }
            else
            {
                if (localRainExceedanceClimateSite.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localRainExceedanceClimateSite.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRainExceedanceClimateSite.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localRainExceedanceClimateSite.LastUpdateContactTVItemID.ToString()), new[] { nameof(localRainExceedanceClimateSite.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localRainExceedanceClimateSite.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
