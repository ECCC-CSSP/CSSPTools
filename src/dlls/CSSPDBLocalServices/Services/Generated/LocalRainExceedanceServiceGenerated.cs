/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalRainExceedanceDBService
    {
        Task<ActionResult<bool>> Delete(int LocalRainExceedanceID);
        Task<ActionResult<List<LocalRainExceedance>>> GetLocalRainExceedanceList(int skip = 0, int take = 100);
        Task<ActionResult<LocalRainExceedance>> GetLocalRainExceedanceWithRainExceedanceID(int RainExceedanceID);
        Task<ActionResult<LocalRainExceedance>> Post(LocalRainExceedance localrainexceedance);
        Task<ActionResult<LocalRainExceedance>> Put(LocalRainExceedance localrainexceedance);
    }
    public partial class LocalRainExceedanceDBService : ControllerBase, ILocalRainExceedanceDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRainExceedanceDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalRainExceedance>> GetLocalRainExceedanceWithRainExceedanceID(int RainExceedanceID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalRainExceedance localRainExceedance = (from c in db.LocalRainExceedances.AsNoTracking()
                    where c.RainExceedanceID == RainExceedanceID
                    select c).FirstOrDefault();

            if (localRainExceedance == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localRainExceedance));
        }
        public async Task<ActionResult<List<LocalRainExceedance>>> GetLocalRainExceedanceList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalRainExceedance> localRainExceedanceList = (from c in db.LocalRainExceedances.AsNoTracking() orderby c.RainExceedanceID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localRainExceedanceList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalRainExceedanceID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalRainExceedance localRainExceedance = (from c in db.LocalRainExceedances
                    where c.RainExceedanceID == LocalRainExceedanceID
                    select c).FirstOrDefault();

            if (localRainExceedance == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalRainExceedance", "LocalRainExceedanceID", LocalRainExceedanceID.ToString())));
            }

            try
            {
                db.LocalRainExceedances.Remove(localRainExceedance);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalRainExceedance>> Post(LocalRainExceedance localRainExceedance)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRainExceedance), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRainExceedances.Add(localRainExceedance);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRainExceedance));
        }
        public async Task<ActionResult<LocalRainExceedance>> Put(LocalRainExceedance localRainExceedance)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRainExceedance), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRainExceedances.Update(localRainExceedance);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRainExceedance));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalRainExceedance localRainExceedance = validationContext.ObjectInstance as LocalRainExceedance;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localRainExceedance.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localRainExceedance.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localRainExceedance.RainExceedanceID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "RainExceedanceID"), new[] { nameof(localRainExceedance.RainExceedanceID) });
                }

                if (!(from c in db.LocalRainExceedances.AsNoTracking() select c).Where(c => c.RainExceedanceID == localRainExceedance.RainExceedanceID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "RainExceedance", "RainExceedanceID", localRainExceedance.RainExceedanceID.ToString()), new[] { nameof(localRainExceedance.RainExceedanceID) });
                }
            }

            LocalTVItem localTVItemRainExceedanceTVItemID = null;
            localTVItemRainExceedanceTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRainExceedance.RainExceedanceTVItemID select c).FirstOrDefault();

            if (localTVItemRainExceedanceTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "RainExceedanceTVItemID", localRainExceedance.RainExceedanceTVItemID.ToString()), new[] { nameof(localRainExceedance.RainExceedanceTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.RainExceedance,
                };
                if (!AllowableTVTypes.Contains(localTVItemRainExceedanceTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "RainExceedanceTVItemID", "RainExceedance"), new[] { nameof(localRainExceedance.RainExceedanceTVItemID) });
                }
            }

            if (localRainExceedance.StartMonth < 1 || localRainExceedance.StartMonth > 12)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "StartMonth", "1", "12"), new[] { nameof(localRainExceedance.StartMonth) });
            }

            if (localRainExceedance.StartDay < 1 || localRainExceedance.StartDay > 31)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "StartDay", "1", "31"), new[] { nameof(localRainExceedance.StartDay) });
            }

            if (localRainExceedance.EndMonth < 1 || localRainExceedance.EndMonth > 12)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EndMonth", "1", "12"), new[] { nameof(localRainExceedance.EndMonth) });
            }

            if (localRainExceedance.EndDay < 1 || localRainExceedance.EndDay > 31)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EndDay", "1", "31"), new[] { nameof(localRainExceedance.EndDay) });
            }

            if (localRainExceedance.RainMaximum_mm < 0 || localRainExceedance.RainMaximum_mm > 300)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "RainMaximum_mm", "0", "300"), new[] { nameof(localRainExceedance.RainMaximum_mm) });
            }

            if (localRainExceedance.StakeholdersEmailDistributionListID != null)
            {
                LocalEmailDistributionList localEmailDistributionListStakeholdersEmailDistributionListID = null;
                localEmailDistributionListStakeholdersEmailDistributionListID = (from c in db.LocalEmailDistributionLists.AsNoTracking() where c.EmailDistributionListID == localRainExceedance.StakeholdersEmailDistributionListID select c).FirstOrDefault();

                if (localEmailDistributionListStakeholdersEmailDistributionListID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "EmailDistributionList", "StakeholdersEmailDistributionListID", (localRainExceedance.StakeholdersEmailDistributionListID == null ? "" : localRainExceedance.StakeholdersEmailDistributionListID.ToString())), new[] { nameof(localRainExceedance.StakeholdersEmailDistributionListID) });
                }
            }

            if (localRainExceedance.OnlyStaffEmailDistributionListID != null)
            {
                LocalEmailDistributionList localEmailDistributionListOnlyStaffEmailDistributionListID = null;
                localEmailDistributionListOnlyStaffEmailDistributionListID = (from c in db.LocalEmailDistributionLists.AsNoTracking() where c.EmailDistributionListID == localRainExceedance.OnlyStaffEmailDistributionListID select c).FirstOrDefault();

                if (localEmailDistributionListOnlyStaffEmailDistributionListID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "EmailDistributionList", "OnlyStaffEmailDistributionListID", (localRainExceedance.OnlyStaffEmailDistributionListID == null ? "" : localRainExceedance.OnlyStaffEmailDistributionListID.ToString())), new[] { nameof(localRainExceedance.OnlyStaffEmailDistributionListID) });
                }
            }

            if (localRainExceedance.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localRainExceedance.LastUpdateDate_UTC) });
            }
            else
            {
                if (localRainExceedance.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localRainExceedance.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRainExceedance.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localRainExceedance.LastUpdateContactTVItemID.ToString()), new[] { nameof(localRainExceedance.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localRainExceedance.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
