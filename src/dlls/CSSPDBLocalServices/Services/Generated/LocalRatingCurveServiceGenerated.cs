/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalRatingCurveDBService
    {
        Task<ActionResult<bool>> Delete(int LocalRatingCurveID);
        Task<ActionResult<List<LocalRatingCurve>>> GetLocalRatingCurveList(int skip = 0, int take = 100);
        Task<ActionResult<LocalRatingCurve>> GetLocalRatingCurveWithRatingCurveID(int RatingCurveID);
        Task<ActionResult<LocalRatingCurve>> Post(LocalRatingCurve localratingcurve);
        Task<ActionResult<LocalRatingCurve>> Put(LocalRatingCurve localratingcurve);
    }
    public partial class LocalRatingCurveDBService : ControllerBase, ILocalRatingCurveDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRatingCurveDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalRatingCurve>> GetLocalRatingCurveWithRatingCurveID(int RatingCurveID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalRatingCurve localRatingCurve = (from c in db.LocalRatingCurves.AsNoTracking()
                    where c.RatingCurveID == RatingCurveID
                    select c).FirstOrDefault();

            if (localRatingCurve == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localRatingCurve));
        }
        public async Task<ActionResult<List<LocalRatingCurve>>> GetLocalRatingCurveList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalRatingCurve> localRatingCurveList = (from c in db.LocalRatingCurves.AsNoTracking() orderby c.RatingCurveID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localRatingCurveList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalRatingCurveID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalRatingCurve localRatingCurve = (from c in db.LocalRatingCurves
                    where c.RatingCurveID == LocalRatingCurveID
                    select c).FirstOrDefault();

            if (localRatingCurve == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalRatingCurve", "LocalRatingCurveID", LocalRatingCurveID.ToString())));
            }

            try
            {
                db.LocalRatingCurves.Remove(localRatingCurve);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalRatingCurve>> Post(LocalRatingCurve localRatingCurve)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRatingCurve), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRatingCurves.Add(localRatingCurve);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRatingCurve));
        }
        public async Task<ActionResult<LocalRatingCurve>> Put(LocalRatingCurve localRatingCurve)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localRatingCurve), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalRatingCurves.Update(localRatingCurve);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localRatingCurve));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalRatingCurve localRatingCurve = validationContext.ObjectInstance as LocalRatingCurve;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localRatingCurve.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localRatingCurve.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localRatingCurve.RatingCurveID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "RatingCurveID"), new[] { nameof(localRatingCurve.RatingCurveID) });
                }

                if (!(from c in db.LocalRatingCurves.AsNoTracking() select c).Where(c => c.RatingCurveID == localRatingCurve.RatingCurveID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "RatingCurve", "RatingCurveID", localRatingCurve.RatingCurveID.ToString()), new[] { nameof(localRatingCurve.RatingCurveID) });
                }
            }

            LocalHydrometricSite localHydrometricSiteHydrometricSiteID = null;
            localHydrometricSiteHydrometricSiteID = (from c in db.LocalHydrometricSites.AsNoTracking() where c.HydrometricSiteID == localRatingCurve.HydrometricSiteID select c).FirstOrDefault();

            if (localHydrometricSiteHydrometricSiteID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalHydrometricSite", "HydrometricSiteID", localRatingCurve.HydrometricSiteID.ToString()), new[] { nameof(localRatingCurve.HydrometricSiteID) });
            }

            if (string.IsNullOrWhiteSpace(localRatingCurve.RatingCurveNumber))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "RatingCurveNumber"), new[] { nameof(localRatingCurve.RatingCurveNumber) });
            }

            if (!string.IsNullOrWhiteSpace(localRatingCurve.RatingCurveNumber) && localRatingCurve.RatingCurveNumber.Length > 50)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "RatingCurveNumber", "50"), new[] { nameof(localRatingCurve.RatingCurveNumber) });
            }

            if (localRatingCurve.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localRatingCurve.LastUpdateDate_UTC) });
            }
            else
            {
                if (localRatingCurve.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localRatingCurve.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localRatingCurve.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localRatingCurve.LastUpdateContactTVItemID.ToString()), new[] { nameof(localRatingCurve.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localRatingCurve.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
