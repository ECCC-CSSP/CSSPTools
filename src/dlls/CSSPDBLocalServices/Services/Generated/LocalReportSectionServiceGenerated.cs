/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalReportSectionDBService
    {
        Task<ActionResult<bool>> Delete(int LocalReportSectionID);
        Task<ActionResult<List<LocalReportSection>>> GetLocalReportSectionList(int skip = 0, int take = 100);
        Task<ActionResult<LocalReportSection>> GetLocalReportSectionWithReportSectionID(int ReportSectionID);
        Task<ActionResult<LocalReportSection>> Post(LocalReportSection localreportsection);
        Task<ActionResult<LocalReportSection>> Put(LocalReportSection localreportsection);
    }
    public partial class LocalReportSectionDBService : ControllerBase, ILocalReportSectionDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalReportSectionDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalReportSection>> GetLocalReportSectionWithReportSectionID(int ReportSectionID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalReportSection localReportSection = (from c in db.LocalReportSections.AsNoTracking()
                    where c.ReportSectionID == ReportSectionID
                    select c).FirstOrDefault();

            if (localReportSection == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localReportSection));
        }
        public async Task<ActionResult<List<LocalReportSection>>> GetLocalReportSectionList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalReportSection> localReportSectionList = (from c in db.LocalReportSections.AsNoTracking() orderby c.ReportSectionID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localReportSectionList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalReportSectionID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalReportSection localReportSection = (from c in db.LocalReportSections
                    where c.ReportSectionID == LocalReportSectionID
                    select c).FirstOrDefault();

            if (localReportSection == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalReportSection", "LocalReportSectionID", LocalReportSectionID.ToString())));
            }

            try
            {
                db.LocalReportSections.Remove(localReportSection);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalReportSection>> Post(LocalReportSection localReportSection)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localReportSection), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalReportSections.Add(localReportSection);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localReportSection));
        }
        public async Task<ActionResult<LocalReportSection>> Put(LocalReportSection localReportSection)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localReportSection), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalReportSections.Update(localReportSection);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localReportSection));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalReportSection localReportSection = validationContext.ObjectInstance as LocalReportSection;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localReportSection.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localReportSection.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localReportSection.ReportSectionID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ReportSectionID"), new[] { nameof(localReportSection.ReportSectionID) });
                }

                if (!(from c in db.LocalReportSections.AsNoTracking() select c).Where(c => c.ReportSectionID == localReportSection.ReportSectionID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ReportSection", "ReportSectionID", localReportSection.ReportSectionID.ToString()), new[] { nameof(localReportSection.ReportSectionID) });
                }
            }

            LocalReportType localReportTypeReportTypeID = null;
            localReportTypeReportTypeID = (from c in db.LocalReportTypes.AsNoTracking() where c.ReportTypeID == localReportSection.ReportTypeID select c).FirstOrDefault();

            if (localReportTypeReportTypeID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalReportType", "ReportTypeID", localReportSection.ReportTypeID.ToString()), new[] { nameof(localReportSection.ReportTypeID) });
            }

            if (localReportSection.TVItemID != null)
            {
                LocalTVItem localTVItemTVItemID = null;
                localTVItemTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localReportSection.TVItemID select c).FirstOrDefault();

                if (localTVItemTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "TVItemID", (localReportSection.TVItemID == null ? "" : localReportSection.TVItemID.ToString())), new[] { nameof(localReportSection.TVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                    };
                    if (!AllowableTVTypes.Contains(localTVItemTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "TVItemID", ""), new[] { nameof(localReportSection.TVItemID) });
                    }
                }
            }

            if (localReportSection.Language != null)
            {
                retStr = enums.EnumTypeOK(typeof(LanguageEnum), (int?)localReportSection.Language);
                if (localReportSection.Language == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Language"), new[] { nameof(localReportSection.Language) });
                }
            }

            if (localReportSection.Ordinal < 0 || localReportSection.Ordinal > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "1000"), new[] { nameof(localReportSection.Ordinal) });
            }

            if (localReportSection.ParentReportSectionID != null)
            {
                LocalReportSection localReportSectionParentReportSectionID = null;
                localReportSectionParentReportSectionID = (from c in db.LocalReportSections.AsNoTracking() where c.ReportSectionID == localReportSection.ParentReportSectionID select c).FirstOrDefault();

                if (localReportSectionParentReportSectionID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ReportSection", "ParentReportSectionID", (localReportSection.ParentReportSectionID == null ? "" : localReportSection.ParentReportSectionID.ToString())), new[] { nameof(localReportSection.ParentReportSectionID) });
                }
            }

            if (localReportSection.Year != null)
            {
                if (localReportSection.Year < 1979 || localReportSection.Year > 2050)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Year", "1979", "2050"), new[] { nameof(localReportSection.Year) });
                }
            }

            if (localReportSection.TemplateReportSectionID != null)
            {
                LocalReportSection localReportSectionTemplateReportSectionID = null;
                localReportSectionTemplateReportSectionID = (from c in db.LocalReportSections.AsNoTracking() where c.ReportSectionID == localReportSection.TemplateReportSectionID select c).FirstOrDefault();

                if (localReportSectionTemplateReportSectionID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ReportSection", "TemplateReportSectionID", (localReportSection.TemplateReportSectionID == null ? "" : localReportSection.TemplateReportSectionID.ToString())), new[] { nameof(localReportSection.TemplateReportSectionID) });
                }
            }

            if (!string.IsNullOrWhiteSpace(localReportSection.ReportSectionName) && localReportSection.ReportSectionName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ReportSectionName", "100"), new[] { nameof(localReportSection.ReportSectionName) });
            }

            if (!string.IsNullOrWhiteSpace(localReportSection.ReportSectionText) && localReportSection.ReportSectionText.Length > 10000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ReportSectionText", "10000"), new[] { nameof(localReportSection.ReportSectionText) });
            }

            if (localReportSection.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localReportSection.LastUpdateDate_UTC) });
            }
            else
            {
                if (localReportSection.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localReportSection.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localReportSection.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localReportSection.LastUpdateContactTVItemID.ToString()), new[] { nameof(localReportSection.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localReportSection.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
