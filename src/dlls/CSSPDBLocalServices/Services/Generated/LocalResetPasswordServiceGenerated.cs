/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalResetPasswordDBService
    {
        Task<ActionResult<bool>> Delete(int LocalResetPasswordID);
        Task<ActionResult<List<LocalResetPassword>>> GetLocalResetPasswordList(int skip = 0, int take = 100);
        Task<ActionResult<LocalResetPassword>> GetLocalResetPasswordWithResetPasswordID(int ResetPasswordID);
        Task<ActionResult<LocalResetPassword>> Post(LocalResetPassword localresetpassword);
        Task<ActionResult<LocalResetPassword>> Put(LocalResetPassword localresetpassword);
    }
    public partial class LocalResetPasswordDBService : ControllerBase, ILocalResetPasswordDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalResetPasswordDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalResetPassword>> GetLocalResetPasswordWithResetPasswordID(int ResetPasswordID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalResetPassword localResetPassword = (from c in db.LocalResetPasswords.AsNoTracking()
                    where c.ResetPasswordID == ResetPasswordID
                    select c).FirstOrDefault();

            if (localResetPassword == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localResetPassword));
        }
        public async Task<ActionResult<List<LocalResetPassword>>> GetLocalResetPasswordList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalResetPassword> localResetPasswordList = (from c in db.LocalResetPasswords.AsNoTracking() orderby c.ResetPasswordID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localResetPasswordList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalResetPasswordID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalResetPassword localResetPassword = (from c in db.LocalResetPasswords
                    where c.ResetPasswordID == LocalResetPasswordID
                    select c).FirstOrDefault();

            if (localResetPassword == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalResetPassword", "LocalResetPasswordID", LocalResetPasswordID.ToString())));
            }

            try
            {
                db.LocalResetPasswords.Remove(localResetPassword);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalResetPassword>> Post(LocalResetPassword localResetPassword)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localResetPassword), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalResetPasswords.Add(localResetPassword);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localResetPassword));
        }
        public async Task<ActionResult<LocalResetPassword>> Put(LocalResetPassword localResetPassword)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localResetPassword), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalResetPasswords.Update(localResetPassword);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localResetPassword));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalResetPassword localResetPassword = validationContext.ObjectInstance as LocalResetPassword;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localResetPassword.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localResetPassword.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localResetPassword.ResetPasswordID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ResetPasswordID"), new[] { nameof(localResetPassword.ResetPasswordID) });
                }

                if (!(from c in db.LocalResetPasswords.AsNoTracking() select c).Where(c => c.ResetPasswordID == localResetPassword.ResetPasswordID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "ResetPassword", "ResetPasswordID", localResetPassword.ResetPasswordID.ToString()), new[] { nameof(localResetPassword.ResetPasswordID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localResetPassword.Email))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Email"), new[] { nameof(localResetPassword.Email) });
            }

            if (!string.IsNullOrWhiteSpace(localResetPassword.Email) && localResetPassword.Email.Length > 256)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Email", "256"), new[] { nameof(localResetPassword.Email) });
            }

            if (!string.IsNullOrWhiteSpace(localResetPassword.Email))
            {
                Regex regex = new Regex(@"^([\w\!\#$\%\&\'*\+\-\/\=\?\^`{\|\}\~]+\.)*[\w\!\#$\%\&\'‌​*\+\-\/\=\?\^`{\|\}\~]+@((((([a-zA-Z0-9]{1}[a-zA-Z0-9\-]{0,62}[a-zA-Z0-9]{1})|[‌​a-zA-Z])\.)+[a-zA-Z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)$");
                if (!regex.IsMatch(localResetPassword.Email))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotAValidEmail, "Email"), new[] { nameof(localResetPassword.Email) });
                }
            }

            if (localResetPassword.ExpireDate_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ExpireDate_Local"), new[] { nameof(localResetPassword.ExpireDate_Local) });
            }
            else
            {
                if (localResetPassword.ExpireDate_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "ExpireDate_Local", "1980"), new[] { nameof(localResetPassword.ExpireDate_Local) });
                }
            }

            if (string.IsNullOrWhiteSpace(localResetPassword.Code))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Code"), new[] { nameof(localResetPassword.Code) });
            }

            if (!string.IsNullOrWhiteSpace(localResetPassword.Code) && localResetPassword.Code.Length > 8)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Code", "8"), new[] { nameof(localResetPassword.Code) });
            }

            if (localResetPassword.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localResetPassword.LastUpdateDate_UTC) });
            }
            else
            {
                if (localResetPassword.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localResetPassword.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localResetPassword.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localResetPassword.LastUpdateContactTVItemID.ToString()), new[] { nameof(localResetPassword.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localResetPassword.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
