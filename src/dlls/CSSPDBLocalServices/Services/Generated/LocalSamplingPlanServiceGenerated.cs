/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalSamplingPlanDBService
    {
        Task<ActionResult<bool>> Delete(int LocalSamplingPlanID);
        Task<ActionResult<List<LocalSamplingPlan>>> GetLocalSamplingPlanList(int skip = 0, int take = 100);
        Task<ActionResult<LocalSamplingPlan>> GetLocalSamplingPlanWithSamplingPlanID(int SamplingPlanID);
        Task<ActionResult<LocalSamplingPlan>> Post(LocalSamplingPlan localsamplingplan);
        Task<ActionResult<LocalSamplingPlan>> Put(LocalSamplingPlan localsamplingplan);
    }
    public partial class LocalSamplingPlanDBService : ControllerBase, ILocalSamplingPlanDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalSamplingPlan>> GetLocalSamplingPlanWithSamplingPlanID(int SamplingPlanID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalSamplingPlan localSamplingPlan = (from c in db.LocalSamplingPlans.AsNoTracking()
                    where c.SamplingPlanID == SamplingPlanID
                    select c).FirstOrDefault();

            if (localSamplingPlan == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localSamplingPlan));
        }
        public async Task<ActionResult<List<LocalSamplingPlan>>> GetLocalSamplingPlanList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalSamplingPlan> localSamplingPlanList = (from c in db.LocalSamplingPlans.AsNoTracking() orderby c.SamplingPlanID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localSamplingPlanList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalSamplingPlanID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalSamplingPlan localSamplingPlan = (from c in db.LocalSamplingPlans
                    where c.SamplingPlanID == LocalSamplingPlanID
                    select c).FirstOrDefault();

            if (localSamplingPlan == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalSamplingPlan", "LocalSamplingPlanID", LocalSamplingPlanID.ToString())));
            }

            try
            {
                db.LocalSamplingPlans.Remove(localSamplingPlan);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalSamplingPlan>> Post(LocalSamplingPlan localSamplingPlan)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localSamplingPlan), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalSamplingPlans.Add(localSamplingPlan);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localSamplingPlan));
        }
        public async Task<ActionResult<LocalSamplingPlan>> Put(LocalSamplingPlan localSamplingPlan)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localSamplingPlan), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalSamplingPlans.Update(localSamplingPlan);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localSamplingPlan));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalSamplingPlan localSamplingPlan = validationContext.ObjectInstance as LocalSamplingPlan;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localSamplingPlan.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localSamplingPlan.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localSamplingPlan.SamplingPlanID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SamplingPlanID"), new[] { nameof(localSamplingPlan.SamplingPlanID) });
                }

                if (!(from c in db.LocalSamplingPlans.AsNoTracking() select c).Where(c => c.SamplingPlanID == localSamplingPlan.SamplingPlanID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "SamplingPlan", "SamplingPlanID", localSamplingPlan.SamplingPlanID.ToString()), new[] { nameof(localSamplingPlan.SamplingPlanID) });
                }
            }

            if (string.IsNullOrWhiteSpace(localSamplingPlan.SamplingPlanName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SamplingPlanName"), new[] { nameof(localSamplingPlan.SamplingPlanName) });
            }

            if (!string.IsNullOrWhiteSpace(localSamplingPlan.SamplingPlanName) && localSamplingPlan.SamplingPlanName.Length > 200)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "SamplingPlanName", "200"), new[] { nameof(localSamplingPlan.SamplingPlanName) });
            }

            if (string.IsNullOrWhiteSpace(localSamplingPlan.ForGroupName))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ForGroupName"), new[] { nameof(localSamplingPlan.ForGroupName) });
            }

            if (!string.IsNullOrWhiteSpace(localSamplingPlan.ForGroupName) && localSamplingPlan.ForGroupName.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ForGroupName", "100"), new[] { nameof(localSamplingPlan.ForGroupName) });
            }

            retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), (int?)localSamplingPlan.SampleType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleType"), new[] { nameof(localSamplingPlan.SampleType) });
            }

            retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), (int?)localSamplingPlan.SamplingPlanType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SamplingPlanType"), new[] { nameof(localSamplingPlan.SamplingPlanType) });
            }

            retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), (int?)localSamplingPlan.LabSheetType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LabSheetType"), new[] { nameof(localSamplingPlan.LabSheetType) });
            }

            LocalTVItem localTVItemProvinceTVItemID = null;
            localTVItemProvinceTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSamplingPlan.ProvinceTVItemID select c).FirstOrDefault();

            if (localTVItemProvinceTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "ProvinceTVItemID", localSamplingPlan.ProvinceTVItemID.ToString()), new[] { nameof(localSamplingPlan.ProvinceTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Province,
                };
                if (!AllowableTVTypes.Contains(localTVItemProvinceTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "ProvinceTVItemID", "Province"), new[] { nameof(localSamplingPlan.ProvinceTVItemID) });
                }
            }

            LocalTVItem localTVItemCreatorTVItemID = null;
            localTVItemCreatorTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSamplingPlan.CreatorTVItemID select c).FirstOrDefault();

            if (localTVItemCreatorTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "CreatorTVItemID", localSamplingPlan.CreatorTVItemID.ToString()), new[] { nameof(localSamplingPlan.CreatorTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemCreatorTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "CreatorTVItemID", "Contact"), new[] { nameof(localSamplingPlan.CreatorTVItemID) });
                }
            }

            if (localSamplingPlan.Year < 2000 || localSamplingPlan.Year > 2050)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Year", "2000", "2050"), new[] { nameof(localSamplingPlan.Year) });
            }

            if (string.IsNullOrWhiteSpace(localSamplingPlan.AccessCode))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AccessCode"), new[] { nameof(localSamplingPlan.AccessCode) });
            }

            if (!string.IsNullOrWhiteSpace(localSamplingPlan.AccessCode) && localSamplingPlan.AccessCode.Length > 15)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "AccessCode", "15"), new[] { nameof(localSamplingPlan.AccessCode) });
            }

            if (localSamplingPlan.DailyDuplicatePrecisionCriteria < 0 || localSamplingPlan.DailyDuplicatePrecisionCriteria > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DailyDuplicatePrecisionCriteria", "0", "100"), new[] { nameof(localSamplingPlan.DailyDuplicatePrecisionCriteria) });
            }

            if (localSamplingPlan.IntertechDuplicatePrecisionCriteria < 0 || localSamplingPlan.IntertechDuplicatePrecisionCriteria > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IntertechDuplicatePrecisionCriteria", "0", "100"), new[] { nameof(localSamplingPlan.IntertechDuplicatePrecisionCriteria) });
            }

            if (string.IsNullOrWhiteSpace(localSamplingPlan.ApprovalCode))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "ApprovalCode"), new[] { nameof(localSamplingPlan.ApprovalCode) });
            }

            if (!string.IsNullOrWhiteSpace(localSamplingPlan.ApprovalCode) && localSamplingPlan.ApprovalCode.Length > 15)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "ApprovalCode", "15"), new[] { nameof(localSamplingPlan.ApprovalCode) });
            }

            if (localSamplingPlan.SamplingPlanFileTVItemID != null)
            {
                LocalTVItem localTVItemSamplingPlanFileTVItemID = null;
                localTVItemSamplingPlanFileTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSamplingPlan.SamplingPlanFileTVItemID select c).FirstOrDefault();

                if (localTVItemSamplingPlanFileTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "SamplingPlanFileTVItemID", (localSamplingPlan.SamplingPlanFileTVItemID == null ? "" : localSamplingPlan.SamplingPlanFileTVItemID.ToString())), new[] { nameof(localSamplingPlan.SamplingPlanFileTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.File,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemSamplingPlanFileTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SamplingPlanFileTVItemID", "File"), new[] { nameof(localSamplingPlan.SamplingPlanFileTVItemID) });
                    }
                }
            }

            if (localSamplingPlan.AnalyzeMethodDefault != null)
            {
                retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), (int?)localSamplingPlan.AnalyzeMethodDefault);
                if (localSamplingPlan.AnalyzeMethodDefault == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "AnalyzeMethodDefault"), new[] { nameof(localSamplingPlan.AnalyzeMethodDefault) });
                }
            }

            if (localSamplingPlan.SampleMatrixDefault != null)
            {
                retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), (int?)localSamplingPlan.SampleMatrixDefault);
                if (localSamplingPlan.SampleMatrixDefault == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SampleMatrixDefault"), new[] { nameof(localSamplingPlan.SampleMatrixDefault) });
                }
            }

            if (localSamplingPlan.LaboratoryDefault != null)
            {
                retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), (int?)localSamplingPlan.LaboratoryDefault);
                if (localSamplingPlan.LaboratoryDefault == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LaboratoryDefault"), new[] { nameof(localSamplingPlan.LaboratoryDefault) });
                }
            }

            if (string.IsNullOrWhiteSpace(localSamplingPlan.BackupDirectory))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "BackupDirectory"), new[] { nameof(localSamplingPlan.BackupDirectory) });
            }

            if (!string.IsNullOrWhiteSpace(localSamplingPlan.BackupDirectory) && localSamplingPlan.BackupDirectory.Length > 250)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "BackupDirectory", "250"), new[] { nameof(localSamplingPlan.BackupDirectory) });
            }

            if (localSamplingPlan.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localSamplingPlan.LastUpdateDate_UTC) });
            }
            else
            {
                if (localSamplingPlan.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localSamplingPlan.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSamplingPlan.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localSamplingPlan.LastUpdateContactTVItemID.ToString()), new[] { nameof(localSamplingPlan.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localSamplingPlan.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
