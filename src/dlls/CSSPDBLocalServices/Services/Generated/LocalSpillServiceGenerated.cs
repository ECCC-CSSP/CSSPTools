/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalSpillDBService
    {
        Task<ActionResult<bool>> Delete(int LocalSpillID);
        Task<ActionResult<List<LocalSpill>>> GetLocalSpillList(int skip = 0, int take = 100);
        Task<ActionResult<LocalSpill>> GetLocalSpillWithSpillID(int SpillID);
        Task<ActionResult<LocalSpill>> Post(LocalSpill localspill);
        Task<ActionResult<LocalSpill>> Put(LocalSpill localspill);
    }
    public partial class LocalSpillDBService : ControllerBase, ILocalSpillDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSpillDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalSpill>> GetLocalSpillWithSpillID(int SpillID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalSpill localSpill = (from c in db.LocalSpills.AsNoTracking()
                    where c.SpillID == SpillID
                    select c).FirstOrDefault();

            if (localSpill == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localSpill));
        }
        public async Task<ActionResult<List<LocalSpill>>> GetLocalSpillList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalSpill> localSpillList = (from c in db.LocalSpills.AsNoTracking() orderby c.SpillID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localSpillList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalSpillID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalSpill localSpill = (from c in db.LocalSpills
                    where c.SpillID == LocalSpillID
                    select c).FirstOrDefault();

            if (localSpill == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalSpill", "LocalSpillID", LocalSpillID.ToString())));
            }

            try
            {
                db.LocalSpills.Remove(localSpill);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalSpill>> Post(LocalSpill localSpill)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localSpill), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalSpills.Add(localSpill);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localSpill));
        }
        public async Task<ActionResult<LocalSpill>> Put(LocalSpill localSpill)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localSpill), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalSpills.Update(localSpill);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localSpill));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalSpill localSpill = validationContext.ObjectInstance as LocalSpill;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localSpill.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localSpill.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localSpill.SpillID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "SpillID"), new[] { nameof(localSpill.SpillID) });
                }

                if (!(from c in db.LocalSpills.AsNoTracking() select c).Where(c => c.SpillID == localSpill.SpillID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "Spill", "SpillID", localSpill.SpillID.ToString()), new[] { nameof(localSpill.SpillID) });
                }
            }

            LocalTVItem localTVItemMunicipalityTVItemID = null;
            localTVItemMunicipalityTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSpill.MunicipalityTVItemID select c).FirstOrDefault();

            if (localTVItemMunicipalityTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "MunicipalityTVItemID", localSpill.MunicipalityTVItemID.ToString()), new[] { nameof(localSpill.MunicipalityTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Municipality,
                };
                if (!AllowableTVTypes.Contains(localTVItemMunicipalityTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "MunicipalityTVItemID", "Municipality"), new[] { nameof(localSpill.MunicipalityTVItemID) });
                }
            }

            if (localSpill.InfrastructureTVItemID != null)
            {
                LocalTVItem localTVItemInfrastructureTVItemID = null;
                localTVItemInfrastructureTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSpill.InfrastructureTVItemID select c).FirstOrDefault();

                if (localTVItemInfrastructureTVItemID == null)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TVItem", "InfrastructureTVItemID", (localSpill.InfrastructureTVItemID == null ? "" : localSpill.InfrastructureTVItemID.ToString())), new[] { nameof(localSpill.InfrastructureTVItemID) });
                }
                else
                {
                    List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                    {
                        TVTypeEnum.Infrastructure,
                    };
                    if (!AllowableTVTypes.Contains(localTVItemInfrastructureTVItemID.TVType))
                    {
                        yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "InfrastructureTVItemID", "Infrastructure"), new[] { nameof(localSpill.InfrastructureTVItemID) });
                    }
                }
            }

            if (localSpill.StartDateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "StartDateTime_Local"), new[] { nameof(localSpill.StartDateTime_Local) });
            }
            else
            {
                if (localSpill.StartDateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "StartDateTime_Local", "1980"), new[] { nameof(localSpill.StartDateTime_Local) });
                }
            }

            if (localSpill.EndDateTime_Local != null && ((DateTime)localSpill.EndDateTime_Local).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "EndDateTime_Local", "1980"), new[] { nameof(localSpill.EndDateTime_Local) });
            }

            if (localSpill.StartDateTime_Local > localSpill.EndDateTime_Local)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._DateIsBiggerThan_, "EndDateTime_Local", "LocalSpillStartDateTime_Local"), new[] { nameof(localSpill.EndDateTime_Local) });
            }

            if (localSpill.AverageFlow_m3_day < 0 || localSpill.AverageFlow_m3_day > 1000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AverageFlow_m3_day", "0", "1000000"), new[] { nameof(localSpill.AverageFlow_m3_day) });
            }

            if (localSpill.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localSpill.LastUpdateDate_UTC) });
            }
            else
            {
                if (localSpill.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localSpill.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localSpill.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localSpill.LastUpdateContactTVItemID.ToString()), new[] { nameof(localSpill.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localSpill.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
