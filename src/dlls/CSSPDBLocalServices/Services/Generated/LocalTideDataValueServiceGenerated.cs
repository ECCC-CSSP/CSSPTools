/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalTideDataValueDBService
    {
        Task<ActionResult<bool>> Delete(int LocalTideDataValueID);
        Task<ActionResult<List<LocalTideDataValue>>> GetLocalTideDataValueList(int skip = 0, int take = 100);
        Task<ActionResult<LocalTideDataValue>> GetLocalTideDataValueWithTideDataValueID(int TideDataValueID);
        Task<ActionResult<LocalTideDataValue>> Post(LocalTideDataValue localtidedatavalue);
        Task<ActionResult<LocalTideDataValue>> Put(LocalTideDataValue localtidedatavalue);
    }
    public partial class LocalTideDataValueDBService : ControllerBase, ILocalTideDataValueDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideDataValueDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalTideDataValue>> GetLocalTideDataValueWithTideDataValueID(int TideDataValueID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalTideDataValue localTideDataValue = (from c in db.LocalTideDataValues.AsNoTracking()
                    where c.TideDataValueID == TideDataValueID
                    select c).FirstOrDefault();

            if (localTideDataValue == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localTideDataValue));
        }
        public async Task<ActionResult<List<LocalTideDataValue>>> GetLocalTideDataValueList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalTideDataValue> localTideDataValueList = (from c in db.LocalTideDataValues.AsNoTracking() orderby c.TideDataValueID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localTideDataValueList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalTideDataValueID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalTideDataValue localTideDataValue = (from c in db.LocalTideDataValues
                    where c.TideDataValueID == LocalTideDataValueID
                    select c).FirstOrDefault();

            if (localTideDataValue == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTideDataValue", "LocalTideDataValueID", LocalTideDataValueID.ToString())));
            }

            try
            {
                db.LocalTideDataValues.Remove(localTideDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalTideDataValue>> Post(LocalTideDataValue localTideDataValue)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localTideDataValue), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalTideDataValues.Add(localTideDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localTideDataValue));
        }
        public async Task<ActionResult<LocalTideDataValue>> Put(LocalTideDataValue localTideDataValue)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localTideDataValue), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalTideDataValues.Update(localTideDataValue);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localTideDataValue));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalTideDataValue localTideDataValue = validationContext.ObjectInstance as LocalTideDataValue;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localTideDataValue.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localTideDataValue.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localTideDataValue.TideDataValueID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TideDataValueID"), new[] { nameof(localTideDataValue.TideDataValueID) });
                }

                if (!(from c in db.LocalTideDataValues.AsNoTracking() select c).Where(c => c.TideDataValueID == localTideDataValue.TideDataValueID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TideDataValue", "TideDataValueID", localTideDataValue.TideDataValueID.ToString()), new[] { nameof(localTideDataValue.TideDataValueID) });
                }
            }

            LocalTVItem localTVItemTideSiteTVItemID = null;
            localTVItemTideSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localTideDataValue.TideSiteTVItemID select c).FirstOrDefault();

            if (localTVItemTideSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "TideSiteTVItemID", localTideDataValue.TideSiteTVItemID.ToString()), new[] { nameof(localTideDataValue.TideSiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.TideSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemTideSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "TideSiteTVItemID", "TideSite"), new[] { nameof(localTideDataValue.TideSiteTVItemID) });
                }
            }

            if (localTideDataValue.DateTime_Local.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "DateTime_Local"), new[] { nameof(localTideDataValue.DateTime_Local) });
            }
            else
            {
                if (localTideDataValue.DateTime_Local.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "DateTime_Local", "1980"), new[] { nameof(localTideDataValue.DateTime_Local) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), (int?)localTideDataValue.TideDataType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TideDataType"), new[] { nameof(localTideDataValue.TideDataType) });
            }

            retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), (int?)localTideDataValue.StorageDataType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "StorageDataType"), new[] { nameof(localTideDataValue.StorageDataType) });
            }

            if (localTideDataValue.Depth_m < 0 || localTideDataValue.Depth_m > 10000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Depth_m", "0", "10000"), new[] { nameof(localTideDataValue.Depth_m) });
            }

            if (localTideDataValue.UVelocity_m_s < 0 || localTideDataValue.UVelocity_m_s > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "UVelocity_m_s", "0", "10"), new[] { nameof(localTideDataValue.UVelocity_m_s) });
            }

            if (localTideDataValue.VVelocity_m_s < 0 || localTideDataValue.VVelocity_m_s > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "VVelocity_m_s", "0", "10"), new[] { nameof(localTideDataValue.VVelocity_m_s) });
            }

            if (localTideDataValue.TideStart != null)
            {
                retStr = enums.EnumTypeOK(typeof(TideTextEnum), (int?)localTideDataValue.TideStart);
                if (localTideDataValue.TideStart == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TideStart"), new[] { nameof(localTideDataValue.TideStart) });
                }
            }

            if (localTideDataValue.TideEnd != null)
            {
                retStr = enums.EnumTypeOK(typeof(TideTextEnum), (int?)localTideDataValue.TideEnd);
                if (localTideDataValue.TideEnd == null || !string.IsNullOrWhiteSpace(retStr))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TideEnd"), new[] { nameof(localTideDataValue.TideEnd) });
                }
            }

            if (localTideDataValue.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localTideDataValue.LastUpdateDate_UTC) });
            }
            else
            {
                if (localTideDataValue.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localTideDataValue.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localTideDataValue.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localTideDataValue.LastUpdateContactTVItemID.ToString()), new[] { nameof(localTideDataValue.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localTideDataValue.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
