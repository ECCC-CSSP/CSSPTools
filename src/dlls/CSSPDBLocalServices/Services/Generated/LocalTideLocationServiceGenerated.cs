/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalTideLocationDBService
    {
        Task<ActionResult<bool>> Delete(int LocalTideLocationID);
        Task<ActionResult<List<LocalTideLocation>>> GetLocalTideLocationList(int skip = 0, int take = 100);
        Task<ActionResult<LocalTideLocation>> GetLocalTideLocationWithTideLocationID(int TideLocationID);
        Task<ActionResult<LocalTideLocation>> Post(LocalTideLocation localtidelocation);
        Task<ActionResult<LocalTideLocation>> Put(LocalTideLocation localtidelocation);
    }
    public partial class LocalTideLocationDBService : ControllerBase, ILocalTideLocationDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideLocationDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalTideLocation>> GetLocalTideLocationWithTideLocationID(int TideLocationID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalTideLocation localTideLocation = (from c in db.LocalTideLocations.AsNoTracking()
                    where c.TideLocationID == TideLocationID
                    select c).FirstOrDefault();

            if (localTideLocation == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localTideLocation));
        }
        public async Task<ActionResult<List<LocalTideLocation>>> GetLocalTideLocationList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalTideLocation> localTideLocationList = (from c in db.LocalTideLocations.AsNoTracking() orderby c.TideLocationID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localTideLocationList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalTideLocationID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalTideLocation localTideLocation = (from c in db.LocalTideLocations
                    where c.TideLocationID == LocalTideLocationID
                    select c).FirstOrDefault();

            if (localTideLocation == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTideLocation", "LocalTideLocationID", LocalTideLocationID.ToString())));
            }

            try
            {
                db.LocalTideLocations.Remove(localTideLocation);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalTideLocation>> Post(LocalTideLocation localTideLocation)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localTideLocation), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalTideLocations.Add(localTideLocation);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localTideLocation));
        }
        public async Task<ActionResult<LocalTideLocation>> Put(LocalTideLocation localTideLocation)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localTideLocation), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalTideLocations.Update(localTideLocation);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localTideLocation));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalTideLocation localTideLocation = validationContext.ObjectInstance as LocalTideLocation;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localTideLocation.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localTideLocation.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localTideLocation.TideLocationID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TideLocationID"), new[] { nameof(localTideLocation.TideLocationID) });
                }

                if (!(from c in db.LocalTideLocations.AsNoTracking() select c).Where(c => c.TideLocationID == localTideLocation.TideLocationID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "TideLocation", "TideLocationID", localTideLocation.TideLocationID.ToString()), new[] { nameof(localTideLocation.TideLocationID) });
                }
            }

            if (localTideLocation.Zone < 0 || localTideLocation.Zone > 10000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Zone", "0", "10000"), new[] { nameof(localTideLocation.Zone) });
            }

            if (string.IsNullOrWhiteSpace(localTideLocation.Name))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Name"), new[] { nameof(localTideLocation.Name) });
            }

            if (!string.IsNullOrWhiteSpace(localTideLocation.Name) && localTideLocation.Name.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Name", "100"), new[] { nameof(localTideLocation.Name) });
            }

            if (string.IsNullOrWhiteSpace(localTideLocation.Prov))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "Prov"), new[] { nameof(localTideLocation.Prov) });
            }

            if (!string.IsNullOrWhiteSpace(localTideLocation.Prov) && localTideLocation.Prov.Length > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._MaxLengthIs_, "Prov", "100"), new[] { nameof(localTideLocation.Prov) });
            }

            if (localTideLocation.sid < 0 || localTideLocation.sid > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "sid", "0", "100000"), new[] { nameof(localTideLocation.sid) });
            }

            if (localTideLocation.Lat < -90 || localTideLocation.Lat > 90)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Lat", "-90", "90"), new[] { nameof(localTideLocation.Lat) });
            }

            if (localTideLocation.Lng < -180 || localTideLocation.Lng > 180)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Lng", "-180", "180"), new[] { nameof(localTideLocation.Lng) });
            }

            if (localTideLocation.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localTideLocation.LastUpdateDate_UTC) });
            }
            else
            {
                if (localTideLocation.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localTideLocation.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localTideLocation.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localTideLocation.LastUpdateContactTVItemID.ToString()), new[] { nameof(localTideLocation.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localTideLocation.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
