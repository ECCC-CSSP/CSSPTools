/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalUseOfSiteDBService
    {
        Task<ActionResult<bool>> Delete(int LocalUseOfSiteID);
        Task<ActionResult<List<LocalUseOfSite>>> GetLocalUseOfSiteList(int skip = 0, int take = 100);
        Task<ActionResult<LocalUseOfSite>> GetLocalUseOfSiteWithUseOfSiteID(int UseOfSiteID);
        Task<ActionResult<LocalUseOfSite>> Post(LocalUseOfSite localuseofsite);
        Task<ActionResult<LocalUseOfSite>> Put(LocalUseOfSite localuseofsite);
    }
    public partial class LocalUseOfSiteDBService : ControllerBase, ILocalUseOfSiteDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalUseOfSiteDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalUseOfSite>> GetLocalUseOfSiteWithUseOfSiteID(int UseOfSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalUseOfSite localUseOfSite = (from c in db.LocalUseOfSites.AsNoTracking()
                    where c.UseOfSiteID == UseOfSiteID
                    select c).FirstOrDefault();

            if (localUseOfSite == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localUseOfSite));
        }
        public async Task<ActionResult<List<LocalUseOfSite>>> GetLocalUseOfSiteList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalUseOfSite> localUseOfSiteList = (from c in db.LocalUseOfSites.AsNoTracking() orderby c.UseOfSiteID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localUseOfSiteList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalUseOfSiteID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalUseOfSite localUseOfSite = (from c in db.LocalUseOfSites
                    where c.UseOfSiteID == LocalUseOfSiteID
                    select c).FirstOrDefault();

            if (localUseOfSite == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalUseOfSite", "LocalUseOfSiteID", LocalUseOfSiteID.ToString())));
            }

            try
            {
                db.LocalUseOfSites.Remove(localUseOfSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalUseOfSite>> Post(LocalUseOfSite localUseOfSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localUseOfSite), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalUseOfSites.Add(localUseOfSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localUseOfSite));
        }
        public async Task<ActionResult<LocalUseOfSite>> Put(LocalUseOfSite localUseOfSite)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localUseOfSite), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalUseOfSites.Update(localUseOfSite);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localUseOfSite));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalUseOfSite localUseOfSite = validationContext.ObjectInstance as LocalUseOfSite;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localUseOfSite.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localUseOfSite.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localUseOfSite.UseOfSiteID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "UseOfSiteID"), new[] { nameof(localUseOfSite.UseOfSiteID) });
                }

                if (!(from c in db.LocalUseOfSites.AsNoTracking() select c).Where(c => c.UseOfSiteID == localUseOfSite.UseOfSiteID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "UseOfSite", "UseOfSiteID", localUseOfSite.UseOfSiteID.ToString()), new[] { nameof(localUseOfSite.UseOfSiteID) });
                }
            }

            LocalTVItem localTVItemSiteTVItemID = null;
            localTVItemSiteTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localUseOfSite.SiteTVItemID select c).FirstOrDefault();

            if (localTVItemSiteTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "SiteTVItemID", localUseOfSite.SiteTVItemID.ToString()), new[] { nameof(localUseOfSite.SiteTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.ClimateSite,
                    TVTypeEnum.HydrometricSite,
                    TVTypeEnum.TideSite,
                };
                if (!AllowableTVTypes.Contains(localTVItemSiteTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SiteTVItemID", "ClimateSite,HydrometricSite,TideSite"), new[] { nameof(localUseOfSite.SiteTVItemID) });
                }
            }

            LocalTVItem localTVItemSubsectorTVItemID = null;
            localTVItemSubsectorTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localUseOfSite.SubsectorTVItemID select c).FirstOrDefault();

            if (localTVItemSubsectorTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "SubsectorTVItemID", localUseOfSite.SubsectorTVItemID.ToString()), new[] { nameof(localUseOfSite.SubsectorTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Subsector,
                };
                if (!AllowableTVTypes.Contains(localTVItemSubsectorTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), new[] { nameof(localUseOfSite.SubsectorTVItemID) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(TVTypeEnum), (int?)localUseOfSite.TVType);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "TVType"), new[] { nameof(localUseOfSite.TVType) });
            }

            if (localUseOfSite.Ordinal < 0 || localUseOfSite.Ordinal > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "1000"), new[] { nameof(localUseOfSite.Ordinal) });
            }

            if (localUseOfSite.StartYear < 1980 || localUseOfSite.StartYear > 2050)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "StartYear", "1980", "2050"), new[] { nameof(localUseOfSite.StartYear) });
            }

            if (localUseOfSite.EndYear != null)
            {
                if (localUseOfSite.EndYear < 1980 || localUseOfSite.EndYear > 2050)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EndYear", "1980", "2050"), new[] { nameof(localUseOfSite.EndYear) });
                }
            }

            if (localUseOfSite.Weight_perc != null)
            {
                if (localUseOfSite.Weight_perc < 0 || localUseOfSite.Weight_perc > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Weight_perc", "0", "100"), new[] { nameof(localUseOfSite.Weight_perc) });
                }
            }

            if (localUseOfSite.Param1 != null)
            {
                if (localUseOfSite.Param1 < 0 || localUseOfSite.Param1 > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Param1", "0", "100"), new[] { nameof(localUseOfSite.Param1) });
                }
            }

            if (localUseOfSite.Param2 != null)
            {
                if (localUseOfSite.Param2 < 0 || localUseOfSite.Param2 > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Param2", "0", "100"), new[] { nameof(localUseOfSite.Param2) });
                }
            }

            if (localUseOfSite.Param3 != null)
            {
                if (localUseOfSite.Param3 < 0 || localUseOfSite.Param3 > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Param3", "0", "100"), new[] { nameof(localUseOfSite.Param3) });
                }
            }

            if (localUseOfSite.Param4 != null)
            {
                if (localUseOfSite.Param4 < 0 || localUseOfSite.Param4 > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Param4", "0", "100"), new[] { nameof(localUseOfSite.Param4) });
                }
            }

            if (localUseOfSite.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localUseOfSite.LastUpdateDate_UTC) });
            }
            else
            {
                if (localUseOfSite.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localUseOfSite.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localUseOfSite.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localUseOfSite.LastUpdateContactTVItemID.ToString()), new[] { nameof(localUseOfSite.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localUseOfSite.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
