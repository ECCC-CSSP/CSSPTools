/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalVPAmbientDBService
    {
        Task<ActionResult<bool>> Delete(int LocalVPAmbientID);
        Task<ActionResult<List<LocalVPAmbient>>> GetLocalVPAmbientList(int skip = 0, int take = 100);
        Task<ActionResult<LocalVPAmbient>> GetLocalVPAmbientWithVPAmbientID(int VPAmbientID);
        Task<ActionResult<LocalVPAmbient>> Post(LocalVPAmbient localvpambient);
        Task<ActionResult<LocalVPAmbient>> Put(LocalVPAmbient localvpambient);
    }
    public partial class LocalVPAmbientDBService : ControllerBase, ILocalVPAmbientDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalVPAmbientDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalVPAmbient>> GetLocalVPAmbientWithVPAmbientID(int VPAmbientID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalVPAmbient localVPAmbient = (from c in db.LocalVPAmbients.AsNoTracking()
                    where c.VPAmbientID == VPAmbientID
                    select c).FirstOrDefault();

            if (localVPAmbient == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localVPAmbient));
        }
        public async Task<ActionResult<List<LocalVPAmbient>>> GetLocalVPAmbientList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalVPAmbient> localVPAmbientList = (from c in db.LocalVPAmbients.AsNoTracking() orderby c.VPAmbientID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localVPAmbientList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalVPAmbientID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalVPAmbient localVPAmbient = (from c in db.LocalVPAmbients
                    where c.VPAmbientID == LocalVPAmbientID
                    select c).FirstOrDefault();

            if (localVPAmbient == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalVPAmbient", "LocalVPAmbientID", LocalVPAmbientID.ToString())));
            }

            try
            {
                db.LocalVPAmbients.Remove(localVPAmbient);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalVPAmbient>> Post(LocalVPAmbient localVPAmbient)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPAmbient), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPAmbients.Add(localVPAmbient);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPAmbient));
        }
        public async Task<ActionResult<LocalVPAmbient>> Put(LocalVPAmbient localVPAmbient)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPAmbient), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPAmbients.Update(localVPAmbient);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPAmbient));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalVPAmbient localVPAmbient = validationContext.ObjectInstance as LocalVPAmbient;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localVPAmbient.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localVPAmbient.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localVPAmbient.VPAmbientID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "VPAmbientID"), new[] { nameof(localVPAmbient.VPAmbientID) });
                }

                if (!(from c in db.LocalVPAmbients.AsNoTracking() select c).Where(c => c.VPAmbientID == localVPAmbient.VPAmbientID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "VPAmbient", "VPAmbientID", localVPAmbient.VPAmbientID.ToString()), new[] { nameof(localVPAmbient.VPAmbientID) });
                }
            }

            LocalVPScenario localVPScenarioVPScenarioID = null;
            localVPScenarioVPScenarioID = (from c in db.LocalVPScenarios.AsNoTracking() where c.VPScenarioID == localVPAmbient.VPScenarioID select c).FirstOrDefault();

            if (localVPScenarioVPScenarioID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalVPScenario", "VPScenarioID", localVPAmbient.VPScenarioID.ToString()), new[] { nameof(localVPAmbient.VPScenarioID) });
            }

            if (localVPAmbient.Row < 0 || localVPAmbient.Row > 10)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Row", "0", "10"), new[] { nameof(localVPAmbient.Row) });
            }

            if (localVPAmbient.MeasurementDepth_m != null)
            {
                if (localVPAmbient.MeasurementDepth_m < 0 || localVPAmbient.MeasurementDepth_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "MeasurementDepth_m", "0", "1000"), new[] { nameof(localVPAmbient.MeasurementDepth_m) });
                }
            }

            if (localVPAmbient.CurrentSpeed_m_s != null)
            {
                if (localVPAmbient.CurrentSpeed_m_s < 0 || localVPAmbient.CurrentSpeed_m_s > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "CurrentSpeed_m_s", "0", "10"), new[] { nameof(localVPAmbient.CurrentSpeed_m_s) });
                }
            }

            if (localVPAmbient.CurrentDirection_deg != null)
            {
                if (localVPAmbient.CurrentDirection_deg < -180 || localVPAmbient.CurrentDirection_deg > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "CurrentDirection_deg", "-180", "180"), new[] { nameof(localVPAmbient.CurrentDirection_deg) });
                }
            }

            if (localVPAmbient.AmbientSalinity_PSU != null)
            {
                if (localVPAmbient.AmbientSalinity_PSU < 0 || localVPAmbient.AmbientSalinity_PSU > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AmbientSalinity_PSU", "0", "40"), new[] { nameof(localVPAmbient.AmbientSalinity_PSU) });
                }
            }

            if (localVPAmbient.AmbientTemperature_C != null)
            {
                if (localVPAmbient.AmbientTemperature_C < -10 || localVPAmbient.AmbientTemperature_C > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AmbientTemperature_C", "-10", "40"), new[] { nameof(localVPAmbient.AmbientTemperature_C) });
                }
            }

            if (localVPAmbient.BackgroundConcentration_MPN_100ml != null)
            {
                if (localVPAmbient.BackgroundConcentration_MPN_100ml < 0 || localVPAmbient.BackgroundConcentration_MPN_100ml > 10000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "BackgroundConcentration_MPN_100ml", "0", "10000000"), new[] { nameof(localVPAmbient.BackgroundConcentration_MPN_100ml) });
                }
            }

            if (localVPAmbient.PollutantDecayRate_per_day != null)
            {
                if (localVPAmbient.PollutantDecayRate_per_day < 0 || localVPAmbient.PollutantDecayRate_per_day > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PollutantDecayRate_per_day", "0", "100"), new[] { nameof(localVPAmbient.PollutantDecayRate_per_day) });
                }
            }

            if (localVPAmbient.FarFieldCurrentSpeed_m_s != null)
            {
                if (localVPAmbient.FarFieldCurrentSpeed_m_s < 0 || localVPAmbient.FarFieldCurrentSpeed_m_s > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FarFieldCurrentSpeed_m_s", "0", "10"), new[] { nameof(localVPAmbient.FarFieldCurrentSpeed_m_s) });
                }
            }

            if (localVPAmbient.FarFieldCurrentDirection_deg != null)
            {
                if (localVPAmbient.FarFieldCurrentDirection_deg < -180 || localVPAmbient.FarFieldCurrentDirection_deg > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FarFieldCurrentDirection_deg", "-180", "180"), new[] { nameof(localVPAmbient.FarFieldCurrentDirection_deg) });
                }
            }

            if (localVPAmbient.FarFieldDiffusionCoefficient != null)
            {
                if (localVPAmbient.FarFieldDiffusionCoefficient < 0 || localVPAmbient.FarFieldDiffusionCoefficient > 1)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FarFieldDiffusionCoefficient", "0", "1"), new[] { nameof(localVPAmbient.FarFieldDiffusionCoefficient) });
                }
            }

            if (localVPAmbient.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localVPAmbient.LastUpdateDate_UTC) });
            }
            else
            {
                if (localVPAmbient.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localVPAmbient.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localVPAmbient.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localVPAmbient.LastUpdateContactTVItemID.ToString()), new[] { nameof(localVPAmbient.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localVPAmbient.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
