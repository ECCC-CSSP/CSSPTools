/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalVPResultDBService
    {
        Task<ActionResult<bool>> Delete(int LocalVPResultID);
        Task<ActionResult<List<LocalVPResult>>> GetLocalVPResultList(int skip = 0, int take = 100);
        Task<ActionResult<LocalVPResult>> GetLocalVPResultWithVPResultID(int VPResultID);
        Task<ActionResult<LocalVPResult>> Post(LocalVPResult localvpresult);
        Task<ActionResult<LocalVPResult>> Put(LocalVPResult localvpresult);
    }
    public partial class LocalVPResultDBService : ControllerBase, ILocalVPResultDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalVPResultDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalVPResult>> GetLocalVPResultWithVPResultID(int VPResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalVPResult localVPResult = (from c in db.LocalVPResults.AsNoTracking()
                    where c.VPResultID == VPResultID
                    select c).FirstOrDefault();

            if (localVPResult == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localVPResult));
        }
        public async Task<ActionResult<List<LocalVPResult>>> GetLocalVPResultList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalVPResult> localVPResultList = (from c in db.LocalVPResults.AsNoTracking() orderby c.VPResultID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localVPResultList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalVPResultID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalVPResult localVPResult = (from c in db.LocalVPResults
                    where c.VPResultID == LocalVPResultID
                    select c).FirstOrDefault();

            if (localVPResult == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalVPResult", "LocalVPResultID", LocalVPResultID.ToString())));
            }

            try
            {
                db.LocalVPResults.Remove(localVPResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalVPResult>> Post(LocalVPResult localVPResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPResult), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPResults.Add(localVPResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPResult));
        }
        public async Task<ActionResult<LocalVPResult>> Put(LocalVPResult localVPResult)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPResult), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPResults.Update(localVPResult);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPResult));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalVPResult localVPResult = validationContext.ObjectInstance as LocalVPResult;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localVPResult.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localVPResult.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localVPResult.VPResultID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "VPResultID"), new[] { nameof(localVPResult.VPResultID) });
                }

                if (!(from c in db.LocalVPResults.AsNoTracking() select c).Where(c => c.VPResultID == localVPResult.VPResultID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "VPResult", "VPResultID", localVPResult.VPResultID.ToString()), new[] { nameof(localVPResult.VPResultID) });
                }
            }

            LocalVPScenario localVPScenarioVPScenarioID = null;
            localVPScenarioVPScenarioID = (from c in db.LocalVPScenarios.AsNoTracking() where c.VPScenarioID == localVPResult.VPScenarioID select c).FirstOrDefault();

            if (localVPScenarioVPScenarioID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalVPScenario", "VPScenarioID", localVPResult.VPScenarioID.ToString()), new[] { nameof(localVPResult.VPScenarioID) });
            }

            if (localVPResult.Ordinal < 0 || localVPResult.Ordinal > 1000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "1000"), new[] { nameof(localVPResult.Ordinal) });
            }

            if (localVPResult.Concentration_MPN_100ml < 0 || localVPResult.Concentration_MPN_100ml > 10000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Concentration_MPN_100ml", "0", "10000000"), new[] { nameof(localVPResult.Concentration_MPN_100ml) });
            }

            if (localVPResult.Dilution < 0 || localVPResult.Dilution > 1000000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Dilution", "0", "1000000"), new[] { nameof(localVPResult.Dilution) });
            }

            if (localVPResult.FarFieldWidth_m < 0 || localVPResult.FarFieldWidth_m > 10000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FarFieldWidth_m", "0", "10000"), new[] { nameof(localVPResult.FarFieldWidth_m) });
            }

            if (localVPResult.DispersionDistance_m < 0 || localVPResult.DispersionDistance_m > 100000)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DispersionDistance_m", "0", "100000"), new[] { nameof(localVPResult.DispersionDistance_m) });
            }

            if (localVPResult.TravelTime_hour < 0 || localVPResult.TravelTime_hour > 100)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "TravelTime_hour", "0", "100"), new[] { nameof(localVPResult.TravelTime_hour) });
            }

            if (localVPResult.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localVPResult.LastUpdateDate_UTC) });
            }
            else
            {
                if (localVPResult.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localVPResult.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localVPResult.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localVPResult.LastUpdateContactTVItemID.ToString()), new[] { nameof(localVPResult.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localVPResult.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
