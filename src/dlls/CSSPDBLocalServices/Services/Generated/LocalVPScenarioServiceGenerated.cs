/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LocalServices;
using Microsoft.Extensions.Configuration;

namespace CSSPDBLocalServices
{
    public partial interface ILocalVPScenarioDBService
    {
        Task<ActionResult<bool>> Delete(int LocalVPScenarioID);
        Task<ActionResult<List<LocalVPScenario>>> GetLocalVPScenarioList(int skip = 0, int take = 100);
        Task<ActionResult<LocalVPScenario>> GetLocalVPScenarioWithVPScenarioID(int VPScenarioID);
        Task<ActionResult<LocalVPScenario>> Post(LocalVPScenario localvpscenario);
        Task<ActionResult<LocalVPScenario>> Put(LocalVPScenario localvpscenario);
    }
    public partial class LocalVPScenarioDBService : ControllerBase, ILocalVPScenarioDBService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBLocalContext db { get; }
        private IConfiguration Configuration { get; }
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public LocalVPScenarioDBService(IConfiguration Configuration, ICSSPCultureService CSSPCultureService, IEnums enums,
           ILocalService LocalService,
           CSSPDBLocalContext db)
        {
            this.Configuration = Configuration;
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.enums = enums;
            this.db = db;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<LocalVPScenario>> GetLocalVPScenarioWithVPScenarioID(int VPScenarioID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            LocalVPScenario localVPScenario = (from c in db.LocalVPScenarios.AsNoTracking()
                    where c.VPScenarioID == VPScenarioID
                    select c).FirstOrDefault();

            if (localVPScenario == null)
            {
                return await Task.FromResult(NotFound(""));
            }

            return await Task.FromResult(Ok(localVPScenario));
        }
        public async Task<ActionResult<List<LocalVPScenario>>> GetLocalVPScenarioList(int skip = 0, int take = 100)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized(""));
            }

            List<LocalVPScenario> localVPScenarioList = (from c in db.LocalVPScenarios.AsNoTracking() orderby c.VPScenarioID select c).Skip(skip).Take(take).ToList();

            return await Task.FromResult(Ok(localVPScenarioList));
        }
        public async Task<ActionResult<bool>> Delete(int LocalVPScenarioID)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            LocalVPScenario localVPScenario = (from c in db.LocalVPScenarios
                    where c.VPScenarioID == LocalVPScenarioID
                    select c).FirstOrDefault();

            if (localVPScenario == null)
            {
                return await Task.FromResult(BadRequest(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalVPScenario", "LocalVPScenarioID", LocalVPScenarioID.ToString())));
            }

            try
            {
                db.LocalVPScenarios.Remove(localVPScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(true));
        }
        public async Task<ActionResult<LocalVPScenario>> Post(LocalVPScenario localVPScenario)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPScenario), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPScenarios.Add(localVPScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPScenario));
        }
        public async Task<ActionResult<LocalVPScenario>> Put(LocalVPScenario localVPScenario)
        {
            if (LocalService.LoggedInContactInfo.LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(localVPScenario), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
                return await Task.FromResult(BadRequest(ValidationResults));
            }

            try
            {
                db.LocalVPScenarios.Update(localVPScenario);
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(localVPScenario));
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            LocalVPScenario localVPScenario = validationContext.ObjectInstance as LocalVPScenario;

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), (int?)localVPScenario.LocalDBCommand);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LocalDBCommand"), new[] { nameof(localVPScenario.LocalDBCommand) });
            }

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (localVPScenario.VPScenarioID == 0)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "VPScenarioID"), new[] { nameof(localVPScenario.VPScenarioID) });
                }

                if (!(from c in db.LocalVPScenarios.AsNoTracking() select c).Where(c => c.VPScenarioID == localVPScenario.VPScenarioID).Any())
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "VPScenario", "VPScenarioID", localVPScenario.VPScenarioID.ToString()), new[] { nameof(localVPScenario.VPScenarioID) });
                }
            }

            LocalTVItem localTVItemInfrastructureTVItemID = null;
            localTVItemInfrastructureTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localVPScenario.InfrastructureTVItemID select c).FirstOrDefault();

            if (localTVItemInfrastructureTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "InfrastructureTVItemID", localVPScenario.InfrastructureTVItemID.ToString()), new[] { nameof(localVPScenario.InfrastructureTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Infrastructure,
                };
                if (!AllowableTVTypes.Contains(localTVItemInfrastructureTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "InfrastructureTVItemID", "Infrastructure"), new[] { nameof(localVPScenario.InfrastructureTVItemID) });
                }
            }

            retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), (int?)localVPScenario.VPScenarioStatus);
            if (!string.IsNullOrWhiteSpace(retStr))
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "VPScenarioStatus"), new[] { nameof(localVPScenario.VPScenarioStatus) });
            }

            if (localVPScenario.EffluentFlow_m3_s != null)
            {
                if (localVPScenario.EffluentFlow_m3_s < 0 || localVPScenario.EffluentFlow_m3_s > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EffluentFlow_m3_s", "0", "1000"), new[] { nameof(localVPScenario.EffluentFlow_m3_s) });
                }
            }

            if (localVPScenario.EffluentConcentration_MPN_100ml != null)
            {
                if (localVPScenario.EffluentConcentration_MPN_100ml < 0 || localVPScenario.EffluentConcentration_MPN_100ml > 10000000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EffluentConcentration_MPN_100ml", "0", "10000000"), new[] { nameof(localVPScenario.EffluentConcentration_MPN_100ml) });
                }
            }

            if (localVPScenario.FroudeNumber != null)
            {
                if (localVPScenario.FroudeNumber < 0 || localVPScenario.FroudeNumber > 10000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "FroudeNumber", "0", "10000"), new[] { nameof(localVPScenario.FroudeNumber) });
                }
            }

            if (localVPScenario.PortDiameter_m != null)
            {
                if (localVPScenario.PortDiameter_m < 0 || localVPScenario.PortDiameter_m > 10)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortDiameter_m", "0", "10"), new[] { nameof(localVPScenario.PortDiameter_m) });
                }
            }

            if (localVPScenario.PortDepth_m != null)
            {
                if (localVPScenario.PortDepth_m < 0 || localVPScenario.PortDepth_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortDepth_m", "0", "1000"), new[] { nameof(localVPScenario.PortDepth_m) });
                }
            }

            if (localVPScenario.PortElevation_m != null)
            {
                if (localVPScenario.PortElevation_m < 0 || localVPScenario.PortElevation_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortElevation_m", "0", "1000"), new[] { nameof(localVPScenario.PortElevation_m) });
                }
            }

            if (localVPScenario.VerticalAngle_deg != null)
            {
                if (localVPScenario.VerticalAngle_deg < -90 || localVPScenario.VerticalAngle_deg > 90)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "VerticalAngle_deg", "-90", "90"), new[] { nameof(localVPScenario.VerticalAngle_deg) });
                }
            }

            if (localVPScenario.HorizontalAngle_deg != null)
            {
                if (localVPScenario.HorizontalAngle_deg < -180 || localVPScenario.HorizontalAngle_deg > 180)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "HorizontalAngle_deg", "-180", "180"), new[] { nameof(localVPScenario.HorizontalAngle_deg) });
                }
            }

            if (localVPScenario.NumberOfPorts != null)
            {
                if (localVPScenario.NumberOfPorts < 1 || localVPScenario.NumberOfPorts > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "NumberOfPorts", "1", "100"), new[] { nameof(localVPScenario.NumberOfPorts) });
                }
            }

            if (localVPScenario.PortSpacing_m != null)
            {
                if (localVPScenario.PortSpacing_m < 0 || localVPScenario.PortSpacing_m > 1000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "PortSpacing_m", "0", "1000"), new[] { nameof(localVPScenario.PortSpacing_m) });
                }
            }

            if (localVPScenario.AcuteMixZone_m != null)
            {
                if (localVPScenario.AcuteMixZone_m < 0 || localVPScenario.AcuteMixZone_m > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "AcuteMixZone_m", "0", "100"), new[] { nameof(localVPScenario.AcuteMixZone_m) });
                }
            }

            if (localVPScenario.ChronicMixZone_m != null)
            {
                if (localVPScenario.ChronicMixZone_m < 0 || localVPScenario.ChronicMixZone_m > 40000)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ChronicMixZone_m", "0", "40000"), new[] { nameof(localVPScenario.ChronicMixZone_m) });
                }
            }

            if (localVPScenario.EffluentSalinity_PSU != null)
            {
                if (localVPScenario.EffluentSalinity_PSU < 0 || localVPScenario.EffluentSalinity_PSU > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EffluentSalinity_PSU", "0", "40"), new[] { nameof(localVPScenario.EffluentSalinity_PSU) });
                }
            }

            if (localVPScenario.EffluentTemperature_C != null)
            {
                if (localVPScenario.EffluentTemperature_C < -10 || localVPScenario.EffluentTemperature_C > 40)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EffluentTemperature_C", "-10", "40"), new[] { nameof(localVPScenario.EffluentTemperature_C) });
                }
            }

            if (localVPScenario.EffluentVelocity_m_s != null)
            {
                if (localVPScenario.EffluentVelocity_m_s < 0 || localVPScenario.EffluentVelocity_m_s > 100)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "EffluentVelocity_m_s", "0", "100"), new[] { nameof(localVPScenario.EffluentVelocity_m_s) });
                }
            }

            //RawResults has no StringLength Attribute

            if (localVPScenario.LastUpdateDate_UTC.Year == 1)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { nameof(localVPScenario.LastUpdateDate_UTC) });
            }
            else
            {
                if (localVPScenario.LastUpdateDate_UTC.Year < 1980)
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { nameof(localVPScenario.LastUpdateDate_UTC) });
                }
            }

            LocalTVItem localTVItemLastUpdateContactTVItemID = null;
            localTVItemLastUpdateContactTVItemID = (from c in db.LocalTVItems.AsNoTracking() where c.TVItemID == localVPScenario.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (localTVItemLastUpdateContactTVItemID == null)
            {
                yield return new ValidationResult(string.Format(CSSPCultureServicesRes.CouldNotFind_With_Equal_, "LocalTVItem", "LastUpdateContactTVItemID", localVPScenario.LastUpdateContactTVItemID.ToString()), new[] { nameof(localVPScenario.LastUpdateContactTVItemID) });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(localTVItemLastUpdateContactTVItemID.TVType))
                {
                    yield return new ValidationResult(string.Format(CSSPCultureServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { nameof(localVPScenario.LastUpdateContactTVItemID) });
                }
            }

        }
        #endregion Functions private
    }

}
