/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [EnumsGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using CSSPEnums.Resources;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;

namespace CSSPEnums
{
    public partial class Enums
    {
        #region Enum Functions public
        /// <summary>
        /// > [!NOTE]
        /// > <para>**Allowable types** : [ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html), [AddContactTypeEnum] (CSSPEnums.AddContactTypeEnum.html), [DatabaseTypeEnum] (CSSPEnums.DatabaseTypeEnum.html), [EntityQueryTypeEnum] (CSSPEnums.EntityQueryTypeEnum.html), [PolSourceObsInfoTypeEnum] (CSSPEnums.PolSourceObsInfoTypeEnum.html), [AddressTypeEnum] (CSSPEnums.AddressTypeEnum.html), [AerationTypeEnum] (CSSPEnums.AerationTypeEnum.html), [AlarmSystemTypeEnum] (CSSPEnums.AlarmSystemTypeEnum.html), [AnalysisCalculationTypeEnum] (CSSPEnums.AnalysisCalculationTypeEnum.html), [AnalysisReportExportCommandEnum] (CSSPEnums.AnalysisReportExportCommandEnum.html), [AnalyzeMethodEnum] (CSSPEnums.AnalyzeMethodEnum.html), [AppTaskCommandEnum] (CSSPEnums.AppTaskCommandEnum.html), [AppTaskStatusEnum] (CSSPEnums.AppTaskStatusEnum.html), [BeaufortScaleEnum] (CSSPEnums.BeaufortScaleEnum.html), [BoxModelResultTypeEnum] (CSSPEnums.BoxModelResultTypeEnum.html), [ClassificationTypeEnum] (CSSPEnums.ClassificationTypeEnum.html), [CollectionSystemTypeEnum] (CSSPEnums.CollectionSystemTypeEnum.html), [ContactTitleEnum] (CSSPEnums.ContactTitleEnum.html), [CSSPWQInputSheetTypeEnum] (CSSPEnums.CSSPWQInputSheetTypeEnum.html), [CSSPWQInputTypeEnum] (CSSPEnums.CSSPWQInputTypeEnum.html), [DailyOrHourlyDataEnum] (CSSPEnums.DailyOrHourlyDataEnum.html), [DisinfectionTypeEnum] (CSSPEnums.DisinfectionTypeEnum.html), [DrogueTypeEnum] (CSSPEnums.DrogueTypeEnum.html), [EmailTypeEnum] (CSSPEnums.EmailTypeEnum.html), [ExcelExportShowDataTypeEnum] (CSSPEnums.ExcelExportShowDataTypeEnum.html), [FacilityTypeEnum] (CSSPEnums.FacilityTypeEnum.html), [FilePurposeEnum] (CSSPEnums.FilePurposeEnum.html), [FileStatusEnum] (CSSPEnums.FileStatusEnum.html), [FileTypeEnum] (CSSPEnums.FileTypeEnum.html), [InfrastructureTypeEnum] (CSSPEnums.InfrastructureTypeEnum.html), [KMZActionEnum] (CSSPEnums.KMZActionEnum.html), [LaboratoryEnum] (CSSPEnums.LaboratoryEnum.html), [LabSheetStatusEnum] (CSSPEnums.LabSheetStatusEnum.html), [LabSheetTypeEnum] (CSSPEnums.LabSheetTypeEnum.html), [LanguageEnum] (CSSPEnums.LanguageEnum.html), [LogCommandEnum] (CSSPEnums.LogCommandEnum.html), [MapInfoDrawTypeEnum] (CSSPEnums.MapInfoDrawTypeEnum.html), [MikeBoundaryConditionLevelOrVelocityEnum] (CSSPEnums.MikeBoundaryConditionLevelOrVelocityEnum.html), [MikeScenarioSpecialResultKMLTypeEnum] (CSSPEnums.MikeScenarioSpecialResultKMLTypeEnum.html), [MWQMSiteLatestClassificationEnum] (CSSPEnums.MWQMSiteLatestClassificationEnum.html), [PolSourceInactiveReasonEnum] (CSSPEnums.PolSourceInactiveReasonEnum.html), [PolSourceIssueRiskEnum] (CSSPEnums.PolSourceIssueRiskEnum.html), [PositionEnum] (CSSPEnums.PositionEnum.html), [PreliminaryTreatmentTypeEnum] (CSSPEnums.PreliminaryTreatmentTypeEnum.html), [PrimaryTreatmentTypeEnum] (CSSPEnums.PrimaryTreatmentTypeEnum.html), [PropertyTypeEnum] (CSSPEnums.PropertyTypeEnum.html), [ReportConditionEnum] (CSSPEnums.ReportConditionEnum.html), [ReportFieldTypeEnum] (CSSPEnums.ReportFieldTypeEnum.html), [ReportFileTypeEnum] (CSSPEnums.ReportFileTypeEnum.html), [ReportFormatingDateEnum] (CSSPEnums.ReportFormatingDateEnum.html), [ReportFormatingNumberEnum] (CSSPEnums.ReportFormatingNumberEnum.html), [ReportGenerateObjectsKeywordEnum] (CSSPEnums.ReportGenerateObjectsKeywordEnum.html), [ReportSortingEnum] (CSSPEnums.ReportSortingEnum.html), [ReportTreeNodeSubTypeEnum] (CSSPEnums.ReportTreeNodeSubTypeEnum.html), [ReportTreeNodeTypeEnum] (CSSPEnums.ReportTreeNodeTypeEnum.html), [SameDayNextDayEnum] (CSSPEnums.SameDayNextDayEnum.html), [SampleMatrixEnum] (CSSPEnums.SampleMatrixEnum.html), [SampleStatusEnum] (CSSPEnums.SampleStatusEnum.html), [SampleTypeEnum] (CSSPEnums.SampleTypeEnum.html), [SamplingPlanTypeEnum] (CSSPEnums.SamplingPlanTypeEnum.html), [ScenarioStatusEnum] (CSSPEnums.ScenarioStatusEnum.html), [SearchTagEnum] (CSSPEnums.SearchTagEnum.html), [SecondaryTreatmentTypeEnum] (CSSPEnums.SecondaryTreatmentTypeEnum.html), [SiteTypeEnum] (CSSPEnums.SiteTypeEnum.html), [SpecialTableTypeEnum] (CSSPEnums.SpecialTableTypeEnum.html), [StorageDataTypeEnum] (CSSPEnums.StorageDataTypeEnum.html), [StreetTypeEnum] (CSSPEnums.StreetTypeEnum.html), [TelTypeEnum] (CSSPEnums.TelTypeEnum.html), [TertiaryTreatmentTypeEnum] (CSSPEnums.TertiaryTreatmentTypeEnum.html), [TideDataTypeEnum] (CSSPEnums.TideDataTypeEnum.html), [TideTextEnum] (CSSPEnums.TideTextEnum.html), [TranslationStatusEnum] (CSSPEnums.TranslationStatusEnum.html), [TreatmentTypeEnum] (CSSPEnums.TreatmentTypeEnum.html), [TVAuthEnum] (CSSPEnums.TVAuthEnum.html), [TVTypeEnum] (CSSPEnums.TVTypeEnum.html), [WebTideDataSetEnum] (CSSPEnums.WebTideDataSetEnum.html), [WhereOperatorEnum] (CSSPEnums.WhereOperatorEnum.html), [PolSourceObsInfoEnum] (CSSPEnums.PolSourceObsInfoEnum.html)</para>
        /// > <para>**Return to [CSSPEnums](CSSPEnums.html)**</para>
        /// </summary>
        /// <param name="type">One of the allowable types (Enum)</param>
        /// <param name="intList">List of nullable IDs representing the enumeration values (int?)</param>
        /// <returns>Returns empty string if OK... otherwise will return the CSSPError message</returns>
        public string EnumTypeListOK(Type type, List<int?> intList)
        {
            string retStr = "";

            foreach (int? ID in intList)
            {
                retStr = EnumTypeOK(type, ID);
                if (!string.IsNullOrWhiteSpace(retStr))
                {
                    break;
                }
            }

            if (string.IsNullOrWhiteSpace(retStr))
            {
                return "";
            }

            return string.Format(CSSPEnumsRes._IsRequired, type.Name);
        }
        /// <summary>
        /// > [!NOTE]
        /// > <para>**Allowable types** : [ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html), [AddContactTypeEnum] (CSSPEnums.AddContactTypeEnum.html), [DatabaseTypeEnum] (CSSPEnums.DatabaseTypeEnum.html), [EntityQueryTypeEnum] (CSSPEnums.EntityQueryTypeEnum.html), [PolSourceObsInfoTypeEnum] (CSSPEnums.PolSourceObsInfoTypeEnum.html), [AddressTypeEnum] (CSSPEnums.AddressTypeEnum.html), [AerationTypeEnum] (CSSPEnums.AerationTypeEnum.html), [AlarmSystemTypeEnum] (CSSPEnums.AlarmSystemTypeEnum.html), [AnalysisCalculationTypeEnum] (CSSPEnums.AnalysisCalculationTypeEnum.html), [AnalysisReportExportCommandEnum] (CSSPEnums.AnalysisReportExportCommandEnum.html), [AnalyzeMethodEnum] (CSSPEnums.AnalyzeMethodEnum.html), [AppTaskCommandEnum] (CSSPEnums.AppTaskCommandEnum.html), [AppTaskStatusEnum] (CSSPEnums.AppTaskStatusEnum.html), [BeaufortScaleEnum] (CSSPEnums.BeaufortScaleEnum.html), [BoxModelResultTypeEnum] (CSSPEnums.BoxModelResultTypeEnum.html), [ClassificationTypeEnum] (CSSPEnums.ClassificationTypeEnum.html), [CollectionSystemTypeEnum] (CSSPEnums.CollectionSystemTypeEnum.html), [ContactTitleEnum] (CSSPEnums.ContactTitleEnum.html), [CSSPWQInputSheetTypeEnum] (CSSPEnums.CSSPWQInputSheetTypeEnum.html), [CSSPWQInputTypeEnum] (CSSPEnums.CSSPWQInputTypeEnum.html), [DailyOrHourlyDataEnum] (CSSPEnums.DailyOrHourlyDataEnum.html), [DisinfectionTypeEnum] (CSSPEnums.DisinfectionTypeEnum.html), [DrogueTypeEnum] (CSSPEnums.DrogueTypeEnum.html), [EmailTypeEnum] (CSSPEnums.EmailTypeEnum.html), [ExcelExportShowDataTypeEnum] (CSSPEnums.ExcelExportShowDataTypeEnum.html), [FacilityTypeEnum] (CSSPEnums.FacilityTypeEnum.html), [FilePurposeEnum] (CSSPEnums.FilePurposeEnum.html), [FileStatusEnum] (CSSPEnums.FileStatusEnum.html), [FileTypeEnum] (CSSPEnums.FileTypeEnum.html), [InfrastructureTypeEnum] (CSSPEnums.InfrastructureTypeEnum.html), [KMZActionEnum] (CSSPEnums.KMZActionEnum.html), [LaboratoryEnum] (CSSPEnums.LaboratoryEnum.html), [LabSheetStatusEnum] (CSSPEnums.LabSheetStatusEnum.html), [LabSheetTypeEnum] (CSSPEnums.LabSheetTypeEnum.html), [LanguageEnum] (CSSPEnums.LanguageEnum.html), [LogCommandEnum] (CSSPEnums.LogCommandEnum.html), [MapInfoDrawTypeEnum] (CSSPEnums.MapInfoDrawTypeEnum.html), [MikeBoundaryConditionLevelOrVelocityEnum] (CSSPEnums.MikeBoundaryConditionLevelOrVelocityEnum.html), [MikeScenarioSpecialResultKMLTypeEnum] (CSSPEnums.MikeScenarioSpecialResultKMLTypeEnum.html), [MWQMSiteLatestClassificationEnum] (CSSPEnums.MWQMSiteLatestClassificationEnum.html), [PolSourceInactiveReasonEnum] (CSSPEnums.PolSourceInactiveReasonEnum.html), [PolSourceIssueRiskEnum] (CSSPEnums.PolSourceIssueRiskEnum.html), [PositionEnum] (CSSPEnums.PositionEnum.html), [PreliminaryTreatmentTypeEnum] (CSSPEnums.PreliminaryTreatmentTypeEnum.html), [PrimaryTreatmentTypeEnum] (CSSPEnums.PrimaryTreatmentTypeEnum.html), [PropertyTypeEnum] (CSSPEnums.PropertyTypeEnum.html), [ReportConditionEnum] (CSSPEnums.ReportConditionEnum.html), [ReportFieldTypeEnum] (CSSPEnums.ReportFieldTypeEnum.html), [ReportFileTypeEnum] (CSSPEnums.ReportFileTypeEnum.html), [ReportFormatingDateEnum] (CSSPEnums.ReportFormatingDateEnum.html), [ReportFormatingNumberEnum] (CSSPEnums.ReportFormatingNumberEnum.html), [ReportGenerateObjectsKeywordEnum] (CSSPEnums.ReportGenerateObjectsKeywordEnum.html), [ReportSortingEnum] (CSSPEnums.ReportSortingEnum.html), [ReportTreeNodeSubTypeEnum] (CSSPEnums.ReportTreeNodeSubTypeEnum.html), [ReportTreeNodeTypeEnum] (CSSPEnums.ReportTreeNodeTypeEnum.html), [SameDayNextDayEnum] (CSSPEnums.SameDayNextDayEnum.html), [SampleMatrixEnum] (CSSPEnums.SampleMatrixEnum.html), [SampleStatusEnum] (CSSPEnums.SampleStatusEnum.html), [SampleTypeEnum] (CSSPEnums.SampleTypeEnum.html), [SamplingPlanTypeEnum] (CSSPEnums.SamplingPlanTypeEnum.html), [ScenarioStatusEnum] (CSSPEnums.ScenarioStatusEnum.html), [SearchTagEnum] (CSSPEnums.SearchTagEnum.html), [SecondaryTreatmentTypeEnum] (CSSPEnums.SecondaryTreatmentTypeEnum.html), [SiteTypeEnum] (CSSPEnums.SiteTypeEnum.html), [SpecialTableTypeEnum] (CSSPEnums.SpecialTableTypeEnum.html), [StorageDataTypeEnum] (CSSPEnums.StorageDataTypeEnum.html), [StreetTypeEnum] (CSSPEnums.StreetTypeEnum.html), [TelTypeEnum] (CSSPEnums.TelTypeEnum.html), [TertiaryTreatmentTypeEnum] (CSSPEnums.TertiaryTreatmentTypeEnum.html), [TideDataTypeEnum] (CSSPEnums.TideDataTypeEnum.html), [TideTextEnum] (CSSPEnums.TideTextEnum.html), [TranslationStatusEnum] (CSSPEnums.TranslationStatusEnum.html), [TreatmentTypeEnum] (CSSPEnums.TreatmentTypeEnum.html), [TVAuthEnum] (CSSPEnums.TVAuthEnum.html), [TVTypeEnum] (CSSPEnums.TVTypeEnum.html), [WebTideDataSetEnum] (CSSPEnums.WebTideDataSetEnum.html), [WhereOperatorEnum] (CSSPEnums.WhereOperatorEnum.html), [PolSourceObsInfoEnum] (CSSPEnums.PolSourceObsInfoEnum.htm</para>
        /// > <para>**Return to [CSSPEnums](CSSPEnums.html)**</para>
        /// </summary>
        /// <param name="type">One of the allowable types (Enum)</param>
        /// <param name="intList">List of nullable IDs representing the enumeration values (int?)</param>
        /// <returns>Returns empty string if OK... otherwise will return the CSSPError message</returns>
        public string EnumTypeOK(Type type, int? ID)
        {
            if (ID == null)
            {
                return "";
            }

            foreach (int i in Enum.GetValues(type))
            {
                if (i == ID)
                {
                    return "";
                }
            }

            return string.Format(CSSPEnumsRes._IsRequired, type.Name);
        }
        /// <summary>
        /// > [!NOTE]
        /// > <para>**Allowable types** : [ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html), [AddContactTypeEnum] (CSSPEnums.AddContactTypeEnum.html), [DatabaseTypeEnum] (CSSPEnums.DatabaseTypeEnum.html), [EntityQueryTypeEnum] (CSSPEnums.EntityQueryTypeEnum.html), [PolSourceObsInfoTypeEnum] (CSSPEnums.PolSourceObsInfoTypeEnum.html), [AddressTypeEnum] (CSSPEnums.AddressTypeEnum.html), [AerationTypeEnum] (CSSPEnums.AerationTypeEnum.html), [AlarmSystemTypeEnum] (CSSPEnums.AlarmSystemTypeEnum.html), [AnalysisCalculationTypeEnum] (CSSPEnums.AnalysisCalculationTypeEnum.html), [AnalysisReportExportCommandEnum] (CSSPEnums.AnalysisReportExportCommandEnum.html), [AnalyzeMethodEnum] (CSSPEnums.AnalyzeMethodEnum.html), [AppTaskCommandEnum] (CSSPEnums.AppTaskCommandEnum.html), [AppTaskStatusEnum] (CSSPEnums.AppTaskStatusEnum.html), [BeaufortScaleEnum] (CSSPEnums.BeaufortScaleEnum.html), [BoxModelResultTypeEnum] (CSSPEnums.BoxModelResultTypeEnum.html), [ClassificationTypeEnum] (CSSPEnums.ClassificationTypeEnum.html), [CollectionSystemTypeEnum] (CSSPEnums.CollectionSystemTypeEnum.html), [ContactTitleEnum] (CSSPEnums.ContactTitleEnum.html), [CSSPWQInputSheetTypeEnum] (CSSPEnums.CSSPWQInputSheetTypeEnum.html), [CSSPWQInputTypeEnum] (CSSPEnums.CSSPWQInputTypeEnum.html), [DailyOrHourlyDataEnum] (CSSPEnums.DailyOrHourlyDataEnum.html), [DisinfectionTypeEnum] (CSSPEnums.DisinfectionTypeEnum.html), [DrogueTypeEnum] (CSSPEnums.DrogueTypeEnum.html), [EmailTypeEnum] (CSSPEnums.EmailTypeEnum.html), [ExcelExportShowDataTypeEnum] (CSSPEnums.ExcelExportShowDataTypeEnum.html), [FacilityTypeEnum] (CSSPEnums.FacilityTypeEnum.html), [FilePurposeEnum] (CSSPEnums.FilePurposeEnum.html), [FileStatusEnum] (CSSPEnums.FileStatusEnum.html), [FileTypeEnum] (CSSPEnums.FileTypeEnum.html), [InfrastructureTypeEnum] (CSSPEnums.InfrastructureTypeEnum.html), [KMZActionEnum] (CSSPEnums.KMZActionEnum.html), [LaboratoryEnum] (CSSPEnums.LaboratoryEnum.html), [LabSheetStatusEnum] (CSSPEnums.LabSheetStatusEnum.html), [LabSheetTypeEnum] (CSSPEnums.LabSheetTypeEnum.html), [LanguageEnum] (CSSPEnums.LanguageEnum.html), [LogCommandEnum] (CSSPEnums.LogCommandEnum.html), [MapInfoDrawTypeEnum] (CSSPEnums.MapInfoDrawTypeEnum.html), [MikeBoundaryConditionLevelOrVelocityEnum] (CSSPEnums.MikeBoundaryConditionLevelOrVelocityEnum.html), [MikeScenarioSpecialResultKMLTypeEnum] (CSSPEnums.MikeScenarioSpecialResultKMLTypeEnum.html), [MWQMSiteLatestClassificationEnum] (CSSPEnums.MWQMSiteLatestClassificationEnum.html), [PolSourceInactiveReasonEnum] (CSSPEnums.PolSourceInactiveReasonEnum.html), [PolSourceIssueRiskEnum] (CSSPEnums.PolSourceIssueRiskEnum.html), [PositionEnum] (CSSPEnums.PositionEnum.html), [PreliminaryTreatmentTypeEnum] (CSSPEnums.PreliminaryTreatmentTypeEnum.html), [PrimaryTreatmentTypeEnum] (CSSPEnums.PrimaryTreatmentTypeEnum.html), [PropertyTypeEnum] (CSSPEnums.PropertyTypeEnum.html), [ReportConditionEnum] (CSSPEnums.ReportConditionEnum.html), [ReportFieldTypeEnum] (CSSPEnums.ReportFieldTypeEnum.html), [ReportFileTypeEnum] (CSSPEnums.ReportFileTypeEnum.html), [ReportFormatingDateEnum] (CSSPEnums.ReportFormatingDateEnum.html), [ReportFormatingNumberEnum] (CSSPEnums.ReportFormatingNumberEnum.html), [ReportGenerateObjectsKeywordEnum] (CSSPEnums.ReportGenerateObjectsKeywordEnum.html), [ReportSortingEnum] (CSSPEnums.ReportSortingEnum.html), [ReportTreeNodeSubTypeEnum] (CSSPEnums.ReportTreeNodeSubTypeEnum.html), [ReportTreeNodeTypeEnum] (CSSPEnums.ReportTreeNodeTypeEnum.html), [SameDayNextDayEnum] (CSSPEnums.SameDayNextDayEnum.html), [SampleMatrixEnum] (CSSPEnums.SampleMatrixEnum.html), [SampleStatusEnum] (CSSPEnums.SampleStatusEnum.html), [SampleTypeEnum] (CSSPEnums.SampleTypeEnum.html), [SamplingPlanTypeEnum] (CSSPEnums.SamplingPlanTypeEnum.html), [ScenarioStatusEnum] (CSSPEnums.ScenarioStatusEnum.html), [SearchTagEnum] (CSSPEnums.SearchTagEnum.html), [SecondaryTreatmentTypeEnum] (CSSPEnums.SecondaryTreatmentTypeEnum.html), [SiteTypeEnum] (CSSPEnums.SiteTypeEnum.html), [SpecialTableTypeEnum] (CSSPEnums.SpecialTableTypeEnum.html), [StorageDataTypeEnum] (CSSPEnums.StorageDataTypeEnum.html), [StreetTypeEnum] (CSSPEnums.StreetTypeEnum.html), [TelTypeEnum] (CSSPEnums.TelTypeEnum.html), [TertiaryTreatmentTypeEnum] (CSSPEnums.TertiaryTreatmentTypeEnum.html), [TideDataTypeEnum] (CSSPEnums.TideDataTypeEnum.html), [TideTextEnum] (CSSPEnums.TideTextEnum.html), [TranslationStatusEnum] (CSSPEnums.TranslationStatusEnum.html), [TreatmentTypeEnum] (CSSPEnums.TreatmentTypeEnum.html), [TVAuthEnum] (CSSPEnums.TVAuthEnum.html), [TVTypeEnum] (CSSPEnums.TVTypeEnum.html), [WebTideDataSetEnum] (CSSPEnums.WebTideDataSetEnum.html), [WhereOperatorEnum] (CSSPEnums.WhereOperatorEnum.html), [PolSourceObsInfoEnum] (CSSPEnums.PolSourceObsInfoEnum.h</para>
        /// > <para>**Return to [CSSPEnums](CSSPEnums.html)**</para>
        /// </summary>
        /// <param name="type">One of the allowable types (Enum)</param>
        /// <returns>Returns list of EnumIDAndText ordered by the Enum text for one of the allowable languages [LanguageEnum.en, LanguageEnum.fr]</returns>
        public List<EnumIDAndText> GetEnumTextOrderedList(Type type)
        {
            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();

            foreach (int i in Enum.GetValues(type))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = GetResValueForTypeAndID(type, i) });
            }

            enumTextOrderedList = (from c in enumTextOrderedList
                                   orderby c.EnumText
                                   select c).ToList();

            return enumTextOrderedList;
        }
        /// <summary>
        /// > [!NOTE]
        /// > <para>**Allowable types** : [ActionDBTypeEnum] (CSSPEnums.ActionDBTypeEnum.html), [AddContactTypeEnum] (CSSPEnums.AddContactTypeEnum.html), [DatabaseTypeEnum] (CSSPEnums.DatabaseTypeEnum.html), [EntityQueryTypeEnum] (CSSPEnums.EntityQueryTypeEnum.html), [PolSourceObsInfoTypeEnum] (CSSPEnums.PolSourceObsInfoTypeEnum.html), [AddressTypeEnum] (CSSPEnums.AddressTypeEnum.html), [AerationTypeEnum] (CSSPEnums.AerationTypeEnum.html), [AlarmSystemTypeEnum] (CSSPEnums.AlarmSystemTypeEnum.html), [AnalysisCalculationTypeEnum] (CSSPEnums.AnalysisCalculationTypeEnum.html), [AnalysisReportExportCommandEnum] (CSSPEnums.AnalysisReportExportCommandEnum.html), [AnalyzeMethodEnum] (CSSPEnums.AnalyzeMethodEnum.html), [AppTaskCommandEnum] (CSSPEnums.AppTaskCommandEnum.html), [AppTaskStatusEnum] (CSSPEnums.AppTaskStatusEnum.html), [BeaufortScaleEnum] (CSSPEnums.BeaufortScaleEnum.html), [BoxModelResultTypeEnum] (CSSPEnums.BoxModelResultTypeEnum.html), [ClassificationTypeEnum] (CSSPEnums.ClassificationTypeEnum.html), [CollectionSystemTypeEnum] (CSSPEnums.CollectionSystemTypeEnum.html), [ContactTitleEnum] (CSSPEnums.ContactTitleEnum.html), [CSSPWQInputSheetTypeEnum] (CSSPEnums.CSSPWQInputSheetTypeEnum.html), [CSSPWQInputTypeEnum] (CSSPEnums.CSSPWQInputTypeEnum.html), [DailyOrHourlyDataEnum] (CSSPEnums.DailyOrHourlyDataEnum.html), [DisinfectionTypeEnum] (CSSPEnums.DisinfectionTypeEnum.html), [DrogueTypeEnum] (CSSPEnums.DrogueTypeEnum.html), [EmailTypeEnum] (CSSPEnums.EmailTypeEnum.html), [ExcelExportShowDataTypeEnum] (CSSPEnums.ExcelExportShowDataTypeEnum.html), [FacilityTypeEnum] (CSSPEnums.FacilityTypeEnum.html), [FilePurposeEnum] (CSSPEnums.FilePurposeEnum.html), [FileStatusEnum] (CSSPEnums.FileStatusEnum.html), [FileTypeEnum] (CSSPEnums.FileTypeEnum.html), [InfrastructureTypeEnum] (CSSPEnums.InfrastructureTypeEnum.html), [KMZActionEnum] (CSSPEnums.KMZActionEnum.html), [LaboratoryEnum] (CSSPEnums.LaboratoryEnum.html), [LabSheetStatusEnum] (CSSPEnums.LabSheetStatusEnum.html), [LabSheetTypeEnum] (CSSPEnums.LabSheetTypeEnum.html), [LanguageEnum] (CSSPEnums.LanguageEnum.html), [LogCommandEnum] (CSSPEnums.LogCommandEnum.html), [MapInfoDrawTypeEnum] (CSSPEnums.MapInfoDrawTypeEnum.html), [MikeBoundaryConditionLevelOrVelocityEnum] (CSSPEnums.MikeBoundaryConditionLevelOrVelocityEnum.html), [MikeScenarioSpecialResultKMLTypeEnum] (CSSPEnums.MikeScenarioSpecialResultKMLTypeEnum.html), [MWQMSiteLatestClassificationEnum] (CSSPEnums.MWQMSiteLatestClassificationEnum.html), [PolSourceInactiveReasonEnum] (CSSPEnums.PolSourceInactiveReasonEnum.html), [PolSourceIssueRiskEnum] (CSSPEnums.PolSourceIssueRiskEnum.html), [PositionEnum] (CSSPEnums.PositionEnum.html), [PreliminaryTreatmentTypeEnum] (CSSPEnums.PreliminaryTreatmentTypeEnum.html), [PrimaryTreatmentTypeEnum] (CSSPEnums.PrimaryTreatmentTypeEnum.html), [PropertyTypeEnum] (CSSPEnums.PropertyTypeEnum.html), [ReportConditionEnum] (CSSPEnums.ReportConditionEnum.html), [ReportFieldTypeEnum] (CSSPEnums.ReportFieldTypeEnum.html), [ReportFileTypeEnum] (CSSPEnums.ReportFileTypeEnum.html), [ReportFormatingDateEnum] (CSSPEnums.ReportFormatingDateEnum.html), [ReportFormatingNumberEnum] (CSSPEnums.ReportFormatingNumberEnum.html), [ReportGenerateObjectsKeywordEnum] (CSSPEnums.ReportGenerateObjectsKeywordEnum.html), [ReportSortingEnum] (CSSPEnums.ReportSortingEnum.html), [ReportTreeNodeSubTypeEnum] (CSSPEnums.ReportTreeNodeSubTypeEnum.html), [ReportTreeNodeTypeEnum] (CSSPEnums.ReportTreeNodeTypeEnum.html), [SameDayNextDayEnum] (CSSPEnums.SameDayNextDayEnum.html), [SampleMatrixEnum] (CSSPEnums.SampleMatrixEnum.html), [SampleStatusEnum] (CSSPEnums.SampleStatusEnum.html), [SampleTypeEnum] (CSSPEnums.SampleTypeEnum.html), [SamplingPlanTypeEnum] (CSSPEnums.SamplingPlanTypeEnum.html), [ScenarioStatusEnum] (CSSPEnums.ScenarioStatusEnum.html), [SearchTagEnum] (CSSPEnums.SearchTagEnum.html), [SecondaryTreatmentTypeEnum] (CSSPEnums.SecondaryTreatmentTypeEnum.html), [SiteTypeEnum] (CSSPEnums.SiteTypeEnum.html), [SpecialTableTypeEnum] (CSSPEnums.SpecialTableTypeEnum.html), [StorageDataTypeEnum] (CSSPEnums.StorageDataTypeEnum.html), [StreetTypeEnum] (CSSPEnums.StreetTypeEnum.html), [TelTypeEnum] (CSSPEnums.TelTypeEnum.html), [TertiaryTreatmentTypeEnum] (CSSPEnums.TertiaryTreatmentTypeEnum.html), [TideDataTypeEnum] (CSSPEnums.TideDataTypeEnum.html), [TideTextEnum] (CSSPEnums.TideTextEnum.html), [TranslationStatusEnum] (CSSPEnums.TranslationStatusEnum.html), [TreatmentTypeEnum] (CSSPEnums.TreatmentTypeEnum.html), [TVAuthEnum] (CSSPEnums.TVAuthEnum.html), [TVTypeEnum] (CSSPEnums.TVTypeEnum.html), [WebTideDataSetEnum] (CSSPEnums.WebTideDataSetEnum.html), [WhereOperatorEnum] (CSSPEnums.WhereOperatorEnum.html), [PolSourceObsInfoEnum] (CSSPEnums.PolSourceObsInfoEnum</para>
        /// > <para>**Return to [CSSPEnums](CSSPEnums.html)**</para>
        /// > <para>**Allowable <c>[PolSourceObsInfoTypeEnum] (CSSPEnums.PolSourceObsInfoTypeEnum.html)</c>:** Description,Report,Text,Initial,</para>
        /// > <para>**Return to [CSSPEnums](CSSPEnums.html)**</para>
        /// </summary>
        /// <param name="type">One of the allowable types (Enum)</param>
        /// <param name="ID">ID representing the enumeration values (int?)</param>
        /// <param name="polSourceObsInfoTypeEnum">Null or one of the allowable PolSourceObsInfoTypeEnum</param>
        /// <returns>Will return the Enum text for one of the allowable languages [LanguageEnum.en, LanguageEnum.fr]</returns>
        public string GetResValueForTypeAndID(Type type, int? ID, PolSourceObsInfoTypeEnum? polSourceObsInfoTypeEnum = null)
        {
            if (LanguageRequest.ToString() != Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName)
            {
                if (LanguageRequest == LanguageEnum.fr)
                {
                    Thread.CurrentThread.CurrentCulture = new CultureInfo("fr-CA");
                    Thread.CurrentThread.CurrentUICulture = new CultureInfo("fr-CA");
                }
                else
                {
                    Thread.CurrentThread.CurrentCulture = new CultureInfo("en-CA");
                    Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-CA");
                }
            }

            string enumName = type.Name;

            switch (enumName)
            {
                case "ActionDBTypeEnum":
                    return GetEnumText_ActionDBTypeEnum((ID == null ? null : (ActionDBTypeEnum?)ID));
                case "AddContactTypeEnum":
                    return GetEnumText_AddContactTypeEnum((ID == null ? null : (AddContactTypeEnum?)ID));
                case "DatabaseTypeEnum":
                    return GetEnumText_DatabaseTypeEnum((ID == null ? null : (DatabaseTypeEnum?)ID));
                case "EntityQueryTypeEnum":
                    return GetEnumText_EntityQueryTypeEnum((ID == null ? null : (EntityQueryTypeEnum?)ID));
                case "PolSourceObsInfoTypeEnum":
                    return GetEnumText_PolSourceObsInfoTypeEnum((ID == null ? null : (PolSourceObsInfoTypeEnum?)ID));
                case "AddressTypeEnum":
                    return GetEnumText_AddressTypeEnum((ID == null ? null : (AddressTypeEnum?)ID));
                case "AerationTypeEnum":
                    return GetEnumText_AerationTypeEnum((ID == null ? null : (AerationTypeEnum?)ID));
                case "AlarmSystemTypeEnum":
                    return GetEnumText_AlarmSystemTypeEnum((ID == null ? null : (AlarmSystemTypeEnum?)ID));
                case "AnalysisCalculationTypeEnum":
                    return GetEnumText_AnalysisCalculationTypeEnum((ID == null ? null : (AnalysisCalculationTypeEnum?)ID));
                case "AnalysisReportExportCommandEnum":
                    return GetEnumText_AnalysisReportExportCommandEnum((ID == null ? null : (AnalysisReportExportCommandEnum?)ID));
                case "AnalyzeMethodEnum":
                    return GetEnumText_AnalyzeMethodEnum((ID == null ? null : (AnalyzeMethodEnum?)ID));
                case "AppTaskCommandEnum":
                    return GetEnumText_AppTaskCommandEnum((ID == null ? null : (AppTaskCommandEnum?)ID));
                case "AppTaskStatusEnum":
                    return GetEnumText_AppTaskStatusEnum((ID == null ? null : (AppTaskStatusEnum?)ID));
                case "BeaufortScaleEnum":
                    return GetEnumText_BeaufortScaleEnum((ID == null ? null : (BeaufortScaleEnum?)ID));
                case "BoxModelResultTypeEnum":
                    return GetEnumText_BoxModelResultTypeEnum((ID == null ? null : (BoxModelResultTypeEnum?)ID));
                case "ClassificationTypeEnum":
                    return GetEnumText_ClassificationTypeEnum((ID == null ? null : (ClassificationTypeEnum?)ID));
                case "CollectionSystemTypeEnum":
                    return GetEnumText_CollectionSystemTypeEnum((ID == null ? null : (CollectionSystemTypeEnum?)ID));
                case "ContactTitleEnum":
                    return GetEnumText_ContactTitleEnum((ID == null ? null : (ContactTitleEnum?)ID));
                case "CSSPWQInputSheetTypeEnum":
                    return GetEnumText_CSSPWQInputSheetTypeEnum((ID == null ? null : (CSSPWQInputSheetTypeEnum?)ID));
                case "CSSPWQInputTypeEnum":
                    return GetEnumText_CSSPWQInputTypeEnum((ID == null ? null : (CSSPWQInputTypeEnum?)ID));
                case "DailyOrHourlyDataEnum":
                    return GetEnumText_DailyOrHourlyDataEnum((ID == null ? null : (DailyOrHourlyDataEnum?)ID));
                case "DisinfectionTypeEnum":
                    return GetEnumText_DisinfectionTypeEnum((ID == null ? null : (DisinfectionTypeEnum?)ID));
                case "DrogueTypeEnum":
                    return GetEnumText_DrogueTypeEnum((ID == null ? null : (DrogueTypeEnum?)ID));
                case "EmailTypeEnum":
                    return GetEnumText_EmailTypeEnum((ID == null ? null : (EmailTypeEnum?)ID));
                case "ExcelExportShowDataTypeEnum":
                    return GetEnumText_ExcelExportShowDataTypeEnum((ID == null ? null : (ExcelExportShowDataTypeEnum?)ID));
                case "FacilityTypeEnum":
                    return GetEnumText_FacilityTypeEnum((ID == null ? null : (FacilityTypeEnum?)ID));
                case "FilePurposeEnum":
                    return GetEnumText_FilePurposeEnum((ID == null ? null : (FilePurposeEnum?)ID));
                case "FileStatusEnum":
                    return GetEnumText_FileStatusEnum((ID == null ? null : (FileStatusEnum?)ID));
                case "FileTypeEnum":
                    return GetEnumText_FileTypeEnum((ID == null ? null : (FileTypeEnum?)ID));
                case "InfrastructureTypeEnum":
                    return GetEnumText_InfrastructureTypeEnum((ID == null ? null : (InfrastructureTypeEnum?)ID));
                case "KMZActionEnum":
                    return GetEnumText_KMZActionEnum((ID == null ? null : (KMZActionEnum?)ID));
                case "LaboratoryEnum":
                    return GetEnumText_LaboratoryEnum((ID == null ? null : (LaboratoryEnum?)ID));
                case "LabSheetStatusEnum":
                    return GetEnumText_LabSheetStatusEnum((ID == null ? null : (LabSheetStatusEnum?)ID));
                case "LabSheetTypeEnum":
                    return GetEnumText_LabSheetTypeEnum((ID == null ? null : (LabSheetTypeEnum?)ID));
                case "LanguageEnum":
                    return GetEnumText_LanguageEnum((ID == null ? null : (LanguageEnum?)ID));
                case "LogCommandEnum":
                    return GetEnumText_LogCommandEnum((ID == null ? null : (LogCommandEnum?)ID));
                case "MapInfoDrawTypeEnum":
                    return GetEnumText_MapInfoDrawTypeEnum((ID == null ? null : (MapInfoDrawTypeEnum?)ID));
                case "MikeBoundaryConditionLevelOrVelocityEnum":
                    return GetEnumText_MikeBoundaryConditionLevelOrVelocityEnum((ID == null ? null : (MikeBoundaryConditionLevelOrVelocityEnum?)ID));
                case "MikeScenarioSpecialResultKMLTypeEnum":
                    return GetEnumText_MikeScenarioSpecialResultKMLTypeEnum((ID == null ? null : (MikeScenarioSpecialResultKMLTypeEnum?)ID));
                case "MWQMSiteLatestClassificationEnum":
                    return GetEnumText_MWQMSiteLatestClassificationEnum((ID == null ? null : (MWQMSiteLatestClassificationEnum?)ID));
                case "PolSourceInactiveReasonEnum":
                    return GetEnumText_PolSourceInactiveReasonEnum((ID == null ? null : (PolSourceInactiveReasonEnum?)ID));
                case "PolSourceIssueRiskEnum":
                    return GetEnumText_PolSourceIssueRiskEnum((ID == null ? null : (PolSourceIssueRiskEnum?)ID));
                case "PositionEnum":
                    return GetEnumText_PositionEnum((ID == null ? null : (PositionEnum?)ID));
                case "PreliminaryTreatmentTypeEnum":
                    return GetEnumText_PreliminaryTreatmentTypeEnum((ID == null ? null : (PreliminaryTreatmentTypeEnum?)ID));
                case "PrimaryTreatmentTypeEnum":
                    return GetEnumText_PrimaryTreatmentTypeEnum((ID == null ? null : (PrimaryTreatmentTypeEnum?)ID));
                case "PropertyTypeEnum":
                    return GetEnumText_PropertyTypeEnum((ID == null ? null : (PropertyTypeEnum?)ID));
                case "ReportConditionEnum":
                    return GetEnumText_ReportConditionEnum((ID == null ? null : (ReportConditionEnum?)ID));
                case "ReportFieldTypeEnum":
                    return GetEnumText_ReportFieldTypeEnum((ID == null ? null : (ReportFieldTypeEnum?)ID));
                case "ReportFileTypeEnum":
                    return GetEnumText_ReportFileTypeEnum((ID == null ? null : (ReportFileTypeEnum?)ID));
                case "ReportFormatingDateEnum":
                    return GetEnumText_ReportFormatingDateEnum((ID == null ? null : (ReportFormatingDateEnum?)ID));
                case "ReportFormatingNumberEnum":
                    return GetEnumText_ReportFormatingNumberEnum((ID == null ? null : (ReportFormatingNumberEnum?)ID));
                case "ReportGenerateObjectsKeywordEnum":
                    return GetEnumText_ReportGenerateObjectsKeywordEnum((ID == null ? null : (ReportGenerateObjectsKeywordEnum?)ID));
                case "ReportSortingEnum":
                    return GetEnumText_ReportSortingEnum((ID == null ? null : (ReportSortingEnum?)ID));
                case "ReportTreeNodeSubTypeEnum":
                    return GetEnumText_ReportTreeNodeSubTypeEnum((ID == null ? null : (ReportTreeNodeSubTypeEnum?)ID));
                case "ReportTreeNodeTypeEnum":
                    return GetEnumText_ReportTreeNodeTypeEnum((ID == null ? null : (ReportTreeNodeTypeEnum?)ID));
                case "SameDayNextDayEnum":
                    return GetEnumText_SameDayNextDayEnum((ID == null ? null : (SameDayNextDayEnum?)ID));
                case "SampleMatrixEnum":
                    return GetEnumText_SampleMatrixEnum((ID == null ? null : (SampleMatrixEnum?)ID));
                case "SampleStatusEnum":
                    return GetEnumText_SampleStatusEnum((ID == null ? null : (SampleStatusEnum?)ID));
                case "SampleTypeEnum":
                    return GetEnumText_SampleTypeEnum((ID == null ? null : (SampleTypeEnum?)ID));
                case "SamplingPlanTypeEnum":
                    return GetEnumText_SamplingPlanTypeEnum((ID == null ? null : (SamplingPlanTypeEnum?)ID));
                case "ScenarioStatusEnum":
                    return GetEnumText_ScenarioStatusEnum((ID == null ? null : (ScenarioStatusEnum?)ID));
                case "SearchTagEnum":
                    return GetEnumText_SearchTagEnum((ID == null ? null : (SearchTagEnum?)ID));
                case "SecondaryTreatmentTypeEnum":
                    return GetEnumText_SecondaryTreatmentTypeEnum((ID == null ? null : (SecondaryTreatmentTypeEnum?)ID));
                case "SiteTypeEnum":
                    return GetEnumText_SiteTypeEnum((ID == null ? null : (SiteTypeEnum?)ID));
                case "SpecialTableTypeEnum":
                    return GetEnumText_SpecialTableTypeEnum((ID == null ? null : (SpecialTableTypeEnum?)ID));
                case "StorageDataTypeEnum":
                    return GetEnumText_StorageDataTypeEnum((ID == null ? null : (StorageDataTypeEnum?)ID));
                case "StreetTypeEnum":
                    return GetEnumText_StreetTypeEnum((ID == null ? null : (StreetTypeEnum?)ID));
                case "TelTypeEnum":
                    return GetEnumText_TelTypeEnum((ID == null ? null : (TelTypeEnum?)ID));
                case "TertiaryTreatmentTypeEnum":
                    return GetEnumText_TertiaryTreatmentTypeEnum((ID == null ? null : (TertiaryTreatmentTypeEnum?)ID));
                case "TideDataTypeEnum":
                    return GetEnumText_TideDataTypeEnum((ID == null ? null : (TideDataTypeEnum?)ID));
                case "TideTextEnum":
                    return GetEnumText_TideTextEnum((ID == null ? null : (TideTextEnum?)ID));
                case "TranslationStatusEnum":
                    return GetEnumText_TranslationStatusEnum((ID == null ? null : (TranslationStatusEnum?)ID));
                case "TreatmentTypeEnum":
                    return GetEnumText_TreatmentTypeEnum((ID == null ? null : (TreatmentTypeEnum?)ID));
                case "TVAuthEnum":
                    return GetEnumText_TVAuthEnum((ID == null ? null : (TVAuthEnum?)ID));
                case "TVTypeEnum":
                    return GetEnumText_TVTypeEnum((ID == null ? null : (TVTypeEnum?)ID));
                case "WebTideDataSetEnum":
                    return GetEnumText_WebTideDataSetEnum((ID == null ? null : (WebTideDataSetEnum?)ID));
                case "WhereOperatorEnum":
                    return GetEnumText_WhereOperatorEnum((ID == null ? null : (WhereOperatorEnum?)ID));
                case "PolSourceObsInfoEnum":
                {
                    switch (polSourceObsInfoTypeEnum)
                    {
                        case PolSourceObsInfoTypeEnum.Description:
                            return GetEnumText_PolSourceObsInfoDescEnum((ID == null ? null : (PolSourceObsInfoEnum?)ID));
                        case PolSourceObsInfoTypeEnum.Report:
                            return GetEnumText_PolSourceObsInfoReportEnum((ID == null ? null : (PolSourceObsInfoEnum?)ID));
                        case PolSourceObsInfoTypeEnum.Text:
                            return GetEnumText_PolSourceObsInfoTextEnum((ID == null ? null : (PolSourceObsInfoEnum?)ID));
                        case PolSourceObsInfoTypeEnum.Initial:
                            return GetEnumText_PolSourceObsInfoInitEnum((ID == null ? null : (PolSourceObsInfoEnum?)ID));
                        default:
                            return GetEnumText_PolSourceObsInfoEnum((ID == null ? null : (PolSourceObsInfoEnum?)ID));
                    }
                }
                default:
                    return "";
            }
        }
        #endregion Function public

        #region Functions private
        private string GetEnumText_ActionDBTypeEnum(ActionDBTypeEnum? actionDBType)
        {
            if (actionDBType == null)
                return CSSPEnumsRes.Empty;

            switch (actionDBType)
            {
                case ActionDBTypeEnum.Create:
                    return CSSPEnumsRes.ActionDBTypeEnumCreate;
                case ActionDBTypeEnum.Read:
                    return CSSPEnumsRes.ActionDBTypeEnumRead;
                case ActionDBTypeEnum.Update:
                    return CSSPEnumsRes.ActionDBTypeEnumUpdate;
                case ActionDBTypeEnum.Delete:
                    return CSSPEnumsRes.ActionDBTypeEnumDelete;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AddContactTypeEnum(AddContactTypeEnum? addContactType)
        {
            if (addContactType == null)
                return CSSPEnumsRes.Empty;

            switch (addContactType)
            {
                case AddContactTypeEnum.First:
                    return CSSPEnumsRes.AddContactTypeEnumFirst;
                case AddContactTypeEnum.Register:
                    return CSSPEnumsRes.AddContactTypeEnumRegister;
                case AddContactTypeEnum.LoggedIn:
                    return CSSPEnumsRes.AddContactTypeEnumLoggedIn;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_DatabaseTypeEnum(DatabaseTypeEnum? databaseType)
        {
            if (databaseType == null)
                return CSSPEnumsRes.Empty;

            switch (databaseType)
            {
                case DatabaseTypeEnum.MemoryCSSPDB:
                    return CSSPEnumsRes.DatabaseTypeEnumMemoryCSSPDB;
                case DatabaseTypeEnum.MemoryTestDB:
                    return CSSPEnumsRes.DatabaseTypeEnumMemoryTestDB;
                case DatabaseTypeEnum.SqlServerCSSPDB:
                    return CSSPEnumsRes.DatabaseTypeEnumSqlServerCSSPDB;
                case DatabaseTypeEnum.SqlServerTestDB:
                    return CSSPEnumsRes.DatabaseTypeEnumSqlServerTestDB;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_EntityQueryTypeEnum(EntityQueryTypeEnum? entityQueryType)
        {
            if (entityQueryType == null)
                return CSSPEnumsRes.Empty;

            switch (entityQueryType)
            {
                case EntityQueryTypeEnum.AsNoTracking:
                    return CSSPEnumsRes.EntityQueryTypeEnumAsNoTracking;
                case EntityQueryTypeEnum.WithTracking:
                    return CSSPEnumsRes.EntityQueryTypeEnumWithTracking;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PolSourceObsInfoTypeEnum(PolSourceObsInfoTypeEnum? polSourceObsInfoType)
        {
            if (polSourceObsInfoType == null)
                return CSSPEnumsRes.Empty;

            switch (polSourceObsInfoType)
            {
                case PolSourceObsInfoTypeEnum.Description:
                    return CSSPEnumsRes.PolSourceObsInfoTypeEnumDescription;
                case PolSourceObsInfoTypeEnum.Report:
                    return CSSPEnumsRes.PolSourceObsInfoTypeEnumReport;
                case PolSourceObsInfoTypeEnum.Text:
                    return CSSPEnumsRes.PolSourceObsInfoTypeEnumText;
                case PolSourceObsInfoTypeEnum.Initial:
                    return CSSPEnumsRes.PolSourceObsInfoTypeEnumInitial;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AddressTypeEnum(AddressTypeEnum? addressType)
        {
            if (addressType == null)
                return CSSPEnumsRes.Empty;

            switch (addressType)
            {
                case AddressTypeEnum.Mailing:
                    return CSSPEnumsRes.AddressTypeEnumMailing;
                case AddressTypeEnum.Shipping:
                    return CSSPEnumsRes.AddressTypeEnumShipping;
                case AddressTypeEnum.Civic:
                    return CSSPEnumsRes.AddressTypeEnumCivic;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AerationTypeEnum(AerationTypeEnum? aerationType)
        {
            if (aerationType == null)
                return CSSPEnumsRes.Empty;

            switch (aerationType)
            {
                case AerationTypeEnum.MechanicalAirLines:
                    return CSSPEnumsRes.AerationTypeEnumMechanicalAirLines;
                case AerationTypeEnum.MechanicalSurfaceMixers:
                    return CSSPEnumsRes.AerationTypeEnumMechanicalSurfaceMixers;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AlarmSystemTypeEnum(AlarmSystemTypeEnum? alarmSystemType)
        {
            if (alarmSystemType == null)
                return CSSPEnumsRes.Empty;

            switch (alarmSystemType)
            {
                case AlarmSystemTypeEnum.SCADA:
                    return CSSPEnumsRes.AlarmSystemTypeEnumSCADA;
                case AlarmSystemTypeEnum.None:
                    return CSSPEnumsRes.AlarmSystemTypeEnumNone;
                case AlarmSystemTypeEnum.OnlyVisualLight:
                    return CSSPEnumsRes.AlarmSystemTypeEnumOnlyVisualLight;
                case AlarmSystemTypeEnum.SCADAAndLight:
                    return CSSPEnumsRes.AlarmSystemTypeEnumSCADAAndLight;
                case AlarmSystemTypeEnum.PagerAndLight:
                    return CSSPEnumsRes.AlarmSystemTypeEnumPagerAndLight;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AnalysisCalculationTypeEnum(AnalysisCalculationTypeEnum? analysisCalculationType)
        {
            if (analysisCalculationType == null)
                return CSSPEnumsRes.Empty;

            switch (analysisCalculationType)
            {
                case AnalysisCalculationTypeEnum.AllAllAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumAllAllAll;
                case AnalysisCalculationTypeEnum.WetAllAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumWetAllAll;
                case AnalysisCalculationTypeEnum.DryAllAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumDryAllAll;
                case AnalysisCalculationTypeEnum.WetWetAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumWetWetAll;
                case AnalysisCalculationTypeEnum.DryDryAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumDryDryAll;
                case AnalysisCalculationTypeEnum.WetDryAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumWetDryAll;
                case AnalysisCalculationTypeEnum.DryWetAll:
                    return CSSPEnumsRes.AnalysisCalculationTypeEnumDryWetAll;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AnalysisReportExportCommandEnum(AnalysisReportExportCommandEnum? analysisReportExportCommand)
        {
            if (analysisReportExportCommand == null)
                return CSSPEnumsRes.Empty;

            switch (analysisReportExportCommand)
            {
                case AnalysisReportExportCommandEnum.Report:
                    return CSSPEnumsRes.AnalysisReportExportCommandEnumReport;
                case AnalysisReportExportCommandEnum.Excel:
                    return CSSPEnumsRes.AnalysisReportExportCommandEnumExcel;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AnalyzeMethodEnum(AnalyzeMethodEnum? analyzeMethod)
        {
            if (analyzeMethod == null)
                return CSSPEnumsRes.Empty;

            switch (analyzeMethod)
            {
                case AnalyzeMethodEnum.MF:
                    return CSSPEnumsRes.AnalyzeMethodEnumMF;
                case AnalyzeMethodEnum.ZZ_510Q:
                    return CSSPEnumsRes.AnalyzeMethodEnumZZ_510Q;
                case AnalyzeMethodEnum.ZZ_509Q:
                    return CSSPEnumsRes.AnalyzeMethodEnumZZ_509Q;
                case AnalyzeMethodEnum.ZZ_0:
                    return CSSPEnumsRes.AnalyzeMethodEnumZZ_0;
                case AnalyzeMethodEnum.ZZ_525Q:
                    return CSSPEnumsRes.AnalyzeMethodEnumZZ_525Q;
                case AnalyzeMethodEnum.MPN:
                    return CSSPEnumsRes.AnalyzeMethodEnumMPN;
                case AnalyzeMethodEnum.ZZ_0Q:
                    return CSSPEnumsRes.AnalyzeMethodEnumZZ_0Q;
                case AnalyzeMethodEnum.AnalyzeMethod8:
                    return CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod8;
                case AnalyzeMethodEnum.AnalyzeMethod9:
                    return CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod9;
                case AnalyzeMethodEnum.AnalyzeMethod10:
                    return CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod10;
                case AnalyzeMethodEnum.AnalyzeMethod11:
                    return CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod11;
                case AnalyzeMethodEnum.AnalyzeMethod12:
                    return CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod12;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AppTaskCommandEnum(AppTaskCommandEnum? appTaskCommand)
        {
            if (appTaskCommand == null)
                return CSSPEnumsRes.Empty;

            switch (appTaskCommand)
            {
                case AppTaskCommandEnum.GenerateWebTide:
                    return CSSPEnumsRes.AppTaskCommandEnumGenerateWebTide;
                case AppTaskCommandEnum.MikeScenarioAskToRun:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioAskToRun;
                case AppTaskCommandEnum.MikeScenarioImport:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioImport;
                case AppTaskCommandEnum.MikeScenarioOtherFileImport:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioOtherFileImport;
                case AppTaskCommandEnum.MikeScenarioRunning:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioRunning;
                case AppTaskCommandEnum.MikeScenarioToCancel:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioToCancel;
                case AppTaskCommandEnum.MikeScenarioWaitingToRun:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioWaitingToRun;
                case AppTaskCommandEnum.SetupWebTide:
                    return CSSPEnumsRes.AppTaskCommandEnumSetupWebTide;
                case AppTaskCommandEnum.UpdateClimateSiteInformation:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteInformation;
                case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyFromStartDateToEndDate:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyFromStartDateToEndDate;
                case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate;
                case AppTaskCommandEnum.CreateFCForm:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateFCForm;
                case AppTaskCommandEnum.CreateSamplingPlanSamplingPlanTextFile:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateSamplingPlanSamplingPlanTextFile;
                case AppTaskCommandEnum.CreateDocumentFromTemplate:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateDocumentFromTemplate;
                case AppTaskCommandEnum.GetClimateSitesDataForRunsOfYear:
                    return CSSPEnumsRes.AppTaskCommandEnumGetClimateSitesDataForRunsOfYear;
                case AppTaskCommandEnum.CreateWebTideDataWLAtFirstNode:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateWebTideDataWLAtFirstNode;
                case AppTaskCommandEnum.ExportEmailDistributionLists:
                    return CSSPEnumsRes.AppTaskCommandEnumExportEmailDistributionLists;
                case AppTaskCommandEnum.ExportAnalysisToExcel:
                    return CSSPEnumsRes.AppTaskCommandEnumExportAnalysisToExcel;
                case AppTaskCommandEnum.CreateDocumentFromParameters:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateDocumentFromParameters;
                case AppTaskCommandEnum.CreateDocxPDF:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateDocxPDF;
                case AppTaskCommandEnum.CreateXlsxPDF:
                    return CSSPEnumsRes.AppTaskCommandEnumCreateXlsxPDF;
                case AppTaskCommandEnum.OpenDataCSVOfMWQMSites:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSites;
                case AppTaskCommandEnum.OpenDataKMZOfMWQMSites:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataKMZOfMWQMSites;
                case AppTaskCommandEnum.OpenDataXlsxOfMWQMSitesAndSamples:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataXlsxOfMWQMSitesAndSamples;
                case AppTaskCommandEnum.OpenDataCSVOfMWQMSamples:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSamples;
                case AppTaskCommandEnum.GetAllPrecipitationForYear:
                    return CSSPEnumsRes.AppTaskCommandEnumGetAllPrecipitationForYear;
                case AppTaskCommandEnum.FillRunPrecipByClimateSitePriorityForYear:
                    return CSSPEnumsRes.AppTaskCommandEnumFillRunPrecipByClimateSitePriorityForYear;
                case AppTaskCommandEnum.FindMissingPrecipForProvince:
                    return CSSPEnumsRes.AppTaskCommandEnumFindMissingPrecipForProvince;
                case AppTaskCommandEnum.ExportToArcGIS:
                    return CSSPEnumsRes.AppTaskCommandEnumExportToArcGIS;
                case AppTaskCommandEnum.GenerateClassificationForCSSPWebToolsVisualization:
                    return CSSPEnumsRes.AppTaskCommandEnumGenerateClassificationForCSSPWebToolsVisualization;
                case AppTaskCommandEnum.GenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization:
                    return CSSPEnumsRes.AppTaskCommandEnumGenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization;
                case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSites:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSites;
                case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSamples:
                    return CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSamples;
                case AppTaskCommandEnum.ProvinceToolsCreateClassificationInputsKML:
                    return CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateClassificationInputsKML;
                case AppTaskCommandEnum.ProvinceToolsCreateGroupingInputsKML:
                    return CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateGroupingInputsKML;
                case AppTaskCommandEnum.ProvinceToolsCreateMWQMSitesAndPolSourceSitesKML:
                    return CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateMWQMSitesAndPolSourceSitesKML;
                case AppTaskCommandEnum.UpdateHydrometricSiteInformation:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteInformation;
                case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate;
                case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                    return CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate;
                case AppTaskCommandEnum.GetHydrometricSitesDataForRunsOfYear:
                    return CSSPEnumsRes.AppTaskCommandEnumGetHydrometricSitesDataForRunsOfYear;
                case AppTaskCommandEnum.GetAllDischargesForYear:
                    return CSSPEnumsRes.AppTaskCommandEnumGetAllDischargesForYear;
                case AppTaskCommandEnum.FillRunDischargesByHydrometricSitePriorityForYear:
                    return CSSPEnumsRes.AppTaskCommandEnumFillRunDischargesByHydrometricSitePriorityForYear;
                case AppTaskCommandEnum.FindMissingDischargesForProvince:
                    return CSSPEnumsRes.AppTaskCommandEnumFindMissingDischargesForProvince;
                case AppTaskCommandEnum.LoadHydrometricDataValue:
                    return CSSPEnumsRes.AppTaskCommandEnumLoadHydrometricDataValue;
                case AppTaskCommandEnum.GenerateKMLFileClassificationForCSSPWebToolsVisualization:
                    return CSSPEnumsRes.AppTaskCommandEnumGenerateKMLFileClassificationForCSSPWebToolsVisualization;
                case AppTaskCommandEnum.ProvinceToolsGenerateStats:
                    return CSSPEnumsRes.AppTaskCommandEnumProvinceToolsGenerateStats;
                case AppTaskCommandEnum.MikeScenarioPrepareResults:
                    return CSSPEnumsRes.AppTaskCommandEnumMikeScenarioPrepareResults;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_AppTaskStatusEnum(AppTaskStatusEnum? appTaskStatus)
        {
            if (appTaskStatus == null)
                return CSSPEnumsRes.Empty;

            switch (appTaskStatus)
            {
                case AppTaskStatusEnum.Created:
                    return CSSPEnumsRes.AppTaskStatusEnumCreated;
                case AppTaskStatusEnum.Running:
                    return CSSPEnumsRes.AppTaskStatusEnumRunning;
                case AppTaskStatusEnum.Completed:
                    return CSSPEnumsRes.AppTaskStatusEnumCompleted;
                case AppTaskStatusEnum.Cancelled:
                    return CSSPEnumsRes.AppTaskStatusEnumCancelled;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_BeaufortScaleEnum(BeaufortScaleEnum? beaufortScale)
        {
            if (beaufortScale == null)
                return CSSPEnumsRes.Empty;

            switch (beaufortScale)
            {
                case BeaufortScaleEnum.Calm:
                    return CSSPEnumsRes.BeaufortScaleEnumCalm;
                case BeaufortScaleEnum.LightAir:
                    return CSSPEnumsRes.BeaufortScaleEnumLightAir;
                case BeaufortScaleEnum.LightBreeze:
                    return CSSPEnumsRes.BeaufortScaleEnumLightBreeze;
                case BeaufortScaleEnum.GentleBreeze:
                    return CSSPEnumsRes.BeaufortScaleEnumGentleBreeze;
                case BeaufortScaleEnum.ModerateBreeze:
                    return CSSPEnumsRes.BeaufortScaleEnumModerateBreeze;
                case BeaufortScaleEnum.FreshBreeze:
                    return CSSPEnumsRes.BeaufortScaleEnumFreshBreeze;
                case BeaufortScaleEnum.StrongBreeze:
                    return CSSPEnumsRes.BeaufortScaleEnumStrongBreeze;
                case BeaufortScaleEnum.HighWind_ModerateGale_NearGale:
                    return CSSPEnumsRes.BeaufortScaleEnumHighWind_ModerateGale_NearGale;
                case BeaufortScaleEnum.Gale_FreshGale:
                    return CSSPEnumsRes.BeaufortScaleEnumGale_FreshGale;
                case BeaufortScaleEnum.Strong_SevereGale:
                    return CSSPEnumsRes.BeaufortScaleEnumStrong_SevereGale;
                case BeaufortScaleEnum.Storm_WholeGale:
                    return CSSPEnumsRes.BeaufortScaleEnumStorm_WholeGale;
                case BeaufortScaleEnum.ViolentStorm:
                    return CSSPEnumsRes.BeaufortScaleEnumViolentStorm;
                case BeaufortScaleEnum.HurricaneForce:
                    return CSSPEnumsRes.BeaufortScaleEnumHurricaneForce;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_BoxModelResultTypeEnum(BoxModelResultTypeEnum? boxModelResultType)
        {
            if (boxModelResultType == null)
                return CSSPEnumsRes.Empty;

            switch (boxModelResultType)
            {
                case BoxModelResultTypeEnum.Dilution:
                    return CSSPEnumsRes.BoxModelResultTypeEnumDilution;
                case BoxModelResultTypeEnum.NoDecayUntreated:
                    return CSSPEnumsRes.BoxModelResultTypeEnumNoDecayUntreated;
                case BoxModelResultTypeEnum.NoDecayPreDisinfection:
                    return CSSPEnumsRes.BoxModelResultTypeEnumNoDecayPreDisinfection;
                case BoxModelResultTypeEnum.DecayUntreated:
                    return CSSPEnumsRes.BoxModelResultTypeEnumDecayUntreated;
                case BoxModelResultTypeEnum.DecayPreDisinfection:
                    return CSSPEnumsRes.BoxModelResultTypeEnumDecayPreDisinfection;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ClassificationTypeEnum(ClassificationTypeEnum? classificationType)
        {
            if (classificationType == null)
                return CSSPEnumsRes.Empty;

            switch (classificationType)
            {
                case ClassificationTypeEnum.Approved:
                    return CSSPEnumsRes.ClassificationTypeEnumApproved;
                case ClassificationTypeEnum.Restricted:
                    return CSSPEnumsRes.ClassificationTypeEnumRestricted;
                case ClassificationTypeEnum.Prohibited:
                    return CSSPEnumsRes.ClassificationTypeEnumProhibited;
                case ClassificationTypeEnum.ConditionallyApproved:
                    return CSSPEnumsRes.ClassificationTypeEnumConditionallyApproved;
                case ClassificationTypeEnum.ConditionallyRestricted:
                    return CSSPEnumsRes.ClassificationTypeEnumConditionallyRestricted;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_CollectionSystemTypeEnum(CollectionSystemTypeEnum? collectionSystemType)
        {
            if (collectionSystemType == null)
                return CSSPEnumsRes.Empty;

            switch (collectionSystemType)
            {
                case CollectionSystemTypeEnum.CompletelySeparated:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCompletelySeparated;
                case CollectionSystemTypeEnum.CompletelyCombined:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCompletelyCombined;
                case CollectionSystemTypeEnum.Combined90Separated10:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined90Separated10;
                case CollectionSystemTypeEnum.Combined80Separated20:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined80Separated20;
                case CollectionSystemTypeEnum.Combined70Separated30:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined70Separated30;
                case CollectionSystemTypeEnum.Combined60Separated40:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined60Separated40;
                case CollectionSystemTypeEnum.Combined50Separated50:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined50Separated50;
                case CollectionSystemTypeEnum.Combined40Separated60:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined40Separated60;
                case CollectionSystemTypeEnum.Combined30Separated70:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined30Separated70;
                case CollectionSystemTypeEnum.Combined20Separated80:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined20Separated80;
                case CollectionSystemTypeEnum.Combined10Separated90:
                    return CSSPEnumsRes.CollectionSystemTypeEnumCombined10Separated90;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ContactTitleEnum(ContactTitleEnum? contactTitle)
        {
            if (contactTitle == null)
                return CSSPEnumsRes.Empty;

            switch (contactTitle)
            {
                case ContactTitleEnum.DirectorGeneral:
                    return CSSPEnumsRes.ContactTitleEnumDirectorGeneral;
                case ContactTitleEnum.DirectorPublicWorks:
                    return CSSPEnumsRes.ContactTitleEnumDirectorPublicWorks;
                case ContactTitleEnum.Superintendent:
                    return CSSPEnumsRes.ContactTitleEnumSuperintendent;
                case ContactTitleEnum.Engineer:
                    return CSSPEnumsRes.ContactTitleEnumEngineer;
                case ContactTitleEnum.Foreman:
                    return CSSPEnumsRes.ContactTitleEnumForeman;
                case ContactTitleEnum.Operator:
                    return CSSPEnumsRes.ContactTitleEnumOperator;
                case ContactTitleEnum.FacilitiesManager:
                    return CSSPEnumsRes.ContactTitleEnumFacilitiesManager;
                case ContactTitleEnum.Supervisor:
                    return CSSPEnumsRes.ContactTitleEnumSupervisor;
                case ContactTitleEnum.Technician:
                    return CSSPEnumsRes.ContactTitleEnumTechnician;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_CSSPWQInputSheetTypeEnum(CSSPWQInputSheetTypeEnum? cSSPWQInputSheetType)
        {
            if (cSSPWQInputSheetType == null)
                return CSSPEnumsRes.Empty;

            switch (cSSPWQInputSheetType)
            {
                case CSSPWQInputSheetTypeEnum.A1:
                    return CSSPEnumsRes.CSSPWQInputSheetTypeEnumA1;
                case CSSPWQInputSheetTypeEnum.LTB:
                    return CSSPEnumsRes.CSSPWQInputSheetTypeEnumLTB;
                case CSSPWQInputSheetTypeEnum.EC:
                    return CSSPEnumsRes.CSSPWQInputSheetTypeEnumEC;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_CSSPWQInputTypeEnum(CSSPWQInputTypeEnum? cSSPWQInputType)
        {
            if (cSSPWQInputType == null)
                return CSSPEnumsRes.Empty;

            switch (cSSPWQInputType)
            {
                case CSSPWQInputTypeEnum.Subsector:
                    return CSSPEnumsRes.CSSPWQInputTypeEnumSubsector;
                case CSSPWQInputTypeEnum.Municipality:
                    return CSSPEnumsRes.CSSPWQInputTypeEnumMunicipality;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_DailyOrHourlyDataEnum(DailyOrHourlyDataEnum? dailyOrHourlyData)
        {
            if (dailyOrHourlyData == null)
                return CSSPEnumsRes.Empty;

            switch (dailyOrHourlyData)
            {
                case DailyOrHourlyDataEnum.Daily:
                    return CSSPEnumsRes.DailyOrHourlyDataEnumDaily;
                case DailyOrHourlyDataEnum.Hourly:
                    return CSSPEnumsRes.DailyOrHourlyDataEnumHourly;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_DisinfectionTypeEnum(DisinfectionTypeEnum? disinfectionType)
        {
            if (disinfectionType == null)
                return CSSPEnumsRes.Empty;

            switch (disinfectionType)
            {
                case DisinfectionTypeEnum.None:
                    return CSSPEnumsRes.DisinfectionTypeEnumNone;
                case DisinfectionTypeEnum.UV:
                    return CSSPEnumsRes.DisinfectionTypeEnumUV;
                case DisinfectionTypeEnum.ChlorinationNoDechlorination:
                    return CSSPEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorination;
                case DisinfectionTypeEnum.ChlorinationWithDechlorination:
                    return CSSPEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorination;
                case DisinfectionTypeEnum.UVSeasonal:
                    return CSSPEnumsRes.DisinfectionTypeEnumUVSeasonal;
                case DisinfectionTypeEnum.ChlorinationNoDechlorinationSeasonal:
                    return CSSPEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorinationSeasonal;
                case DisinfectionTypeEnum.ChlorinationWithDechlorinationSeasonal:
                    return CSSPEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorinationSeasonal;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_DrogueTypeEnum(DrogueTypeEnum? drogueType)
        {
            if (drogueType == null)
                return CSSPEnumsRes.Empty;

            switch (drogueType)
            {
                case DrogueTypeEnum.SmallDrogue:
                    return CSSPEnumsRes.DrogueTypeEnumSmallDrogue;
                case DrogueTypeEnum.LargeDrogue:
                    return CSSPEnumsRes.DrogueTypeEnumLargeDrogue;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_EmailTypeEnum(EmailTypeEnum? emailType)
        {
            if (emailType == null)
                return CSSPEnumsRes.Empty;

            switch (emailType)
            {
                case EmailTypeEnum.Personal:
                    return CSSPEnumsRes.EmailTypeEnumPersonal;
                case EmailTypeEnum.Work:
                    return CSSPEnumsRes.EmailTypeEnumWork;
                case EmailTypeEnum.Personal2:
                    return CSSPEnumsRes.EmailTypeEnumPersonal2;
                case EmailTypeEnum.Work2:
                    return CSSPEnumsRes.EmailTypeEnumWork2;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ExcelExportShowDataTypeEnum(ExcelExportShowDataTypeEnum? excelExportShowDataType)
        {
            if (excelExportShowDataType == null)
                return CSSPEnumsRes.Empty;

            switch (excelExportShowDataType)
            {
                case ExcelExportShowDataTypeEnum.FecalColiform:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumFecalColiform;
                case ExcelExportShowDataTypeEnum.Temperature:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumTemperature;
                case ExcelExportShowDataTypeEnum.Salinity:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumSalinity;
                case ExcelExportShowDataTypeEnum.P90:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumP90;
                case ExcelExportShowDataTypeEnum.GemetricMean:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumGemetricMean;
                case ExcelExportShowDataTypeEnum.Median:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumMedian;
                case ExcelExportShowDataTypeEnum.PercOfP90Over43:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over43;
                case ExcelExportShowDataTypeEnum.PercOfP90Over260:
                    return CSSPEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over260;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_FacilityTypeEnum(FacilityTypeEnum? facilityType)
        {
            if (facilityType == null)
                return CSSPEnumsRes.Empty;

            switch (facilityType)
            {
                case FacilityTypeEnum.Lagoon:
                    return CSSPEnumsRes.FacilityTypeEnumLagoon;
                case FacilityTypeEnum.Plant:
                    return CSSPEnumsRes.FacilityTypeEnumPlant;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_FilePurposeEnum(FilePurposeEnum? filePurpose)
        {
            if (filePurpose == null)
                return CSSPEnumsRes.Empty;

            switch (filePurpose)
            {
                case FilePurposeEnum.MikeInput:
                    return CSSPEnumsRes.FilePurposeEnumMikeInput;
                case FilePurposeEnum.MikeInputMDF:
                    return CSSPEnumsRes.FilePurposeEnumMikeInputMDF;
                case FilePurposeEnum.MikeResultDFSU:
                    return CSSPEnumsRes.FilePurposeEnumMikeResultDFSU;
                case FilePurposeEnum.MikeResultKMZ:
                    return CSSPEnumsRes.FilePurposeEnumMikeResultKMZ;
                case FilePurposeEnum.Information:
                    return CSSPEnumsRes.FilePurposeEnumInformation;
                case FilePurposeEnum.Image:
                    return CSSPEnumsRes.FilePurposeEnumImage;
                case FilePurposeEnum.Picture:
                    return CSSPEnumsRes.FilePurposeEnumPicture;
                case FilePurposeEnum.ReportGenerated:
                    return CSSPEnumsRes.FilePurposeEnumReportGenerated;
                case FilePurposeEnum.TemplateGenerated:
                    return CSSPEnumsRes.FilePurposeEnumTemplateGenerated;
                case FilePurposeEnum.GeneratedFCForm:
                    return CSSPEnumsRes.FilePurposeEnumGeneratedFCForm;
                case FilePurposeEnum.Template:
                    return CSSPEnumsRes.FilePurposeEnumTemplate;
                case FilePurposeEnum.Map:
                    return CSSPEnumsRes.FilePurposeEnumMap;
                case FilePurposeEnum.Analysis:
                    return CSSPEnumsRes.FilePurposeEnumAnalysis;
                case FilePurposeEnum.OpenData:
                    return CSSPEnumsRes.FilePurposeEnumOpenData;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_FileStatusEnum(FileStatusEnum? fileStatus)
        {
            if (fileStatus == null)
                return CSSPEnumsRes.Empty;

            switch (fileStatus)
            {
                case FileStatusEnum.Changed:
                    return CSSPEnumsRes.FileStatusEnumChanged;
                case FileStatusEnum.Sent:
                    return CSSPEnumsRes.FileStatusEnumSent;
                case FileStatusEnum.Accepted:
                    return CSSPEnumsRes.FileStatusEnumAccepted;
                case FileStatusEnum.Rejected:
                    return CSSPEnumsRes.FileStatusEnumRejected;
                case FileStatusEnum.Fail:
                    return CSSPEnumsRes.FileStatusEnumFail;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_FileTypeEnum(FileTypeEnum? fileType)
        {
            if (fileType == null)
                return CSSPEnumsRes.Empty;

            switch (fileType)
            {
                case FileTypeEnum.DFS0:
                    return CSSPEnumsRes.FileTypeEnumDFS0;
                case FileTypeEnum.DFS1:
                    return CSSPEnumsRes.FileTypeEnumDFS1;
                case FileTypeEnum.DFSU:
                    return CSSPEnumsRes.FileTypeEnumDFSU;
                case FileTypeEnum.KMZ:
                    return CSSPEnumsRes.FileTypeEnumKMZ;
                case FileTypeEnum.LOG:
                    return CSSPEnumsRes.FileTypeEnumLOG;
                case FileTypeEnum.M21FM:
                    return CSSPEnumsRes.FileTypeEnumM21FM;
                case FileTypeEnum.M3FM:
                    return CSSPEnumsRes.FileTypeEnumM3FM;
                case FileTypeEnum.MDF:
                    return CSSPEnumsRes.FileTypeEnumMDF;
                case FileTypeEnum.MESH:
                    return CSSPEnumsRes.FileTypeEnumMESH;
                case FileTypeEnum.XLSX:
                    return CSSPEnumsRes.FileTypeEnumXLSX;
                case FileTypeEnum.DOCX:
                    return CSSPEnumsRes.FileTypeEnumDOCX;
                case FileTypeEnum.PDF:
                    return CSSPEnumsRes.FileTypeEnumPDF;
                case FileTypeEnum.JPG:
                    return CSSPEnumsRes.FileTypeEnumJPG;
                case FileTypeEnum.JPEG:
                    return CSSPEnumsRes.FileTypeEnumJPEG;
                case FileTypeEnum.GIF:
                    return CSSPEnumsRes.FileTypeEnumGIF;
                case FileTypeEnum.PNG:
                    return CSSPEnumsRes.FileTypeEnumPNG;
                case FileTypeEnum.HTML:
                    return CSSPEnumsRes.FileTypeEnumHTML;
                case FileTypeEnum.TXT:
                    return CSSPEnumsRes.FileTypeEnumTXT;
                case FileTypeEnum.XYZ:
                    return CSSPEnumsRes.FileTypeEnumXYZ;
                case FileTypeEnum.KML:
                    return CSSPEnumsRes.FileTypeEnumKML;
                case FileTypeEnum.CSV:
                    return CSSPEnumsRes.FileTypeEnumCSV;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_InfrastructureTypeEnum(InfrastructureTypeEnum? infrastructureType)
        {
            if (infrastructureType == null)
                return CSSPEnumsRes.Empty;

            switch (infrastructureType)
            {
                case InfrastructureTypeEnum.WWTP:
                    return CSSPEnumsRes.InfrastructureTypeEnumWWTP;
                case InfrastructureTypeEnum.LiftStation:
                    return CSSPEnumsRes.InfrastructureTypeEnumLiftStation;
                case InfrastructureTypeEnum.Other:
                    return CSSPEnumsRes.InfrastructureTypeEnumOther;
                case InfrastructureTypeEnum.SeeOtherMunicipality:
                    return CSSPEnumsRes.InfrastructureTypeEnumSeeOtherMunicipality;
                case InfrastructureTypeEnum.LineOverflow:
                    return CSSPEnumsRes.InfrastructureTypeEnumLineOverflow;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_KMZActionEnum(KMZActionEnum? kMZAction)
        {
            if (kMZAction == null)
                return CSSPEnumsRes.Empty;

            switch (kMZAction)
            {
                case KMZActionEnum.DoNothing:
                    return CSSPEnumsRes.KMZActionEnumDoNothing;
                case KMZActionEnum.GenerateKMZContourAnimation:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZContourAnimation;
                case KMZActionEnum.GenerateKMZContourLimit:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZContourLimit;
                case KMZActionEnum.GenerateKMZCurrentAnimation:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZCurrentAnimation;
                case KMZActionEnum.GenerateKMZCurrentMaximum:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZCurrentMaximum;
                case KMZActionEnum.GenerateKMZMesh:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZMesh;
                case KMZActionEnum.GenerateKMZStudyArea:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZStudyArea;
                case KMZActionEnum.GenerateKMZBoundaryConditionNodes:
                    return CSSPEnumsRes.KMZActionEnumGenerateKMZBoundaryConditionNodes;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_LaboratoryEnum(LaboratoryEnum? laboratory)
        {
            if (laboratory == null)
                return CSSPEnumsRes.Empty;

            switch (laboratory)
            {
                case LaboratoryEnum.ZZ_0:
                    return CSSPEnumsRes.LaboratoryEnumZZ_0;
                case LaboratoryEnum.ZZ_1:
                    return CSSPEnumsRes.LaboratoryEnumZZ_1;
                case LaboratoryEnum.ZZ_2:
                    return CSSPEnumsRes.LaboratoryEnumZZ_2;
                case LaboratoryEnum.ZZ_3:
                    return CSSPEnumsRes.LaboratoryEnumZZ_3;
                case LaboratoryEnum.ZZ_4:
                    return CSSPEnumsRes.LaboratoryEnumZZ_4;
                case LaboratoryEnum.ZZ_1Q:
                    return CSSPEnumsRes.LaboratoryEnumZZ_1Q;
                case LaboratoryEnum.ZZ_2Q:
                    return CSSPEnumsRes.LaboratoryEnumZZ_2Q;
                case LaboratoryEnum.ZZ_3Q:
                    return CSSPEnumsRes.LaboratoryEnumZZ_3Q;
                case LaboratoryEnum.ZZ_4Q:
                    return CSSPEnumsRes.LaboratoryEnumZZ_4Q;
                case LaboratoryEnum.ZZ_5Q:
                    return CSSPEnumsRes.LaboratoryEnumZZ_5Q;
                case LaboratoryEnum.ZZ_11BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_11BC;
                case LaboratoryEnum.ZZ_12BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_12BC;
                case LaboratoryEnum.ZZ_13BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_13BC;
                case LaboratoryEnum.ZZ_14BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_14BC;
                case LaboratoryEnum.ZZ_15BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_15BC;
                case LaboratoryEnum.ZZ_16BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_16BC;
                case LaboratoryEnum.ZZ_17BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_17BC;
                case LaboratoryEnum.ZZ_18BC:
                    return CSSPEnumsRes.LaboratoryEnumZZ_18BC;
                case LaboratoryEnum.MonctonEnvironmentCanada:
                    return CSSPEnumsRes.LaboratoryEnumMonctonEnvironmentCanada;
                case LaboratoryEnum.BIOEnvironmentCanada:
                    return CSSPEnumsRes.LaboratoryEnumBIOEnvironmentCanada;
                case LaboratoryEnum.EasternCharlotteWaterwayLaboratory:
                    return CSSPEnumsRes.LaboratoryEnumEasternCharlotteWaterwayLaboratory;
                case LaboratoryEnum.InstitutDeRechercheSurLesZonesCotieres:
                    return CSSPEnumsRes.LaboratoryEnumInstitutDeRechercheSurLesZonesCotieres;
                case LaboratoryEnum.CentreDeRechercheSurLesAliments:
                    return CSSPEnumsRes.LaboratoryEnumCentreDeRechercheSurLesAliments;
                case LaboratoryEnum.CaraquetMobileLaboratoryEnvironmentCanada:
                    return CSSPEnumsRes.LaboratoryEnumCaraquetMobileLaboratoryEnvironmentCanada;
                case LaboratoryEnum.MaxxamAnalyticsBedford:
                    return CSSPEnumsRes.LaboratoryEnumMaxxamAnalyticsBedford;
                case LaboratoryEnum.MaxxamAnalyticsSydney:
                    return CSSPEnumsRes.LaboratoryEnumMaxxamAnalyticsSydney;
                case LaboratoryEnum.PEIAnalyticalLaboratory:
                    return CSSPEnumsRes.LaboratoryEnumPEIAnalyticalLaboratory;
                case LaboratoryEnum.NLMobileLaboratory:
                    return CSSPEnumsRes.LaboratoryEnumNLMobileLaboratory;
                case LaboratoryEnum.AvalonLaboratoriesInc:
                    return CSSPEnumsRes.LaboratoryEnumAvalonLaboratoriesInc;
                case LaboratoryEnum.Maxxam:
                    return CSSPEnumsRes.LaboratoryEnumMaxxam;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_LabSheetStatusEnum(LabSheetStatusEnum? labSheetStatus)
        {
            if (labSheetStatus == null)
                return CSSPEnumsRes.Empty;

            switch (labSheetStatus)
            {
                case LabSheetStatusEnum.Created:
                    return CSSPEnumsRes.LabSheetStatusEnumCreated;
                case LabSheetStatusEnum.Transferred:
                    return CSSPEnumsRes.LabSheetStatusEnumTransferred;
                case LabSheetStatusEnum.Accepted:
                    return CSSPEnumsRes.LabSheetStatusEnumAccepted;
                case LabSheetStatusEnum.Rejected:
                    return CSSPEnumsRes.LabSheetStatusEnumRejected;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_LabSheetTypeEnum(LabSheetTypeEnum? labSheetType)
        {
            if (labSheetType == null)
                return CSSPEnumsRes.Empty;

            switch (labSheetType)
            {
                case LabSheetTypeEnum.A1:
                    return CSSPEnumsRes.LabSheetTypeEnumA1;
                case LabSheetTypeEnum.LTB:
                    return CSSPEnumsRes.LabSheetTypeEnumLTB;
                case LabSheetTypeEnum.EC:
                    return CSSPEnumsRes.LabSheetTypeEnumEC;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_LanguageEnum(LanguageEnum? language)
        {
            if (language == null)
                return CSSPEnumsRes.Empty;

            switch (language)
            {
                case LanguageEnum.en:
                    return CSSPEnumsRes.LanguageEnumen;
                case LanguageEnum.fr:
                    return CSSPEnumsRes.LanguageEnumfr;
                case LanguageEnum.enAndfr:
                    return CSSPEnumsRes.LanguageEnumenAndfr;
                case LanguageEnum.es:
                    return CSSPEnumsRes.LanguageEnumes;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_LogCommandEnum(LogCommandEnum? logCommand)
        {
            if (logCommand == null)
                return CSSPEnumsRes.Empty;

            switch (logCommand)
            {
                case LogCommandEnum.Add:
                    return CSSPEnumsRes.LogCommandEnumAdd;
                case LogCommandEnum.Change:
                    return CSSPEnumsRes.LogCommandEnumChange;
                case LogCommandEnum.Delete:
                    return CSSPEnumsRes.LogCommandEnumDelete;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_MapInfoDrawTypeEnum(MapInfoDrawTypeEnum? mapInfoDrawType)
        {
            if (mapInfoDrawType == null)
                return CSSPEnumsRes.Empty;

            switch (mapInfoDrawType)
            {
                case MapInfoDrawTypeEnum.Point:
                    return CSSPEnumsRes.MapInfoDrawTypeEnumPoint;
                case MapInfoDrawTypeEnum.Polyline:
                    return CSSPEnumsRes.MapInfoDrawTypeEnumPolyline;
                case MapInfoDrawTypeEnum.Polygon:
                    return CSSPEnumsRes.MapInfoDrawTypeEnumPolygon;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_MikeBoundaryConditionLevelOrVelocityEnum(MikeBoundaryConditionLevelOrVelocityEnum? mikeBoundaryConditionLevelOrVelocity)
        {
            if (mikeBoundaryConditionLevelOrVelocity == null)
                return CSSPEnumsRes.Empty;

            switch (mikeBoundaryConditionLevelOrVelocity)
            {
                case MikeBoundaryConditionLevelOrVelocityEnum.Level:
                    return CSSPEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumLevel;
                case MikeBoundaryConditionLevelOrVelocityEnum.Velocity:
                    return CSSPEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumVelocity;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_MikeScenarioSpecialResultKMLTypeEnum(MikeScenarioSpecialResultKMLTypeEnum? mikeScenarioSpecialResultKMLType)
        {
            if (mikeScenarioSpecialResultKMLType == null)
                return CSSPEnumsRes.Empty;

            switch (mikeScenarioSpecialResultKMLType)
            {
                case MikeScenarioSpecialResultKMLTypeEnum.Mesh:
                    return CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumMesh;
                case MikeScenarioSpecialResultKMLTypeEnum.StudyArea:
                    return CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumStudyArea;
                case MikeScenarioSpecialResultKMLTypeEnum.BoundaryConditions:
                    return CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumBoundaryConditions;
                case MikeScenarioSpecialResultKMLTypeEnum.PollutionLimit:
                    return CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionLimit;
                case MikeScenarioSpecialResultKMLTypeEnum.PollutionAnimation:
                    return CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionAnimation;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_MWQMSiteLatestClassificationEnum(MWQMSiteLatestClassificationEnum? mWQMSiteLatestClassification)
        {
            if (mWQMSiteLatestClassification == null)
                return CSSPEnumsRes.Empty;

            switch (mWQMSiteLatestClassification)
            {
                case MWQMSiteLatestClassificationEnum.Approved:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumApproved;
                case MWQMSiteLatestClassificationEnum.ConditionallyApproved:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumConditionallyApproved;
                case MWQMSiteLatestClassificationEnum.Restricted:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumRestricted;
                case MWQMSiteLatestClassificationEnum.ConditionallyRestricted:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumConditionallyRestricted;
                case MWQMSiteLatestClassificationEnum.Prohibited:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumProhibited;
                case MWQMSiteLatestClassificationEnum.Unclassified:
                    return CSSPEnumsRes.MWQMSiteLatestClassificationEnumUnclassified;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PolSourceInactiveReasonEnum(PolSourceInactiveReasonEnum? polSourceInactiveReason)
        {
            if (polSourceInactiveReason == null)
                return CSSPEnumsRes.Empty;

            switch (polSourceInactiveReason)
            {
                case PolSourceInactiveReasonEnum.Abandoned:
                    return CSSPEnumsRes.PolSourceInactiveReasonEnumAbandoned;
                case PolSourceInactiveReasonEnum.Closed:
                    return CSSPEnumsRes.PolSourceInactiveReasonEnumClosed;
                case PolSourceInactiveReasonEnum.Removed:
                    return CSSPEnumsRes.PolSourceInactiveReasonEnumRemoved;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PolSourceIssueRiskEnum(PolSourceIssueRiskEnum? polSourceIssueRisk)
        {
            if (polSourceIssueRisk == null)
                return CSSPEnumsRes.Empty;

            switch (polSourceIssueRisk)
            {
                case PolSourceIssueRiskEnum.LowRisk:
                    return CSSPEnumsRes.PolSourceIssueRiskEnumLowRisk;
                case PolSourceIssueRiskEnum.ModerateRisk:
                    return CSSPEnumsRes.PolSourceIssueRiskEnumModerateRisk;
                case PolSourceIssueRiskEnum.HighRisk:
                    return CSSPEnumsRes.PolSourceIssueRiskEnumHighRisk;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PositionEnum(PositionEnum? position)
        {
            if (position == null)
                return CSSPEnumsRes.Empty;

            switch (position)
            {
                case PositionEnum.LeftBottom:
                    return CSSPEnumsRes.PositionEnumLeftBottom;
                case PositionEnum.RightBottom:
                    return CSSPEnumsRes.PositionEnumRightBottom;
                case PositionEnum.LeftTop:
                    return CSSPEnumsRes.PositionEnumLeftTop;
                case PositionEnum.RightTop:
                    return CSSPEnumsRes.PositionEnumRightTop;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PreliminaryTreatmentTypeEnum(PreliminaryTreatmentTypeEnum? preliminaryTreatmentType)
        {
            if (preliminaryTreatmentType == null)
                return CSSPEnumsRes.Empty;

            switch (preliminaryTreatmentType)
            {
                case PreliminaryTreatmentTypeEnum.NotApplicable:
                    return CSSPEnumsRes.PreliminaryTreatmentTypeEnumNotApplicable;
                case PreliminaryTreatmentTypeEnum.BarScreen:
                    return CSSPEnumsRes.PreliminaryTreatmentTypeEnumBarScreen;
                case PreliminaryTreatmentTypeEnum.Grinder:
                    return CSSPEnumsRes.PreliminaryTreatmentTypeEnumGrinder;
                case PreliminaryTreatmentTypeEnum.MechanicalScreening:
                    return CSSPEnumsRes.PreliminaryTreatmentTypeEnumMechanicalScreening;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PrimaryTreatmentTypeEnum(PrimaryTreatmentTypeEnum? primaryTreatmentType)
        {
            if (primaryTreatmentType == null)
                return CSSPEnumsRes.Empty;

            switch (primaryTreatmentType)
            {
                case PrimaryTreatmentTypeEnum.NotApplicable:
                    return CSSPEnumsRes.PrimaryTreatmentTypeEnumNotApplicable;
                case PrimaryTreatmentTypeEnum.Sedimentation:
                    return CSSPEnumsRes.PrimaryTreatmentTypeEnumSedimentation;
                case PrimaryTreatmentTypeEnum.ChemicalCoagulation:
                    return CSSPEnumsRes.PrimaryTreatmentTypeEnumChemicalCoagulation;
                case PrimaryTreatmentTypeEnum.Filtration:
                    return CSSPEnumsRes.PrimaryTreatmentTypeEnumFiltration;
                case PrimaryTreatmentTypeEnum.PrimaryClarification:
                    return CSSPEnumsRes.PrimaryTreatmentTypeEnumPrimaryClarification;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_PropertyTypeEnum(PropertyTypeEnum? propertyType)
        {
            if (propertyType == null)
                return CSSPEnumsRes.Empty;

            switch (propertyType)
            {
                case PropertyTypeEnum.Int:
                    return CSSPEnumsRes.PropertyTypeEnumInt;
                case PropertyTypeEnum.Double:
                    return CSSPEnumsRes.PropertyTypeEnumDouble;
                case PropertyTypeEnum.String:
                    return CSSPEnumsRes.PropertyTypeEnumString;
                case PropertyTypeEnum.Boolean:
                    return CSSPEnumsRes.PropertyTypeEnumBoolean;
                case PropertyTypeEnum.DateTime:
                    return CSSPEnumsRes.PropertyTypeEnumDateTime;
                case PropertyTypeEnum.Enum:
                    return CSSPEnumsRes.PropertyTypeEnumEnum;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportConditionEnum(ReportConditionEnum? reportCondition)
        {
            if (reportCondition == null)
                return CSSPEnumsRes.Empty;

            switch (reportCondition)
            {
                case ReportConditionEnum.ReportConditionTrue:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionTrue;
                case ReportConditionEnum.ReportConditionFalse:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionFalse;
                case ReportConditionEnum.ReportConditionContain:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionContain;
                case ReportConditionEnum.ReportConditionStart:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionStart;
                case ReportConditionEnum.ReportConditionEnd:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionEnd;
                case ReportConditionEnum.ReportConditionBigger:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionBigger;
                case ReportConditionEnum.ReportConditionSmaller:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionSmaller;
                case ReportConditionEnum.ReportConditionEqual:
                    return CSSPEnumsRes.ReportConditionEnumReportConditionEqual;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportFieldTypeEnum(ReportFieldTypeEnum? reportFieldType)
        {
            if (reportFieldType == null)
                return CSSPEnumsRes.Empty;

            switch (reportFieldType)
            {
                case ReportFieldTypeEnum.NumberWhole:
                    return CSSPEnumsRes.ReportFieldTypeEnumNumberWhole;
                case ReportFieldTypeEnum.NumberWithDecimal:
                    return CSSPEnumsRes.ReportFieldTypeEnumNumberWithDecimal;
                case ReportFieldTypeEnum.DateAndTime:
                    return CSSPEnumsRes.ReportFieldTypeEnumDateAndTime;
                case ReportFieldTypeEnum.Text:
                    return CSSPEnumsRes.ReportFieldTypeEnumText;
                case ReportFieldTypeEnum.TrueOrFalse:
                    return CSSPEnumsRes.ReportFieldTypeEnumTrueOrFalse;
                case ReportFieldTypeEnum.FilePurpose:
                    return CSSPEnumsRes.ReportFieldTypeEnumFilePurpose;
                case ReportFieldTypeEnum.FileType:
                    return CSSPEnumsRes.ReportFieldTypeEnumFileType;
                case ReportFieldTypeEnum.TranslationStatus:
                    return CSSPEnumsRes.ReportFieldTypeEnumTranslationStatus;
                case ReportFieldTypeEnum.BoxModelResultType:
                    return CSSPEnumsRes.ReportFieldTypeEnumBoxModelResultType;
                case ReportFieldTypeEnum.InfrastructureType:
                    return CSSPEnumsRes.ReportFieldTypeEnumInfrastructureType;
                case ReportFieldTypeEnum.FacilityType:
                    return CSSPEnumsRes.ReportFieldTypeEnumFacilityType;
                case ReportFieldTypeEnum.AerationType:
                    return CSSPEnumsRes.ReportFieldTypeEnumAerationType;
                case ReportFieldTypeEnum.PreliminaryTreatmentType:
                    return CSSPEnumsRes.ReportFieldTypeEnumPreliminaryTreatmentType;
                case ReportFieldTypeEnum.PrimaryTreatmentType:
                    return CSSPEnumsRes.ReportFieldTypeEnumPrimaryTreatmentType;
                case ReportFieldTypeEnum.SecondaryTreatmentType:
                    return CSSPEnumsRes.ReportFieldTypeEnumSecondaryTreatmentType;
                case ReportFieldTypeEnum.TertiaryTreatmentType:
                    return CSSPEnumsRes.ReportFieldTypeEnumTertiaryTreatmentType;
                case ReportFieldTypeEnum.TreatmentType:
                    return CSSPEnumsRes.ReportFieldTypeEnumTreatmentType;
                case ReportFieldTypeEnum.DisinfectionType:
                    return CSSPEnumsRes.ReportFieldTypeEnumDisinfectionType;
                case ReportFieldTypeEnum.CollectionSystemType:
                    return CSSPEnumsRes.ReportFieldTypeEnumCollectionSystemType;
                case ReportFieldTypeEnum.AlarmSystemType:
                    return CSSPEnumsRes.ReportFieldTypeEnumAlarmSystemType;
                case ReportFieldTypeEnum.ScenarioStatus:
                    return CSSPEnumsRes.ReportFieldTypeEnumScenarioStatus;
                case ReportFieldTypeEnum.StorageDataType:
                    return CSSPEnumsRes.ReportFieldTypeEnumStorageDataType;
                case ReportFieldTypeEnum.Language:
                    return CSSPEnumsRes.ReportFieldTypeEnumLanguage;
                case ReportFieldTypeEnum.SampleType:
                    return CSSPEnumsRes.ReportFieldTypeEnumSampleType;
                case ReportFieldTypeEnum.BeaufortScale:
                    return CSSPEnumsRes.ReportFieldTypeEnumBeaufortScale;
                case ReportFieldTypeEnum.AnalyzeMethod:
                    return CSSPEnumsRes.ReportFieldTypeEnumAnalyzeMethod;
                case ReportFieldTypeEnum.SampleMatrix:
                    return CSSPEnumsRes.ReportFieldTypeEnumSampleMatrix;
                case ReportFieldTypeEnum.Laboratory:
                    return CSSPEnumsRes.ReportFieldTypeEnumLaboratory;
                case ReportFieldTypeEnum.SampleStatus:
                    return CSSPEnumsRes.ReportFieldTypeEnumSampleStatus;
                case ReportFieldTypeEnum.SamplingPlanType:
                    return CSSPEnumsRes.ReportFieldTypeEnumSamplingPlanType;
                case ReportFieldTypeEnum.LabSheetSampleType:
                    return CSSPEnumsRes.ReportFieldTypeEnumLabSheetSampleType;
                case ReportFieldTypeEnum.LabSheetType:
                    return CSSPEnumsRes.ReportFieldTypeEnumLabSheetType;
                case ReportFieldTypeEnum.LabSheetStatus:
                    return CSSPEnumsRes.ReportFieldTypeEnumLabSheetStatus;
                case ReportFieldTypeEnum.PolSourceInactiveReason:
                    return CSSPEnumsRes.ReportFieldTypeEnumPolSourceInactiveReason;
                case ReportFieldTypeEnum.PolSourceObsInfo:
                    return CSSPEnumsRes.ReportFieldTypeEnumPolSourceObsInfo;
                case ReportFieldTypeEnum.AddressType:
                    return CSSPEnumsRes.ReportFieldTypeEnumAddressType;
                case ReportFieldTypeEnum.StreetType:
                    return CSSPEnumsRes.ReportFieldTypeEnumStreetType;
                case ReportFieldTypeEnum.ContactTitle:
                    return CSSPEnumsRes.ReportFieldTypeEnumContactTitle;
                case ReportFieldTypeEnum.EmailType:
                    return CSSPEnumsRes.ReportFieldTypeEnumEmailType;
                case ReportFieldTypeEnum.TelType:
                    return CSSPEnumsRes.ReportFieldTypeEnumTelType;
                case ReportFieldTypeEnum.TideText:
                    return CSSPEnumsRes.ReportFieldTypeEnumTideText;
                case ReportFieldTypeEnum.TideDataType:
                    return CSSPEnumsRes.ReportFieldTypeEnumTideDataType;
                case ReportFieldTypeEnum.SpecialTableType:
                    return CSSPEnumsRes.ReportFieldTypeEnumSpecialTableType;
                case ReportFieldTypeEnum.MWQMSiteLatestClassification:
                    return CSSPEnumsRes.ReportFieldTypeEnumMWQMSiteLatestClassification;
                case ReportFieldTypeEnum.PolSourceIssueRisk:
                    return CSSPEnumsRes.ReportFieldTypeEnumPolSourceIssueRisk;
                case ReportFieldTypeEnum.MikeScenarioSpecialResultKMLType:
                    return CSSPEnumsRes.ReportFieldTypeEnumMikeScenarioSpecialResultKMLType;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportFileTypeEnum(ReportFileTypeEnum? reportFileType)
        {
            if (reportFileType == null)
                return CSSPEnumsRes.Empty;

            switch (reportFileType)
            {
                case ReportFileTypeEnum.CSV:
                    return CSSPEnumsRes.ReportFileTypeEnumCSV;
                case ReportFileTypeEnum.Word:
                    return CSSPEnumsRes.ReportFileTypeEnumWord;
                case ReportFileTypeEnum.Excel:
                    return CSSPEnumsRes.ReportFileTypeEnumExcel;
                case ReportFileTypeEnum.KML:
                    return CSSPEnumsRes.ReportFileTypeEnumKML;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportFormatingDateEnum(ReportFormatingDateEnum? reportFormatingDate)
        {
            if (reportFormatingDate == null)
                return CSSPEnumsRes.Empty;

            switch (reportFormatingDate)
            {
                case ReportFormatingDateEnum.ReportFormatingDateYearOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearOnly;
                case ReportFormatingDateEnum.ReportFormatingDateMonthDecimalOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthDecimalOnly;
                case ReportFormatingDateEnum.ReportFormatingDateMonthShortTextOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthShortTextOnly;
                case ReportFormatingDateEnum.ReportFormatingDateMonthFullTextOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthFullTextOnly;
                case ReportFormatingDateEnum.ReportFormatingDateDayOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateDayOnly;
                case ReportFormatingDateEnum.ReportFormatingDateHourOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateHourOnly;
                case ReportFormatingDateEnum.ReportFormatingDateMinuteOnly:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMinuteOnly;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDay:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDay;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDay:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDay;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDay:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDay;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDayHourMinute:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDayHourMinute;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDayHourMinute:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDayHourMinute;
                case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDayHourMinute:
                    return CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDayHourMinute;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportFormatingNumberEnum(ReportFormatingNumberEnum? reportFormatingNumber)
        {
            if (reportFormatingNumber == null)
                return CSSPEnumsRes.Empty;

            switch (reportFormatingNumber)
            {
                case ReportFormatingNumberEnum.ReportFormatingNumber0Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber0Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber1Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber1Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber2Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber2Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber3Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber3Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber4Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber4Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber5Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber5Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumber6Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber6Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific0Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific0Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific1Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific1Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific2Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific2Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific3Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific3Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific4Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific4Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific5Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific5Decimal;
                case ReportFormatingNumberEnum.ReportFormatingNumberScientific6Decimal:
                    return CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific6Decimal;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportGenerateObjectsKeywordEnum(ReportGenerateObjectsKeywordEnum? reportGenerateObjectsKeyword)
        {
            if (reportGenerateObjectsKeyword == null)
                return CSSPEnumsRes.Empty;

            switch (reportGenerateObjectsKeyword)
            {
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RE_EVALUATION_COVER_PAGE:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RE_EVALUATION_COVER_PAGE;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_ALL:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_ALL;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_WET:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_WET;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_DRY:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_DRY;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_DATA_AVAILABILITY:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_DATA_AVAILABILITY;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_FC_TABLE:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_FC_TABLE;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_SALINITY_TABLE:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_SALINITY_TABLE;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITIES;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_CONTACTS:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_CONTACTS;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_DETAIL:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_DETAIL;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_ECCC_AND_SWCP_LOGO:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_ECCC_AND_SWCP_LOGO;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CSSP_LOGO:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CSSP_LOGO;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP;
                case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP:
                    return CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportSortingEnum(ReportSortingEnum? reportSorting)
        {
            if (reportSorting == null)
                return CSSPEnumsRes.Empty;

            switch (reportSorting)
            {
                case ReportSortingEnum.ReportSortingAscending:
                    return CSSPEnumsRes.ReportSortingEnumReportSortingAscending;
                case ReportSortingEnum.ReportSortingDescending:
                    return CSSPEnumsRes.ReportSortingEnumReportSortingDescending;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportTreeNodeSubTypeEnum(ReportTreeNodeSubTypeEnum? reportTreeNodeSubType)
        {
            if (reportTreeNodeSubType == null)
                return CSSPEnumsRes.Empty;

            switch (reportTreeNodeSubType)
            {
                case ReportTreeNodeSubTypeEnum.TableSelectable:
                    return CSSPEnumsRes.ReportTreeNodeSubTypeEnumTableSelectable;
                case ReportTreeNodeSubTypeEnum.Field:
                    return CSSPEnumsRes.ReportTreeNodeSubTypeEnumField;
                case ReportTreeNodeSubTypeEnum.FieldsHolder:
                    return CSSPEnumsRes.ReportTreeNodeSubTypeEnumFieldsHolder;
                case ReportTreeNodeSubTypeEnum.TableNotSelectable:
                    return CSSPEnumsRes.ReportTreeNodeSubTypeEnumTableNotSelectable;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ReportTreeNodeTypeEnum(ReportTreeNodeTypeEnum? reportTreeNodeType)
        {
            if (reportTreeNodeType == null)
                return CSSPEnumsRes.Empty;

            switch (reportTreeNodeType)
            {
                case ReportTreeNodeTypeEnum.ReportRootType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportRootType;
                case ReportTreeNodeTypeEnum.ReportCountryType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportCountryType;
                case ReportTreeNodeTypeEnum.ReportProvinceType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportProvinceType;
                case ReportTreeNodeTypeEnum.ReportAreaType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportAreaType;
                case ReportTreeNodeTypeEnum.ReportSectorType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSectorType;
                case ReportTreeNodeTypeEnum.ReportSubsectorType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorType;
                case ReportTreeNodeTypeEnum.ReportMWQMSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunType;
                case ReportTreeNodeTypeEnum.ReportPolSourceSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityType;
                case ReportTreeNodeTypeEnum.ReportRootFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportRootFileType;
                case ReportTreeNodeTypeEnum.ReportInfrastructureType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureType;
                case ReportTreeNodeTypeEnum.ReportBoxModelType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportBoxModelType;
                case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioType;
                case ReportTreeNodeTypeEnum.ReportMikeScenarioType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioType;
                case ReportTreeNodeTypeEnum.ReportMikeSourceType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceType;
                case ReportTreeNodeTypeEnum.ReportMWQMSiteSampleType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteSampleType;
                case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsType;
                case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsIssueType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsIssueType;
                case ReportTreeNodeTypeEnum.ReportMikeScenarioGeneralParameterType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioGeneralParameterType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityContactType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactType;
                case ReportTreeNodeTypeEnum.ReportConditionType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportConditionType;
                case ReportTreeNodeTypeEnum.ReportStatisticType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportStatisticType;
                case ReportTreeNodeTypeEnum.ReportFieldsType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportFieldsType;
                case ReportTreeNodeTypeEnum.ReportFieldType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportFieldType;
                case ReportTreeNodeTypeEnum.ReportPolSourceSiteAddressType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteAddressType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityContactTelType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactTelType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityContactEmailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactEmailType;
                case ReportTreeNodeTypeEnum.ReportBoxModelResultType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportBoxModelResultType;
                case ReportTreeNodeTypeEnum.ReportClimateSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteType;
                case ReportTreeNodeTypeEnum.ReportClimateSiteDataType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteDataType;
                case ReportTreeNodeTypeEnum.ReportHydrometricSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteType;
                case ReportTreeNodeTypeEnum.ReportHydrometricSiteDataType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteDataType;
                case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveType;
                case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveValueType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveValueType;
                case ReportTreeNodeTypeEnum.ReportInfrastructureAddressType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureAddressType;
                case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetType;
                case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetDetailType;
                case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetTubeMPNDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetTubeMPNDetailType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunSampleType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunSampleType;
                case ReportTreeNodeTypeEnum.ReportCountryFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportCountryFileType;
                case ReportTreeNodeTypeEnum.ReportProvinceFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportProvinceFileType;
                case ReportTreeNodeTypeEnum.ReportAreaFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportAreaFileType;
                case ReportTreeNodeTypeEnum.ReportSectorFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSectorFileType;
                case ReportTreeNodeTypeEnum.ReportSubsectorFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorFileType;
                case ReportTreeNodeTypeEnum.ReportMWQMSiteFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteFileType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunFileType;
                case ReportTreeNodeTypeEnum.ReportPolSourceSiteFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteFileType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityFileType;
                case ReportTreeNodeTypeEnum.ReportInfrastructureFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureFileType;
                case ReportTreeNodeTypeEnum.ReportMikeScenarioFileType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioFileType;
                case ReportTreeNodeTypeEnum.ReportMikeSourceStartEndType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceStartEndType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetDetailType;
                case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetTubeMPNDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetTubeMPNDetailType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetDetailType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetTubeMPNDetailType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetTubeMPNDetailType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorType;
                case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorSiteType;
                case ReportTreeNodeTypeEnum.ReportMikeBoundaryConditionType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeBoundaryConditionType;
                case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioAmbientType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioAmbientType;
                case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioResultType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioResultType;
                case ReportTreeNodeTypeEnum.ReportMPNLookupType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMPNLookupType;
                case ReportTreeNodeTypeEnum.ReportMWQMSiteStartAndEndType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteStartAndEndType;
                case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteType;
                case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteDataType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteDataType;
                case ReportTreeNodeTypeEnum.ReportOrderType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportOrderType;
                case ReportTreeNodeTypeEnum.ReportFormatType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportFormatType;
                case ReportTreeNodeTypeEnum.ReportMunicipalityContactAddressType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactAddressType;
                case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteType;
                case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteType;
                case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteDataType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteDataType;
                case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveType;
                case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteDataType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteDataType;
                case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveValueType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveValueType;
                case ReportTreeNodeTypeEnum.ReportSubsectorSpecialTableType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorSpecialTableType;
                case ReportTreeNodeTypeEnum.ReportMikeScenarioSpecialResultKMLType:
                    return CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioSpecialResultKMLType;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SameDayNextDayEnum(SameDayNextDayEnum? sameDayNextDay)
        {
            if (sameDayNextDay == null)
                return CSSPEnumsRes.Empty;

            switch (sameDayNextDay)
            {
                case SameDayNextDayEnum.SameDay:
                    return CSSPEnumsRes.SameDayNextDayEnumSameDay;
                case SameDayNextDayEnum.NextDay:
                    return CSSPEnumsRes.SameDayNextDayEnumNextDay;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SampleMatrixEnum(SampleMatrixEnum? sampleMatrix)
        {
            if (sampleMatrix == null)
                return CSSPEnumsRes.Empty;

            switch (sampleMatrix)
            {
                case SampleMatrixEnum.W:
                    return CSSPEnumsRes.SampleMatrixEnumW;
                case SampleMatrixEnum.S:
                    return CSSPEnumsRes.SampleMatrixEnumS;
                case SampleMatrixEnum.B:
                    return CSSPEnumsRes.SampleMatrixEnumB;
                case SampleMatrixEnum.MPNQ:
                    return CSSPEnumsRes.SampleMatrixEnumMPNQ;
                case SampleMatrixEnum.SampleMatrix5:
                    return CSSPEnumsRes.SampleMatrixEnumSampleMatrix5;
                case SampleMatrixEnum.SampleMatrix6:
                    return CSSPEnumsRes.SampleMatrixEnumSampleMatrix6;
                case SampleMatrixEnum.Water:
                    return CSSPEnumsRes.SampleMatrixEnumWater;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SampleStatusEnum(SampleStatusEnum? sampleStatus)
        {
            if (sampleStatus == null)
                return CSSPEnumsRes.Empty;

            switch (sampleStatus)
            {
                case SampleStatusEnum.Active:
                    return CSSPEnumsRes.SampleStatusEnumActive;
                case SampleStatusEnum.Archived:
                    return CSSPEnumsRes.SampleStatusEnumArchived;
                case SampleStatusEnum.SampleStatus3:
                    return CSSPEnumsRes.SampleStatusEnumSampleStatus3;
                case SampleStatusEnum.SampleStatus4:
                    return CSSPEnumsRes.SampleStatusEnumSampleStatus4;
                case SampleStatusEnum.SampleStatus5:
                    return CSSPEnumsRes.SampleStatusEnumSampleStatus5;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SampleTypeEnum(SampleTypeEnum? sampleType)
        {
            if (sampleType == null)
                return CSSPEnumsRes.Empty;

            switch (sampleType)
            {
                case SampleTypeEnum.DailyDuplicate:
                    return CSSPEnumsRes.SampleTypeEnumDailyDuplicate;
                case SampleTypeEnum.Infrastructure:
                    return CSSPEnumsRes.SampleTypeEnumInfrastructure;
                case SampleTypeEnum.IntertechDuplicate:
                    return CSSPEnumsRes.SampleTypeEnumIntertechDuplicate;
                case SampleTypeEnum.IntertechRead:
                    return CSSPEnumsRes.SampleTypeEnumIntertechRead;
                case SampleTypeEnum.RainCMP:
                    return CSSPEnumsRes.SampleTypeEnumRainCMP;
                case SampleTypeEnum.RainRun:
                    return CSSPEnumsRes.SampleTypeEnumRainRun;
                case SampleTypeEnum.ReopeningEmergencyRain:
                    return CSSPEnumsRes.SampleTypeEnumReopeningEmergencyRain;
                case SampleTypeEnum.ReopeningSpill:
                    return CSSPEnumsRes.SampleTypeEnumReopeningSpill;
                case SampleTypeEnum.Routine:
                    return CSSPEnumsRes.SampleTypeEnumRoutine;
                case SampleTypeEnum.Sanitary:
                    return CSSPEnumsRes.SampleTypeEnumSanitary;
                case SampleTypeEnum.Study:
                    return CSSPEnumsRes.SampleTypeEnumStudy;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SamplingPlanTypeEnum(SamplingPlanTypeEnum? samplingPlanType)
        {
            if (samplingPlanType == null)
                return CSSPEnumsRes.Empty;

            switch (samplingPlanType)
            {
                case SamplingPlanTypeEnum.Subsector:
                    return CSSPEnumsRes.SamplingPlanTypeEnumSubsector;
                case SamplingPlanTypeEnum.Municipality:
                    return CSSPEnumsRes.SamplingPlanTypeEnumMunicipality;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_ScenarioStatusEnum(ScenarioStatusEnum? scenarioStatus)
        {
            if (scenarioStatus == null)
                return CSSPEnumsRes.Empty;

            switch (scenarioStatus)
            {
                case ScenarioStatusEnum.Normal:
                    return CSSPEnumsRes.ScenarioStatusEnumNormal;
                case ScenarioStatusEnum.Copying:
                    return CSSPEnumsRes.ScenarioStatusEnumCopying;
                case ScenarioStatusEnum.Copied:
                    return CSSPEnumsRes.ScenarioStatusEnumCopied;
                case ScenarioStatusEnum.Changing:
                    return CSSPEnumsRes.ScenarioStatusEnumChanging;
                case ScenarioStatusEnum.Changed:
                    return CSSPEnumsRes.ScenarioStatusEnumChanged;
                case ScenarioStatusEnum.AskToRun:
                    return CSSPEnumsRes.ScenarioStatusEnumAskToRun;
                case ScenarioStatusEnum.Running:
                    return CSSPEnumsRes.ScenarioStatusEnumRunning;
                case ScenarioStatusEnum.Completed:
                    return CSSPEnumsRes.ScenarioStatusEnumCompleted;
                case ScenarioStatusEnum.Cancelled:
                    return CSSPEnumsRes.ScenarioStatusEnumCancelled;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SearchTagEnum(SearchTagEnum? searchTag)
        {
            if (searchTag == null)
                return CSSPEnumsRes.Empty;

            switch (searchTag)
            {
                case SearchTagEnum.c:
                    return CSSPEnumsRes.SearchTagEnumc;
                case SearchTagEnum.e:
                    return CSSPEnumsRes.SearchTagEnume;
                case SearchTagEnum.t:
                    return CSSPEnumsRes.SearchTagEnumt;
                case SearchTagEnum.fi:
                    return CSSPEnumsRes.SearchTagEnumfi;
                case SearchTagEnum.fp:
                    return CSSPEnumsRes.SearchTagEnumfp;
                case SearchTagEnum.frg:
                    return CSSPEnumsRes.SearchTagEnumfrg;
                case SearchTagEnum.ftg:
                    return CSSPEnumsRes.SearchTagEnumftg;
                case SearchTagEnum.fpdf:
                    return CSSPEnumsRes.SearchTagEnumfpdf;
                case SearchTagEnum.fdocx:
                    return CSSPEnumsRes.SearchTagEnumfdocx;
                case SearchTagEnum.fxlsx:
                    return CSSPEnumsRes.SearchTagEnumfxlsx;
                case SearchTagEnum.fkmz:
                    return CSSPEnumsRes.SearchTagEnumfkmz;
                case SearchTagEnum.fxyz:
                    return CSSPEnumsRes.SearchTagEnumfxyz;
                case SearchTagEnum.fdfs:
                    return CSSPEnumsRes.SearchTagEnumfdfs;
                case SearchTagEnum.fmike:
                    return CSSPEnumsRes.SearchTagEnumfmike;
                case SearchTagEnum.fmdf:
                    return CSSPEnumsRes.SearchTagEnumfmdf;
                case SearchTagEnum.fm21fm:
                    return CSSPEnumsRes.SearchTagEnumfm21fm;
                case SearchTagEnum.fm3fm:
                    return CSSPEnumsRes.SearchTagEnumfm3fm;
                case SearchTagEnum.fmesh:
                    return CSSPEnumsRes.SearchTagEnumfmesh;
                case SearchTagEnum.flog:
                    return CSSPEnumsRes.SearchTagEnumflog;
                case SearchTagEnum.ftxt:
                    return CSSPEnumsRes.SearchTagEnumftxt;
                case SearchTagEnum.m:
                    return CSSPEnumsRes.SearchTagEnumm;
                case SearchTagEnum.p:
                    return CSSPEnumsRes.SearchTagEnump;
                case SearchTagEnum.ms:
                    return CSSPEnumsRes.SearchTagEnumms;
                case SearchTagEnum.cs:
                    return CSSPEnumsRes.SearchTagEnumcs;
                case SearchTagEnum.hs:
                    return CSSPEnumsRes.SearchTagEnumhs;
                case SearchTagEnum.ts:
                    return CSSPEnumsRes.SearchTagEnumts;
                case SearchTagEnum.ww:
                    return CSSPEnumsRes.SearchTagEnumww;
                case SearchTagEnum.ls:
                    return CSSPEnumsRes.SearchTagEnumls;
                case SearchTagEnum.st:
                    return CSSPEnumsRes.SearchTagEnumst;
                case SearchTagEnum.ps:
                    return CSSPEnumsRes.SearchTagEnumps;
                case SearchTagEnum.a:
                    return CSSPEnumsRes.SearchTagEnuma;
                case SearchTagEnum.s:
                    return CSSPEnumsRes.SearchTagEnums;
                case SearchTagEnum.ss:
                    return CSSPEnumsRes.SearchTagEnumss;
                case SearchTagEnum.u:
                    return CSSPEnumsRes.SearchTagEnumu;
                case SearchTagEnum.notag:
                    return CSSPEnumsRes.SearchTagEnumnotag;
                case SearchTagEnum.fcsv:
                    return CSSPEnumsRes.SearchTagEnumfcsv;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SecondaryTreatmentTypeEnum(SecondaryTreatmentTypeEnum? secondaryTreatmentType)
        {
            if (secondaryTreatmentType == null)
                return CSSPEnumsRes.Empty;

            switch (secondaryTreatmentType)
            {
                case SecondaryTreatmentTypeEnum.NotApplicable:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumNotApplicable;
                case SecondaryTreatmentTypeEnum.RotatingBiologicalContactor:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumRotatingBiologicalContactor;
                case SecondaryTreatmentTypeEnum.TricklingFilters:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumTricklingFilters;
                case SecondaryTreatmentTypeEnum.SequencingBatchReactor:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumSequencingBatchReactor;
                case SecondaryTreatmentTypeEnum.OxidationDitch:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumOxidationDitch;
                case SecondaryTreatmentTypeEnum.ExtendedAeration:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumExtendedAeration;
                case SecondaryTreatmentTypeEnum.ContactStabilization:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumContactStabilization;
                case SecondaryTreatmentTypeEnum.PhysicalChemicalProcesses:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumPhysicalChemicalProcesses;
                case SecondaryTreatmentTypeEnum.MovingBedBioReactor:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumMovingBedBioReactor;
                case SecondaryTreatmentTypeEnum.BiologicalAearatedFilters:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumBiologicalAearatedFilters;
                case SecondaryTreatmentTypeEnum.AeratedSubmergedBioFilmReactor:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumAeratedSubmergedBioFilmReactor;
                case SecondaryTreatmentTypeEnum.IntegratedFixedFilmActivatedSludge:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumIntegratedFixedFilmActivatedSludge;
                case SecondaryTreatmentTypeEnum.ActivatedSludge:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumActivatedSludge;
                case SecondaryTreatmentTypeEnum.ExtendedActivatedSludge:
                    return CSSPEnumsRes.SecondaryTreatmentTypeEnumExtendedActivatedSludge;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SiteTypeEnum(SiteTypeEnum? siteType)
        {
            if (siteType == null)
                return CSSPEnumsRes.Empty;

            switch (siteType)
            {
                case SiteTypeEnum.Climate:
                    return CSSPEnumsRes.SiteTypeEnumClimate;
                case SiteTypeEnum.Hydrometric:
                    return CSSPEnumsRes.SiteTypeEnumHydrometric;
                case SiteTypeEnum.Tide:
                    return CSSPEnumsRes.SiteTypeEnumTide;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_SpecialTableTypeEnum(SpecialTableTypeEnum? specialTableType)
        {
            if (specialTableType == null)
                return CSSPEnumsRes.Empty;

            switch (specialTableType)
            {
                case SpecialTableTypeEnum.FCDensitiesTable:
                    return CSSPEnumsRes.SpecialTableTypeEnumFCDensitiesTable;
                case SpecialTableTypeEnum.SalinityTable:
                    return CSSPEnumsRes.SpecialTableTypeEnumSalinityTable;
                case SpecialTableTypeEnum.TemperatureTable:
                    return CSSPEnumsRes.SpecialTableTypeEnumTemperatureTable;
                case SpecialTableTypeEnum.GeometricMeanTable:
                    return CSSPEnumsRes.SpecialTableTypeEnumGeometricMeanTable;
                case SpecialTableTypeEnum.MedianTable:
                    return CSSPEnumsRes.SpecialTableTypeEnumMedianTable;
                case SpecialTableTypeEnum.P90Table:
                    return CSSPEnumsRes.SpecialTableTypeEnumP90Table;
                case SpecialTableTypeEnum.PercentOver43Table:
                    return CSSPEnumsRes.SpecialTableTypeEnumPercentOver43Table;
                case SpecialTableTypeEnum.PercentOver260Table:
                    return CSSPEnumsRes.SpecialTableTypeEnumPercentOver260Table;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_StorageDataTypeEnum(StorageDataTypeEnum? storageDataType)
        {
            if (storageDataType == null)
                return CSSPEnumsRes.Empty;

            switch (storageDataType)
            {
                case StorageDataTypeEnum.Archived:
                    return CSSPEnumsRes.StorageDataTypeEnumArchived;
                case StorageDataTypeEnum.Forcasted:
                    return CSSPEnumsRes.StorageDataTypeEnumForcasted;
                case StorageDataTypeEnum.Observed:
                    return CSSPEnumsRes.StorageDataTypeEnumObserved;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_StreetTypeEnum(StreetTypeEnum? streetType)
        {
            if (streetType == null)
                return CSSPEnumsRes.Empty;

            switch (streetType)
            {
                case StreetTypeEnum.Street:
                    return CSSPEnumsRes.StreetTypeEnumStreet;
                case StreetTypeEnum.Road:
                    return CSSPEnumsRes.StreetTypeEnumRoad;
                case StreetTypeEnum.Avenue:
                    return CSSPEnumsRes.StreetTypeEnumAvenue;
                case StreetTypeEnum.Crescent:
                    return CSSPEnumsRes.StreetTypeEnumCrescent;
                case StreetTypeEnum.Court:
                    return CSSPEnumsRes.StreetTypeEnumCourt;
                case StreetTypeEnum.Alley:
                    return CSSPEnumsRes.StreetTypeEnumAlley;
                case StreetTypeEnum.Drive:
                    return CSSPEnumsRes.StreetTypeEnumDrive;
                case StreetTypeEnum.Blvd:
                    return CSSPEnumsRes.StreetTypeEnumBlvd;
                case StreetTypeEnum.Route:
                    return CSSPEnumsRes.StreetTypeEnumRoute;
                case StreetTypeEnum.Lane:
                    return CSSPEnumsRes.StreetTypeEnumLane;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TelTypeEnum(TelTypeEnum? telType)
        {
            if (telType == null)
                return CSSPEnumsRes.Empty;

            switch (telType)
            {
                case TelTypeEnum.Personal:
                    return CSSPEnumsRes.TelTypeEnumPersonal;
                case TelTypeEnum.Work:
                    return CSSPEnumsRes.TelTypeEnumWork;
                case TelTypeEnum.Mobile:
                    return CSSPEnumsRes.TelTypeEnumMobile;
                case TelTypeEnum.Personal2:
                    return CSSPEnumsRes.TelTypeEnumPersonal2;
                case TelTypeEnum.Work2:
                    return CSSPEnumsRes.TelTypeEnumWork2;
                case TelTypeEnum.Mobile2:
                    return CSSPEnumsRes.TelTypeEnumMobile2;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TertiaryTreatmentTypeEnum(TertiaryTreatmentTypeEnum? tertiaryTreatmentType)
        {
            if (tertiaryTreatmentType == null)
                return CSSPEnumsRes.Empty;

            switch (tertiaryTreatmentType)
            {
                case TertiaryTreatmentTypeEnum.NotApplicable:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumNotApplicable;
                case TertiaryTreatmentTypeEnum.Adsorption:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumAdsorption;
                case TertiaryTreatmentTypeEnum.Flocculation:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumFlocculation;
                case TertiaryTreatmentTypeEnum.MembraneFiltration:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumMembraneFiltration;
                case TertiaryTreatmentTypeEnum.IonExchange:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumIonExchange;
                case TertiaryTreatmentTypeEnum.ReverseOsmosis:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumReverseOsmosis;
                case TertiaryTreatmentTypeEnum.BiologicalNutrientRemoval:
                    return CSSPEnumsRes.TertiaryTreatmentTypeEnumBiologicalNutrientRemoval;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TideDataTypeEnum(TideDataTypeEnum? tideDataType)
        {
            if (tideDataType == null)
                return CSSPEnumsRes.Empty;

            switch (tideDataType)
            {
                case TideDataTypeEnum.Min15:
                    return CSSPEnumsRes.TideDataTypeEnumMin15;
                case TideDataTypeEnum.Min60:
                    return CSSPEnumsRes.TideDataTypeEnumMin60;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TideTextEnum(TideTextEnum? tideText)
        {
            if (tideText == null)
                return CSSPEnumsRes.Empty;

            switch (tideText)
            {
                case TideTextEnum.LowTide:
                    return CSSPEnumsRes.TideTextEnumLowTide;
                case TideTextEnum.LowTideFalling:
                    return CSSPEnumsRes.TideTextEnumLowTideFalling;
                case TideTextEnum.LowTideRising:
                    return CSSPEnumsRes.TideTextEnumLowTideRising;
                case TideTextEnum.MidTide:
                    return CSSPEnumsRes.TideTextEnumMidTide;
                case TideTextEnum.MidTideFalling:
                    return CSSPEnumsRes.TideTextEnumMidTideFalling;
                case TideTextEnum.MidTideRising:
                    return CSSPEnumsRes.TideTextEnumMidTideRising;
                case TideTextEnum.HighTide:
                    return CSSPEnumsRes.TideTextEnumHighTide;
                case TideTextEnum.HighTideFalling:
                    return CSSPEnumsRes.TideTextEnumHighTideFalling;
                case TideTextEnum.HighTideRising:
                    return CSSPEnumsRes.TideTextEnumHighTideRising;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TranslationStatusEnum(TranslationStatusEnum? translationStatus)
        {
            if (translationStatus == null)
                return CSSPEnumsRes.Empty;

            switch (translationStatus)
            {
                case TranslationStatusEnum.NotTranslated:
                    return CSSPEnumsRes.TranslationStatusEnumNotTranslated;
                case TranslationStatusEnum.ElectronicallyTranslated:
                    return CSSPEnumsRes.TranslationStatusEnumElectronicallyTranslated;
                case TranslationStatusEnum.Translated:
                    return CSSPEnumsRes.TranslationStatusEnumTranslated;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TreatmentTypeEnum(TreatmentTypeEnum? treatmentType)
        {
            if (treatmentType == null)
                return CSSPEnumsRes.Empty;

            switch (treatmentType)
            {
                case TreatmentTypeEnum.ActivatedSludge:
                    return CSSPEnumsRes.TreatmentTypeEnumActivatedSludge;
                case TreatmentTypeEnum.ActivatedSludgeWithBiofilter:
                    return CSSPEnumsRes.TreatmentTypeEnumActivatedSludgeWithBiofilter;
                case TreatmentTypeEnum.LagoonNoAeration1Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration1Cell;
                case TreatmentTypeEnum.LagoonNoAeration2Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration2Cell;
                case TreatmentTypeEnum.LagoonNoAeration3Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration3Cell;
                case TreatmentTypeEnum.LagoonNoAeration4Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration4Cell;
                case TreatmentTypeEnum.LagoonNoAeration5Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration5Cell;
                case TreatmentTypeEnum.LagoonWithAeration1Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration1Cell;
                case TreatmentTypeEnum.LagoonWithAeration2Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration2Cell;
                case TreatmentTypeEnum.LagoonWithAeration3Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration3Cell;
                case TreatmentTypeEnum.LagoonWithAeration4Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration4Cell;
                case TreatmentTypeEnum.LagoonWithAeration5Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration5Cell;
                case TreatmentTypeEnum.LagoonWithAeration6Cell:
                    return CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration6Cell;
                case TreatmentTypeEnum.StabalizingPondOnly:
                    return CSSPEnumsRes.TreatmentTypeEnumStabalizingPondOnly;
                case TreatmentTypeEnum.OxidationDitchOnly:
                    return CSSPEnumsRes.TreatmentTypeEnumOxidationDitchOnly;
                case TreatmentTypeEnum.CirculatingFluidizedBed:
                    return CSSPEnumsRes.TreatmentTypeEnumCirculatingFluidizedBed;
                case TreatmentTypeEnum.TricklingFilter:
                    return CSSPEnumsRes.TreatmentTypeEnumTricklingFilter;
                case TreatmentTypeEnum.RecirculatingSandFilter:
                    return CSSPEnumsRes.TreatmentTypeEnumRecirculatingSandFilter;
                case TreatmentTypeEnum.TrashRackRakeOnly:
                    return CSSPEnumsRes.TreatmentTypeEnumTrashRackRakeOnly;
                case TreatmentTypeEnum.SepticTank:
                    return CSSPEnumsRes.TreatmentTypeEnumSepticTank;
                case TreatmentTypeEnum.Secondary:
                    return CSSPEnumsRes.TreatmentTypeEnumSecondary;
                case TreatmentTypeEnum.Tertiary:
                    return CSSPEnumsRes.TreatmentTypeEnumTertiary;
                case TreatmentTypeEnum.VolumeFermenter:
                    return CSSPEnumsRes.TreatmentTypeEnumVolumeFermenter;
                case TreatmentTypeEnum.BioFilmReactor:
                    return CSSPEnumsRes.TreatmentTypeEnumBioFilmReactor;
                case TreatmentTypeEnum.BioGreen:
                    return CSSPEnumsRes.TreatmentTypeEnumBioGreen;
                case TreatmentTypeEnum.BioDisks:
                    return CSSPEnumsRes.TreatmentTypeEnumBioDisks;
                case TreatmentTypeEnum.ChemicalPrimary:
                    return CSSPEnumsRes.TreatmentTypeEnumChemicalPrimary;
                case TreatmentTypeEnum.Chromoglass:
                    return CSSPEnumsRes.TreatmentTypeEnumChromoglass;
                case TreatmentTypeEnum.Primary:
                    return CSSPEnumsRes.TreatmentTypeEnumPrimary;
                case TreatmentTypeEnum.SequencingBatchReactor:
                    return CSSPEnumsRes.TreatmentTypeEnumSequencingBatchReactor;
                case TreatmentTypeEnum.PeatSystem:
                    return CSSPEnumsRes.TreatmentTypeEnumPeatSystem;
                case TreatmentTypeEnum.Physicochimique:
                    return CSSPEnumsRes.TreatmentTypeEnumPhysicochimique;
                case TreatmentTypeEnum.RotatingBiologicalContactor:
                    return CSSPEnumsRes.TreatmentTypeEnumRotatingBiologicalContactor;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TVAuthEnum(TVAuthEnum? tVAuth)
        {
            if (tVAuth == null)
                return CSSPEnumsRes.Empty;

            switch (tVAuth)
            {
                case TVAuthEnum.NoAccess:
                    return CSSPEnumsRes.TVAuthEnumNoAccess;
                case TVAuthEnum.Read:
                    return CSSPEnumsRes.TVAuthEnumRead;
                case TVAuthEnum.Write:
                    return CSSPEnumsRes.TVAuthEnumWrite;
                case TVAuthEnum.Create:
                    return CSSPEnumsRes.TVAuthEnumCreate;
                case TVAuthEnum.Delete:
                    return CSSPEnumsRes.TVAuthEnumDelete;
                case TVAuthEnum.Admin:
                    return CSSPEnumsRes.TVAuthEnumAdmin;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_TVTypeEnum(TVTypeEnum? tVType)
        {
            if (tVType == null)
                return CSSPEnumsRes.Empty;

            switch (tVType)
            {
                case TVTypeEnum.Root:
                    return CSSPEnumsRes.TVTypeEnumRoot;
                case TVTypeEnum.Address:
                    return CSSPEnumsRes.TVTypeEnumAddress;
                case TVTypeEnum.Area:
                    return CSSPEnumsRes.TVTypeEnumArea;
                case TVTypeEnum.ClimateSite:
                    return CSSPEnumsRes.TVTypeEnumClimateSite;
                case TVTypeEnum.Contact:
                    return CSSPEnumsRes.TVTypeEnumContact;
                case TVTypeEnum.Country:
                    return CSSPEnumsRes.TVTypeEnumCountry;
                case TVTypeEnum.Email:
                    return CSSPEnumsRes.TVTypeEnumEmail;
                case TVTypeEnum.File:
                    return CSSPEnumsRes.TVTypeEnumFile;
                case TVTypeEnum.HydrometricSite:
                    return CSSPEnumsRes.TVTypeEnumHydrometricSite;
                case TVTypeEnum.Infrastructure:
                    return CSSPEnumsRes.TVTypeEnumInfrastructure;
                case TVTypeEnum.MikeBoundaryConditionWebTide:
                    return CSSPEnumsRes.TVTypeEnumMikeBoundaryConditionWebTide;
                case TVTypeEnum.MikeBoundaryConditionMesh:
                    return CSSPEnumsRes.TVTypeEnumMikeBoundaryConditionMesh;
                case TVTypeEnum.MikeScenario:
                    return CSSPEnumsRes.TVTypeEnumMikeScenario;
                case TVTypeEnum.MikeSource:
                    return CSSPEnumsRes.TVTypeEnumMikeSource;
                case TVTypeEnum.Municipality:
                    return CSSPEnumsRes.TVTypeEnumMunicipality;
                case TVTypeEnum.MWQMSite:
                    return CSSPEnumsRes.TVTypeEnumMWQMSite;
                case TVTypeEnum.PolSourceSite:
                    return CSSPEnumsRes.TVTypeEnumPolSourceSite;
                case TVTypeEnum.Province:
                    return CSSPEnumsRes.TVTypeEnumProvince;
                case TVTypeEnum.Sector:
                    return CSSPEnumsRes.TVTypeEnumSector;
                case TVTypeEnum.Subsector:
                    return CSSPEnumsRes.TVTypeEnumSubsector;
                case TVTypeEnum.Tel:
                    return CSSPEnumsRes.TVTypeEnumTel;
                case TVTypeEnum.TideSite:
                    return CSSPEnumsRes.TVTypeEnumTideSite;
                case TVTypeEnum.MWQMSiteSample:
                    return CSSPEnumsRes.TVTypeEnumMWQMSiteSample;
                case TVTypeEnum.WasteWaterTreatmentPlant:
                    return CSSPEnumsRes.TVTypeEnumWasteWaterTreatmentPlant;
                case TVTypeEnum.LiftStation:
                    return CSSPEnumsRes.TVTypeEnumLiftStation;
                case TVTypeEnum.Spill:
                    return CSSPEnumsRes.TVTypeEnumSpill;
                case TVTypeEnum.BoxModel:
                    return CSSPEnumsRes.TVTypeEnumBoxModel;
                case TVTypeEnum.VisualPlumesScenario:
                    return CSSPEnumsRes.TVTypeEnumVisualPlumesScenario;
                case TVTypeEnum.Outfall:
                    return CSSPEnumsRes.TVTypeEnumOutfall;
                case TVTypeEnum.OtherInfrastructure:
                    return CSSPEnumsRes.TVTypeEnumOtherInfrastructure;
                case TVTypeEnum.MWQMRun:
                    return CSSPEnumsRes.TVTypeEnumMWQMRun;
                case TVTypeEnum.NoDepuration:
                    return CSSPEnumsRes.TVTypeEnumNoDepuration;
                case TVTypeEnum.Failed:
                    return CSSPEnumsRes.TVTypeEnumFailed;
                case TVTypeEnum.Passed:
                    return CSSPEnumsRes.TVTypeEnumPassed;
                case TVTypeEnum.NoData:
                    return CSSPEnumsRes.TVTypeEnumNoData;
                case TVTypeEnum.LessThan10:
                    return CSSPEnumsRes.TVTypeEnumLessThan10;
                case TVTypeEnum.MeshNode:
                    return CSSPEnumsRes.TVTypeEnumMeshNode;
                case TVTypeEnum.WebTideNode:
                    return CSSPEnumsRes.TVTypeEnumWebTideNode;
                case TVTypeEnum.SamplingPlan:
                    return CSSPEnumsRes.TVTypeEnumSamplingPlan;
                case TVTypeEnum.SeeOtherMunicipality:
                    return CSSPEnumsRes.TVTypeEnumSeeOtherMunicipality;
                case TVTypeEnum.LineOverflow:
                    return CSSPEnumsRes.TVTypeEnumLineOverflow;
                case TVTypeEnum.BoxModelInputs:
                    return CSSPEnumsRes.TVTypeEnumBoxModelInputs;
                case TVTypeEnum.BoxModelResults:
                    return CSSPEnumsRes.TVTypeEnumBoxModelResults;
                case TVTypeEnum.ClimateSiteInfo:
                    return CSSPEnumsRes.TVTypeEnumClimateSiteInfo;
                case TVTypeEnum.ClimateSiteData:
                    return CSSPEnumsRes.TVTypeEnumClimateSiteData;
                case TVTypeEnum.HydrometricSiteInfo:
                    return CSSPEnumsRes.TVTypeEnumHydrometricSiteInfo;
                case TVTypeEnum.HydrometricSiteData:
                    return CSSPEnumsRes.TVTypeEnumHydrometricSiteData;
                case TVTypeEnum.InfrastructureInfo:
                    return CSSPEnumsRes.TVTypeEnumInfrastructureInfo;
                case TVTypeEnum.LabSheetInfo:
                    return CSSPEnumsRes.TVTypeEnumLabSheetInfo;
                case TVTypeEnum.LabSheetDetailInfo:
                    return CSSPEnumsRes.TVTypeEnumLabSheetDetailInfo;
                case TVTypeEnum.MapInfo:
                    return CSSPEnumsRes.TVTypeEnumMapInfo;
                case TVTypeEnum.MapInfoPoint:
                    return CSSPEnumsRes.TVTypeEnumMapInfoPoint;
                case TVTypeEnum.MikeSourceStartEndInfo:
                    return CSSPEnumsRes.TVTypeEnumMikeSourceStartEndInfo;
                case TVTypeEnum.MWQMLookupMPNInfo:
                    return CSSPEnumsRes.TVTypeEnumMWQMLookupMPNInfo;
                case TVTypeEnum.SamplingPlanInfo:
                    return CSSPEnumsRes.TVTypeEnumSamplingPlanInfo;
                case TVTypeEnum.SamplingPlanSubsectorInfo:
                    return CSSPEnumsRes.TVTypeEnumSamplingPlanSubsectorInfo;
                case TVTypeEnum.SamplingPlanSubsectorSiteInfo:
                    return CSSPEnumsRes.TVTypeEnumSamplingPlanSubsectorSiteInfo;
                case TVTypeEnum.MWQMSiteStartEndInfo:
                    return CSSPEnumsRes.TVTypeEnumMWQMSiteStartEndInfo;
                case TVTypeEnum.MWQMSubsectorInfo:
                    return CSSPEnumsRes.TVTypeEnumMWQMSubsectorInfo;
                case TVTypeEnum.PolSourceSiteInfo:
                    return CSSPEnumsRes.TVTypeEnumPolSourceSiteInfo;
                case TVTypeEnum.PolSourceSiteObsInfo:
                    return CSSPEnumsRes.TVTypeEnumPolSourceSiteObsInfo;
                case TVTypeEnum.HydrometricRatingCurveInfo:
                    return CSSPEnumsRes.TVTypeEnumHydrometricRatingCurveInfo;
                case TVTypeEnum.HydrometricRatingCurveDataInfo:
                    return CSSPEnumsRes.TVTypeEnumHydrometricRatingCurveDataInfo;
                case TVTypeEnum.TideLocationInfo:
                    return CSSPEnumsRes.TVTypeEnumTideLocationInfo;
                case TVTypeEnum.TideSiteDataInfo:
                    return CSSPEnumsRes.TVTypeEnumTideSiteDataInfo;
                case TVTypeEnum.UseOfSite:
                    return CSSPEnumsRes.TVTypeEnumUseOfSite;
                case TVTypeEnum.VisualPlumesScenarioInfo:
                    return CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioInfo;
                case TVTypeEnum.VisualPlumesScenarioAmbient:
                    return CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioAmbient;
                case TVTypeEnum.VisualPlumesScenarioResults:
                    return CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioResults;
                case TVTypeEnum.TotalFile:
                    return CSSPEnumsRes.TVTypeEnumTotalFile;
                case TVTypeEnum.MikeSourceIsRiver:
                    return CSSPEnumsRes.TVTypeEnumMikeSourceIsRiver;
                case TVTypeEnum.MikeSourceIncluded:
                    return CSSPEnumsRes.TVTypeEnumMikeSourceIncluded;
                case TVTypeEnum.MikeSourceNotIncluded:
                    return CSSPEnumsRes.TVTypeEnumMikeSourceNotIncluded;
                case TVTypeEnum.RainExceedance:
                    return CSSPEnumsRes.TVTypeEnumRainExceedance;
                case TVTypeEnum.EmailDistributionList:
                    return CSSPEnumsRes.TVTypeEnumEmailDistributionList;
                case TVTypeEnum.OpenData:
                    return CSSPEnumsRes.TVTypeEnumOpenData;
                case TVTypeEnum.ProvinceTools:
                    return CSSPEnumsRes.TVTypeEnumProvinceTools;
                case TVTypeEnum.Classification:
                    return CSSPEnumsRes.TVTypeEnumClassification;
                case TVTypeEnum.Approved:
                    return CSSPEnumsRes.TVTypeEnumApproved;
                case TVTypeEnum.Restricted:
                    return CSSPEnumsRes.TVTypeEnumRestricted;
                case TVTypeEnum.Prohibited:
                    return CSSPEnumsRes.TVTypeEnumProhibited;
                case TVTypeEnum.ConditionallyApproved:
                    return CSSPEnumsRes.TVTypeEnumConditionallyApproved;
                case TVTypeEnum.ConditionallyRestricted:
                    return CSSPEnumsRes.TVTypeEnumConditionallyRestricted;
                case TVTypeEnum.OpenDataNational:
                    return CSSPEnumsRes.TVTypeEnumOpenDataNational;
                case TVTypeEnum.PolSourceSiteMikeScenario:
                    return CSSPEnumsRes.TVTypeEnumPolSourceSiteMikeScenario;
                case TVTypeEnum.SubsectorTools:
                    return CSSPEnumsRes.TVTypeEnumSubsectorTools;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_WebTideDataSetEnum(WebTideDataSetEnum? webTideDataSet)
        {
            if (webTideDataSet == null)
                return CSSPEnumsRes.Empty;

            switch (webTideDataSet)
            {
                case WebTideDataSetEnum.arctic9:
                    return CSSPEnumsRes.WebTideDataSetEnumarctic9;
                case WebTideDataSetEnum.brador:
                    return CSSPEnumsRes.WebTideDataSetEnumbrador;
                case WebTideDataSetEnum.HRglobal:
                    return CSSPEnumsRes.WebTideDataSetEnumHRglobal;
                case WebTideDataSetEnum.h3o:
                    return CSSPEnumsRes.WebTideDataSetEnumh3o;
                case WebTideDataSetEnum.hudson:
                    return CSSPEnumsRes.WebTideDataSetEnumhudson;
                case WebTideDataSetEnum.ne_pac4:
                    return CSSPEnumsRes.WebTideDataSetEnumne_pac4;
                case WebTideDataSetEnum.nwatl:
                    return CSSPEnumsRes.WebTideDataSetEnumnwatl;
                case WebTideDataSetEnum.QuatsinoModel14:
                    return CSSPEnumsRes.WebTideDataSetEnumQuatsinoModel14;
                case WebTideDataSetEnum.sshelf:
                    return CSSPEnumsRes.WebTideDataSetEnumsshelf;
                case WebTideDataSetEnum.flood:
                    return CSSPEnumsRes.WebTideDataSetEnumflood;
                case WebTideDataSetEnum.vigf8:
                    return CSSPEnumsRes.WebTideDataSetEnumvigf8;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }
        private string GetEnumText_WhereOperatorEnum(WhereOperatorEnum? whereOperator)
        {
            if (whereOperator == null)
                return CSSPEnumsRes.Empty;

            switch (whereOperator)
            {
                case WhereOperatorEnum.Equal:
                    return CSSPEnumsRes.WhereOperatorEnumEqual;
                case WhereOperatorEnum.LessThan:
                    return CSSPEnumsRes.WhereOperatorEnumLessThan;
                case WhereOperatorEnum.GreaterThan:
                    return CSSPEnumsRes.WhereOperatorEnumGreaterThan;
                case WhereOperatorEnum.Contains:
                    return CSSPEnumsRes.WhereOperatorEnumContains;
                case WhereOperatorEnum.StartsWith:
                    return CSSPEnumsRes.WhereOperatorEnumStartsWith;
                case WhereOperatorEnum.EndsWith:
                    return CSSPEnumsRes.WhereOperatorEnumEndsWith;
                default:
                    return CSSPEnumsRes.Empty;
            }
        }

        #endregion Functions private
    }
}
