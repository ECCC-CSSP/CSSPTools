/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPHelperServices.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPHelperModels;
using CSSPCultureServices.Resources;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using LoggedInServices;
using Microsoft.Extensions.Configuration;

namespace CSSPHelperServices
{
    public interface ICSSPWQInputAppService
    {
        ErrRes errRes { get; set; }

        bool Validate(ValidationContext validationContext);
    }
    public partial class CSSPWQInputAppService : ICSSPWQInputAppService
    {
        #region Variables
        #endregion Variables

        #region Properties
        public ErrRes errRes { get; set; } = new ErrRes();
        #endregion Properties

        #region Constructors
        public CSSPWQInputAppService()
        {
        }
        #endregion Constructors

        #region Functions public
        public bool Validate(ValidationContext validationContext)
        {
            CSSPWQInputApp csspWQInputApp = validationContext.ObjectInstance as CSSPWQInputApp;

            if (string.IsNullOrWhiteSpace(csspWQInputApp.AccessCode))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._IsRequired, "AccessCode"));
            }

            if (!string.IsNullOrWhiteSpace(csspWQInputApp.AccessCode) && (csspWQInputApp.AccessCode.Length < 1 || csspWQInputApp.AccessCode.Length > 100))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "AccessCode", "1", "100"));
            }

            if (string.IsNullOrWhiteSpace(csspWQInputApp.ActiveYear))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._IsRequired, "ActiveYear"));
            }

            if (!string.IsNullOrWhiteSpace(csspWQInputApp.ActiveYear) && (csspWQInputApp.ActiveYear.Length < 4 || csspWQInputApp.ActiveYear.Length > 4))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "ActiveYear", "4", "4"));
            }

            if (csspWQInputApp.DailyDuplicatePrecisionCriteria < 0 || csspWQInputApp.DailyDuplicatePrecisionCriteria > 100)
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "DailyDuplicatePrecisionCriteria", "0", "100"));
            }

            if (csspWQInputApp.IntertechDuplicatePrecisionCriteria < 0 || csspWQInputApp.IntertechDuplicatePrecisionCriteria > 100)
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "IntertechDuplicatePrecisionCriteria", "0", "100"));
            }

            if (string.IsNullOrWhiteSpace(csspWQInputApp.ApprovalCode))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._IsRequired, "ApprovalCode"));
            }

            if (!string.IsNullOrWhiteSpace(csspWQInputApp.ApprovalCode) && (csspWQInputApp.ApprovalCode.Length < 1 || csspWQInputApp.ApprovalCode.Length > 100))
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._LengthShouldBeBetween_And_, "ApprovalCode", "1", "100"));
            }

            if (csspWQInputApp.ApprovalDate.Year == 1)
            {
                errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._IsRequired, "ApprovalDate"));
            }
            else
            {
                if (csspWQInputApp.ApprovalDate.Year < 1980)
                {
                    errRes.ErrList.Add(string.Format(CSSPCultureServicesRes._YearShouldBeBiggerThan_, "ApprovalDate", "1980"));
                }
            }

            return errRes.ErrList.Count == 0 ? true : false;
        }
        #endregion Functions public
    }

}
