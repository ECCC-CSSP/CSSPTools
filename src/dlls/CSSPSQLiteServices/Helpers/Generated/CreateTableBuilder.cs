/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\SQLiteGenerated.exe
 *
 * Do not edit this file.
 *
 */

using Microsoft.Data.Sqlite;
using System.Threading.Tasks;

namespace CSSPSQLiteServices.Services
{
    public partial class CSSPSQLiteService : ICSSPSQLiteService
    {
        private async Task<bool> CreateTableBuilder(string tableName, SqliteConnection db)
        {
            string CreateTable = "";
            switch (tableName)
            {
                case "Addresses":
                    CreateTable = "CREATE TABLE Addresses (" +
                    "AddressID INTEGER  NOT NULL  UNIQUE, " +
                    "AddressTVItemID INTEGER  NOT NULL , " +
                    "AddressType INTEGER  NOT NULL , " +
                    "CountryTVItemID INTEGER  NOT NULL , " +
                    "ProvinceTVItemID INTEGER  NOT NULL , " +
                    "MunicipalityTVItemID INTEGER  NOT NULL , " +
                    "StreetName TEXT  , " +
                    "StreetNumber TEXT  , " +
                    "StreetType INTEGER  , " +
                    "PostalCode TEXT  , " +
                    "GoogleAddressText TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "AppErrLogs":
                    CreateTable = "CREATE TABLE AppErrLogs (" +
                    "AppErrLogID INTEGER  NOT NULL  UNIQUE, " +
                    "Tag TEXT  NOT NULL , " +
                    "LineNumber INTEGER  NOT NULL , " +
                    "Source TEXT  NOT NULL , " +
                    "Message TEXT  NOT NULL , " +
                    "DateTime_UTC TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "AppTasks":
                    CreateTable = "CREATE TABLE AppTasks (" +
                    "AppTaskID INTEGER  NOT NULL  UNIQUE, " +
                    "TVItemID INTEGER  NOT NULL , " +
                    "TVItemID2 INTEGER  NOT NULL , " +
                    "AppTaskCommand INTEGER  NOT NULL , " +
                    "AppTaskStatus INTEGER  NOT NULL , " +
                    "PercentCompleted INTEGER  NOT NULL , " +
                    "Parameters TEXT  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "StartDateTime_UTC TEXT  NOT NULL , " +
                    "EndDateTime_UTC TEXT  , " +
                    "EstimatedLength_second INTEGER  , " +
                    "RemainingTime_second INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "AppTaskLanguages":
                    CreateTable = "CREATE TABLE AppTaskLanguages (" +
                    "AppTaskLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "AppTaskID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "StatusText TEXT  , " +
                    "ErrorText TEXT  , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "AspNetRoles":
                    CreateTable = "CREATE TABLE AspNetRoles (" +
                    "Id TEXT  NOT NULL  UNIQUE, " +
                    "Name TEXT  , " +
                    "NormalizeName TEXT  , " +
                    "ConcurrencyStamp TEXT  )";
                    break;
                case "AspNetRoleClaims":
                    CreateTable = "CREATE TABLE AspNetRoleClaims (" +
                    "Id TEXT  NOT NULL  UNIQUE, " +
                    "RoleId TEXT  NOT NULL , " +
                    "ClaimType TEXT  , " +
                    "ClaimValue TEXT  )";
                    break;
                case "AspNetUsers":
                    CreateTable = "CREATE TABLE AspNetUsers (" +
                    "Id TEXT  NOT NULL  UNIQUE, " +
                    "Email TEXT  , " +
                    "EmailConfirmed INTEGER  NOT NULL , " +
                    "PasswordHash TEXT  , " +
                    "SecurityStamp TEXT  , " +
                    "PhoneNumber TEXT  , " +
                    "PhoneNumberConfirmed INTEGER  NOT NULL , " +
                    "TwoFactorEnabled INTEGER  NOT NULL , " +
                    "LockoutEndDateUtc TEXT  , " +
                    "LockoutEnabled INTEGER  NOT NULL , " +
                    "AccessFailedCount INTEGER  NOT NULL , " +
                    "UserName TEXT  NOT NULL , " +
                    "NormalizedUserName TEXT  , " +
                    "NormalizedEmail TEXT  , " +
                    "ConcurrencyStamp TEXT  , " +
                    "LockoutEnd TEXT  )";
                    break;
                case "AspNetUserClaims":
                    CreateTable = "CREATE TABLE AspNetUserClaims (" +
                    "Id INTEGER  NOT NULL  UNIQUE, " +
                    "UserId TEXT  NOT NULL , " +
                    "ClaimType TEXT  , " +
                    "ClaimValue TEXT  )";
                    break;
                case "AspNetUserLogins":
                    CreateTable = "CREATE TABLE AspNetUserLogins (" +
                    "LoginProvider TEXT  NOT NULL , " +
                    "ProviderKey TEXT  NOT NULL , " +
                    "ProviderDisplayName TEXT  , " +
                    "UserId TEXT  NOT NULL )";
                    break;
                case "AspNetUserRoles":
                    CreateTable = "CREATE TABLE AspNetUserRoles (" +
                    "UserId TEXT  NOT NULL , " +
                    "RoleId TEXT  NOT NULL )";
                    break;
                case "AspNetUserTokens":
                    CreateTable = "CREATE TABLE AspNetUserTokens (" +
                    "UserId TEXT  NOT NULL , " +
                    "LoginProvider TEXT  NOT NULL , " +
                    "Name TEXT  NOT NULL , " +
                    "Value TEXT  )";
                    break;
                case "BoxModels":
                    CreateTable = "CREATE TABLE BoxModels (" +
                    "BoxModelID INTEGER  NOT NULL  UNIQUE, " +
                    "InfrastructureTVItemID INTEGER  NOT NULL , " +
                    "Discharge_m3_day REAL  NOT NULL , " +
                    "Depth_m REAL  NOT NULL , " +
                    "Temperature_C REAL  NOT NULL , " +
                    "Dilution INTEGER  NOT NULL , " +
                    "DecayRate_per_day REAL  NOT NULL , " +
                    "FCUntreated_MPN_100ml INTEGER  NOT NULL , " +
                    "FCPreDisinfection_MPN_100ml INTEGER  NOT NULL , " +
                    "Concentration_MPN_100ml INTEGER  NOT NULL , " +
                    "T90_hour REAL  NOT NULL , " +
                    "DischargeDuration_hour REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "BoxModelLanguages":
                    CreateTable = "CREATE TABLE BoxModelLanguages (" +
                    "BoxModelLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "BoxModelID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "ScenarioName TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "BoxModelResults":
                    CreateTable = "CREATE TABLE BoxModelResults (" +
                    "BoxModelResultID INTEGER  NOT NULL  UNIQUE, " +
                    "BoxModelID INTEGER  NOT NULL , " +
                    "BoxModelResultType INTEGER  NOT NULL , " +
                    "Volume_m3 REAL  NOT NULL , " +
                    "Surface_m2 REAL  NOT NULL , " +
                    "Radius_m REAL  NOT NULL , " +
                    "LeftSideDiameterLineAngle_deg REAL  , " +
                    "CircleCenterLatitude REAL  , " +
                    "CircleCenterLongitude REAL  , " +
                    "FixLength INTEGER  NOT NULL , " +
                    "FixWidth INTEGER  NOT NULL , " +
                    "RectLength_m REAL  NOT NULL , " +
                    "RectWidth_m REAL  NOT NULL , " +
                    "LeftSideLineAngle_deg REAL  , " +
                    "LeftSideLineStartLatitude REAL  , " +
                    "LeftSideLineStartLongitude REAL  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Classifications":
                    CreateTable = "CREATE TABLE Classifications (" +
                    "ClassificationID INTEGER  NOT NULL  UNIQUE, " +
                    "ClassificationTVItemID INTEGER  NOT NULL , " +
                    "ClassificationType INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ClimateDataValues":
                    CreateTable = "CREATE TABLE ClimateDataValues (" +
                    "ClimateDataValueID INTEGER  NOT NULL  UNIQUE, " +
                    "ClimateSiteID INTEGER  NOT NULL , " +
                    "DateTime_Local TEXT  NOT NULL , " +
                    "Keep INTEGER  NOT NULL , " +
                    "StorageDataType INTEGER  NOT NULL , " +
                    "HasBeenRead INTEGER  NOT NULL , " +
                    "Snow_cm REAL  , " +
                    "Rainfall_mm REAL  , " +
                    "RainfallEntered_mm REAL  , " +
                    "TotalPrecip_mm_cm REAL  , " +
                    "MaxTemp_C REAL  , " +
                    "MinTemp_C REAL  , " +
                    "HeatDegDays_C REAL  , " +
                    "CoolDegDays_C REAL  , " +
                    "SnowOnGround_cm REAL  , " +
                    "DirMaxGust_0North REAL  , " +
                    "SpdMaxGust_kmh REAL  , " +
                    "HourlyValues TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ClimateSites":
                    CreateTable = "CREATE TABLE ClimateSites (" +
                    "ClimateSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "ClimateSiteTVItemID INTEGER  NOT NULL , " +
                    "ECDBID INTEGER  , " +
                    "ClimateSiteName TEXT  NOT NULL , " +
                    "Province TEXT  NOT NULL , " +
                    "Elevation_m REAL  , " +
                    "ClimateID TEXT  , " +
                    "WMOID INTEGER  , " +
                    "TCID TEXT  , " +
                    "IsQuebecSite INTEGER  , " +
                    "IsCoCoRaHS INTEGER  , " +
                    "TimeOffset_hour REAL  , " +
                    "File_desc TEXT  , " +
                    "HourlyStartDate_Local TEXT  , " +
                    "HourlyEndDate_Local TEXT  , " +
                    "HourlyNow INTEGER  , " +
                    "DailyStartDate_Local TEXT  , " +
                    "DailyEndDate_Local TEXT  , " +
                    "DailyNow INTEGER  , " +
                    "MonthlyStartDate_Local TEXT  , " +
                    "MonthlyEndDate_Local TEXT  , " +
                    "MonthlyNow INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Contacts":
                    CreateTable = "CREATE TABLE Contacts (" +
                    "ContactID INTEGER  NOT NULL  UNIQUE, " +
                    "Id TEXT  NOT NULL , " +
                    "ContactTVItemID INTEGER  NOT NULL , " +
                    "LoginEmail TEXT  NOT NULL , " +
                    "FirstName TEXT  NOT NULL , " +
                    "LastName TEXT  NOT NULL , " +
                    "Initial TEXT  , " +
                    "WebName TEXT  NOT NULL , " +
                    "ContactTitle INTEGER  , " +
                    "IsAdmin INTEGER  NOT NULL , " +
                    "EmailValidated INTEGER  NOT NULL , " +
                    "Disabled INTEGER  NOT NULL , " +
                    "IsNew INTEGER  NOT NULL , " +
                    "SamplingPlanner_ProvincesTVItemID TEXT  , " +
                    "Token TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ContactPreferences":
                    CreateTable = "CREATE TABLE ContactPreferences (" +
                    "ContactPreferenceID INTEGER  NOT NULL  UNIQUE, " +
                    "ContactID INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "MarkerSize INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ContactShortcuts":
                    CreateTable = "CREATE TABLE ContactShortcuts (" +
                    "ContactShortcutID INTEGER  NOT NULL  UNIQUE, " +
                    "ContactID INTEGER  NOT NULL , " +
                    "ShortCutText TEXT  NOT NULL , " +
                    "ShortCutAddress TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "DeviceCodes":
                    CreateTable = "CREATE TABLE DeviceCodes (" +
                    "UserCode TEXT  NOT NULL  UNIQUE, " +
                    "DeviceCode_ TEXT  NOT NULL , " +
                    "SubjectId TEXT  , " +
                    "ClientId TEXT  NOT NULL , " +
                    "CreationTime TEXT  NOT NULL , " +
                    "Expiration TEXT  NOT NULL , " +
                    "Data TEXT  NOT NULL )";
                    break;
                case "DocTemplates":
                    CreateTable = "CREATE TABLE DocTemplates (" +
                    "DocTemplateID INTEGER  NOT NULL  UNIQUE, " +
                    "Language INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "TVFileTVItemID INTEGER  NOT NULL , " +
                    "FileName TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "DrogueRuns":
                    CreateTable = "CREATE TABLE DrogueRuns (" +
                    "DrogueRunID INTEGER  NOT NULL  UNIQUE, " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "DrogueNumber INTEGER  NOT NULL , " +
                    "DrogueType INTEGER  NOT NULL , " +
                    "RunStartDateTime TEXT  NOT NULL , " +
                    "IsRisingTide INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "DrogueRunPositions":
                    CreateTable = "CREATE TABLE DrogueRunPositions (" +
                    "DrogueRunPositionID INTEGER  NOT NULL  UNIQUE, " +
                    "DrogueRunID INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "StepLat REAL  NOT NULL , " +
                    "StepLng REAL  NOT NULL , " +
                    "StepDateTime_Local TEXT  NOT NULL , " +
                    "CalculatedSpeed_m_s REAL  NOT NULL , " +
                    "CalculatedDirection_deg REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Emails":
                    CreateTable = "CREATE TABLE Emails (" +
                    "EmailID INTEGER  NOT NULL  UNIQUE, " +
                    "EmailTVItemID INTEGER  NOT NULL , " +
                    "EmailAddress TEXT  NOT NULL , " +
                    "EmailType INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "EmailDistributionLists":
                    CreateTable = "CREATE TABLE EmailDistributionLists (" +
                    "EmailDistributionListID INTEGER  NOT NULL  UNIQUE, " +
                    "ParentTVItemID INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "EmailDistributionListContacts":
                    CreateTable = "CREATE TABLE EmailDistributionListContacts (" +
                    "EmailDistributionListContactID INTEGER  NOT NULL  UNIQUE, " +
                    "EmailDistributionListID INTEGER  NOT NULL , " +
                    "IsCC INTEGER  NOT NULL , " +
                    "Name TEXT  NOT NULL , " +
                    "Email TEXT  NOT NULL , " +
                    "CMPRainfallSeasonal INTEGER  NOT NULL , " +
                    "CMPWastewater INTEGER  NOT NULL , " +
                    "EmergencyWeather INTEGER  NOT NULL , " +
                    "EmergencyWastewater INTEGER  NOT NULL , " +
                    "ReopeningAllTypes INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "EmailDistributionListContactLanguages":
                    CreateTable = "CREATE TABLE EmailDistributionListContactLanguages (" +
                    "EmailDistributionListContactLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "EmailDistributionListContactID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "Agency TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "EmailDistributionListLanguages":
                    CreateTable = "CREATE TABLE EmailDistributionListLanguages (" +
                    "EmailDistributionListLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "EmailDistributionListID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "EmailListName TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "HelpDocs":
                    CreateTable = "CREATE TABLE HelpDocs (" +
                    "HelpDocID INTEGER  NOT NULL  UNIQUE, " +
                    "DocKey TEXT  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "DocHTMLText TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "HydrometricDataValues":
                    CreateTable = "CREATE TABLE HydrometricDataValues (" +
                    "HydrometricDataValueID INTEGER  NOT NULL  UNIQUE, " +
                    "HydrometricSiteID INTEGER  NOT NULL , " +
                    "DateTime_Local TEXT  NOT NULL , " +
                    "Keep INTEGER  NOT NULL , " +
                    "StorageDataType INTEGER  NOT NULL , " +
                    "HasBeenRead INTEGER  NOT NULL , " +
                    "Discharge_m3_s REAL  , " +
                    "DischargeEntered_m3_s REAL  , " +
                    "Level_m REAL  , " +
                    "HourlyValues TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "HydrometricSites":
                    CreateTable = "CREATE TABLE HydrometricSites (" +
                    "HydrometricSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "HydrometricSiteTVItemID INTEGER  NOT NULL , " +
                    "FedSiteNumber TEXT  , " +
                    "QuebecSiteNumber TEXT  , " +
                    "HydrometricSiteName TEXT  NOT NULL , " +
                    "Description TEXT  , " +
                    "Province TEXT  NOT NULL , " +
                    "Elevation_m REAL  , " +
                    "StartDate_Local TEXT  , " +
                    "EndDate_Local TEXT  , " +
                    "TimeOffset_hour REAL  , " +
                    "DrainageArea_km2 REAL  , " +
                    "IsNatural INTEGER  , " +
                    "IsActive INTEGER  , " +
                    "Sediment INTEGER  , " +
                    "RHBN INTEGER  , " +
                    "RealTime INTEGER  , " +
                    "HasDischarge INTEGER  , " +
                    "HasLevel INTEGER  , " +
                    "HasRatingCurve INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Infrastructures":
                    CreateTable = "CREATE TABLE Infrastructures (" +
                    "InfrastructureID INTEGER  NOT NULL  UNIQUE, " +
                    "InfrastructureTVItemID INTEGER  NOT NULL , " +
                    "PrismID INTEGER  , " +
                    "TPID INTEGER  , " +
                    "LSID INTEGER  , " +
                    "SiteID INTEGER  , " +
                    "Site INTEGER  , " +
                    "InfrastructureCategory TEXT  , " +
                    "InfrastructureType INTEGER  , " +
                    "FacilityType INTEGER  , " +
                    "HasBackupPower INTEGER  , " +
                    "IsMechanicallyAerated INTEGER  , " +
                    "NumberOfCells INTEGER  , " +
                    "NumberOfAeratedCells INTEGER  , " +
                    "AerationType INTEGER  , " +
                    "PreliminaryTreatmentType INTEGER  , " +
                    "PrimaryTreatmentType INTEGER  , " +
                    "SecondaryTreatmentType INTEGER  , " +
                    "TertiaryTreatmentType INTEGER  , " +
                    "TreatmentType INTEGER  , " +
                    "DisinfectionType INTEGER  , " +
                    "CollectionSystemType INTEGER  , " +
                    "AlarmSystemType INTEGER  , " +
                    "DesignFlow_m3_day REAL  , " +
                    "AverageFlow_m3_day REAL  , " +
                    "PeakFlow_m3_day REAL  , " +
                    "PopServed INTEGER  , " +
                    "CanOverflow INTEGER  , " +
                    "ValveType INTEGER  , " +
                    "PercFlowOfTotal REAL  , " +
                    "TimeOffset_hour REAL  , " +
                    "TempCatchAllRemoveLater TEXT  , " +
                    "AverageDepth_m REAL  , " +
                    "NumberOfPorts INTEGER  , " +
                    "PortDiameter_m REAL  , " +
                    "PortSpacing_m REAL  , " +
                    "PortElevation_m REAL  , " +
                    "VerticalAngle_deg REAL  , " +
                    "HorizontalAngle_deg REAL  , " +
                    "DecayRate_per_day REAL  , " +
                    "NearFieldVelocity_m_s REAL  , " +
                    "FarFieldVelocity_m_s REAL  , " +
                    "ReceivingWaterSalinity_PSU REAL  , " +
                    "ReceivingWaterTemperature_C REAL  , " +
                    "ReceivingWater_MPN_per_100ml INTEGER  , " +
                    "DistanceFromShore_m REAL  , " +
                    "SeeOtherMunicipalityTVItemID INTEGER  , " +
                    "CivicAddressTVItemID INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "InfrastructureLanguages":
                    CreateTable = "CREATE TABLE InfrastructureLanguages (" +
                    "InfrastructureLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "InfrastructureID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "Comment TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "LabSheets":
                    CreateTable = "CREATE TABLE LabSheets (" +
                    "LabSheetID INTEGER  NOT NULL  UNIQUE, " +
                    "OtherServerLabSheetID INTEGER  NOT NULL , " +
                    "SamplingPlanID INTEGER  NOT NULL , " +
                    "SamplingPlanName TEXT  NOT NULL , " +
                    "Year INTEGER  NOT NULL , " +
                    "Month INTEGER  NOT NULL , " +
                    "Day INTEGER  NOT NULL , " +
                    "RunNumber INTEGER  NOT NULL , " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "MWQMRunTVItemID INTEGER  , " +
                    "SamplingPlanType INTEGER  NOT NULL , " +
                    "SampleType INTEGER  NOT NULL , " +
                    "LabSheetType INTEGER  NOT NULL , " +
                    "LabSheetStatus INTEGER  NOT NULL , " +
                    "FileName TEXT  NOT NULL , " +
                    "FileLastModifiedDate_Local TEXT  NOT NULL , " +
                    "FileContent TEXT  NOT NULL , " +
                    "AcceptedOrRejectedByContactTVItemID INTEGER  , " +
                    "AcceptedOrRejectedDateTime TEXT  , " +
                    "RejectReason TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "LabSheetDetails":
                    CreateTable = "CREATE TABLE LabSheetDetails (" +
                    "LabSheetDetailID INTEGER  NOT NULL  UNIQUE, " +
                    "LabSheetID INTEGER  NOT NULL , " +
                    "SamplingPlanID INTEGER  NOT NULL , " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "Version INTEGER  NOT NULL , " +
                    "RunDate TEXT  NOT NULL , " +
                    "Tides TEXT  NOT NULL , " +
                    "SampleCrewInitials TEXT  , " +
                    "WaterBathCount INTEGER  , " +
                    "IncubationBath1StartTime TEXT  , " +
                    "IncubationBath2StartTime TEXT  , " +
                    "IncubationBath3StartTime TEXT  , " +
                    "IncubationBath1EndTime TEXT  , " +
                    "IncubationBath2EndTime TEXT  , " +
                    "IncubationBath3EndTime TEXT  , " +
                    "IncubationBath1TimeCalculated_minutes INTEGER  , " +
                    "IncubationBath2TimeCalculated_minutes INTEGER  , " +
                    "IncubationBath3TimeCalculated_minutes INTEGER  , " +
                    "WaterBath1 TEXT  , " +
                    "WaterBath2 TEXT  , " +
                    "WaterBath3 TEXT  , " +
                    "TCField1 REAL  , " +
                    "TCLab1 REAL  , " +
                    "TCField2 REAL  , " +
                    "TCLab2 REAL  , " +
                    "TCFirst REAL  , " +
                    "TCAverage REAL  , " +
                    "ControlLot TEXT  , " +
                    "Positive35 TEXT  , " +
                    "NonTarget35 TEXT  , " +
                    "Negative35 TEXT  , " +
                    "Bath1Positive44_5 TEXT  , " +
                    "Bath2Positive44_5 TEXT  , " +
                    "Bath3Positive44_5 TEXT  , " +
                    "Bath1NonTarget44_5 TEXT  , " +
                    "Bath2NonTarget44_5 TEXT  , " +
                    "Bath3NonTarget44_5 TEXT  , " +
                    "Bath1Negative44_5 TEXT  , " +
                    "Bath2Negative44_5 TEXT  , " +
                    "Bath3Negative44_5 TEXT  , " +
                    "Blank35 TEXT  , " +
                    "Bath1Blank44_5 TEXT  , " +
                    "Bath2Blank44_5 TEXT  , " +
                    "Bath3Blank44_5 TEXT  , " +
                    "Lot35 TEXT  , " +
                    "Lot44_5 TEXT  , " +
                    "Weather TEXT  , " +
                    "RunComment TEXT  , " +
                    "RunWeatherComment TEXT  , " +
                    "SampleBottleLotNumber TEXT  , " +
                    "SalinitiesReadBy TEXT  , " +
                    "SalinitiesReadDate TEXT  , " +
                    "ResultsReadBy TEXT  , " +
                    "ResultsReadDate TEXT  , " +
                    "ResultsRecordedBy TEXT  , " +
                    "ResultsRecordedDate TEXT  , " +
                    "DailyDuplicateRLog REAL  , " +
                    "DailyDuplicatePrecisionCriteria REAL  , " +
                    "DailyDuplicateAcceptable INTEGER  , " +
                    "IntertechDuplicateRLog REAL  , " +
                    "IntertechDuplicatePrecisionCriteria REAL  , " +
                    "IntertechDuplicateAcceptable INTEGER  , " +
                    "IntertechReadAcceptable INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "LabSheetTubeMPNDetails":
                    CreateTable = "CREATE TABLE LabSheetTubeMPNDetails (" +
                    "LabSheetTubeMPNDetailID INTEGER  NOT NULL  UNIQUE, " +
                    "LabSheetDetailID INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "SampleDateTime TEXT  , " +
                    "MPN INTEGER  , " +
                    "Tube10 INTEGER  , " +
                    "Tube1_0 INTEGER  , " +
                    "Tube0_1 INTEGER  , " +
                    "Salinity REAL  , " +
                    "Temperature REAL  , " +
                    "ProcessedBy TEXT  , " +
                    "SampleType INTEGER  NOT NULL , " +
                    "SiteComment TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Logs":
                    CreateTable = "CREATE TABLE Logs (" +
                    "LogID INTEGER  NOT NULL  UNIQUE, " +
                    "TableName TEXT  NOT NULL , " +
                    "ID INTEGER  NOT NULL , " +
                    "LogCommand INTEGER  NOT NULL , " +
                    "Information TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MapInfos":
                    CreateTable = "CREATE TABLE MapInfos (" +
                    "MapInfoID INTEGER  NOT NULL  UNIQUE, " +
                    "TVItemID INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "LatMin REAL  NOT NULL , " +
                    "LatMax REAL  NOT NULL , " +
                    "LngMin REAL  NOT NULL , " +
                    "LngMax REAL  NOT NULL , " +
                    "MapInfoDrawType INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MapInfoPoints":
                    CreateTable = "CREATE TABLE MapInfoPoints (" +
                    "MapInfoPointID INTEGER  NOT NULL  UNIQUE, " +
                    "MapInfoID INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "Lat REAL  NOT NULL , " +
                    "Lng REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MikeBoundaryConditions":
                    CreateTable = "CREATE TABLE MikeBoundaryConditions (" +
                    "MikeBoundaryConditionID INTEGER  NOT NULL  UNIQUE, " +
                    "MikeBoundaryConditionTVItemID INTEGER  NOT NULL , " +
                    "MikeBoundaryConditionCode TEXT  NOT NULL , " +
                    "MikeBoundaryConditionName TEXT  NOT NULL , " +
                    "MikeBoundaryConditionLength_m REAL  NOT NULL , " +
                    "MikeBoundaryConditionFormat TEXT  NOT NULL , " +
                    "MikeBoundaryConditionLevelOrVelocity INTEGER  NOT NULL , " +
                    "WebTideDataSet INTEGER  NOT NULL , " +
                    "NumberOfWebTideNodes INTEGER  NOT NULL , " +
                    "WebTideDataFromStartToEndDate TEXT  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MikeScenarios":
                    CreateTable = "CREATE TABLE MikeScenarios (" +
                    "MikeScenarioID INTEGER  NOT NULL  UNIQUE, " +
                    "MikeScenarioTVItemID INTEGER  NOT NULL , " +
                    "ParentMikeScenarioID INTEGER  , " +
                    "ScenarioStatus INTEGER  NOT NULL , " +
                    "ErrorInfo TEXT  , " +
                    "MikeScenarioStartDateTime_Local TEXT  NOT NULL , " +
                    "MikeScenarioEndDateTime_Local TEXT  NOT NULL , " +
                    "MikeScenarioStartExecutionDateTime_Local TEXT  , " +
                    "MikeScenarioExecutionTime_min REAL  , " +
                    "WindSpeed_km_h REAL  NOT NULL , " +
                    "WindDirection_deg REAL  NOT NULL , " +
                    "DecayFactor_per_day REAL  NOT NULL , " +
                    "DecayIsConstant INTEGER  NOT NULL , " +
                    "DecayFactorAmplitude REAL  NOT NULL , " +
                    "ResultFrequency_min INTEGER  NOT NULL , " +
                    "AmbientTemperature_C REAL  NOT NULL , " +
                    "AmbientSalinity_PSU REAL  NOT NULL , " +
                    "GenerateDecouplingFiles INTEGER  , " +
                    "UseDecouplingFiles INTEGER  , " +
                    "UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID INTEGER  , " +
                    "ForSimulatingMWQMRunTVItemID INTEGER  , " +
                    "ManningNumber REAL  NOT NULL , " +
                    "NumberOfElements INTEGER  , " +
                    "NumberOfTimeSteps INTEGER  , " +
                    "NumberOfSigmaLayers INTEGER  , " +
                    "NumberOfZLayers INTEGER  , " +
                    "NumberOfHydroOutputParameters INTEGER  , " +
                    "NumberOfTransOutputParameters INTEGER  , " +
                    "EstimatedHydroFileSize INTEGER  , " +
                    "EstimatedTransFileSize INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MikeScenarioResults":
                    CreateTable = "CREATE TABLE MikeScenarioResults (" +
                    "MikeScenarioResultID INTEGER  NOT NULL  UNIQUE, " +
                    "MikeScenarioTVItemID INTEGER  NOT NULL , " +
                    "MikeResultsJSON TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MikeSources":
                    CreateTable = "CREATE TABLE MikeSources (" +
                    "MikeSourceID INTEGER  NOT NULL  UNIQUE, " +
                    "MikeSourceTVItemID INTEGER  NOT NULL , " +
                    "IsContinuous INTEGER  NOT NULL , " +
                    "Include INTEGER  NOT NULL , " +
                    "IsRiver INTEGER  NOT NULL , " +
                    "UseHydrometric INTEGER  NOT NULL , " +
                    "HydrometricTVItemID INTEGER  , " +
                    "DrainageArea_km2 REAL  , " +
                    "Factor REAL  , " +
                    "SourceNumberString TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MikeSourceStartEnds":
                    CreateTable = "CREATE TABLE MikeSourceStartEnds (" +
                    "MikeSourceStartEndID INTEGER  NOT NULL  UNIQUE, " +
                    "MikeSourceID INTEGER  NOT NULL , " +
                    "StartDateAndTime_Local TEXT  NOT NULL , " +
                    "EndDateAndTime_Local TEXT  NOT NULL , " +
                    "SourceFlowStart_m3_day REAL  NOT NULL , " +
                    "SourceFlowEnd_m3_day REAL  NOT NULL , " +
                    "SourcePollutionStart_MPN_100ml INTEGER  NOT NULL , " +
                    "SourcePollutionEnd_MPN_100ml INTEGER  NOT NULL , " +
                    "SourceTemperatureStart_C REAL  NOT NULL , " +
                    "SourceTemperatureEnd_C REAL  NOT NULL , " +
                    "SourceSalinityStart_PSU REAL  NOT NULL , " +
                    "SourceSalinityEnd_PSU REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMAnalysisReportParameters":
                    CreateTable = "CREATE TABLE MWQMAnalysisReportParameters (" +
                    "MWQMAnalysisReportParameterID INTEGER  NOT NULL  UNIQUE, " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "AnalysisName TEXT  NOT NULL , " +
                    "AnalysisReportYear INTEGER  , " +
                    "StartDate TEXT  NOT NULL , " +
                    "EndDate TEXT  NOT NULL , " +
                    "AnalysisCalculationType INTEGER  NOT NULL , " +
                    "NumberOfRuns INTEGER  NOT NULL , " +
                    "FullYear INTEGER  NOT NULL , " +
                    "SalinityHighlightDeviationFromAverage REAL  NOT NULL , " +
                    "ShortRangeNumberOfDays INTEGER  NOT NULL , " +
                    "MidRangeNumberOfDays INTEGER  NOT NULL , " +
                    "DryLimit24h INTEGER  NOT NULL , " +
                    "DryLimit48h INTEGER  NOT NULL , " +
                    "DryLimit72h INTEGER  NOT NULL , " +
                    "DryLimit96h INTEGER  NOT NULL , " +
                    "WetLimit24h INTEGER  NOT NULL , " +
                    "WetLimit48h INTEGER  NOT NULL , " +
                    "WetLimit72h INTEGER  NOT NULL , " +
                    "WetLimit96h INTEGER  NOT NULL , " +
                    "RunsToOmit TEXT  NOT NULL , " +
                    "ShowDataTypes TEXT  , " +
                    "ExcelTVFileTVItemID INTEGER  , " +
                    "Command INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMLookupMPNs":
                    CreateTable = "CREATE TABLE MWQMLookupMPNs (" +
                    "MWQMLookupMPNID INTEGER  NOT NULL  UNIQUE, " +
                    "Tubes10 INTEGER  NOT NULL , " +
                    "Tubes1 INTEGER  NOT NULL , " +
                    "Tubes01 INTEGER  NOT NULL , " +
                    "MPN_100ml INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMRuns":
                    CreateTable = "CREATE TABLE MWQMRuns (" +
                    "MWQMRunID INTEGER  NOT NULL  UNIQUE, " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "MWQMRunTVItemID INTEGER  NOT NULL , " +
                    "RunSampleType INTEGER  NOT NULL , " +
                    "DateTime_Local TEXT  NOT NULL , " +
                    "RunNumber INTEGER  NOT NULL , " +
                    "StartDateTime_Local TEXT  , " +
                    "EndDateTime_Local TEXT  , " +
                    "LabReceivedDateTime_Local TEXT  , " +
                    "TemperatureControl1_C REAL  , " +
                    "TemperatureControl2_C REAL  , " +
                    "SeaStateAtStart_BeaufortScale INTEGER  , " +
                    "SeaStateAtEnd_BeaufortScale INTEGER  , " +
                    "WaterLevelAtBrook_m REAL  , " +
                    "WaveHightAtStart_m REAL  , " +
                    "WaveHightAtEnd_m REAL  , " +
                    "SampleCrewInitials TEXT  , " +
                    "AnalyzeMethod INTEGER  , " +
                    "SampleMatrix INTEGER  , " +
                    "Laboratory INTEGER  , " +
                    "SampleStatus INTEGER  , " +
                    "LabSampleApprovalContactTVItemID INTEGER  , " +
                    "LabAnalyzeBath1IncubationStartDateTime_Local TEXT  , " +
                    "LabAnalyzeBath2IncubationStartDateTime_Local TEXT  , " +
                    "LabAnalyzeBath3IncubationStartDateTime_Local TEXT  , " +
                    "LabRunSampleApprovalDateTime_Local TEXT  , " +
                    "Tide_Start INTEGER  , " +
                    "Tide_End INTEGER  , " +
                    "RainDay0_mm REAL  , " +
                    "RainDay1_mm REAL  , " +
                    "RainDay2_mm REAL  , " +
                    "RainDay3_mm REAL  , " +
                    "RainDay4_mm REAL  , " +
                    "RainDay5_mm REAL  , " +
                    "RainDay6_mm REAL  , " +
                    "RainDay7_mm REAL  , " +
                    "RainDay8_mm REAL  , " +
                    "RainDay9_mm REAL  , " +
                    "RainDay10_mm REAL  , " +
                    "RemoveFromStat INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMRunLanguages":
                    CreateTable = "CREATE TABLE MWQMRunLanguages (" +
                    "MWQMRunLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMRunID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "RunComment TEXT  NOT NULL , " +
                    "TranslationStatusRunComment INTEGER  NOT NULL , " +
                    "RunWeatherComment TEXT  NOT NULL , " +
                    "TranslationStatusRunWeatherComment INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSamples":
                    CreateTable = "CREATE TABLE MWQMSamples (" +
                    "MWQMSampleID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "MWQMRunTVItemID INTEGER  NOT NULL , " +
                    "SampleDateTime_Local TEXT  NOT NULL , " +
                    "TimeText TEXT  , " +
                    "Depth_m REAL  , " +
                    "FecCol_MPN_100ml INTEGER  NOT NULL , " +
                    "Salinity_PPT REAL  , " +
                    "WaterTemp_C REAL  , " +
                    "PH REAL  , " +
                    "SampleTypesText TEXT  NOT NULL , " +
                    "SampleType_old INTEGER  , " +
                    "Tube_10 INTEGER  , " +
                    "Tube_1_0 INTEGER  , " +
                    "Tube_0_1 INTEGER  , " +
                    "ProcessedBy TEXT  , " +
                    "UseForOpenData INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSampleLanguages":
                    CreateTable = "CREATE TABLE MWQMSampleLanguages (" +
                    "MWQMSampleLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSampleID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "MWQMSampleNote TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSites":
                    CreateTable = "CREATE TABLE MWQMSites (" +
                    "MWQMSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "MWQMSiteNumber TEXT  NOT NULL , " +
                    "MWQMSiteDescription TEXT  NOT NULL , " +
                    "MWQMSiteLatestClassification INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSiteStartEndDates":
                    CreateTable = "CREATE TABLE MWQMSiteStartEndDates (" +
                    "MWQMSiteStartEndDateID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "StartDate TEXT  NOT NULL , " +
                    "EndDate TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSubsectors":
                    CreateTable = "CREATE TABLE MWQMSubsectors (" +
                    "MWQMSubsectorID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSubsectorTVItemID INTEGER  NOT NULL , " +
                    "SubsectorHistoricKey TEXT  NOT NULL , " +
                    "TideLocationSIDText TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "MWQMSubsectorLanguages":
                    CreateTable = "CREATE TABLE MWQMSubsectorLanguages (" +
                    "MWQMSubsectorLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "MWQMSubsectorID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "SubsectorDesc TEXT  NOT NULL , " +
                    "TranslationStatusSubsectorDesc INTEGER  NOT NULL , " +
                    "LogBook TEXT  , " +
                    "TranslationStatusLogBook INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PersistedGrants":
                    CreateTable = "CREATE TABLE PersistedGrants (" +
                    "Key TEXT  NOT NULL  UNIQUE, " +
                    "Type TEXT  NOT NULL , " +
                    "SubjectId TEXT  , " +
                    "ClientId TEXT  NOT NULL , " +
                    "CreationTime TEXT  NOT NULL , " +
                    "Expiration TEXT  , " +
                    "Data TEXT  NOT NULL )";
                    break;
                case "PolSourceGroupings":
                    CreateTable = "CREATE TABLE PolSourceGroupings (" +
                    "PolSourceGroupingID INTEGER  NOT NULL  UNIQUE, " +
                    "CSSPID INTEGER  NOT NULL , " +
                    "GroupName TEXT  NOT NULL , " +
                    "Child TEXT  NOT NULL , " +
                    "Hide TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceGroupingLanguages":
                    CreateTable = "CREATE TABLE PolSourceGroupingLanguages (" +
                    "PolSourceGroupingLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "PolSourceGroupingID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "SourceName TEXT  NOT NULL , " +
                    "SourceNameOrder INTEGER  NOT NULL , " +
                    "TranslationStatusSourceName INTEGER  NOT NULL , " +
                    "Init TEXT  NOT NULL , " +
                    "TranslationStatusInit INTEGER  NOT NULL , " +
                    "Description TEXT  NOT NULL , " +
                    "TranslationStatusDescription INTEGER  NOT NULL , " +
                    "Report TEXT  NOT NULL , " +
                    "TranslationStatusReport INTEGER  NOT NULL , " +
                    "Text TEXT  NOT NULL , " +
                    "TranslationStatusText INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceObservations":
                    CreateTable = "CREATE TABLE PolSourceObservations (" +
                    "PolSourceObservationID INTEGER  NOT NULL  UNIQUE, " +
                    "PolSourceSiteID INTEGER  NOT NULL , " +
                    "ObservationDate_Local TEXT  NOT NULL , " +
                    "ContactTVItemID INTEGER  NOT NULL , " +
                    "DesktopReviewed INTEGER  NOT NULL , " +
                    "Observation_ToBeDeleted TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceObservationIssues":
                    CreateTable = "CREATE TABLE PolSourceObservationIssues (" +
                    "PolSourceObservationIssueID INTEGER  NOT NULL  UNIQUE, " +
                    "PolSourceObservationID INTEGER  NOT NULL , " +
                    "ObservationInfo TEXT  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "ExtraComment TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceSites":
                    CreateTable = "CREATE TABLE PolSourceSites (" +
                    "PolSourceSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "PolSourceSiteTVItemID INTEGER  NOT NULL , " +
                    "Temp_Locator_CanDelete TEXT  , " +
                    "Oldsiteid INTEGER  , " +
                    "Site INTEGER  , " +
                    "SiteID INTEGER  , " +
                    "IsPointSource INTEGER  NOT NULL , " +
                    "InactiveReason INTEGER  , " +
                    "CivicAddressTVItemID INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceSiteEffects":
                    CreateTable = "CREATE TABLE PolSourceSiteEffects (" +
                    "PolSourceSiteEffectID INTEGER  NOT NULL  UNIQUE, " +
                    "PolSourceSiteOrInfrastructureTVItemID INTEGER  NOT NULL , " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "PolSourceSiteEffectTermIDs TEXT  , " +
                    "Comments TEXT  , " +
                    "AnalysisDocumentTVItemID INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "PolSourceSiteEffectTerms":
                    CreateTable = "CREATE TABLE PolSourceSiteEffectTerms (" +
                    "PolSourceSiteEffectTermID INTEGER  NOT NULL  UNIQUE, " +
                    "IsGroup INTEGER  NOT NULL , " +
                    "UnderGroupID INTEGER  , " +
                    "EffectTermEN TEXT  NOT NULL , " +
                    "EffectTermFR TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "RainExceedances":
                    CreateTable = "CREATE TABLE RainExceedances (" +
                    "RainExceedanceID INTEGER  NOT NULL  UNIQUE, " +
                    "RainExceedanceTVItemID INTEGER  NOT NULL , " +
                    "StartMonth INTEGER  NOT NULL , " +
                    "StartDay INTEGER  NOT NULL , " +
                    "EndMonth INTEGER  NOT NULL , " +
                    "EndDay INTEGER  NOT NULL , " +
                    "RainMaximum_mm REAL  NOT NULL , " +
                    "StakeholdersEmailDistributionListID INTEGER  , " +
                    "OnlyStaffEmailDistributionListID INTEGER  , " +
                    "IsActive INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "RainExceedanceClimateSites":
                    CreateTable = "CREATE TABLE RainExceedanceClimateSites (" +
                    "RainExceedanceClimateSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "RainExceedanceTVItemID INTEGER  NOT NULL , " +
                    "ClimateSiteTVItemID INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "RatingCurves":
                    CreateTable = "CREATE TABLE RatingCurves (" +
                    "RatingCurveID INTEGER  NOT NULL  UNIQUE, " +
                    "HydrometricSiteID INTEGER  NOT NULL , " +
                    "RatingCurveNumber TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "RatingCurveValues":
                    CreateTable = "CREATE TABLE RatingCurveValues (" +
                    "RatingCurveValueID INTEGER  NOT NULL  UNIQUE, " +
                    "RatingCurveID INTEGER  NOT NULL , " +
                    "StageValue_m REAL  NOT NULL , " +
                    "DischargeValue_m3_s REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ReportSections":
                    CreateTable = "CREATE TABLE ReportSections (" +
                    "ReportSectionID INTEGER  NOT NULL  UNIQUE, " +
                    "ReportTypeID INTEGER  NOT NULL , " +
                    "TVItemID INTEGER  , " +
                    "Language INTEGER  , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "IsStatic INTEGER  NOT NULL , " +
                    "ParentReportSectionID INTEGER  , " +
                    "Year INTEGER  , " +
                    "Locked INTEGER  NOT NULL , " +
                    "TemplateReportSectionID INTEGER  , " +
                    "ReportSectionName TEXT  , " +
                    "ReportSectionText TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ReportTypes":
                    CreateTable = "CREATE TABLE ReportTypes (" +
                    "ReportTypeID INTEGER  NOT NULL  UNIQUE, " +
                    "TVType INTEGER  NOT NULL , " +
                    "FileType INTEGER  NOT NULL , " +
                    "UniqueCode TEXT  NOT NULL , " +
                    "Language INTEGER  , " +
                    "Name TEXT  , " +
                    "Description TEXT  , " +
                    "StartOfFileName TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "ResetPasswords":
                    CreateTable = "CREATE TABLE ResetPasswords (" +
                    "ResetPasswordID INTEGER  NOT NULL  UNIQUE, " +
                    "Email TEXT  NOT NULL , " +
                    "ExpireDate_Local TEXT  NOT NULL , " +
                    "Code TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "SamplingPlans":
                    CreateTable = "CREATE TABLE SamplingPlans (" +
                    "SamplingPlanID INTEGER  NOT NULL  UNIQUE, " +
                    "IsActive INTEGER  NOT NULL , " +
                    "SamplingPlanName TEXT  NOT NULL , " +
                    "ForGroupName TEXT  NOT NULL , " +
                    "SampleType INTEGER  NOT NULL , " +
                    "SamplingPlanType INTEGER  NOT NULL , " +
                    "LabSheetType INTEGER  NOT NULL , " +
                    "ProvinceTVItemID INTEGER  NOT NULL , " +
                    "CreatorTVItemID INTEGER  NOT NULL , " +
                    "Year INTEGER  NOT NULL , " +
                    "AccessCode TEXT  NOT NULL , " +
                    "DailyDuplicatePrecisionCriteria REAL  NOT NULL , " +
                    "IntertechDuplicatePrecisionCriteria REAL  NOT NULL , " +
                    "IncludeLaboratoryQAQC INTEGER  NOT NULL , " +
                    "ApprovalCode TEXT  NOT NULL , " +
                    "SamplingPlanFileTVItemID INTEGER  , " +
                    "AnalyzeMethodDefault INTEGER  , " +
                    "SampleMatrixDefault INTEGER  , " +
                    "LaboratoryDefault INTEGER  , " +
                    "BackupDirectory TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "SamplingPlanEmails":
                    CreateTable = "CREATE TABLE SamplingPlanEmails (" +
                    "SamplingPlanEmailID INTEGER  NOT NULL  UNIQUE, " +
                    "SamplingPlanID INTEGER  NOT NULL , " +
                    "Email TEXT  NOT NULL , " +
                    "IsContractor INTEGER  NOT NULL , " +
                    "LabSheetHasValueOver500 INTEGER  NOT NULL , " +
                    "LabSheetReceived INTEGER  NOT NULL , " +
                    "LabSheetAccepted INTEGER  NOT NULL , " +
                    "LabSheetRejected INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "SamplingPlanSubsectors":
                    CreateTable = "CREATE TABLE SamplingPlanSubsectors (" +
                    "SamplingPlanSubsectorID INTEGER  NOT NULL  UNIQUE, " +
                    "SamplingPlanID INTEGER  NOT NULL , " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "SamplingPlanSubsectorSites":
                    CreateTable = "CREATE TABLE SamplingPlanSubsectorSites (" +
                    "SamplingPlanSubsectorSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "SamplingPlanSubsectorID INTEGER  NOT NULL , " +
                    "MWQMSiteTVItemID INTEGER  NOT NULL , " +
                    "IsDuplicate INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Spills":
                    CreateTable = "CREATE TABLE Spills (" +
                    "SpillID INTEGER  NOT NULL  UNIQUE, " +
                    "MunicipalityTVItemID INTEGER  NOT NULL , " +
                    "InfrastructureTVItemID INTEGER  , " +
                    "StartDateTime_Local TEXT  NOT NULL , " +
                    "EndDateTime_Local TEXT  , " +
                    "AverageFlow_m3_day REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "SpillLanguages":
                    CreateTable = "CREATE TABLE SpillLanguages (" +
                    "SpillLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "SpillID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "SpillComment TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "Tels":
                    CreateTable = "CREATE TABLE Tels (" +
                    "TelID INTEGER  NOT NULL  UNIQUE, " +
                    "TelTVItemID INTEGER  NOT NULL , " +
                    "TelNumber TEXT  NOT NULL , " +
                    "TelType INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TideDataValues":
                    CreateTable = "CREATE TABLE TideDataValues (" +
                    "TideDataValueID INTEGER  NOT NULL  UNIQUE, " +
                    "TideSiteTVItemID INTEGER  NOT NULL , " +
                    "DateTime_Local TEXT  NOT NULL , " +
                    "Keep INTEGER  NOT NULL , " +
                    "TideDataType INTEGER  NOT NULL , " +
                    "StorageDataType INTEGER  NOT NULL , " +
                    "Depth_m REAL  NOT NULL , " +
                    "UVelocity_m_s REAL  NOT NULL , " +
                    "VVelocity_m_s REAL  NOT NULL , " +
                    "TideStart INTEGER  , " +
                    "TideEnd INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TideLocations":
                    CreateTable = "CREATE TABLE TideLocations (" +
                    "TideLocationID INTEGER  NOT NULL  UNIQUE, " +
                    "Zone INTEGER  NOT NULL , " +
                    "Name TEXT  NOT NULL , " +
                    "Prov TEXT  NOT NULL , " +
                    "sid INTEGER  NOT NULL , " +
                    "Lat REAL  NOT NULL , " +
                    "Lng REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TideSites":
                    CreateTable = "CREATE TABLE TideSites (" +
                    "TideSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "TideSiteTVItemID INTEGER  NOT NULL , " +
                    "TideSiteName TEXT  NOT NULL , " +
                    "Province TEXT  NOT NULL , " +
                    "sid INTEGER  NOT NULL , " +
                    "Zone INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVFiles":
                    CreateTable = "CREATE TABLE TVFiles (" +
                    "TVFileID INTEGER  NOT NULL  UNIQUE, " +
                    "TVFileTVItemID INTEGER  NOT NULL , " +
                    "TemplateTVType INTEGER  , " +
                    "ReportTypeID INTEGER  , " +
                    "Parameters TEXT  , " +
                    "Year INTEGER  , " +
                    "Language INTEGER  NOT NULL , " +
                    "FilePurpose INTEGER  NOT NULL , " +
                    "FileType INTEGER  NOT NULL , " +
                    "FileSize_kb INTEGER  NOT NULL , " +
                    "FileInfo TEXT  , " +
                    "FileCreatedDate_UTC TEXT  NOT NULL , " +
                    "FromWater INTEGER  , " +
                    "ClientFilePath TEXT  , " +
                    "ServerFileName TEXT  NOT NULL , " +
                    "ServerFilePath TEXT  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVFileLanguages":
                    CreateTable = "CREATE TABLE TVFileLanguages (" +
                    "TVFileLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "TVFileID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "FileDescription TEXT  , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVItems":
                    CreateTable = "CREATE TABLE TVItems (" +
                    "TVItemID INTEGER  NOT NULL  UNIQUE, " +
                    "TVLevel INTEGER  NOT NULL , " +
                    "TVPath TEXT  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "ParentID INTEGER  , " +
                    "IsActive INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVItemLanguages":
                    CreateTable = "CREATE TABLE TVItemLanguages (" +
                    "TVItemLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "TVItemID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "TVText TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVItemLinks":
                    CreateTable = "CREATE TABLE TVItemLinks (" +
                    "TVItemLinkID INTEGER  NOT NULL  UNIQUE, " +
                    "FromTVItemID INTEGER  NOT NULL , " +
                    "ToTVItemID INTEGER  NOT NULL , " +
                    "FromTVType INTEGER  NOT NULL , " +
                    "ToTVType INTEGER  NOT NULL , " +
                    "StartDateTime_Local TEXT  , " +
                    "EndDateTime_Local TEXT  , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "TVLevel INTEGER  NOT NULL , " +
                    "TVPath TEXT  NOT NULL , " +
                    "ParentTVItemLinkID INTEGER  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVItemStats":
                    CreateTable = "CREATE TABLE TVItemStats (" +
                    "TVItemStatID INTEGER  NOT NULL  UNIQUE, " +
                    "TVItemID INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "ChildCount INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVItemUserAuthorizations":
                    CreateTable = "CREATE TABLE TVItemUserAuthorizations (" +
                    "TVItemUserAuthorizationID INTEGER  NOT NULL  UNIQUE, " +
                    "ContactTVItemID INTEGER  NOT NULL , " +
                    "TVItemID1 INTEGER  NOT NULL , " +
                    "TVItemID2 INTEGER  , " +
                    "TVItemID3 INTEGER  , " +
                    "TVItemID4 INTEGER  , " +
                    "TVAuth INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "TVTypeUserAuthorizations":
                    CreateTable = "CREATE TABLE TVTypeUserAuthorizations (" +
                    "TVTypeUserAuthorizationID INTEGER  NOT NULL  UNIQUE, " +
                    "ContactTVItemID INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "TVAuth INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "UseOfSites":
                    CreateTable = "CREATE TABLE UseOfSites (" +
                    "UseOfSiteID INTEGER  NOT NULL  UNIQUE, " +
                    "SiteTVItemID INTEGER  NOT NULL , " +
                    "SubsectorTVItemID INTEGER  NOT NULL , " +
                    "TVType INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "StartYear INTEGER  NOT NULL , " +
                    "EndYear INTEGER  , " +
                    "UseWeight INTEGER  , " +
                    "Weight_perc REAL  , " +
                    "UseEquation INTEGER  , " +
                    "Param1 REAL  , " +
                    "Param2 REAL  , " +
                    "Param3 REAL  , " +
                    "Param4 REAL  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "VPAmbients":
                    CreateTable = "CREATE TABLE VPAmbients (" +
                    "VPAmbientID INTEGER  NOT NULL  UNIQUE, " +
                    "VPScenarioID INTEGER  NOT NULL , " +
                    "Row INTEGER  NOT NULL , " +
                    "MeasurementDepth_m REAL  , " +
                    "CurrentSpeed_m_s REAL  , " +
                    "CurrentDirection_deg REAL  , " +
                    "AmbientSalinity_PSU REAL  , " +
                    "AmbientTemperature_C REAL  , " +
                    "BackgroundConcentration_MPN_100ml INTEGER  , " +
                    "PollutantDecayRate_per_day REAL  , " +
                    "FarFieldCurrentSpeed_m_s REAL  , " +
                    "FarFieldCurrentDirection_deg REAL  , " +
                    "FarFieldDiffusionCoefficient REAL  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "VPResults":
                    CreateTable = "CREATE TABLE VPResults (" +
                    "VPResultID INTEGER  NOT NULL  UNIQUE, " +
                    "VPScenarioID INTEGER  NOT NULL , " +
                    "Ordinal INTEGER  NOT NULL , " +
                    "Concentration_MPN_100ml INTEGER  NOT NULL , " +
                    "Dilution REAL  NOT NULL , " +
                    "FarFieldWidth_m REAL  NOT NULL , " +
                    "DispersionDistance_m REAL  NOT NULL , " +
                    "TravelTime_hour REAL  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "VPScenarios":
                    CreateTable = "CREATE TABLE VPScenarios (" +
                    "VPScenarioID INTEGER  NOT NULL  UNIQUE, " +
                    "InfrastructureTVItemID INTEGER  NOT NULL , " +
                    "VPScenarioStatus INTEGER  NOT NULL , " +
                    "UseAsBestEstimate INTEGER  NOT NULL , " +
                    "EffluentFlow_m3_s REAL  , " +
                    "EffluentConcentration_MPN_100ml INTEGER  , " +
                    "FroudeNumber REAL  , " +
                    "PortDiameter_m REAL  , " +
                    "PortDepth_m REAL  , " +
                    "PortElevation_m REAL  , " +
                    "VerticalAngle_deg REAL  , " +
                    "HorizontalAngle_deg REAL  , " +
                    "NumberOfPorts INTEGER  , " +
                    "PortSpacing_m REAL  , " +
                    "AcuteMixZone_m REAL  , " +
                    "ChronicMixZone_m REAL  , " +
                    "EffluentSalinity_PSU REAL  , " +
                    "EffluentTemperature_C REAL  , " +
                    "EffluentVelocity_m_s REAL  , " +
                    "RawResults TEXT  , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                case "VPScenarioLanguages":
                    CreateTable = "CREATE TABLE VPScenarioLanguages (" +
                    "VPScenarioLanguageID INTEGER  NOT NULL  UNIQUE, " +
                    "VPScenarioID INTEGER  NOT NULL , " +
                    "Language INTEGER  NOT NULL , " +
                    "VPScenarioName TEXT  NOT NULL , " +
                    "TranslationStatus INTEGER  NOT NULL , " +
                    "LastUpdateDate_UTC TEXT  NOT NULL , " +
                    "LastUpdateContactTVItemID INTEGER  NOT NULL )";
                    break;
                default:
                    break;
            }

            SqliteCommand createUsersTableCmd = new SqliteCommand(CreateTable, db);

            createUsersTableCmd.ExecuteReader();

            return await Task.FromResult(true);
        }
    }
}
