<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoEmailFromServer" xml:space="preserve">
    <value>Automated email from server.</value>
  </data>
  <data name="CodeEmail" xml:space="preserve">
    <value>CodeEmail</value>
  </data>
  <data name="CodeIs" xml:space="preserve">
    <value>Code is:</value>
  </data>
  <data name="CodeNeedsToBe8Characters" xml:space="preserve">
    <value>Code needs to be 8 characters</value>
  </data>
  <data name="Code_ForEmail_DoesNotExist" xml:space="preserve">
    <value>Code {0} for email {1} does not exist.</value>
  </data>
  <data name="CouldNotAdd_Error_" xml:space="preserve">
    <value>Could not add {0}. Error: {1}</value>
  </data>
  <data name="CouldNotFindRoot" xml:space="preserve">
    <value>Could not find Root</value>
  </data>
  <data name="CouldNotFind_" xml:space="preserve">
    <value>Could not find {0}.</value>
  </data>
  <data name="CouldNotFind_With_Equal_" xml:space="preserve">
    <value>Could not find {0} with {1} equal {2}.</value>
  </data>
  <data name="EmailWasNotSent_" xml:space="preserve">
    <value>Email was not sent. Error: {0}</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>Full Name</value>
  </data>
  <data name="NeedToBeLoggedIn" xml:space="preserve">
    <value>Need to be logged in</value>
  </data>
  <data name="NotAllowedToChangeContactInformation" xml:space="preserve">
    <value>Not allowed to change contact information</value>
  </data>
  <data name="OnlyAdministratorsCanManageUsers" xml:space="preserve">
    <value>Only administrators can manage accounts of users.</value>
  </data>
  <data name="PlsUseFollowingUniqueCodeEtc" xml:space="preserve">
    <value>Please use the following unique code while resetting your password for this login email.</value>
  </data>
  <data name="RequiredInformationToChangeYourPassword" xml:space="preserve">
    <value>Required information to change your password</value>
  </data>
  <data name="Root" xml:space="preserve">
    <value>Root</value>
  </data>
  <data name="ToAddFirst_Requires_TableToBeEmpty" xml:space="preserve">
    <value>To add first {0} requires {1} table to be empty</value>
  </data>
  <data name="TVItemRootShouldBeTheFirstOneAdded" xml:space="preserve">
    <value>TVItem 'Root' should be the first one added</value>
  </data>
  <data name="UserWithLoginEmail_AlreadyExist" xml:space="preserve">
    <value>User with LoginEmail {0} already exist</value>
  </data>
  <data name="YouBeenAddedInWebSiteBy_" xml:space="preserve">
    <value>You have been added to Web Site by {0}.</value>
  </data>
  <data name="YourEmailIs" xml:space="preserve">
    <value>Your email is:</value>
  </data>
  <data name="_AddedInWebSiteBy_" xml:space="preserve">
    <value>{0} was added to website by {1}.</value>
  </data>
  <data name="_AlreadyExists" xml:space="preserve">
    <value>{0} already exists.</value>
  </data>
  <data name="_And_AreNotIdentical" xml:space="preserve">
    <value>{0} and {1} are not identical.</value>
  </data>
  <data name="_DoesNotExist" xml:space="preserve">
    <value>{0} does not exist.</value>
  </data>
  <data name="_EmailNotWellFormed" xml:space="preserve">
    <value>{0} email not valid.</value>
  </data>
  <data name="_HasToBeUnique" xml:space="preserve">
    <value>{0} has to be unique.</value>
  </data>
  <data name="_IsAlreadyTaken" xml:space="preserve">
    <value>{0} is already taken.</value>
  </data>
  <data name="_IsAlreadyTaken1" xml:space="preserve">
    <value>{0} est déjà pris.</value>
  </data>
  <data name="_IsLaterThan_" xml:space="preserve">
    <value>{0} is later than {1}.</value>
  </data>
  <data name="_IsNotComposedOf_Parts" xml:space="preserve">
    <value>{0} is not composed of {1} parts.</value>
  </data>
  <data name="_IsRequired" xml:space="preserve">
    <value>{0} is required</value>
  </data>
  <data name="_LengthShouldBeBetween_And_" xml:space="preserve">
    <value>{0} length should be between {1} and {2}</value>
  </data>
  <data name="_MaxLengthIs_" xml:space="preserve">
    <value>{0} maximum length is {1}.</value>
  </data>
  <data name="_MinLengthIs_" xml:space="preserve">
    <value>{0} minimum length is {1}.</value>
  </data>
  <data name="_RegisteredAndAddedInWebSite" xml:space="preserve">
    <value>{0} was registered on the website.</value>
  </data>
  <data name="_ValueShouldBeBetween_And_" xml:space="preserve">
    <value>{0} value should be between {1} and {2}</value>
  </data>
  <data name="_IsNullOrEmpty" xml:space="preserve">
    <value>{0} is null or empty</value>
  </data>
  <data name="_MinValueIs_" xml:space="preserve">
    <value>{0} minimum value is {1}</value>
  </data>
  <data name="_MaxValueIs_" xml:space="preserve">
    <value>{0} maximum value is {1}</value>
  </data>
  <data name="_IsNotAValidEmail" xml:space="preserve">
    <value>{0} is not a valid email</value>
  </data>
  <data name="InvalidLengthOfPasswordHashShouldBe64Bytes" xml:space="preserve">
    <value>Invalid length of password hash. Should be 64 bytes.</value>
  </data>
  <data name="InvalidLengthOfPasswordSaltShouldBe128Bytes" xml:space="preserve">
    <value>Invalid length of password salt. Should be 128 bytes.</value>
  </data>
  <data name="TVText" xml:space="preserve">
    <value>TVText</value>
  </data>
  <data name="_YearShouldBeBiggerThan_" xml:space="preserve">
    <value>[{0}] year should be bigger than [{1}]</value>
  </data>
  <data name="_DateIsBiggerThan_" xml:space="preserve">
    <value>[{0}] date is bigger than [{1}]</value>
  </data>
  <data name="_IsNotOfType_" xml:space="preserve">
    <value>{0} is not of type {1}</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="AllowableLanguagesAreFRAndEN" xml:space="preserve">
    <value>Allowable languages are [fr and en]</value>
  </data>
  <data name="CouldNotFindFile_" xml:space="preserve">
    <value>Could not find file [{0}]</value>
  </data>
  <data name="WhereOperator_NotImplementedYet" xml:space="preserve">
    <value>Where operator [{0}] not implemented yet</value>
  </data>
  <data name="_DoesNotExistForModelType_" xml:space="preserve">
    <value>{0} does not exist for ModelType = {1}</value>
  </data>
  <data name="_NeedsToBeADateFor_OfModel_" xml:space="preserve">
    <value>[{0}] needs to be a date for {1} of model {2}</value>
  </data>
  <data name="_NeedsToBeANumberFor_OfModel_" xml:space="preserve">
    <value>[{0}] needs to be a number for {1} of model {2}</value>
  </data>
  <data name="_NeedsToBeAValidEnumNumberFor_OfModel_" xml:space="preserve">
    <value>[{0}] needs to be a valid enum number for {1} of model {2}</value>
  </data>
  <data name="_NeedsToBeAValidEnumTextFor_OfModel_" xml:space="preserve">
    <value>[{0}] needs to be a valid enum text for {1} of model {2}</value>
  </data>
  <data name="_NeedsToBeTrueOrFalseFor_OfModel_" xml:space="preserve">
    <value>[{0}] needs to be true or false for {1} of model {2}</value>
  </data>
  <data name="_NeedToHaveValidStringFormatEx_" xml:space="preserve">
    <value>{0} need to have valid string format - Ex: {1}</value>
  </data>
  <data name="_NotImplementedYet" xml:space="preserve">
    <value>{0} not implemented yet</value>
  </data>
  <data name="_ShouldBeAbove_" xml:space="preserve">
    <value>{0} should be above {1}</value>
  </data>
  <data name="_ShouldBeBelow_" xml:space="preserve">
    <value>{0} should be below {1}</value>
  </data>
  <data name="_ShouldNotBeNullOrEmpty" xml:space="preserve">
    <value>{0} should not be null or empty</value>
  </data>
  <data name="WhereOperator_For_OfModel_IsNotValidOnlyEQIsAllowed" xml:space="preserve">
    <value>Where operator [{0}] for [{1}] of model [{2}] is not valid. Only [EQ] is allowed.</value>
  </data>
  <data name="Extra_OfModel_IsInvalidAllowableValuesAre_" xml:space="preserve">
    <value>Extra [{0}] of model [{1}] is invalid. Allowable values are [{2}]</value>
  </data>
  <data name="WhereOperator_NotValidAllowableValuesAre_" xml:space="preserve">
    <value>Where operator [{0}] not valid. Allowable values are [{1}]</value>
  </data>
  <data name="_NeedsToBeAValidEnumNumberFor_OfModel_AllowableValuesAre_" xml:space="preserve">
    <value>[{0}] needs to be a valid Enum number for [{1}] of model [{2}] allowable values are [{3}]</value>
  </data>
  <data name="_NeedsToBeAValidEnumTextFor_OfModel_AllowableValuesAre_" xml:space="preserve">
    <value>[{0}] needs to be a valid Enum text for [{1}] of model [{2}] allowable values are [{3}]</value>
  </data>
  <data name="CouldNot_Error_" xml:space="preserve">
    <value>Could not {0}. Error [{1}].</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
</root>