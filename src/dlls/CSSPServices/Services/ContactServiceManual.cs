/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CultureServices.Resources;
using CultureServices.Services;
using LoggedInServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CSSPServices
{
    public partial interface IContactService
    {
        Task<ActionResult<Contact>> GetContactWithId(string Id);
    }

    public partial class ContactService : ControllerBase, IContactService
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<Contact>> GetContactWithId(string Id)
        {
            //if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            //{
            //    return await Task.FromResult(Unauthorized());
            //}

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                Contact contact = (from c in dbIM.Contacts.AsNoTracking()
                                   where c.Id == Id
                                   select c).FirstOrDefault();

                if (contact == null)
                {
                    return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(contact));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                Contact contact = (from c in dbLocal.Contacts.AsNoTracking()
                        where c.Id == Id
                        select c).FirstOrDefault();

                if (contact == null)
                {
                   return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(contact));
            }
            else
            {
                Contact contact = (from c in db.Contacts.AsNoTracking()
                        where c.Id == Id
                        select c).FirstOrDefault();

                if (contact == null)
                {
                   return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(contact));
            }
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private

    }
}
