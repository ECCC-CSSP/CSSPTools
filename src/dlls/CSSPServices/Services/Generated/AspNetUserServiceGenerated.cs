/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CultureServices.Resources;
using CultureServices.Services;
using LoggedInServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CSSPServices
{
   public partial interface IAspNetUserService
    {
       Task<ActionResult<bool>> Delete(string Id);
       Task<ActionResult<List<AspNetUser>>> GetAspNetUserList(int skip = 0, int take = 100);
       Task<ActionResult<AspNetUser>> GetAspNetUserWithId(string Id);
       Task<ActionResult<AspNetUser>> Post(AspNetUser aspnetuser);
       Task<ActionResult<AspNetUser>> Put(AspNetUser aspnetuser);
    }
    public partial class AspNetUserService : ControllerBase, IAspNetUserService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBContext db { get; }
        private CSSPDBLocalContext dbLocal { get; }
        private InMemoryDBContext dbIM { get; }
        private ICultureService CultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IEnums enums { get; }
        private IEnumerable<ValidationResult> ValidationResults { get; set; }
        #endregion Properties

        #region Constructors
        public AspNetUserService(ICultureService CultureService, ILoggedInService LoggedInService, IEnums enums, CSSPDBContext db, CSSPDBLocalContext dbLocal, InMemoryDBContext dbIM)
        {
            this.CultureService = CultureService;
            this.LoggedInService = LoggedInService;
            this.enums = enums;
            this.db = db;
            this.dbLocal = dbLocal;
            this.dbIM = dbIM;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<AspNetUser>> GetAspNetUserWithId(string Id)
        {
            if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                AspNetUser aspNetUser = (from c in dbIM.AspNetUsers.AsNoTracking()
                                   where c.Id == Id
                                   select c).FirstOrDefault();

                if (aspNetUser == null)
                {
                    return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                AspNetUser aspNetUser = (from c in dbLocal.AspNetUsers.AsNoTracking()
                        where c.Id == Id
                        select c).FirstOrDefault();

                if (aspNetUser == null)
                {
                   return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
            else
            {
                AspNetUser aspNetUser = (from c in db.AspNetUsers.AsNoTracking()
                        where c.Id == Id
                        select c).FirstOrDefault();

                if (aspNetUser == null)
                {
                   return await Task.FromResult(NotFound());
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
        }
        public async Task<ActionResult<List<AspNetUser>>> GetAspNetUserList(int skip = 0, int take = 100)
        {
            if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                List<AspNetUser> aspNetUserList = (from c in dbIM.AspNetUsers.AsNoTracking() orderby c.Id select c).Skip(skip).Take(take).ToList();
            
                return await Task.FromResult(Ok(aspNetUserList));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                List<AspNetUser> aspNetUserList = (from c in dbLocal.AspNetUsers.AsNoTracking() orderby c.Id select c).Skip(skip).Take(take).ToList();

                return await Task.FromResult(Ok(aspNetUserList));
            }
            else
            {
                List<AspNetUser> aspNetUserList = (from c in db.AspNetUsers.AsNoTracking() orderby c.Id select c).Skip(skip).Take(take).ToList();

                return await Task.FromResult(Ok(aspNetUserList));
            }
        }
        public async Task<ActionResult<bool>> Delete(string Id)
        {
            if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                AspNetUser aspNetUser = (from c in dbIM.AspNetUsers
                                   where c.Id == Id
                                   select c).FirstOrDefault();
            
                if (aspNetUser == null)
                {
                    return await Task.FromResult(BadRequest(string.Format(CultureServicesRes.CouldNotFind_With_Equal_, "AspNetUser", "Id", Id)));
                }
            
                try
                {
                    dbIM.AspNetUsers.Remove(aspNetUser);
                    dbIM.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                    return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }
            
                return await Task.FromResult(Ok(true));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                AspNetUser aspNetUser = (from c in dbLocal.AspNetUsers
                                   where c.Id == Id
                                   select c).FirstOrDefault();
                
                if (aspNetUser == null)
                {
                    return await Task.FromResult(BadRequest(string.Format(CultureServicesRes.CouldNotFind_With_Equal_, "AspNetUser", "Id", Id)));
                }

                try
                {
                   dbLocal.AspNetUsers.Remove(aspNetUser);
                   dbLocal.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                   return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(true));
            }
            else
            {
                AspNetUser aspNetUser = (from c in db.AspNetUsers
                                   where c.Id == Id
                                   select c).FirstOrDefault();
                
                if (aspNetUser == null)
                {
                    return await Task.FromResult(BadRequest(string.Format(CultureServicesRes.CouldNotFind_With_Equal_, "AspNetUser", "Id", Id)));
                }

                try
                {
                   db.AspNetUsers.Remove(aspNetUser);
                   db.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                   return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(true));
            }
        }
        public async Task<ActionResult<AspNetUser>> Post(AspNetUser aspNetUser)
        {
            if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(aspNetUser), ActionDBTypeEnum.Create);
            if (ValidationResults.Count() > 0)
            {
               return await Task.FromResult(BadRequest(ValidationResults));
            }

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                try
                {
                    dbIM.AspNetUsers.Add(aspNetUser);
                    dbIM.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                    return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                try
                {
                   dbLocal.AspNetUsers.Add(aspNetUser);
                   dbLocal.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                   return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
            else
            {
                try
                {
                   db.AspNetUsers.Add(aspNetUser);
                   db.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                   return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
        }
        public async Task<ActionResult<AspNetUser>> Put(AspNetUser aspNetUser)
        {
            if ((await LoggedInService.GetLoggedInContactInfo()).LoggedInContact == null)
            {
                return await Task.FromResult(Unauthorized());
            }

            ValidationResults = Validate(new ValidationContext(aspNetUser), ActionDBTypeEnum.Update);
            if (ValidationResults.Count() > 0)
            {
               return await Task.FromResult(BadRequest(ValidationResults));
            }

            if (LoggedInService.DBLocation == DBLocationEnum.InMemory)
            {
                try
                {
                    dbIM.AspNetUsers.Update(aspNetUser);
                    dbIM.SaveChanges();
                }
                catch (DbUpdateException ex)
                {
                    return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
                }

                return await Task.FromResult(Ok(aspNetUser));
            }
            else if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
            try
            {
               dbLocal.AspNetUsers.Update(aspNetUser);
               dbLocal.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
               return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(aspNetUser));
            }
            else
            {
            try
            {
               db.AspNetUsers.Update(aspNetUser);
               db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
               return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(aspNetUser));
            }
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            AspNetUser aspNetUser = validationContext.ObjectInstance as AspNetUser;

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (aspNetUser.Id == "")
                {
                    yield return new ValidationResult(string.Format(CultureServicesRes._IsRequired, "Id"), new[] { "Id" });
                }

                if (LoggedInService.DBLocation == DBLocationEnum.Local)
                {
                    if (!(from c in dbLocal.AspNetUsers select c).Where(c => c.Id == aspNetUser.Id).Any())
                    {
                        yield return new ValidationResult(string.Format(CultureServicesRes.CouldNotFind_With_Equal_, "AspNetUser", "AspNetUserId", (aspNetUser.Id == null ? "" : aspNetUser.Id.ToString())), new[] { "Id" });
                    }
                }
                else
                {
                    if (!(from c in db.AspNetUsers select c).Where(c => c.Id == aspNetUser.Id).Any())
                    {
                        yield return new ValidationResult(string.Format(CultureServicesRes.CouldNotFind_With_Equal_, "AspNetUser", "AspNetUserId", (aspNetUser.Id == null ? "" : aspNetUser.Id.ToString())), new[] { "Id" });
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(aspNetUser.Email) && aspNetUser.Email.Length > 256)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._MaxLengthIs_, "Email", "256"), new[] { "Email" });
            }

            //PasswordHash has no StringLength Attribute

            //SecurityStamp has no StringLength Attribute

            //PhoneNumber has no StringLength Attribute

            if (aspNetUser.LockoutEndDateUtc != null && ((DateTime)aspNetUser.LockoutEndDateUtc).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._YearShouldBeBiggerThan_, "LockoutEndDateUtc", "1980"), new[] { "LockoutEndDateUtc" });
            }

            if (aspNetUser.AccessFailedCount < 0 || aspNetUser.AccessFailedCount > 10000)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._ValueShouldBeBetween_And_, "AccessFailedCount", "0", "10000"), new[] { "AccessFailedCount" });
            }

            if (string.IsNullOrWhiteSpace(aspNetUser.UserName))
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._IsRequired, "UserName"), new[] { "UserName" });
            }

            if (!string.IsNullOrWhiteSpace(aspNetUser.UserName) && aspNetUser.UserName.Length > 256)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._MaxLengthIs_, "UserName", "256"), new[] { "UserName" });
            }

            if (!string.IsNullOrWhiteSpace(aspNetUser.NormalizedUserName) && aspNetUser.NormalizedUserName.Length > 256)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._MaxLengthIs_, "NormalizedUserName", "256"), new[] { "NormalizedUserName" });
            }

            if (!string.IsNullOrWhiteSpace(aspNetUser.NormalizedEmail) && aspNetUser.NormalizedEmail.Length > 256)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._MaxLengthIs_, "NormalizedEmail", "256"), new[] { "NormalizedEmail" });
            }

            if (!string.IsNullOrWhiteSpace(aspNetUser.ConcurrencyStamp) && aspNetUser.ConcurrencyStamp.Length > 256)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._MaxLengthIs_, "ConcurrencyStamp", "256"), new[] { "ConcurrencyStamp" });
            }

            if (aspNetUser.LockoutEnd != null && ((DateTime)aspNetUser.LockoutEnd).Year < 1980)
            {
                yield return new ValidationResult(string.Format(CultureServicesRes._YearShouldBeBiggerThan_, "LockoutEnd", "1980"), new[] { "LockoutEnd" });
            }

            retStr = ""; // added to stop compiling CSSPError
            if (retStr != "") // will never be true
            {
                yield return new ValidationResult("AAA", new[] { "AAA" });
            }

        }
        #endregion Functions private

    }
}
