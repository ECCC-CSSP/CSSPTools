/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPModels.Resources;
using CSSPServices.Resources;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace CSSPServices
{
    public partial class DrogueRunPositionService : BaseService
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        public DrogueRunPositionService(Query query, CSSPDBContext db, int ContactID)
            : base(query, db, ContactID)
        {
        }
        #endregion Constructors

        #region Validation
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            Enums enums = new Enums(LanguageRequest);
            DrogueRunPosition drogueRunPosition = validationContext.ObjectInstance as DrogueRunPosition;
            drogueRunPosition.HasErrors = false;

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (drogueRunPosition.DrogueRunPositionID == 0)
                {
                    drogueRunPosition.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "DrogueRunPositionID"), new[] { "DrogueRunPositionID" });
                }

                if (!(from c in db.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID == drogueRunPosition.DrogueRunPositionID).Any())
                {
                    drogueRunPosition.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "DrogueRunPosition", "DrogueRunPositionID", drogueRunPosition.DrogueRunPositionID.ToString()), new[] { "DrogueRunPositionID" });
                }
            }

            DrogueRun DrogueRunDrogueRunID = (from c in db.DrogueRuns where c.DrogueRunID == drogueRunPosition.DrogueRunID select c).FirstOrDefault();

            if (DrogueRunDrogueRunID == null)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "DrogueRun", "DrogueRunID", drogueRunPosition.DrogueRunID.ToString()), new[] { "DrogueRunID" });
            }

            if (drogueRunPosition.Ordinal < 0 || drogueRunPosition.Ordinal > 100000)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "100000"), new[] { "Ordinal" });
            }

            if (drogueRunPosition.StepLat < -180 || drogueRunPosition.StepLat > 180)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLat", "-180", "180"), new[] { "StepLat" });
            }

            if (drogueRunPosition.StepLng < -90 || drogueRunPosition.StepLng > 90)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLng", "-90", "90"), new[] { "StepLng" });
            }

            if (drogueRunPosition.StepDateTime_Local.Year == 1)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "StepDateTime_Local"), new[] { "StepDateTime_Local" });
            }
            else
            {
                if (drogueRunPosition.StepDateTime_Local.Year < 1980)
                {
                drogueRunPosition.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "StepDateTime_Local", "1980"), new[] { "StepDateTime_Local" });
                }
            }

            if (drogueRunPosition.CalculatedSpeed_m_s < 0 || drogueRunPosition.CalculatedSpeed_m_s > 10)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedSpeed_m_s", "0", "10"), new[] { "CalculatedSpeed_m_s" });
            }

            if (drogueRunPosition.CalculatedDirection_deg < 0 || drogueRunPosition.CalculatedDirection_deg > 360)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedDirection_deg", "0", "360"), new[] { "CalculatedDirection_deg" });
            }

            if (drogueRunPosition.LastUpdateDate_UTC.Year == 1)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { "LastUpdateDate_UTC" });
            }
            else
            {
                if (drogueRunPosition.LastUpdateDate_UTC.Year < 1980)
                {
                drogueRunPosition.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { "LastUpdateDate_UTC" });
                }
            }

            TVItem TVItemLastUpdateContactTVItemID = (from c in db.TVItems where c.TVItemID == drogueRunPosition.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (TVItemLastUpdateContactTVItemID == null)
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", drogueRunPosition.LastUpdateContactTVItemID.ToString()), new[] { "LastUpdateContactTVItemID" });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(TVItemLastUpdateContactTVItemID.TVType))
                {
                    drogueRunPosition.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { "LastUpdateContactTVItemID" });
                }
            }

            retStr = ""; // added to stop compiling CSSPError
            if (retStr != "") // will never be true
            {
                drogueRunPosition.HasErrors = true;
                yield return new ValidationResult("AAA", new[] { "AAA" });
            }

        }
        #endregion Validation

        #region Functions public Generated Get
        public DrogueRunPosition GetDrogueRunPositionWithDrogueRunPositionID(int DrogueRunPositionID)
        {
            return (from c in db.DrogueRunPositions
                    where c.DrogueRunPositionID == DrogueRunPositionID
                    select c).FirstOrDefault();

        }
        public IQueryable<DrogueRunPosition> GetDrogueRunPositionList()
        {
            IQueryable<DrogueRunPosition> DrogueRunPositionQuery = (from c in db.DrogueRunPositions select c);

            DrogueRunPositionQuery = EnhanceQueryStatements<DrogueRunPosition>(DrogueRunPositionQuery) as IQueryable<DrogueRunPosition>;

            return DrogueRunPositionQuery;
        }
        #endregion Functions public Generated Get

        #region Functions public Generated CRUD
        public bool Add(DrogueRunPosition drogueRunPosition)
        {
            drogueRunPosition.ValidationResults = Validate(new ValidationContext(drogueRunPosition), ActionDBTypeEnum.Create);
            if (drogueRunPosition.ValidationResults.Count() > 0) return false;

            db.DrogueRunPositions.Add(drogueRunPosition);

            if (!TryToSave(drogueRunPosition)) return false;

            return true;
        }
        public bool Delete(DrogueRunPosition drogueRunPosition)
        {
            drogueRunPosition.ValidationResults = Validate(new ValidationContext(drogueRunPosition), ActionDBTypeEnum.Delete);
            if (drogueRunPosition.ValidationResults.Count() > 0) return false;

            db.DrogueRunPositions.Remove(drogueRunPosition);

            if (!TryToSave(drogueRunPosition)) return false;

            return true;
        }
        public bool Update(DrogueRunPosition drogueRunPosition)
        {
            drogueRunPosition.ValidationResults = Validate(new ValidationContext(drogueRunPosition), ActionDBTypeEnum.Update);
            if (drogueRunPosition.ValidationResults.Count() > 0) return false;

            db.DrogueRunPositions.Update(drogueRunPosition);

            if (!TryToSave(drogueRunPosition)) return false;

            return true;
        }
        #endregion Functions public Generated CRUD

        #region Functions private Generated TryToSave
        private bool TryToSave(DrogueRunPosition drogueRunPosition)
        {
            try
            {
                db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
                drogueRunPosition.ValidationResults = new List<ValidationResult>() { new ValidationResult(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")) }.AsEnumerable();
                return false;
            }

            return true;
        }
        #endregion Functions private Generated TryToSave

    }
}
