/*
 * Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPServices.Resources;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CSSPServices
{
   public interface IPolSourceSiteEffectTermService
    {
       Task<ActionResult<PolSourceSiteEffectTerm>> GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(int PolSourceSiteEffectTermID);
       Task<ActionResult<List<PolSourceSiteEffectTerm>>> GetPolSourceSiteEffectTermList();
       Task<ActionResult<PolSourceSiteEffectTerm>> Add(PolSourceSiteEffectTerm polsourcesiteeffectterm);
       Task<ActionResult<PolSourceSiteEffectTerm>> Delete(PolSourceSiteEffectTerm polsourcesiteeffectterm);
       Task<ActionResult<PolSourceSiteEffectTerm>> Update(PolSourceSiteEffectTerm polsourcesiteeffectterm);
       Task SetCulture(CultureInfo culture);
    }
    public partial class PolSourceSiteEffectTermService : ControllerBase, IPolSourceSiteEffectTermService
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDBContext db { get; }
        private IEnums enums { get; }
        #endregion Properties

        #region Constructors
        public PolSourceSiteEffectTermService(IEnums enums, CSSPDBContext db)
        {
            this.db = db;
            this.enums = enums;
        }
        #endregion Constructors

        #region Functions public 
        public async Task<ActionResult<PolSourceSiteEffectTerm>> GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(int PolSourceSiteEffectTermID)
        {
            PolSourceSiteEffectTerm polsourcesiteeffectterm = (from c in db.PolSourceSiteEffectTerms.AsNoTracking()
                    where c.PolSourceSiteEffectTermID == PolSourceSiteEffectTermID
                    select c).FirstOrDefault();

            if (polsourcesiteeffectterm == null)
            {
               return await Task.FromResult(NotFound());
            }

            return await Task.FromResult(Ok(polsourcesiteeffectterm));
        }
        public async Task<ActionResult<List<PolSourceSiteEffectTerm>>> GetPolSourceSiteEffectTermList()
        {
            List<PolSourceSiteEffectTerm> polsourcesiteeffecttermList = (from c in db.PolSourceSiteEffectTerms.AsNoTracking() select c).Take(100).ToList();

            return await Task.FromResult(Ok(polsourcesiteeffecttermList));
        }
        public async Task<ActionResult<PolSourceSiteEffectTerm>> Add(PolSourceSiteEffectTerm polSourceSiteEffectTerm)
        {
            polSourceSiteEffectTerm.ValidationResults = Validate(new ValidationContext(polSourceSiteEffectTerm), ActionDBTypeEnum.Create);
            if (polSourceSiteEffectTerm.ValidationResults.Count() > 0)
            {
               return await Task.FromResult(BadRequest(polSourceSiteEffectTerm.ValidationResults));
            }

            try
            {
               db.PolSourceSiteEffectTerms.Add(polSourceSiteEffectTerm);
               db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
               return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(polSourceSiteEffectTerm));
        }
        public async Task<ActionResult<PolSourceSiteEffectTerm>> Delete(PolSourceSiteEffectTerm polSourceSiteEffectTerm)
        {
            polSourceSiteEffectTerm.ValidationResults = Validate(new ValidationContext(polSourceSiteEffectTerm), ActionDBTypeEnum.Delete);
            if (polSourceSiteEffectTerm.ValidationResults.Count() > 0)
            {
               return await Task.FromResult(BadRequest(polSourceSiteEffectTerm.ValidationResults));
            }

            try
            {
               db.PolSourceSiteEffectTerms.Remove(polSourceSiteEffectTerm);
               db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
               return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(polSourceSiteEffectTerm));
        }
        public async Task<ActionResult<PolSourceSiteEffectTerm>> Update(PolSourceSiteEffectTerm polSourceSiteEffectTerm)
        {
            polSourceSiteEffectTerm.ValidationResults = Validate(new ValidationContext(polSourceSiteEffectTerm), ActionDBTypeEnum.Update);
            if (polSourceSiteEffectTerm.ValidationResults.Count() > 0)
            {
               return await Task.FromResult(BadRequest(polSourceSiteEffectTerm.ValidationResults));
            }

            try
            {
               db.PolSourceSiteEffectTerms.Update(polSourceSiteEffectTerm);
               db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {
               return await Task.FromResult(BadRequest(ex.Message + (ex.InnerException != null ? " Inner: " + ex.InnerException.Message : "")));
            }

            return await Task.FromResult(Ok(polSourceSiteEffectTerm));
        }
        public async Task SetCulture(CultureInfo culture)
        {
            CSSPServicesRes.Culture = culture;
        }
        #endregion Functions public

        #region Functions private
        private IEnumerable<ValidationResult> Validate(ValidationContext validationContext, ActionDBTypeEnum actionDBType)
        {
            string retStr = "";
            PolSourceSiteEffectTerm polSourceSiteEffectTerm = validationContext.ObjectInstance as PolSourceSiteEffectTerm;
            polSourceSiteEffectTerm.HasErrors = false;

            if (actionDBType == ActionDBTypeEnum.Update || actionDBType == ActionDBTypeEnum.Delete)
            {
                if (polSourceSiteEffectTerm.PolSourceSiteEffectTermID == 0)
                {
                    polSourceSiteEffectTerm.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "PolSourceSiteEffectTermID"), new[] { "PolSourceSiteEffectTermID" });
                }

                if (!(from c in db.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID == polSourceSiteEffectTerm.PolSourceSiteEffectTermID).Any())
                {
                    polSourceSiteEffectTerm.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceSiteEffectTerm", "PolSourceSiteEffectTermID", polSourceSiteEffectTerm.PolSourceSiteEffectTermID.ToString()), new[] { "PolSourceSiteEffectTermID" });
                }
            }

            if (polSourceSiteEffectTerm.UnderGroupID != null)
            {
                PolSourceSiteEffectTerm PolSourceSiteEffectTermUnderGroupID = (from c in db.PolSourceSiteEffectTerms where c.PolSourceSiteEffectTermID == polSourceSiteEffectTerm.UnderGroupID select c).FirstOrDefault();

                if (PolSourceSiteEffectTermUnderGroupID == null)
                {
                    polSourceSiteEffectTerm.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceSiteEffectTerm", "UnderGroupID", (polSourceSiteEffectTerm.UnderGroupID == null ? "" : polSourceSiteEffectTerm.UnderGroupID.ToString())), new[] { "UnderGroupID" });
                }
            }

            if (string.IsNullOrWhiteSpace(polSourceSiteEffectTerm.EffectTermEN))
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "EffectTermEN"), new[] { "EffectTermEN" });
            }

            if (!string.IsNullOrWhiteSpace(polSourceSiteEffectTerm.EffectTermEN) && polSourceSiteEffectTerm.EffectTermEN.Length > 100)
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "EffectTermEN", "100"), new[] { "EffectTermEN" });
            }

            if (string.IsNullOrWhiteSpace(polSourceSiteEffectTerm.EffectTermFR))
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "EffectTermFR"), new[] { "EffectTermFR" });
            }

            if (!string.IsNullOrWhiteSpace(polSourceSiteEffectTerm.EffectTermFR) && polSourceSiteEffectTerm.EffectTermFR.Length > 100)
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._MaxLengthIs_, "EffectTermFR", "100"), new[] { "EffectTermFR" });
            }

            if (polSourceSiteEffectTerm.LastUpdateDate_UTC.Year == 1)
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), new[] { "LastUpdateDate_UTC" });
            }
            else
            {
                if (polSourceSiteEffectTerm.LastUpdateDate_UTC.Year < 1980)
                {
                polSourceSiteEffectTerm.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), new[] { "LastUpdateDate_UTC" });
                }
            }

            TVItem TVItemLastUpdateContactTVItemID = (from c in db.TVItems where c.TVItemID == polSourceSiteEffectTerm.LastUpdateContactTVItemID select c).FirstOrDefault();

            if (TVItemLastUpdateContactTVItemID == null)
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", polSourceSiteEffectTerm.LastUpdateContactTVItemID.ToString()), new[] { "LastUpdateContactTVItemID" });
            }
            else
            {
                List<TVTypeEnum> AllowableTVTypes = new List<TVTypeEnum>()
                {
                    TVTypeEnum.Contact,
                };
                if (!AllowableTVTypes.Contains(TVItemLastUpdateContactTVItemID.TVType))
                {
                    polSourceSiteEffectTerm.HasErrors = true;
                    yield return new ValidationResult(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), new[] { "LastUpdateContactTVItemID" });
                }
            }

            retStr = ""; // added to stop compiling CSSPError
            if (retStr != "") // will never be true
            {
                polSourceSiteEffectTerm.HasErrors = true;
                yield return new ValidationResult("AAA", new[] { "AAA" });
            }

        }
        #endregion Functions private

    }
}
