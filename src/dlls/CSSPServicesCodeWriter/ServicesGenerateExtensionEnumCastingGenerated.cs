using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
//using System.Windows.Forms;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using CSSPModels;
using CSSPEnums;
using CSSPServices;
using CSSPGenerateCodeBase;

namespace CSSPServicesGenerateCodeHelper
{
    public partial class ServicesCodeWriter
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        // constructor was done in the ServicesGenerateCodeHelper.cs file
        #endregion Constructors

        #region Functions private
        #endregion Functions private

        #region Functions public
        /// <summary>
        /// Generates:
        ///     C:\CSSPTools\src\dlls\CSSPServices\_ExtensionEnumCastingGenerated.cs file
        /// 
        /// Requires:
        ///     C:\CSSPTools\src\dlls\CSSPEnums\bin\Debug\netcoreapp3.1\CSSPEnums.dll
        ///     
        /// </summary>
        public void ExtensionEnumCastingGenerated()
        {
            StringBuilder sb = new StringBuilder();
            StatusTempEvent(new StatusEventArgs(""));
            ClearPermanentEvent(new StatusEventArgs(""));
            List<string> ClassToRemove = new List<string>()
            {
                "Enums", "EnumIDAndText", "CSSPEnumsRes", "PolSourceInfoEnumGeneratedRes", "<PrivateImplementationDetails>", "<>c"
            };

            FileInfo fiDLL = new FileInfo(@"C:\CSSPTools\src\dlls\CSSPEnums\bin\Debug\netcoreapp3.1\CSSPEnums.dll");

            if (!fiDLL.Exists)
            {
                CSSPErrorEvent(new CSSPErrorEventArgs($"{ fiDLL.FullName } does not exist"));
                return;
            }

            var importAssembly = Assembly.LoadFile(fiDLL.FullName);
            Type[] types = importAssembly.GetTypes();

            sb.AppendLine(@" /* Auto generated from the CSSPCodeWriter.proj by clicking on the [_ExtensionEnumCastingGenerated.cs] button");
            sb.AppendLine(@" *");
            sb.AppendLine(@" * Do not edit this file.");
            sb.AppendLine(@" *");
            sb.AppendLine(@" */ ");
            sb.AppendLine(@"");
            sb.AppendLine(@"using CSSPEnums;");
            sb.AppendLine(@"using CSSPModels;");
            sb.AppendLine(@"");
            sb.AppendLine(@"namespace CSSPServices");
            sb.AppendLine(@"{");
            sb.AppendLine(@"    public static class ExtentionEnumCasting");
            sb.AppendLine(@"    {");
            sb.AppendLine(@"        public static object GetEnumCasting(WhereInfo whereInfo)");
            sb.AppendLine(@"        {");
            sb.AppendLine(@"            switch (whereInfo.EnumType.Name)");
            sb.AppendLine(@"            {");
            foreach (Type type in types)
            {
                if (ClassToRemove.Contains(type.Name))
                {
                    continue;
                }

                sb.AppendLine($@"               case ""{ type.Name }"":");
                sb.AppendLine($@"                   return ({ type.Name })whereInfo.ValueInt;");
            }
            sb.AppendLine(@"               default:");
            sb.AppendLine(@"                   return null;");
            sb.AppendLine(@"            }");
            sb.AppendLine(@"        }");
            sb.AppendLine(@"    }");
            sb.AppendLine(@"}");

            FileInfo fiOutputGen = new FileInfo($@"C:\CSSPTools\src\dlls\CSSPServices\_ExtensionEnumCastingGenerated.cs");
            using (StreamWriter sw = fiOutputGen.CreateText())
            {
                sw.Write(sb.ToString());
            }

            StatusPermanentEvent(new StatusEventArgs($"Created [{ fiOutputGen.FullName }] ..."));
            StatusPermanentEvent(new StatusEventArgs(""));
            StatusPermanentEvent(new StatusEventArgs("Done ..."));
            StatusTempEvent(new StatusEventArgs("Done ..."));
        }
        #endregion Functions public
    }
}
