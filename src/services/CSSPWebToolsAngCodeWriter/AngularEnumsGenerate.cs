using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using System.ComponentModel.DataAnnotations;
//using System.Windows.Forms;
using CSSPModels;
using CSSPEnums;
using CSSPModelsGenerateCodeHelper;
using System.Data.SqlClient;
using System.Data;
using CSSPGenerateCodeBase;
using System.IO;

namespace CSSPWebToolsAngGenerateCodeHelper
{
    public partial class AngularCodeWriter
    {
        #region Variables
        #endregion Variables

        #region Properties
        #endregion Properties

        #region Constructors
        // constructor was done in the AngularGenerateCodeHelper.cs file
        #endregion Constructors

        #region Events
        #endregion Events

        #region Functions public
        public void AngularEnumsGenerate()
        {
            StatusTempEvent(new StatusEventArgs(""));
            ClearPermanentEvent(new StatusEventArgs("Starting ..."));
            StatusPermanentEvent(new StatusEventArgs(""));

            DirectoryInfo diOutputGen = new DirectoryInfo(@"C:\CSSPTools\src\web\CSSPWebToolsAng\src\app\enums\generated\");
            if (!diOutputGen.Exists)
            {
                try
                {
                    diOutputGen.Create();
                }
                catch (Exception)
                {
                    StatusPermanent2Event(new StatusEventArgs($"Could not create directory [{ diOutputGen.FullName }]"));
                }
            }

            FileInfo fiCSSPEnumsDLL = new FileInfo(@"C:\CSSPTools\src\dlls\CSSPEnums\bin\Debug\netcoreapp3.1\CSSPEnums.dll");

            if (!fiCSSPEnumsDLL.Exists)
            {
                CSSPErrorEvent(new CSSPErrorEventArgs($"File does not exist [{ fiCSSPEnumsDLL.FullName }]"));
                return;
            }

            StatusPermanentEvent(new StatusEventArgs($"Reading [{ fiCSSPEnumsDLL.FullName }] ..."));
            List<DLLTypeInfo> DLLTypeInfoCSSPEnumsList = new List<DLLTypeInfo>();
            if (FillDLLTypeInfoList(fiCSSPEnumsDLL, DLLTypeInfoCSSPEnumsList))
            {
                CSSPErrorEvent(new CSSPErrorEventArgs($"Could not read the file [{ fiCSSPEnumsDLL.FullName }]"));
                return;
            }
            StatusPermanentEvent(new StatusEventArgs($"Loaded [{ fiCSSPEnumsDLL.FullName }] ..."));

            foreach (DLLTypeInfo dllTypeInfoEnums in DLLTypeInfoCSSPEnumsList)
            {
                //if (dllTypeInfoEnums.Name != "AddressTypeEnum")
                //{
                //    continue;
                //}

                StringBuilder sb = new StringBuilder();

                if (dllTypeInfoEnums.IsEnum)
                {
                    sb.AppendLine(@"/*");
                    sb.AppendLine(@" * Auto generated from the CSSPWebToolsAngCodeWriter.proj by clicking on the [AngularEnumsGenerate.cs] button");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" * Do not edit this file.");
                    sb.AppendLine(@" *");
                    sb.AppendLine(@" */");
                    sb.AppendLine($@"export enum { dllTypeInfoEnums.Name } {{");

                    List<EnumNameAndNumber> enumNameAndNumberList = new List<EnumNameAndNumber>();

                    foreach (DLLFieldInfo dllFieldInfo in dllTypeInfoEnums.FieldInfoList)
                    {
                        if (dllTypeInfoEnums.IsEnum)
                        {

                            string fName = dllFieldInfo.Name;
                            int IntVal = (int)dllFieldInfo.FieldInfo.GetValue(dllFieldInfo.Name);

                            enumNameAndNumberList.Add(new EnumNameAndNumber() { EnumName = fName, EnumNumber = IntVal });
                        }
                    }

                    foreach (EnumNameAndNumber enumNameAndNumber in enumNameAndNumberList.OrderBy(c => c.EnumNumber))
                    {
                        sb.AppendLine($@"    { enumNameAndNumber.EnumName } = { enumNameAndNumber.EnumNumber },");
                    }

                    sb.AppendLine(@"}");
                    sb.AppendLine(@"");

                    FileInfo fiOutputGen = new FileInfo($@"C:\CSSPTools\src\web\CSSPWebToolsAng\src\app\enums\generated\{ dllTypeInfoEnums.Name.ToLower().Replace("enum", ".enum") }.ts");
                    using (StreamWriter sw2 = fiOutputGen.CreateText())
                    {
                        sw2.Write(sb.ToString());
                        StatusPermanentEvent(new StatusEventArgs($"Created [{ dllTypeInfoEnums.Name.ToLower().Replace("enum", ".enum") }.ts]"));
                    }
                }

            }
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
