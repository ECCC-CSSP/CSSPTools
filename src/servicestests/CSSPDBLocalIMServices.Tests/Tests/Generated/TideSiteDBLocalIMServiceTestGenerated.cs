/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class TideSiteDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ITideSiteDBLocalIMService TideSiteDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private TideSite tideSite { get; set; }
        #endregion Properties

        #region Constructors
        public TideSiteDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocalIM]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideSiteDBLocalIM_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocalIM]

        #region Tests Generated [DBLocalIM] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideSiteDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            tideSite = GetFilledRandomTideSite("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated [DBLocalIM] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionTideSiteList = await TideSiteDBLocalIMService.GetTideSiteList();
            Assert.Equal(200, ((ObjectResult)actionTideSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteList.Result).Value);
            List<TideSite> tideSiteList = (List<TideSite>)((OkObjectResult)actionTideSiteList.Result).Value;

            count = tideSiteList.Count();

            TideSite tideSite = GetFilledRandomTideSite("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // tideSite.TideSiteID   (Int32)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.TideSiteID = 0;

            var actionTideSite = await TideSiteDBLocalIMService.Put(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.TideSiteID = 10000000;
            actionTideSite = await TideSiteDBLocalIMService.Put(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = TideSite)]
            // tideSite.TideSiteTVItemID   (Int32)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.TideSiteTVItemID = 0;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.TideSiteTVItemID = 1;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // tideSite.TideSiteName   (String)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("TideSiteName");
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.TideSiteName = GetRandomString("", 101);
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteDBLocalIMService.GetTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(2)]
            // [CSSPMinLength(2)]
            // tideSite.Province   (String)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("Province");
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.Province = GetRandomString("", 1);
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteDBLocalIMService.GetTideSiteList().Count());
            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.Province = GetRandomString("", 3);
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteDBLocalIMService.GetTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // tideSite.sid   (Int32)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.sid = -1;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteService.GetTideSiteList().Count());
            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.sid = 10001;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteDBLocalIMService.GetTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // tideSite.Zone   (Int32)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.Zone = -1;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteService.GetTideSiteList().Count());
            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.Zone = 10001;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            //Assert.AreEqual(count, tideSiteDBLocalIMService.GetTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tideSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.LastUpdateDate_UTC = new DateTime();
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);
            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tideSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.LastUpdateContactTVItemID = 0;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

            tideSite = null;
            tideSite = GetFilledRandomTideSite("");
            tideSite.LastUpdateContactTVItemID = 1;
            actionTideSite = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.IsType<BadRequestObjectResult>(actionTideSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            tideSite.TideSiteID = 10000000;

            // Post TideSite
            var actionTideSiteAdded = await TideSiteDBLocalIMService.Post(tideSite);
            Assert.Equal(200, ((ObjectResult)actionTideSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteAdded.Result).Value);
            TideSite tideSiteAdded = (TideSite)((OkObjectResult)actionTideSiteAdded.Result).Value;
            Assert.NotNull(tideSiteAdded);

            // List<TideSite>
            var actionTideSiteList = await TideSiteDBLocalIMService.GetTideSiteList();
            Assert.Equal(200, ((ObjectResult)actionTideSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteList.Result).Value);
            List<TideSite> tideSiteList = (List<TideSite>)((OkObjectResult)actionTideSiteList.Result).Value;

            int count = ((List<TideSite>)((OkObjectResult)actionTideSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // Get TideSite With TideSiteID
            var actionTideSiteGet = await TideSiteDBLocalIMService.GetTideSiteWithTideSiteID(tideSiteList[0].TideSiteID);
            Assert.Equal(200, ((ObjectResult)actionTideSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteGet.Result).Value);
            TideSite tideSiteGet = (TideSite)((OkObjectResult)actionTideSiteGet.Result).Value;
            Assert.NotNull(tideSiteGet);
            Assert.Equal(tideSiteGet.TideSiteID, tideSiteList[0].TideSiteID);

            // Put TideSite
            var actionTideSiteUpdated = await TideSiteDBLocalIMService.Put(tideSite);
            Assert.Equal(200, ((ObjectResult)actionTideSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteUpdated.Result).Value);
            TideSite tideSiteUpdated = (TideSite)((OkObjectResult)actionTideSiteUpdated.Result).Value;
            Assert.NotNull(tideSiteUpdated);

            // Delete TideSite
            var actionTideSiteDeleted = await TideSiteDBLocalIMService.Delete(tideSite.TideSiteID);
            Assert.Equal(200, ((ObjectResult)actionTideSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionTideSiteDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITideSiteDBLocalIMService, TideSiteDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            TideSiteDBLocalIMService = Provider.GetService<ITideSiteDBLocalIMService>();
            Assert.NotNull(TideSiteDBLocalIMService);

            return await Task.FromResult(true);
        }
        private TideSite GetFilledRandomTideSite(string OmitPropName)
        {
            TideSite tideSite = new TideSite();

            if (OmitPropName != "TideSiteTVItemID") tideSite.TideSiteTVItemID = 38;
            if (OmitPropName != "TideSiteName") tideSite.TideSiteName = GetRandomString("", 5);
            if (OmitPropName != "Province") tideSite.Province = GetRandomString("", 2);
            if (OmitPropName != "sid") tideSite.sid = GetRandomInt(0, 10000);
            if (OmitPropName != "Zone") tideSite.Zone = GetRandomInt(0, 10000);
            if (OmitPropName != "LastUpdateDate_UTC") tideSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tideSite.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 38, TVLevel = 3, TVPath = "p1p5p6p38", TVType = (TVTypeEnum)22, ParentID = 6, IsActive = true, LastUpdateDate_UTC = new DateTime(2019, 1, 22, 18, 36, 9), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return tideSite;
        }
        private void CheckTideSiteFields(List<TideSite> tideSiteList)
        {
            Assert.False(string.IsNullOrWhiteSpace(tideSiteList[0].TideSiteName));
            Assert.False(string.IsNullOrWhiteSpace(tideSiteList[0].Province));
        }

        #endregion Functions private
    }
}
