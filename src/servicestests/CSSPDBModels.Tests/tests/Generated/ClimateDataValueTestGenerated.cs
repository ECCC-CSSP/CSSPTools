/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBModels.Tests
{
    public partial class ClimateDataValueTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ClimateDataValue climateDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public ClimateDataValueTest()
        {
            climateDataValue = new ClimateDataValue();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void ClimateDataValue_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClimateDataValueID", "DBCommand", "ClimateSiteID", "DateTime_Local", "Keep", "StorageDataType", "HasBeenRead", "Snow_cm", "Rainfall_mm", "RainfallEntered_mm", "TotalPrecip_mm_cm", "MaxTemp_C", "MinTemp_C", "HeatDegDays_C", "CoolDegDays_C", "SnowOnGround_cm", "DirMaxGust_0North", "SpdMaxGust_kmh", "HourlyValues", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateDataValue).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void ClimateDataValue_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateDataValue).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void ClimateDataValue_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               climateDataValue.ClimateDataValueID = val1;
               Assert.Equal(val1, climateDataValue.ClimateDataValueID);
               DBCommandEnum val2 = (DBCommandEnum)3;
               climateDataValue.DBCommand = val2;
               Assert.Equal(val2, climateDataValue.DBCommand);
               int val3 = 45;
               climateDataValue.ClimateSiteID = val3;
               Assert.Equal(val3, climateDataValue.ClimateSiteID);
               DateTime val4 = new DateTime(2010, 3, 4);
               climateDataValue.DateTime_Local = val4;
               Assert.Equal(val4, climateDataValue.DateTime_Local);
               bool val5 = true;
               climateDataValue.Keep = val5;
               Assert.Equal(val5, climateDataValue.Keep);
               StorageDataTypeEnum val6 = (StorageDataTypeEnum)3;
               climateDataValue.StorageDataType = val6;
               Assert.Equal(val6, climateDataValue.StorageDataType);
               bool val7 = true;
               climateDataValue.HasBeenRead = val7;
               Assert.Equal(val7, climateDataValue.HasBeenRead);
               double val8 = 87.9D;
               climateDataValue.Snow_cm = val8;
               Assert.Equal(val8, climateDataValue.Snow_cm);
               double val9 = 87.9D;
               climateDataValue.Rainfall_mm = val9;
               Assert.Equal(val9, climateDataValue.Rainfall_mm);
               double val10 = 87.9D;
               climateDataValue.RainfallEntered_mm = val10;
               Assert.Equal(val10, climateDataValue.RainfallEntered_mm);
               double val11 = 87.9D;
               climateDataValue.TotalPrecip_mm_cm = val11;
               Assert.Equal(val11, climateDataValue.TotalPrecip_mm_cm);
               double val12 = 87.9D;
               climateDataValue.MaxTemp_C = val12;
               Assert.Equal(val12, climateDataValue.MaxTemp_C);
               double val13 = 87.9D;
               climateDataValue.MinTemp_C = val13;
               Assert.Equal(val13, climateDataValue.MinTemp_C);
               double val14 = 87.9D;
               climateDataValue.HeatDegDays_C = val14;
               Assert.Equal(val14, climateDataValue.HeatDegDays_C);
               double val15 = 87.9D;
               climateDataValue.CoolDegDays_C = val15;
               Assert.Equal(val15, climateDataValue.CoolDegDays_C);
               double val16 = 87.9D;
               climateDataValue.SnowOnGround_cm = val16;
               Assert.Equal(val16, climateDataValue.SnowOnGround_cm);
               double val17 = 87.9D;
               climateDataValue.DirMaxGust_0North = val17;
               Assert.Equal(val17, climateDataValue.DirMaxGust_0North);
               double val18 = 87.9D;
               climateDataValue.SpdMaxGust_kmh = val18;
               Assert.Equal(val18, climateDataValue.SpdMaxGust_kmh);
               string val19 = "Some text";
               climateDataValue.HourlyValues = val19;
               Assert.Equal(val19, climateDataValue.HourlyValues);
               DateTime val20 = new DateTime(2010, 3, 4);
               climateDataValue.LastUpdateDate_UTC = val20;
               Assert.Equal(val20, climateDataValue.LastUpdateDate_UTC);
               int val21 = 45;
               climateDataValue.LastUpdateContactTVItemID = val21;
               Assert.Equal(val21, climateDataValue.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
