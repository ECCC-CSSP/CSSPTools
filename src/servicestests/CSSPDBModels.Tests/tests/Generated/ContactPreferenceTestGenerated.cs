/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net6.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

namespace CSSPDBModels.Tests;

public partial class ContactPreferenceTest
{
    private ContactPreference contactPreference { get; set; }

    public ContactPreferenceTest()
    {
        contactPreference = new ContactPreference();
    }
    [Fact]
    public void ContactPreference_Properties_Test()
    {
        List<string> propNameList = new List<string>() { "ContactPreferenceID", "DBCommand", "ContactID", "TVType", "MarkerSize", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(ContactPreference).GetProperties().OrderBy(c => c.Name))
        {
            if (!propertyInfo.GetGetMethod().IsVirtual
                && propertyInfo.Name != "ValidationResults"
                && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
            {
                Assert.Equal(propNameList[index], propertyInfo.Name);
                index += 1;
            }
        }

        Assert.Equal(propNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(ContactPreference).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
            {
                if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                {
                }
            }
        }


    }
    [Fact]
    public void ContactPreference_Navigation_Test()
    {
        List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
        List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(ContactPreference).GetProperties())
        {
            if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                Assert.True(foreignNameExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(ContactPreference).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                Assert.True(foreignNameCollectionExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameCollectionList.Count, index);

    }
    [Fact]
    public void ContactPreference_Every_Property_Has_Get_Set_Test()
    {
           int val1 = 45;
           contactPreference.ContactPreferenceID = val1;
           Assert.Equal(val1, contactPreference.ContactPreferenceID);
           DBCommandEnum val2 = (DBCommandEnum)3;
           contactPreference.DBCommand = val2;
           Assert.Equal(val2, contactPreference.DBCommand);
           int val3 = 45;
           contactPreference.ContactID = val3;
           Assert.Equal(val3, contactPreference.ContactID);
           TVTypeEnum val4 = (TVTypeEnum)3;
           contactPreference.TVType = val4;
           Assert.Equal(val4, contactPreference.TVType);
           int val5 = 45;
           contactPreference.MarkerSize = val5;
           Assert.Equal(val5, contactPreference.MarkerSize);
           DateTime val6 = new DateTime(2010, 3, 4);
           contactPreference.LastUpdateDate_UTC = val6;
           Assert.Equal(val6, contactPreference.LastUpdateDate_UTC);
           int val7 = 45;
           contactPreference.LastUpdateContactTVItemID = val7;
           Assert.Equal(val7, contactPreference.LastUpdateContactTVItemID);
    }
}
