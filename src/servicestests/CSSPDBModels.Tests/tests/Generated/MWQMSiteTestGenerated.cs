/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net6.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

namespace CSSPDBModels.Tests;

public partial class MWQMSiteTest
{
    private MWQMSite mWQMSite { get; set; }

    public MWQMSiteTest()
    {
        mWQMSite = new MWQMSite();
    }
    [Fact]
    public void MWQMSite_Properties_Test()
    {
        List<string> propNameList = new List<string>() { "MWQMSiteID", "DBCommand", "MWQMSiteTVItemID", "MWQMSiteNumber", "MWQMSiteDescription", "MWQMSiteLatestClassification", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().OrderBy(c => c.Name))
        {
            if (!propertyInfo.GetGetMethod().IsVirtual
                && propertyInfo.Name != "ValidationResults"
                && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
            {
                Assert.Equal(propNameList[index], propertyInfo.Name);
                index += 1;
            }
        }

        Assert.Equal(propNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
            {
                if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                {
                }
            }
        }


    }
    [Fact]
    public void MWQMSite_Navigation_Test()
    {
        List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
        List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties())
        {
            if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                Assert.True(foreignNameExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                Assert.True(foreignNameCollectionExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameCollectionList.Count, index);

    }
    [Fact]
    public void MWQMSite_Every_Property_Has_Get_Set_Test()
    {
           int val1 = 45;
           mWQMSite.MWQMSiteID = val1;
           Assert.Equal(val1, mWQMSite.MWQMSiteID);
           DBCommandEnum val2 = (DBCommandEnum)3;
           mWQMSite.DBCommand = val2;
           Assert.Equal(val2, mWQMSite.DBCommand);
           int val3 = 45;
           mWQMSite.MWQMSiteTVItemID = val3;
           Assert.Equal(val3, mWQMSite.MWQMSiteTVItemID);
           string val4 = "Some text";
           mWQMSite.MWQMSiteNumber = val4;
           Assert.Equal(val4, mWQMSite.MWQMSiteNumber);
           string val5 = "Some text";
           mWQMSite.MWQMSiteDescription = val5;
           Assert.Equal(val5, mWQMSite.MWQMSiteDescription);
           MWQMSiteLatestClassificationEnum val6 = (MWQMSiteLatestClassificationEnum)3;
           mWQMSite.MWQMSiteLatestClassification = val6;
           Assert.Equal(val6, mWQMSite.MWQMSiteLatestClassification);
           int val7 = 45;
           mWQMSite.Ordinal = val7;
           Assert.Equal(val7, mWQMSite.Ordinal);
           DateTime val8 = new DateTime(2010, 3, 4);
           mWQMSite.LastUpdateDate_UTC = val8;
           Assert.Equal(val8, mWQMSite.LastUpdateDate_UTC);
           int val9 = 45;
           mWQMSite.LastUpdateContactTVItemID = val9;
           Assert.Equal(val9, mWQMSite.LastUpdateContactTVItemID);
    }
}
