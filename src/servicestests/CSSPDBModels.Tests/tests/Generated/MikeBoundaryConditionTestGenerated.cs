/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net6.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

namespace CSSPDBModels.Tests;

public partial class MikeBoundaryConditionTest
{
    private MikeBoundaryCondition mikeBoundaryCondition { get; set; }

    public MikeBoundaryConditionTest()
    {
        mikeBoundaryCondition = new MikeBoundaryCondition();
    }
    [Fact]
    public void MikeBoundaryCondition_Properties_Test()
    {
        List<string> propNameList = new List<string>() { "MikeBoundaryConditionID", "DBCommand", "MikeBoundaryConditionTVItemID", "MikeBoundaryConditionCode", "MikeBoundaryConditionName", "MikeBoundaryConditionLength_m", "MikeBoundaryConditionFormat", "MikeBoundaryConditionLevelOrVelocity", "WebTideDataSet", "NumberOfWebTideNodes", "WebTideDataFromStartToEndDate", "TVType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().OrderBy(c => c.Name))
        {
            if (!propertyInfo.GetGetMethod().IsVirtual
                && propertyInfo.Name != "ValidationResults"
                && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
            {
                Assert.Equal(propNameList[index], propertyInfo.Name);
                index += 1;
            }
        }

        Assert.Equal(propNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
            {
                if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                {
                }
            }
        }


    }
    [Fact]
    public void MikeBoundaryCondition_Navigation_Test()
    {
        List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
        List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties())
        {
            if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                Assert.True(foreignNameExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                Assert.True(foreignNameCollectionExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameCollectionList.Count, index);

    }
    [Fact]
    public void MikeBoundaryCondition_Every_Property_Has_Get_Set_Test()
    {
           int val1 = 45;
           mikeBoundaryCondition.MikeBoundaryConditionID = val1;
           Assert.Equal(val1, mikeBoundaryCondition.MikeBoundaryConditionID);
           DBCommandEnum val2 = (DBCommandEnum)3;
           mikeBoundaryCondition.DBCommand = val2;
           Assert.Equal(val2, mikeBoundaryCondition.DBCommand);
           int val3 = 45;
           mikeBoundaryCondition.MikeBoundaryConditionTVItemID = val3;
           Assert.Equal(val3, mikeBoundaryCondition.MikeBoundaryConditionTVItemID);
           string val4 = "Some text";
           mikeBoundaryCondition.MikeBoundaryConditionCode = val4;
           Assert.Equal(val4, mikeBoundaryCondition.MikeBoundaryConditionCode);
           string val5 = "Some text";
           mikeBoundaryCondition.MikeBoundaryConditionName = val5;
           Assert.Equal(val5, mikeBoundaryCondition.MikeBoundaryConditionName);
           double val6 = 87.9D;
           mikeBoundaryCondition.MikeBoundaryConditionLength_m = val6;
           Assert.Equal(val6, mikeBoundaryCondition.MikeBoundaryConditionLength_m);
           string val7 = "Some text";
           mikeBoundaryCondition.MikeBoundaryConditionFormat = val7;
           Assert.Equal(val7, mikeBoundaryCondition.MikeBoundaryConditionFormat);
           MikeBoundaryConditionLevelOrVelocityEnum val8 = (MikeBoundaryConditionLevelOrVelocityEnum)3;
           mikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity = val8;
           Assert.Equal(val8, mikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity);
           WebTideDataSetEnum val9 = (WebTideDataSetEnum)3;
           mikeBoundaryCondition.WebTideDataSet = val9;
           Assert.Equal(val9, mikeBoundaryCondition.WebTideDataSet);
           int val10 = 45;
           mikeBoundaryCondition.NumberOfWebTideNodes = val10;
           Assert.Equal(val10, mikeBoundaryCondition.NumberOfWebTideNodes);
           string val11 = "Some text";
           mikeBoundaryCondition.WebTideDataFromStartToEndDate = val11;
           Assert.Equal(val11, mikeBoundaryCondition.WebTideDataFromStartToEndDate);
           TVTypeEnum val12 = (TVTypeEnum)3;
           mikeBoundaryCondition.TVType = val12;
           Assert.Equal(val12, mikeBoundaryCondition.TVType);
           DateTime val13 = new DateTime(2010, 3, 4);
           mikeBoundaryCondition.LastUpdateDate_UTC = val13;
           Assert.Equal(val13, mikeBoundaryCondition.LastUpdateDate_UTC);
           int val14 = 45;
           mikeBoundaryCondition.LastUpdateContactTVItemID = val14;
           Assert.Equal(val14, mikeBoundaryCondition.LastUpdateContactTVItemID);
    }
}
