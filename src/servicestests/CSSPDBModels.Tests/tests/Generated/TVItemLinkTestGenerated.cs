/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net6.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

namespace CSSPDBModels.Tests;

public partial class TVItemLinkTest
{
    private TVItemLink tVItemLink { get; set; }

    public TVItemLinkTest()
    {
        tVItemLink = new TVItemLink();
    }
    [Fact]
    public void TVItemLink_Properties_Test()
    {
        List<string> propNameList = new List<string>() { "TVItemLinkID", "DBCommand", "FromTVItemID", "ToTVItemID", "FromTVType", "ToTVType", "StartDateTime_Local", "EndDateTime_Local", "Ordinal", "TVLevel", "TVPath", "ParentTVItemLinkID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(TVItemLink).GetProperties().OrderBy(c => c.Name))
        {
            if (!propertyInfo.GetGetMethod().IsVirtual
                && propertyInfo.Name != "ValidationResults"
                && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
            {
                Assert.Equal(propNameList[index], propertyInfo.Name);
                index += 1;
            }
        }

        Assert.Equal(propNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(TVItemLink).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
            {
                if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                {
                }
            }
        }


    }
    [Fact]
    public void TVItemLink_Navigation_Test()
    {
        List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
        List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

        int index = 0;
        foreach (PropertyInfo propertyInfo in typeof(TVItemLink).GetProperties())
        {
            if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                Assert.True(foreignNameExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameList.Count, index);

        index = 0;
        foreach (PropertyInfo propertyInfo in typeof(TVItemLink).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
        {
            if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
            {
                bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                Assert.True(foreignNameCollectionExist);
                index += 1;
            }
        }

        Assert.Equal(foreignNameCollectionList.Count, index);

    }
    [Fact]
    public void TVItemLink_Every_Property_Has_Get_Set_Test()
    {
           int val1 = 45;
           tVItemLink.TVItemLinkID = val1;
           Assert.Equal(val1, tVItemLink.TVItemLinkID);
           DBCommandEnum val2 = (DBCommandEnum)3;
           tVItemLink.DBCommand = val2;
           Assert.Equal(val2, tVItemLink.DBCommand);
           int val3 = 45;
           tVItemLink.FromTVItemID = val3;
           Assert.Equal(val3, tVItemLink.FromTVItemID);
           int val4 = 45;
           tVItemLink.ToTVItemID = val4;
           Assert.Equal(val4, tVItemLink.ToTVItemID);
           TVTypeEnum val5 = (TVTypeEnum)3;
           tVItemLink.FromTVType = val5;
           Assert.Equal(val5, tVItemLink.FromTVType);
           TVTypeEnum val6 = (TVTypeEnum)3;
           tVItemLink.ToTVType = val6;
           Assert.Equal(val6, tVItemLink.ToTVType);
           DateTime val7 = new DateTime(2010, 3, 4);
           tVItemLink.StartDateTime_Local = val7;
           Assert.Equal(val7, tVItemLink.StartDateTime_Local);
           DateTime val8 = new DateTime(2010, 3, 4);
           tVItemLink.EndDateTime_Local = val8;
           Assert.Equal(val8, tVItemLink.EndDateTime_Local);
           int val9 = 45;
           tVItemLink.Ordinal = val9;
           Assert.Equal(val9, tVItemLink.Ordinal);
           int val10 = 45;
           tVItemLink.TVLevel = val10;
           Assert.Equal(val10, tVItemLink.TVLevel);
           string val11 = "Some text";
           tVItemLink.TVPath = val11;
           Assert.Equal(val11, tVItemLink.TVPath);
           int val12 = 45;
           tVItemLink.ParentTVItemLinkID = val12;
           Assert.Equal(val12, tVItemLink.ParentTVItemLinkID);
           DateTime val13 = new DateTime(2010, 3, 4);
           tVItemLink.LastUpdateDate_UTC = val13;
           Assert.Equal(val13, tVItemLink.LastUpdateDate_UTC);
           int val14 = 45;
           tVItemLink.LastUpdateContactTVItemID = val14;
           Assert.Equal(val14, tVItemLink.LastUpdateContactTVItemID);
    }
}
