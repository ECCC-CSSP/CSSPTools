/*
 * Auto generated from C:\CSSPTools\src\codegen\GenerateCSSPDBModels_TestsGenerated\bin\Debug\net6.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBModels.Tests
{
    public partial class UseOfSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private UseOfSite useOfSite { get; set; }
        #endregion Properties

        #region Constructors
        public UseOfSiteTest()
        {
            useOfSite = new UseOfSite();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void UseOfSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "UseOfSiteID", "DBCommand", "SiteTVItemID", "SubsectorTVItemID", "TVType", "Ordinal", "StartYear", "EndYear", "UseWeight", "Weight_perc", "UseEquation", "Param1", "Param2", "Param3", "Param4", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void UseOfSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void UseOfSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               useOfSite.UseOfSiteID = val1;
               Assert.Equal(val1, useOfSite.UseOfSiteID);
               DBCommandEnum val2 = (DBCommandEnum)3;
               useOfSite.DBCommand = val2;
               Assert.Equal(val2, useOfSite.DBCommand);
               int val3 = 45;
               useOfSite.SiteTVItemID = val3;
               Assert.Equal(val3, useOfSite.SiteTVItemID);
               int val4 = 45;
               useOfSite.SubsectorTVItemID = val4;
               Assert.Equal(val4, useOfSite.SubsectorTVItemID);
               TVTypeEnum val5 = (TVTypeEnum)3;
               useOfSite.TVType = val5;
               Assert.Equal(val5, useOfSite.TVType);
               int val6 = 45;
               useOfSite.Ordinal = val6;
               Assert.Equal(val6, useOfSite.Ordinal);
               int val7 = 45;
               useOfSite.StartYear = val7;
               Assert.Equal(val7, useOfSite.StartYear);
               int val8 = 45;
               useOfSite.EndYear = val8;
               Assert.Equal(val8, useOfSite.EndYear);
               bool val9 = true;
               useOfSite.UseWeight = val9;
               Assert.Equal(val9, useOfSite.UseWeight);
               double val10 = 87.9D;
               useOfSite.Weight_perc = val10;
               Assert.Equal(val10, useOfSite.Weight_perc);
               bool val11 = true;
               useOfSite.UseEquation = val11;
               Assert.Equal(val11, useOfSite.UseEquation);
               double val12 = 87.9D;
               useOfSite.Param1 = val12;
               Assert.Equal(val12, useOfSite.Param1);
               double val13 = 87.9D;
               useOfSite.Param2 = val13;
               Assert.Equal(val13, useOfSite.Param2);
               double val14 = 87.9D;
               useOfSite.Param3 = val14;
               Assert.Equal(val14, useOfSite.Param3);
               double val15 = 87.9D;
               useOfSite.Param4 = val15;
               Assert.Equal(val15, useOfSite.Param4);
               DateTime val16 = new DateTime(2010, 3, 4);
               useOfSite.LastUpdateDate_UTC = val16;
               Assert.Equal(val16, useOfSite.LastUpdateDate_UTC);
               int val17 = 45;
               useOfSite.LastUpdateContactTVItemID = val17;
               Assert.Equal(val17, useOfSite.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
