/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;

namespace CSSPServices.Tests
{
    [Collection("Sequential")]
    public partial class MikeScenarioServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IMikeScenarioService MikeScenarioService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbIM { get; set; }
        private MikeScenario mikeScenario { get; set; }
        #endregion Properties

        #region Constructors
        public MikeScenarioServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task MikeScenario_CRUD_Good_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            mikeScenario = GetFilledRandomMikeScenario("");

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                await DoCRUDTest();
            }
            else
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    await DoCRUDTest();
                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task MikeScenario_Properties_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // Properties testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMikeScenarioList = await MikeScenarioService.GetMikeScenarioList();
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioList.Result).Value);
            List<MikeScenario> mikeScenarioList = (List<MikeScenario>)((OkObjectResult)actionMikeScenarioList.Result).Value;

            count = mikeScenarioList.Count();

            MikeScenario mikeScenario = GetFilledRandomMikeScenario("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mikeScenario.MikeScenarioID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioID = 0;

            var actionMikeScenario = await MikeScenarioService.Put(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioID = 10000000;
            actionMikeScenario = await MikeScenarioService.Put(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeScenario)]
            // mikeScenario.MikeScenarioTVItemID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioTVItemID = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioTVItemID = 1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "MikeScenario", ExistPlurial = "s", ExistFieldID = "MikeScenarioID", AllowableTVtypeList = MikeScenario)]
            // mikeScenario.ParentMikeScenarioID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ParentMikeScenarioID = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mikeScenario.ScenarioStatus   (ScenarioStatusEnum)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ScenarioStatus = (ScenarioStatusEnum)1000000;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // mikeScenario.ErrorInfo   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mikeScenario.MikeScenarioStartDateTime_Local   (DateTime)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioStartDateTime_Local = new DateTime();
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioStartDateTime_Local = new DateTime(1979, 1, 1);
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mikeScenario.MikeScenarioEndDateTime_Local   (DateTime)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioEndDateTime_Local = new DateTime();
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioEndDateTime_Local = new DateTime(1979, 1, 1);
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // mikeScenario.MikeScenarioStartExecutionDateTime_Local   (DateTime)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioStartExecutionDateTime_Local = new DateTime(1979, 1, 1);
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 100000)]
            // mikeScenario.MikeScenarioExecutionTime_min   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MikeScenarioExecutionTime_min]

            //CSSPError: Type not implemented [MikeScenarioExecutionTime_min]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioExecutionTime_min = 0.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.MikeScenarioExecutionTime_min = 100001.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.WindSpeed_km_h   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WindSpeed_km_h]

            //CSSPError: Type not implemented [WindSpeed_km_h]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.WindSpeed_km_h = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.WindSpeed_km_h = 101.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 360)]
            // mikeScenario.WindDirection_deg   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WindDirection_deg]

            //CSSPError: Type not implemented [WindDirection_deg]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.WindDirection_deg = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.WindDirection_deg = 361.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.DecayFactor_per_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayFactor_per_day]

            //CSSPError: Type not implemented [DecayFactor_per_day]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.DecayFactor_per_day = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.DecayFactor_per_day = 101.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // mikeScenario.DecayIsConstant   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.DecayFactorAmplitude   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayFactorAmplitude]

            //CSSPError: Type not implemented [DecayFactorAmplitude]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.DecayFactorAmplitude = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.DecayFactorAmplitude = 101.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.ResultFrequency_min   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ResultFrequency_min = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ResultFrequency_min = 101;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-10, 40)]
            // mikeScenario.AmbientTemperature_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [AmbientTemperature_C]

            //CSSPError: Type not implemented [AmbientTemperature_C]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.AmbientTemperature_C = -11.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.AmbientTemperature_C = 41.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 40)]
            // mikeScenario.AmbientSalinity_PSU   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [AmbientSalinity_PSU]

            //CSSPError: Type not implemented [AmbientSalinity_PSU]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.AmbientSalinity_PSU = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.AmbientSalinity_PSU = 41.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // mikeScenario.GenerateDecouplingFiles   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // mikeScenario.UseDecouplingFiles   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // mikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
            // mikeScenario.ForSimulatingMWQMRunTVItemID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ForSimulatingMWQMRunTVItemID = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ForSimulatingMWQMRunTVItemID = 1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.ManningNumber   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [ManningNumber]

            //CSSPError: Type not implemented [ManningNumber]

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ManningNumber = -1.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.ManningNumber = 101.0D;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 1000000)]
            // mikeScenario.NumberOfElements   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfElements = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfElements = 1000001;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 1000000)]
            // mikeScenario.NumberOfTimeSteps   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfTimeSteps = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfTimeSteps = 1000001;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.NumberOfSigmaLayers   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfSigmaLayers = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfSigmaLayers = 101;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.NumberOfZLayers   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfZLayers = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfZLayers = 101;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.NumberOfHydroOutputParameters   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfHydroOutputParameters = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfHydroOutputParameters = 101;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // mikeScenario.NumberOfTransOutputParameters   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfTransOutputParameters = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.NumberOfTransOutputParameters = 101;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000000)]
            // mikeScenario.EstimatedHydroFileSize   (Int64)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.EstimatedHydroFileSize = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.EstimatedHydroFileSize = 100000001;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000000)]
            // mikeScenario.EstimatedTransFileSize   (Int64)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.EstimatedTransFileSize = -1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.EstimatedTransFileSize = 100000001;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            //Assert.AreEqual(count, mikeScenarioService.GetMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mikeScenario.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.LastUpdateDate_UTC = new DateTime();
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);
            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mikeScenario.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.LastUpdateContactTVItemID = 0;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

            mikeScenario = null;
            mikeScenario = GetFilledRandomMikeScenario("");
            mikeScenario.LastUpdateContactTVItemID = 1;
            actionMikeScenario = await MikeScenarioService.Post(mikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionMikeScenario.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDTest()
        {
            // Post MikeScenario
            var actionMikeScenarioAdded = await MikeScenarioService.Post(mikeScenario);
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioAdded.Result).Value);
            MikeScenario mikeScenarioAdded = (MikeScenario)((OkObjectResult)actionMikeScenarioAdded.Result).Value;
            Assert.NotNull(mikeScenarioAdded);

            // List<MikeScenario>
            var actionMikeScenarioList = await MikeScenarioService.GetMikeScenarioList();
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioList.Result).Value);
            List<MikeScenario> mikeScenarioList = (List<MikeScenario>)((OkObjectResult)actionMikeScenarioList.Result).Value;

            int count = ((List<MikeScenario>)((OkObjectResult)actionMikeScenarioList.Result).Value).Count();
            Assert.True(count > 0);

            if (LoggedInService.DBLocation == DBLocationEnum.Server)
            {
                // List<MikeScenario> with skip and take
                var actionMikeScenarioListSkipAndTake = await MikeScenarioService.GetMikeScenarioList(1, 1);
                Assert.Equal(200, ((ObjectResult)actionMikeScenarioListSkipAndTake.Result).StatusCode);
                Assert.NotNull(((OkObjectResult)actionMikeScenarioListSkipAndTake.Result).Value);
                List<MikeScenario> mikeScenarioListSkipAndTake = (List<MikeScenario>)((OkObjectResult)actionMikeScenarioListSkipAndTake.Result).Value;

                int countSkipAndTake = ((List<MikeScenario>)((OkObjectResult)actionMikeScenarioListSkipAndTake.Result).Value).Count();
                Assert.True(countSkipAndTake == 1);

                Assert.False(mikeScenarioList[0].MikeScenarioID == mikeScenarioListSkipAndTake[0].MikeScenarioID);
            }

            // Get MikeScenario With MikeScenarioID
            var actionMikeScenarioGet = await MikeScenarioService.GetMikeScenarioWithMikeScenarioID(mikeScenarioList[0].MikeScenarioID);
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioGet.Result).Value);
            MikeScenario mikeScenarioGet = (MikeScenario)((OkObjectResult)actionMikeScenarioGet.Result).Value;
            Assert.NotNull(mikeScenarioGet);
            Assert.Equal(mikeScenarioGet.MikeScenarioID, mikeScenarioList[0].MikeScenarioID);

            // Put MikeScenario
            var actionMikeScenarioUpdated = await MikeScenarioService.Put(mikeScenario);
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioUpdated.Result).Value);
            MikeScenario mikeScenarioUpdated = (MikeScenario)((OkObjectResult)actionMikeScenarioUpdated.Result).Value;
            Assert.NotNull(mikeScenarioUpdated);

            // Delete MikeScenario
            var actionMikeScenarioDeleted = await MikeScenarioService.Delete(mikeScenario.MikeScenarioID);
            Assert.Equal(200, ((ObjectResult)actionMikeScenarioDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeScenarioDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMikeScenarioDeleted.Result).Value;
            Assert.True(retBool);
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservicestests.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            string TestDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(TestDBConnString);
            });

            FileInfo fiAppDataPath = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiAppDataPath.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMikeScenarioService, MikeScenarioService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            LoggedInService.DBLocation = DBLocationEnum.Local;

            dbIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbIM);

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            MikeScenarioService = Provider.GetService<IMikeScenarioService>();
            Assert.NotNull(MikeScenarioService);

            return await Task.FromResult(true);
        }
        private MikeScenario GetFilledRandomMikeScenario(string OmitPropName)
        {
            List<MikeScenario> mikeScenarioListToDelete = (from c in dbLocal.MikeScenarios
                                                               select c).ToList(); 
            
            dbLocal.MikeScenarios.RemoveRange(mikeScenarioListToDelete);
            try
            {
                dbLocal.SaveChanges();
            }
            catch (Exception ex)
            {
                Assert.True(false, ex.Message);
            }
            
            dbIM.Database.EnsureDeleted();

            MikeScenario mikeScenario = new MikeScenario();

            if (OmitPropName != "MikeScenarioTVItemID") mikeScenario.MikeScenarioTVItemID = 51;
            // Need to implement [MikeScenario ParentMikeScenarioID MikeScenario MikeScenarioID]
            if (OmitPropName != "ScenarioStatus") mikeScenario.ScenarioStatus = (ScenarioStatusEnum)GetRandomEnumType(typeof(ScenarioStatusEnum));
            if (OmitPropName != "ErrorInfo") mikeScenario.ErrorInfo = GetRandomString("", 20);
            if (OmitPropName != "MikeScenarioStartDateTime_Local") mikeScenario.MikeScenarioStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MikeScenarioEndDateTime_Local") mikeScenario.MikeScenarioEndDateTime_Local = new DateTime(2005, 3, 7);
            if (OmitPropName != "MikeScenarioStartExecutionDateTime_Local") mikeScenario.MikeScenarioStartExecutionDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MikeScenarioExecutionTime_min") mikeScenario.MikeScenarioExecutionTime_min = GetRandomDouble(1.0D, 100000.0D);
            if (OmitPropName != "WindSpeed_km_h") mikeScenario.WindSpeed_km_h = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WindDirection_deg") mikeScenario.WindDirection_deg = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "DecayFactor_per_day") mikeScenario.DecayFactor_per_day = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "DecayIsConstant") mikeScenario.DecayIsConstant = true;
            if (OmitPropName != "DecayFactorAmplitude") mikeScenario.DecayFactorAmplitude = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "ResultFrequency_min") mikeScenario.ResultFrequency_min = GetRandomInt(0, 100);
            if (OmitPropName != "AmbientTemperature_C") mikeScenario.AmbientTemperature_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "AmbientSalinity_PSU") mikeScenario.AmbientSalinity_PSU = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "GenerateDecouplingFiles") mikeScenario.GenerateDecouplingFiles = true;
            if (OmitPropName != "UseDecouplingFiles") mikeScenario.UseDecouplingFiles = true;
            if (OmitPropName != "UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID") mikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 42;
            if (OmitPropName != "ForSimulatingMWQMRunTVItemID") mikeScenario.ForSimulatingMWQMRunTVItemID = 50;
            if (OmitPropName != "ManningNumber") mikeScenario.ManningNumber = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "NumberOfElements") mikeScenario.NumberOfElements = GetRandomInt(1, 1000000);
            if (OmitPropName != "NumberOfTimeSteps") mikeScenario.NumberOfTimeSteps = GetRandomInt(1, 1000000);
            if (OmitPropName != "NumberOfSigmaLayers") mikeScenario.NumberOfSigmaLayers = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfZLayers") mikeScenario.NumberOfZLayers = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfHydroOutputParameters") mikeScenario.NumberOfHydroOutputParameters = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfTransOutputParameters") mikeScenario.NumberOfTransOutputParameters = GetRandomInt(0, 100);
            if (OmitPropName != "EstimatedHydroFileSize") mikeScenario.EstimatedHydroFileSize = GetRandomInt(0, 100000000);
            if (OmitPropName != "EstimatedTransFileSize") mikeScenario.EstimatedTransFileSize = GetRandomInt(0, 100000000);
            if (OmitPropName != "LastUpdateDate_UTC") mikeScenario.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mikeScenario.LastUpdateContactTVItemID = 2;

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                if (OmitPropName != "MikeScenarioID") mikeScenario.MikeScenarioID = 10000000;

                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 51, TVLevel = 4, TVPath = "p1p5p6p39p51", TVType = (TVTypeEnum)13, ParentID = 39, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 21, 28, 56), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 42, TVLevel = 5, TVPath = "p1p5p6p39p41p42", TVType = (TVTypeEnum)8, ParentID = 41, IsActive = true, LastUpdateDate_UTC = new DateTime(2016, 5, 5, 17, 18, 26), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 50, TVLevel = 6, TVPath = "p1p5p6p9p10p12p50", TVType = (TVTypeEnum)31, ParentID = 12, IsActive = true, LastUpdateDate_UTC = new DateTime(2017, 6, 28, 12, 41, 23), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
            }

            return mikeScenario;
        }
        private void CheckMikeScenarioFields(List<MikeScenario> mikeScenarioList)
        {
            if (mikeScenarioList[0].ParentMikeScenarioID != null)
            {
                Assert.NotNull(mikeScenarioList[0].ParentMikeScenarioID);
            }
            if (!string.IsNullOrWhiteSpace(mikeScenarioList[0].ErrorInfo))
            {
                Assert.False(string.IsNullOrWhiteSpace(mikeScenarioList[0].ErrorInfo));
            }
            if (mikeScenarioList[0].MikeScenarioStartExecutionDateTime_Local != null)
            {
                Assert.NotNull(mikeScenarioList[0].MikeScenarioStartExecutionDateTime_Local);
            }
            if (mikeScenarioList[0].MikeScenarioExecutionTime_min != null)
            {
                Assert.NotNull(mikeScenarioList[0].MikeScenarioExecutionTime_min);
            }
            if (mikeScenarioList[0].GenerateDecouplingFiles != null)
            {
                Assert.NotNull(mikeScenarioList[0].GenerateDecouplingFiles);
            }
            if (mikeScenarioList[0].UseDecouplingFiles != null)
            {
                Assert.NotNull(mikeScenarioList[0].UseDecouplingFiles);
            }
            if (mikeScenarioList[0].UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID != null)
            {
                Assert.NotNull(mikeScenarioList[0].UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID);
            }
            if (mikeScenarioList[0].ForSimulatingMWQMRunTVItemID != null)
            {
                Assert.NotNull(mikeScenarioList[0].ForSimulatingMWQMRunTVItemID);
            }
            if (mikeScenarioList[0].NumberOfElements != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfElements);
            }
            if (mikeScenarioList[0].NumberOfTimeSteps != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfTimeSteps);
            }
            if (mikeScenarioList[0].NumberOfSigmaLayers != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfSigmaLayers);
            }
            if (mikeScenarioList[0].NumberOfZLayers != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfZLayers);
            }
            if (mikeScenarioList[0].NumberOfHydroOutputParameters != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfHydroOutputParameters);
            }
            if (mikeScenarioList[0].NumberOfTransOutputParameters != null)
            {
                Assert.NotNull(mikeScenarioList[0].NumberOfTransOutputParameters);
            }
            if (mikeScenarioList[0].EstimatedHydroFileSize != null)
            {
                Assert.NotNull(mikeScenarioList[0].EstimatedHydroFileSize);
            }
            if (mikeScenarioList[0].EstimatedTransFileSize != null)
            {
                Assert.NotNull(mikeScenarioList[0].EstimatedTransFileSize);
            }
        }
        #endregion Functions private
    }
}
