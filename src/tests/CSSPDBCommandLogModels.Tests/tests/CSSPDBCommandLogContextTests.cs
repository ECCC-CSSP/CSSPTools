/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Threading.Tasks;
using Xunit;

namespace CSSPDBCommandLogModels.Tests
{
    public partial class CSSPDBCommandLogContextTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPDBCommandLogContextTest() : base()
        {

        }
        #endregion Constructors

        #region Tests
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBCommandLogContext_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBCommandLog_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            CSSPDBCommandLogContext csspDBCommandLogContext = new CSSPDBCommandLogContext();
            Assert.NotNull(csspDBCommandLogContext);

            CSSPDBCommandLogContext csspDBCommandLogContext2 = Provider.GetService<CSSPDBCommandLogContext>();
            Assert.NotNull(csspDBCommandLogContext2);

            var CSSPCommandLogs = csspDBCommandLogContext2.CommandLogs;
            Assert.NotNull(CSSPCommandLogs);
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBCommandLog_Properties_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            CommandLog commandLog = new CommandLog();
            Assert.NotNull(commandLog);

            commandLog.AppName = "AppName";
            Assert.Equal("AppName", commandLog.AppName);

            commandLog.CommandLogID = 1;
            Assert.Equal(1, commandLog.CommandLogID);

            commandLog.CommandName = "CommandName";
            Assert.Equal("CommandName", commandLog.CommandName);

            DateTime dateTime = DateTime.UtcNow;
            commandLog.DateTimeUTC = dateTime;
            Assert.Equal(dateTime, commandLog.DateTimeUTC);

            commandLog.ErrorMessage = "ErrorMessage";
            Assert.Equal("ErrorMessage", commandLog.ErrorMessage);

            commandLog.Successful = true;
            Assert.True(commandLog.Successful);
        }
        #endregion Tests

        #region private
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbcommandlogmodelstests.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            /* ---------------------------------------------------------------------------------
             * using CSSPDBCommandLog
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBCommandLog = Configuration.GetValue<string>("CSSPDBCommandLog");
            Assert.NotNull(CSSPDBCommandLog);

            FileInfo fiCSSPDBCommandLog = new FileInfo(CSSPDBCommandLog);
            Assert.True(fiCSSPDBCommandLog.Exists);

            Services.AddDbContext<CSSPDBCommandLogContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBCommandLog.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            return await Task.FromResult(true);
        }
        #endregion private
    }
}
