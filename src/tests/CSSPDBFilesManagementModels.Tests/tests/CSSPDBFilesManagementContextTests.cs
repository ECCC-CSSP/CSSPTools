/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Threading.Tasks;
using Xunit;

namespace CSSPDBFilesManagementModels.Tests
{
    public partial class CSSPDBFilesManagementContextTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPDBFilesManagementContextTest() : base()
        {

        }
        #endregion Constructors

        #region Tests
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBFilesManagementContext_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBFilesManagement_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            CSSPDBFilesManagementContext csspDBFilesManagementContext = new CSSPDBFilesManagementContext();
            Assert.NotNull(csspDBFilesManagementContext);

            CSSPDBFilesManagementContext csspDBFilesManagementContext2 = Provider.GetService<CSSPDBFilesManagementContext>();
            Assert.NotNull(csspDBFilesManagementContext2);

            var filesManagements = csspDBFilesManagementContext2.FilesManagements;
            Assert.NotNull(filesManagements);
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBFilesManagement_Properties_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            FilesManagement filesManagement = new FilesManagement();
            Assert.NotNull(filesManagement);

            DateTime dateTime = DateTime.UtcNow;
            filesManagement.AzureCreationTimeUTC = dateTime;
            Assert.Equal(dateTime, filesManagement.AzureCreationTimeUTC);

            filesManagement.AzureETag = "AzureETag";
            Assert.Equal("AzureETag", filesManagement.AzureETag);

            filesManagement.AzureFileName = "AzureFileName";
            Assert.Equal("AzureFileName", filesManagement.AzureFileName);

            filesManagement.AzureStorage = "AzureStorage";
            Assert.Equal("AzureStorage", filesManagement.AzureStorage);

            filesManagement.FilesManagementID = 3;
            Assert.Equal(3, filesManagement.FilesManagementID);
        }
        #endregion Tests

        #region private
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbfilesmanagementmodelstests.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            /* ---------------------------------------------------------------------------------
             * using CSSPDBFilesManagement
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBFilesManagement = Configuration.GetValue<string>("CSSPDBFilesManagement");
            Assert.NotNull(CSSPDBFilesManagement);

            FileInfo fiCSSPDBFilesManagement = new FileInfo(CSSPDBFilesManagement);
            Assert.True(fiCSSPDBFilesManagement.Exists);

            Services.AddDbContext<CSSPDBFilesManagementContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBFilesManagement.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            return await Task.FromResult(true);
        }
        #endregion private
    }
}
