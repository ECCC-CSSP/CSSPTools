/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class AspNetUserDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IAspNetUserDBLocalIMService AspNetUserDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private AspNetUser aspNetUser { get; set; }
        #endregion Properties

        #region Constructors
        public AspNetUserDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task AspNetUserDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            aspNetUser = GetFilledRandomAspNetUser("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task AspNetUser_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionAspNetUserList = await AspNetUserDBLocalIMService.GetAspNetUserList();
            Assert.Equal(200, ((ObjectResult)actionAspNetUserList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserList.Result).Value);
            List<AspNetUser> aspNetUserList = (List<AspNetUser>)((OkObjectResult)actionAspNetUserList.Result).Value;

            count = aspNetUserList.Count();

            AspNetUser aspNetUser = GetFilledRandomAspNetUser("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // [CSSPMaxLength(450)]
            // aspNetUser.Id   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.Id = "";

            var actionAspNetUser = await AspNetUserDBLocalIMService.Put(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.Id = "silefjilsefjsliejlsjflisjefl";
            actionAspNetUser = await AspNetUserDBLocalIMService.Put(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(256)]
            // aspNetUser.Email   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.Email = GetRandomString("", 257);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // aspNetUser.EmailConfirmed   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // aspNetUser.PasswordHash   (String)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // aspNetUser.SecurityStamp   (String)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // aspNetUser.PhoneNumber   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // aspNetUser.PhoneNumberConfirmed   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // aspNetUser.TwoFactorEnabled   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // aspNetUser.LockoutEndDateUtc   (DateTime)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.LockoutEndDateUtc = new DateTime(1979, 1, 1);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);

            // -----------------------------------
            // Is NOT Nullable
            // aspNetUser.LockoutEnabled   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // aspNetUser.AccessFailedCount   (Int32)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.AccessFailedCount = -1;
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserService.GetAspNetUserList().Count());
            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.AccessFailedCount = 10001;
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(256)]
            // aspNetUser.UserName   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("UserName");
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.UserName = GetRandomString("", 257);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(256)]
            // aspNetUser.NormalizedUserName   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.NormalizedUserName = GetRandomString("", 257);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(256)]
            // aspNetUser.NormalizedEmail   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.NormalizedEmail = GetRandomString("", 257);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(256)]
            // aspNetUser.ConcurrencyStamp   (String)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.ConcurrencyStamp = GetRandomString("", 257);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
            //Assert.AreEqual(count, aspNetUserDBLocalIMService.GetAspNetUserList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // aspNetUser.LockoutEnd   (DateTime)
            // -----------------------------------

            aspNetUser = null;
            aspNetUser = GetFilledRandomAspNetUser("");
            aspNetUser.LockoutEnd = new DateTime(1979, 1, 1);
            actionAspNetUser = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.IsType<BadRequestObjectResult>(actionAspNetUser.Result);
        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            aspNetUser.Id = "slefjlsejflsiejflsejf";

            // Post AspNetUser
            var actionAspNetUserAdded = await AspNetUserDBLocalIMService.Post(aspNetUser);
            Assert.Equal(200, ((ObjectResult)actionAspNetUserAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserAdded.Result).Value);
            AspNetUser aspNetUserAdded = (AspNetUser)((OkObjectResult)actionAspNetUserAdded.Result).Value;
            Assert.NotNull(aspNetUserAdded);

            // List<AspNetUser>
            var actionAspNetUserList = await AspNetUserDBLocalIMService.GetAspNetUserList();
            Assert.Equal(200, ((ObjectResult)actionAspNetUserList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserList.Result).Value);
            List<AspNetUser> aspNetUserList = (List<AspNetUser>)((OkObjectResult)actionAspNetUserList.Result).Value;

            int count = ((List<AspNetUser>)((OkObjectResult)actionAspNetUserList.Result).Value).Count();
            Assert.True(count > 0);

            // Get AspNetUser With Id
            var actionAspNetUserGet = await AspNetUserDBLocalIMService.GetAspNetUserWithId(aspNetUserList[0].Id);
            Assert.Equal(200, ((ObjectResult)actionAspNetUserGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserGet.Result).Value);
            AspNetUser aspNetUserGet = (AspNetUser)((OkObjectResult)actionAspNetUserGet.Result).Value;
            Assert.NotNull(aspNetUserGet);
            Assert.Equal(aspNetUserGet.Id, aspNetUserList[0].Id);

            // Put AspNetUser
            var actionAspNetUserUpdated = await AspNetUserDBLocalIMService.Put(aspNetUser);
            Assert.Equal(200, ((ObjectResult)actionAspNetUserUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserUpdated.Result).Value);
            AspNetUser aspNetUserUpdated = (AspNetUser)((OkObjectResult)actionAspNetUserUpdated.Result).Value;
            Assert.NotNull(aspNetUserUpdated);

            // Delete AspNetUser
            var actionAspNetUserDeleted = await AspNetUserDBLocalIMService.Delete(aspNetUser.Id);
            Assert.Equal(200, ((ObjectResult)actionAspNetUserDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionAspNetUserDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionAspNetUserDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IAspNetUserDBLocalIMService, AspNetUserDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            AspNetUserDBLocalIMService = Provider.GetService<IAspNetUserDBLocalIMService>();
            Assert.NotNull(AspNetUserDBLocalIMService);

            return await Task.FromResult(true);
        }
        private AspNetUser GetFilledRandomAspNetUser(string OmitPropName)
        {
            AspNetUser aspNetUser = new AspNetUser();

            if (OmitPropName != "Id") aspNetUser.Id = GetRandomString("", 5);
            if (OmitPropName != "Email") aspNetUser.Email = GetRandomString("", 5);
            if (OmitPropName != "EmailConfirmed") aspNetUser.EmailConfirmed = true;
            if (OmitPropName != "PasswordHash") aspNetUser.PasswordHash = GetRandomString("", 20);
            if (OmitPropName != "SecurityStamp") aspNetUser.SecurityStamp = GetRandomString("", 20);
            if (OmitPropName != "PhoneNumber") aspNetUser.PhoneNumber = GetRandomString("", 20);
            if (OmitPropName != "PhoneNumberConfirmed") aspNetUser.PhoneNumberConfirmed = true;
            if (OmitPropName != "TwoFactorEnabled") aspNetUser.TwoFactorEnabled = true;
            if (OmitPropName != "LockoutEndDateUtc") aspNetUser.LockoutEndDateUtc = new DateTime(2005, 3, 6);
            if (OmitPropName != "LockoutEnabled") aspNetUser.LockoutEnabled = true;
            if (OmitPropName != "AccessFailedCount") aspNetUser.AccessFailedCount = GetRandomInt(0, 10000);
            if (OmitPropName != "UserName") aspNetUser.UserName = GetRandomString("", 5);
            if (OmitPropName != "NormalizedUserName") aspNetUser.NormalizedUserName = GetRandomString("", 5);
            if (OmitPropName != "NormalizedEmail") aspNetUser.NormalizedEmail = GetRandomString("", 5);
            if (OmitPropName != "ConcurrencyStamp") aspNetUser.ConcurrencyStamp = GetRandomString("", 5);
            if (OmitPropName != "LockoutEnd") aspNetUser.LockoutEnd = new DateTime(2005, 3, 6);



            return aspNetUser;
        }
        private void CheckAspNetUserFields(List<AspNetUser> aspNetUserList)
        {
            Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].Id));
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].Email))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].Email));
            }
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].PasswordHash))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].PasswordHash));
            }
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].SecurityStamp))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].SecurityStamp));
            }
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].PhoneNumber))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].PhoneNumber));
            }
            if (aspNetUserList[0].LockoutEndDateUtc != null)
            {
                Assert.NotNull(aspNetUserList[0].LockoutEndDateUtc);
            }
            Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].UserName));
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].NormalizedUserName))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].NormalizedUserName));
            }
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].NormalizedEmail))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].NormalizedEmail));
            }
            if (!string.IsNullOrWhiteSpace(aspNetUserList[0].ConcurrencyStamp))
            {
                Assert.False(string.IsNullOrWhiteSpace(aspNetUserList[0].ConcurrencyStamp));
            }
            if (aspNetUserList[0].LockoutEnd != null)
            {
                Assert.NotNull(aspNetUserList[0].LockoutEnd);
            }
        }

        #endregion Functions private
    }
}
