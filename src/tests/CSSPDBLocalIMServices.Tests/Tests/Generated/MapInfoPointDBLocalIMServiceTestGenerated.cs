/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class MapInfoPointDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IMapInfoPointDBLocalIMService MapInfoPointDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private MapInfoPoint mapInfoPoint { get; set; }
        #endregion Properties

        #region Constructors
        public MapInfoPointDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MapInfoPointDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mapInfoPoint = GetFilledRandomMapInfoPoint("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MapInfoPoint_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMapInfoPointList = await MapInfoPointDBLocalIMService.GetMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointList.Result).Value);
            List<MapInfoPoint> mapInfoPointList = (List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value;

            count = mapInfoPointList.Count();

            MapInfoPoint mapInfoPoint = GetFilledRandomMapInfoPoint("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mapInfoPoint.MapInfoPointID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoPointID = 0;

            var actionMapInfoPoint = await MapInfoPointDBLocalIMService.Put(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoPointID = 10000000;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Put(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MapInfo", ExistPlurial = "s", ExistFieldID = "MapInfoID", AllowableTVtypeList = )]
            // mapInfoPoint.MapInfoID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoID = 0;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, -1)]
            // mapInfoPoint.Ordinal   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Ordinal = -1;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // mapInfoPoint.Lat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lat]

            //CSSPError: Type not implemented [Lat]

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lat = -91.0D;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lat = 91.0D;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointDBLocalIMService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // mapInfoPoint.Lng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lng]

            //CSSPError: Type not implemented [Lng]

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lng = -181.0D;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lng = 181.0D;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointDBLocalIMService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mapInfoPoint.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateDate_UTC = new DateTime();
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mapInfoPoint.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateContactTVItemID = 0;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateContactTVItemID = 1;
            actionMapInfoPoint = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            mapInfoPoint.MapInfoPointID = 10000000;

            // Post MapInfoPoint
            var actionMapInfoPointAdded = await MapInfoPointDBLocalIMService.Post(mapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointAdded.Result).Value);
            MapInfoPoint mapInfoPointAdded = (MapInfoPoint)((OkObjectResult)actionMapInfoPointAdded.Result).Value;
            Assert.NotNull(mapInfoPointAdded);

            // List<MapInfoPoint>
            var actionMapInfoPointList = await MapInfoPointDBLocalIMService.GetMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointList.Result).Value);
            List<MapInfoPoint> mapInfoPointList = (List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value;

            int count = ((List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value).Count();
            Assert.True(count > 0);

            // Get MapInfoPoint With MapInfoPointID
            var actionMapInfoPointGet = await MapInfoPointDBLocalIMService.GetMapInfoPointWithMapInfoPointID(mapInfoPointList[0].MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointGet.Result).Value);
            MapInfoPoint mapInfoPointGet = (MapInfoPoint)((OkObjectResult)actionMapInfoPointGet.Result).Value;
            Assert.NotNull(mapInfoPointGet);
            Assert.Equal(mapInfoPointGet.MapInfoPointID, mapInfoPointList[0].MapInfoPointID);

            // Put MapInfoPoint
            var actionMapInfoPointUpdated = await MapInfoPointDBLocalIMService.Put(mapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointUpdated.Result).Value);
            MapInfoPoint mapInfoPointUpdated = (MapInfoPoint)((OkObjectResult)actionMapInfoPointUpdated.Result).Value;
            Assert.NotNull(mapInfoPointUpdated);

            // Delete MapInfoPoint
            var actionMapInfoPointDeleted = await MapInfoPointDBLocalIMService.Delete(mapInfoPoint.MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMapInfoPointDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMapInfoPointDBLocalIMService, MapInfoPointDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            MapInfoPointDBLocalIMService = Provider.GetService<IMapInfoPointDBLocalIMService>();
            Assert.NotNull(MapInfoPointDBLocalIMService);

            return await Task.FromResult(true);
        }
        private MapInfoPoint GetFilledRandomMapInfoPoint(string OmitPropName)
        {
            MapInfoPoint mapInfoPoint = new MapInfoPoint();

            if (OmitPropName != "MapInfoID") mapInfoPoint.MapInfoID = 1;
            if (OmitPropName != "Ordinal") mapInfoPoint.Ordinal = GetRandomInt(0, 10);
            if (OmitPropName != "Lat") mapInfoPoint.Lat = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Lng") mapInfoPoint.Lng = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LastUpdateDate_UTC") mapInfoPoint.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mapInfoPoint.LastUpdateContactTVItemID = 2;



            return mapInfoPoint;
        }
        private void CheckMapInfoPointFields(List<MapInfoPoint> mapInfoPointList)
        {
        }

        #endregion Functions private
    }
}
