/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class MikeSourceDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IMikeSourceDBLocalIMService MikeSourceDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private MikeSource mikeSource { get; set; }
        #endregion Properties

        #region Constructors
        public MikeSourceDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MikeSourceDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mikeSource = GetFilledRandomMikeSource("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MikeSource_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMikeSourceList = await MikeSourceDBLocalIMService.GetMikeSourceList();
            Assert.Equal(200, ((ObjectResult)actionMikeSourceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceList.Result).Value);
            List<MikeSource> mikeSourceList = (List<MikeSource>)((OkObjectResult)actionMikeSourceList.Result).Value;

            count = mikeSourceList.Count();

            MikeSource mikeSource = GetFilledRandomMikeSource("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mikeSource.MikeSourceID   (Int32)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.MikeSourceID = 0;

            var actionMikeSource = await MikeSourceDBLocalIMService.Put(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.MikeSourceID = 10000000;
            actionMikeSource = await MikeSourceDBLocalIMService.Put(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeSource)]
            // mikeSource.MikeSourceTVItemID   (Int32)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.MikeSourceTVItemID = 0;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.MikeSourceTVItemID = 1;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);


            // -----------------------------------
            // Is NOT Nullable
            // mikeSource.IsContinuous   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // mikeSource.Include   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // mikeSource.IsRiver   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // mikeSource.UseHydrometric   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = HydrometricSite)]
            // mikeSource.HydrometricTVItemID   (Int32)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.HydrometricTVItemID = 0;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.HydrometricTVItemID = 1;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // mikeSource.DrainageArea_km2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DrainageArea_km2]

            //CSSPError: Type not implemented [DrainageArea_km2]

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.DrainageArea_km2 = -1.0D;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            //Assert.AreEqual(count, mikeSourceService.GetMikeSourceList().Count());
            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.DrainageArea_km2 = 1000001.0D;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            //Assert.AreEqual(count, mikeSourceDBLocalIMService.GetMikeSourceList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // mikeSource.Factor   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Factor]

            //CSSPError: Type not implemented [Factor]

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.Factor = -1.0D;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            //Assert.AreEqual(count, mikeSourceService.GetMikeSourceList().Count());
            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.Factor = 1000001.0D;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            //Assert.AreEqual(count, mikeSourceDBLocalIMService.GetMikeSourceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // mikeSource.SourceNumberString   (String)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("SourceNumberString");
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.SourceNumberString = GetRandomString("", 51);
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            //Assert.AreEqual(count, mikeSourceDBLocalIMService.GetMikeSourceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mikeSource.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.LastUpdateDate_UTC = new DateTime();
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);
            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mikeSource.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.LastUpdateContactTVItemID = 0;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

            mikeSource = null;
            mikeSource = GetFilledRandomMikeSource("");
            mikeSource.LastUpdateContactTVItemID = 1;
            actionMikeSource = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.IsType<BadRequestObjectResult>(actionMikeSource.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            mikeSource.MikeSourceID = 10000000;

            // Post MikeSource
            var actionMikeSourceAdded = await MikeSourceDBLocalIMService.Post(mikeSource);
            Assert.Equal(200, ((ObjectResult)actionMikeSourceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceAdded.Result).Value);
            MikeSource mikeSourceAdded = (MikeSource)((OkObjectResult)actionMikeSourceAdded.Result).Value;
            Assert.NotNull(mikeSourceAdded);

            // List<MikeSource>
            var actionMikeSourceList = await MikeSourceDBLocalIMService.GetMikeSourceList();
            Assert.Equal(200, ((ObjectResult)actionMikeSourceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceList.Result).Value);
            List<MikeSource> mikeSourceList = (List<MikeSource>)((OkObjectResult)actionMikeSourceList.Result).Value;

            int count = ((List<MikeSource>)((OkObjectResult)actionMikeSourceList.Result).Value).Count();
            Assert.True(count > 0);

            // Get MikeSource With MikeSourceID
            var actionMikeSourceGet = await MikeSourceDBLocalIMService.GetMikeSourceWithMikeSourceID(mikeSourceList[0].MikeSourceID);
            Assert.Equal(200, ((ObjectResult)actionMikeSourceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceGet.Result).Value);
            MikeSource mikeSourceGet = (MikeSource)((OkObjectResult)actionMikeSourceGet.Result).Value;
            Assert.NotNull(mikeSourceGet);
            Assert.Equal(mikeSourceGet.MikeSourceID, mikeSourceList[0].MikeSourceID);

            // Put MikeSource
            var actionMikeSourceUpdated = await MikeSourceDBLocalIMService.Put(mikeSource);
            Assert.Equal(200, ((ObjectResult)actionMikeSourceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceUpdated.Result).Value);
            MikeSource mikeSourceUpdated = (MikeSource)((OkObjectResult)actionMikeSourceUpdated.Result).Value;
            Assert.NotNull(mikeSourceUpdated);

            // Delete MikeSource
            var actionMikeSourceDeleted = await MikeSourceDBLocalIMService.Delete(mikeSource.MikeSourceID);
            Assert.Equal(200, ((ObjectResult)actionMikeSourceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMikeSourceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMikeSourceDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMikeSourceDBLocalIMService, MikeSourceDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            MikeSourceDBLocalIMService = Provider.GetService<IMikeSourceDBLocalIMService>();
            Assert.NotNull(MikeSourceDBLocalIMService);

            return await Task.FromResult(true);
        }
        private MikeSource GetFilledRandomMikeSource(string OmitPropName)
        {
            MikeSource mikeSource = new MikeSource();

            if (OmitPropName != "MikeSourceTVItemID") mikeSource.MikeSourceTVItemID = 53;
            if (OmitPropName != "IsContinuous") mikeSource.IsContinuous = true;
            if (OmitPropName != "Include") mikeSource.Include = true;
            if (OmitPropName != "IsRiver") mikeSource.IsRiver = true;
            if (OmitPropName != "UseHydrometric") mikeSource.UseHydrometric = true;
            if (OmitPropName != "HydrometricTVItemID") mikeSource.HydrometricTVItemID = 8;
            if (OmitPropName != "DrainageArea_km2") mikeSource.DrainageArea_km2 = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "Factor") mikeSource.Factor = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "SourceNumberString") mikeSource.SourceNumberString = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") mikeSource.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mikeSource.LastUpdateContactTVItemID = 2;



            return mikeSource;
        }
        private void CheckMikeSourceFields(List<MikeSource> mikeSourceList)
        {
            if (mikeSourceList[0].HydrometricTVItemID != null)
            {
                Assert.NotNull(mikeSourceList[0].HydrometricTVItemID);
            }
            if (mikeSourceList[0].DrainageArea_km2 != null)
            {
                Assert.NotNull(mikeSourceList[0].DrainageArea_km2);
            }
            if (mikeSourceList[0].Factor != null)
            {
                Assert.NotNull(mikeSourceList[0].Factor);
            }
            Assert.False(string.IsNullOrWhiteSpace(mikeSourceList[0].SourceNumberString));
        }

        #endregion Functions private
    }
}
