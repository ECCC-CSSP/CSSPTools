/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class PolSourceGroupingDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IPolSourceGroupingDBLocalIMService PolSourceGroupingDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private PolSourceGrouping polSourceGrouping { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceGroupingDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocalIM]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingDBLocalIM_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocalIM]

        #region Tests Generated [DBLocalIM] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            polSourceGrouping = GetFilledRandomPolSourceGrouping("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated [DBLocalIM] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGrouping_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionPolSourceGroupingList = await PolSourceGroupingDBLocalIMService.GetPolSourceGroupingList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingList.Result).Value);
            List<PolSourceGrouping> polSourceGroupingList = (List<PolSourceGrouping>)((OkObjectResult)actionPolSourceGroupingList.Result).Value;

            count = polSourceGroupingList.Count();

            PolSourceGrouping polSourceGrouping = GetFilledRandomPolSourceGrouping("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // polSourceGrouping.PolSourceGroupingID   (Int32)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.PolSourceGroupingID = 0;

            var actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Put(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.PolSourceGroupingID = 10000000;
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Put(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(10000, 100000)]
            // polSourceGrouping.CSSPID   (Int32)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.CSSPID = 9999;
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            //Assert.AreEqual(count, polSourceGroupingService.GetPolSourceGroupingList().Count());
            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.CSSPID = 100001;
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            //Assert.AreEqual(count, polSourceGroupingDBLocalIMService.GetPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGrouping.GroupName   (String)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("GroupName");
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.GroupName = GetRandomString("", 501);
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            //Assert.AreEqual(count, polSourceGroupingDBLocalIMService.GetPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGrouping.Child   (String)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("Child");
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.Child = GetRandomString("", 501);
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            //Assert.AreEqual(count, polSourceGroupingDBLocalIMService.GetPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGrouping.Hide   (String)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("Hide");
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.Hide = GetRandomString("", 501);
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            //Assert.AreEqual(count, polSourceGroupingDBLocalIMService.GetPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceGrouping.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.LastUpdateDate_UTC = new DateTime();
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);
            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceGrouping.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.LastUpdateContactTVItemID = 0;
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

            polSourceGrouping = null;
            polSourceGrouping = GetFilledRandomPolSourceGrouping("");
            polSourceGrouping.LastUpdateContactTVItemID = 1;
            actionPolSourceGrouping = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGrouping.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            polSourceGrouping.PolSourceGroupingID = 10000000;

            // Post PolSourceGrouping
            var actionPolSourceGroupingAdded = await PolSourceGroupingDBLocalIMService.Post(polSourceGrouping);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingAdded.Result).Value);
            PolSourceGrouping polSourceGroupingAdded = (PolSourceGrouping)((OkObjectResult)actionPolSourceGroupingAdded.Result).Value;
            Assert.NotNull(polSourceGroupingAdded);

            // List<PolSourceGrouping>
            var actionPolSourceGroupingList = await PolSourceGroupingDBLocalIMService.GetPolSourceGroupingList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingList.Result).Value);
            List<PolSourceGrouping> polSourceGroupingList = (List<PolSourceGrouping>)((OkObjectResult)actionPolSourceGroupingList.Result).Value;

            int count = ((List<PolSourceGrouping>)((OkObjectResult)actionPolSourceGroupingList.Result).Value).Count();
            Assert.True(count > 0);

            // Get PolSourceGrouping With PolSourceGroupingID
            var actionPolSourceGroupingGet = await PolSourceGroupingDBLocalIMService.GetPolSourceGroupingWithPolSourceGroupingID(polSourceGroupingList[0].PolSourceGroupingID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingGet.Result).Value);
            PolSourceGrouping polSourceGroupingGet = (PolSourceGrouping)((OkObjectResult)actionPolSourceGroupingGet.Result).Value;
            Assert.NotNull(polSourceGroupingGet);
            Assert.Equal(polSourceGroupingGet.PolSourceGroupingID, polSourceGroupingList[0].PolSourceGroupingID);

            // Put PolSourceGrouping
            var actionPolSourceGroupingUpdated = await PolSourceGroupingDBLocalIMService.Put(polSourceGrouping);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingUpdated.Result).Value);
            PolSourceGrouping polSourceGroupingUpdated = (PolSourceGrouping)((OkObjectResult)actionPolSourceGroupingUpdated.Result).Value;
            Assert.NotNull(polSourceGroupingUpdated);

            // Delete PolSourceGrouping
            var actionPolSourceGroupingDeleted = await PolSourceGroupingDBLocalIMService.Delete(polSourceGrouping.PolSourceGroupingID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionPolSourceGroupingDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IPolSourceGroupingDBLocalIMService, PolSourceGroupingDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            PolSourceGroupingDBLocalIMService = Provider.GetService<IPolSourceGroupingDBLocalIMService>();
            Assert.NotNull(PolSourceGroupingDBLocalIMService);

            return await Task.FromResult(true);
        }
        private PolSourceGrouping GetFilledRandomPolSourceGrouping(string OmitPropName)
        {
            PolSourceGrouping polSourceGrouping = new PolSourceGrouping();

            if (OmitPropName != "CSSPID") polSourceGrouping.CSSPID = GetRandomInt(10000, 100000);
            if (OmitPropName != "GroupName") polSourceGrouping.GroupName = GetRandomString("", 5);
            if (OmitPropName != "Child") polSourceGrouping.Child = GetRandomString("", 5);
            if (OmitPropName != "Hide") polSourceGrouping.Hide = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") polSourceGrouping.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceGrouping.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return polSourceGrouping;
        }
        private void CheckPolSourceGroupingFields(List<PolSourceGrouping> polSourceGroupingList)
        {
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingList[0].GroupName));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingList[0].Child));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingList[0].Hide));
        }

        #endregion Functions private
    }
}
