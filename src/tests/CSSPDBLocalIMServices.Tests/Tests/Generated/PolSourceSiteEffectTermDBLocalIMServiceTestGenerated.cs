/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class PolSourceSiteEffectTermDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IPolSourceSiteEffectTermDBLocalIMService PolSourceSiteEffectTermDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private PolSourceSiteEffectTerm polSourceSiteEffectTerm { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceSiteEffectTermDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceSiteEffectTermDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceSiteEffectTerm_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionPolSourceSiteEffectTermList = await PolSourceSiteEffectTermDBLocalIMService.GetPolSourceSiteEffectTermList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermList.Result).Value);
            List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = (List<PolSourceSiteEffectTerm>)((OkObjectResult)actionPolSourceSiteEffectTermList.Result).Value;

            count = polSourceSiteEffectTermList.Count();

            PolSourceSiteEffectTerm polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // polSourceSiteEffectTerm.PolSourceSiteEffectTermID   (Int32)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.PolSourceSiteEffectTermID = 0;

            var actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Put(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.PolSourceSiteEffectTermID = 10000000;
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Put(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);


            // -----------------------------------
            // Is NOT Nullable
            // polSourceSiteEffectTerm.IsGroup   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "PolSourceSiteEffectTerm", ExistPlurial = "s", ExistFieldID = "PolSourceSiteEffectTermID", AllowableTVtypeList = )]
            // polSourceSiteEffectTerm.UnderGroupID   (Int32)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.UnderGroupID = 0;
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // polSourceSiteEffectTerm.EffectTermEN   (String)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("EffectTermEN");
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 101);
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);
            //Assert.AreEqual(count, polSourceSiteEffectTermDBLocalIMService.GetPolSourceSiteEffectTermList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // polSourceSiteEffectTerm.EffectTermFR   (String)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("EffectTermFR");
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 101);
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);
            //Assert.AreEqual(count, polSourceSiteEffectTermDBLocalIMService.GetPolSourceSiteEffectTermList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceSiteEffectTerm.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime();
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);
            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceSiteEffectTerm.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.LastUpdateContactTVItemID = 0;
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

            polSourceSiteEffectTerm = null;
            polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
            polSourceSiteEffectTerm.LastUpdateContactTVItemID = 1;
            actionPolSourceSiteEffectTerm = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceSiteEffectTerm.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            polSourceSiteEffectTerm.PolSourceSiteEffectTermID = 10000000;

            // Post PolSourceSiteEffectTerm
            var actionPolSourceSiteEffectTermAdded = await PolSourceSiteEffectTermDBLocalIMService.Post(polSourceSiteEffectTerm);
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermAdded.Result).Value);
            PolSourceSiteEffectTerm polSourceSiteEffectTermAdded = (PolSourceSiteEffectTerm)((OkObjectResult)actionPolSourceSiteEffectTermAdded.Result).Value;
            Assert.NotNull(polSourceSiteEffectTermAdded);

            // List<PolSourceSiteEffectTerm>
            var actionPolSourceSiteEffectTermList = await PolSourceSiteEffectTermDBLocalIMService.GetPolSourceSiteEffectTermList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermList.Result).Value);
            List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = (List<PolSourceSiteEffectTerm>)((OkObjectResult)actionPolSourceSiteEffectTermList.Result).Value;

            int count = ((List<PolSourceSiteEffectTerm>)((OkObjectResult)actionPolSourceSiteEffectTermList.Result).Value).Count();
            Assert.True(count > 0);

            // Get PolSourceSiteEffectTerm With PolSourceSiteEffectTermID
            var actionPolSourceSiteEffectTermGet = await PolSourceSiteEffectTermDBLocalIMService.GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermGet.Result).Value);
            PolSourceSiteEffectTerm polSourceSiteEffectTermGet = (PolSourceSiteEffectTerm)((OkObjectResult)actionPolSourceSiteEffectTermGet.Result).Value;
            Assert.NotNull(polSourceSiteEffectTermGet);
            Assert.Equal(polSourceSiteEffectTermGet.PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);

            // Put PolSourceSiteEffectTerm
            var actionPolSourceSiteEffectTermUpdated = await PolSourceSiteEffectTermDBLocalIMService.Put(polSourceSiteEffectTerm);
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermUpdated.Result).Value);
            PolSourceSiteEffectTerm polSourceSiteEffectTermUpdated = (PolSourceSiteEffectTerm)((OkObjectResult)actionPolSourceSiteEffectTermUpdated.Result).Value;
            Assert.NotNull(polSourceSiteEffectTermUpdated);

            // Delete PolSourceSiteEffectTerm
            var actionPolSourceSiteEffectTermDeleted = await PolSourceSiteEffectTermDBLocalIMService.Delete(polSourceSiteEffectTerm.PolSourceSiteEffectTermID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceSiteEffectTermDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceSiteEffectTermDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionPolSourceSiteEffectTermDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IPolSourceSiteEffectTermDBLocalIMService, PolSourceSiteEffectTermDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            PolSourceSiteEffectTermDBLocalIMService = Provider.GetService<IPolSourceSiteEffectTermDBLocalIMService>();
            Assert.NotNull(PolSourceSiteEffectTermDBLocalIMService);

            return await Task.FromResult(true);
        }
        private PolSourceSiteEffectTerm GetFilledRandomPolSourceSiteEffectTerm(string OmitPropName)
        {
            PolSourceSiteEffectTerm polSourceSiteEffectTerm = new PolSourceSiteEffectTerm();

            if (OmitPropName != "IsGroup") polSourceSiteEffectTerm.IsGroup = true;
            // Need to implement [PolSourceSiteEffectTerm UnderGroupID PolSourceSiteEffectTerm PolSourceSiteEffectTermID]
            if (OmitPropName != "EffectTermEN") polSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 5);
            if (OmitPropName != "EffectTermFR") polSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceSiteEffectTerm.LastUpdateContactTVItemID = 2;



            return polSourceSiteEffectTerm;
        }
        private void CheckPolSourceSiteEffectTermFields(List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList)
        {
            if (polSourceSiteEffectTermList[0].UnderGroupID != null)
            {
                Assert.NotNull(polSourceSiteEffectTermList[0].UnderGroupID);
            }
            Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectTermList[0].EffectTermEN));
            Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectTermList[0].EffectTermFR));
        }

        #endregion Functions private
    }
}
