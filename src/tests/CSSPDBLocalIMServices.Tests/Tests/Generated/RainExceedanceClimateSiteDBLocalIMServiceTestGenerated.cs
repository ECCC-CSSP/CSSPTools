/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class RainExceedanceClimateSiteDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IRainExceedanceClimateSiteDBLocalIMService RainExceedanceClimateSiteDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private RainExceedanceClimateSite rainExceedanceClimateSite { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceClimateSiteDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedanceClimateSiteDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedanceClimateSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionRainExceedanceClimateSiteList = await RainExceedanceClimateSiteDBLocalIMService.GetRainExceedanceClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteList.Result).Value);
            List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = (List<RainExceedanceClimateSite>)((OkObjectResult)actionRainExceedanceClimateSiteList.Result).Value;

            count = rainExceedanceClimateSiteList.Count();

            RainExceedanceClimateSite rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // rainExceedanceClimateSite.RainExceedanceClimateSiteID   (Int32)
            // -----------------------------------

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.RainExceedanceClimateSiteID = 0;

            var actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Put(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.RainExceedanceClimateSiteID = 10000000;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Put(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
            // rainExceedanceClimateSite.RainExceedanceTVItemID   (Int32)
            // -----------------------------------

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.RainExceedanceTVItemID = 0;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.RainExceedanceTVItemID = 1;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite)]
            // rainExceedanceClimateSite.ClimateSiteTVItemID   (Int32)
            // -----------------------------------

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.ClimateSiteTVItemID = 0;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.ClimateSiteTVItemID = 1;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // rainExceedanceClimateSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime();
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);
            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // rainExceedanceClimateSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.LastUpdateContactTVItemID = 0;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

            rainExceedanceClimateSite = null;
            rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
            rainExceedanceClimateSite.LastUpdateContactTVItemID = 1;
            actionRainExceedanceClimateSite = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedanceClimateSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            rainExceedanceClimateSite.RainExceedanceClimateSiteID = 10000000;

            // Post RainExceedanceClimateSite
            var actionRainExceedanceClimateSiteAdded = await RainExceedanceClimateSiteDBLocalIMService.Post(rainExceedanceClimateSite);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteAdded.Result).Value);
            RainExceedanceClimateSite rainExceedanceClimateSiteAdded = (RainExceedanceClimateSite)((OkObjectResult)actionRainExceedanceClimateSiteAdded.Result).Value;
            Assert.NotNull(rainExceedanceClimateSiteAdded);

            // List<RainExceedanceClimateSite>
            var actionRainExceedanceClimateSiteList = await RainExceedanceClimateSiteDBLocalIMService.GetRainExceedanceClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteList.Result).Value);
            List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = (List<RainExceedanceClimateSite>)((OkObjectResult)actionRainExceedanceClimateSiteList.Result).Value;

            int count = ((List<RainExceedanceClimateSite>)((OkObjectResult)actionRainExceedanceClimateSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // Get RainExceedanceClimateSite With RainExceedanceClimateSiteID
            var actionRainExceedanceClimateSiteGet = await RainExceedanceClimateSiteDBLocalIMService.GetRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteGet.Result).Value);
            RainExceedanceClimateSite rainExceedanceClimateSiteGet = (RainExceedanceClimateSite)((OkObjectResult)actionRainExceedanceClimateSiteGet.Result).Value;
            Assert.NotNull(rainExceedanceClimateSiteGet);
            Assert.Equal(rainExceedanceClimateSiteGet.RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);

            // Put RainExceedanceClimateSite
            var actionRainExceedanceClimateSiteUpdated = await RainExceedanceClimateSiteDBLocalIMService.Put(rainExceedanceClimateSite);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteUpdated.Result).Value);
            RainExceedanceClimateSite rainExceedanceClimateSiteUpdated = (RainExceedanceClimateSite)((OkObjectResult)actionRainExceedanceClimateSiteUpdated.Result).Value;
            Assert.NotNull(rainExceedanceClimateSiteUpdated);

            // Delete RainExceedanceClimateSite
            var actionRainExceedanceClimateSiteDeleted = await RainExceedanceClimateSiteDBLocalIMService.Delete(rainExceedanceClimateSite.RainExceedanceClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceClimateSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceClimateSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionRainExceedanceClimateSiteDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IRainExceedanceClimateSiteDBLocalIMService, RainExceedanceClimateSiteDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            RainExceedanceClimateSiteDBLocalIMService = Provider.GetService<IRainExceedanceClimateSiteDBLocalIMService>();
            Assert.NotNull(RainExceedanceClimateSiteDBLocalIMService);

            return await Task.FromResult(true);
        }
        private RainExceedanceClimateSite GetFilledRandomRainExceedanceClimateSite(string OmitPropName)
        {
            RainExceedanceClimateSite rainExceedanceClimateSite = new RainExceedanceClimateSite();

            if (OmitPropName != "RainExceedanceTVItemID") rainExceedanceClimateSite.RainExceedanceTVItemID = 56;
            if (OmitPropName != "ClimateSiteTVItemID") rainExceedanceClimateSite.ClimateSiteTVItemID = 7;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedanceClimateSite.LastUpdateContactTVItemID = 2;



            return rainExceedanceClimateSite;
        }
        private void CheckRainExceedanceClimateSiteFields(List<RainExceedanceClimateSite> rainExceedanceClimateSiteList)
        {
        }

        #endregion Functions private
    }
}
