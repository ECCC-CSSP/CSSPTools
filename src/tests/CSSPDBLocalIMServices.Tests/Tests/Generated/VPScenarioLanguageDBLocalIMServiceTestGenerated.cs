/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalIMServices.Tests
{
    [Collection("Sequential")]
    public partial class VPScenarioLanguageDBLocalIMServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IVPScenarioLanguageDBLocalIMService VPScenarioLanguageDBLocalIMService { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private VPScenarioLanguage vpScenarioLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public VPScenarioLanguageDBLocalIMServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocalIM]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task VPScenarioLanguageDBLocalIM_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");

            await DoCRUDDBLocalIMTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task VPScenarioLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionVPScenarioLanguageList = await VPScenarioLanguageDBLocalIMService.GetVPScenarioLanguageList();
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageList.Result).Value);
            List<VPScenarioLanguage> vpScenarioLanguageList = (List<VPScenarioLanguage>)((OkObjectResult)actionVPScenarioLanguageList.Result).Value;

            count = vpScenarioLanguageList.Count();

            VPScenarioLanguage vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // vpScenarioLanguage.VPScenarioLanguageID   (Int32)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.VPScenarioLanguageID = 0;

            var actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Put(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.VPScenarioLanguageID = 10000000;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Put(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "VPScenario", ExistPlurial = "s", ExistFieldID = "VPScenarioID", AllowableTVtypeList = )]
            // vpScenarioLanguage.VPScenarioID   (Int32)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.VPScenarioID = 0;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // vpScenarioLanguage.Language   (LanguageEnum)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.Language = (LanguageEnum)1000000;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // vpScenarioLanguage.VPScenarioName   (String)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("VPScenarioName");
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.VPScenarioName = GetRandomString("", 101);
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);
            //Assert.AreEqual(count, vpScenarioLanguageDBLocalIMService.GetVPScenarioLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // vpScenarioLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // vpScenarioLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.LastUpdateDate_UTC = new DateTime();
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);
            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // vpScenarioLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.LastUpdateContactTVItemID = 0;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);

            vpScenarioLanguage = null;
            vpScenarioLanguage = GetFilledRandomVPScenarioLanguage("");
            vpScenarioLanguage.LastUpdateContactTVItemID = 1;
            actionVPScenarioLanguage = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.IsType<BadRequestObjectResult>(actionVPScenarioLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalIMTest()
        {
            vpScenarioLanguage.VPScenarioLanguageID = 10000000;

            // Post VPScenarioLanguage
            var actionVPScenarioLanguageAdded = await VPScenarioLanguageDBLocalIMService.Post(vpScenarioLanguage);
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageAdded.Result).Value);
            VPScenarioLanguage vpScenarioLanguageAdded = (VPScenarioLanguage)((OkObjectResult)actionVPScenarioLanguageAdded.Result).Value;
            Assert.NotNull(vpScenarioLanguageAdded);

            // List<VPScenarioLanguage>
            var actionVPScenarioLanguageList = await VPScenarioLanguageDBLocalIMService.GetVPScenarioLanguageList();
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageList.Result).Value);
            List<VPScenarioLanguage> vpScenarioLanguageList = (List<VPScenarioLanguage>)((OkObjectResult)actionVPScenarioLanguageList.Result).Value;

            int count = ((List<VPScenarioLanguage>)((OkObjectResult)actionVPScenarioLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // Get VPScenarioLanguage With VPScenarioLanguageID
            var actionVPScenarioLanguageGet = await VPScenarioLanguageDBLocalIMService.GetVPScenarioLanguageWithVPScenarioLanguageID(vpScenarioLanguageList[0].VPScenarioLanguageID);
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageGet.Result).Value);
            VPScenarioLanguage vpScenarioLanguageGet = (VPScenarioLanguage)((OkObjectResult)actionVPScenarioLanguageGet.Result).Value;
            Assert.NotNull(vpScenarioLanguageGet);
            Assert.Equal(vpScenarioLanguageGet.VPScenarioLanguageID, vpScenarioLanguageList[0].VPScenarioLanguageID);

            // Put VPScenarioLanguage
            var actionVPScenarioLanguageUpdated = await VPScenarioLanguageDBLocalIMService.Put(vpScenarioLanguage);
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageUpdated.Result).Value);
            VPScenarioLanguage vpScenarioLanguageUpdated = (VPScenarioLanguage)((OkObjectResult)actionVPScenarioLanguageUpdated.Result).Value;
            Assert.NotNull(vpScenarioLanguageUpdated);

            // Delete VPScenarioLanguage
            var actionVPScenarioLanguageDeleted = await VPScenarioLanguageDBLocalIMService.Delete(vpScenarioLanguage.VPScenarioLanguageID);
            Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionVPScenarioLanguageDeleted.Result).Value;
            Assert.True(retBool);

        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalimservicestests.json")
               .AddUserSecrets("64a6d1e4-0d0c-4e59-9c2e-640182417704")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IVPScenarioLanguageDBLocalIMService, VPScenarioLanguageDBLocalIMService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            VPScenarioLanguageDBLocalIMService = Provider.GetService<IVPScenarioLanguageDBLocalIMService>();
            Assert.NotNull(VPScenarioLanguageDBLocalIMService);

            return await Task.FromResult(true);
        }
        private VPScenarioLanguage GetFilledRandomVPScenarioLanguage(string OmitPropName)
        {
            VPScenarioLanguage vpScenarioLanguage = new VPScenarioLanguage();

            if (OmitPropName != "VPScenarioID") vpScenarioLanguage.VPScenarioID = 1;
            if (OmitPropName != "Language") vpScenarioLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "VPScenarioName") vpScenarioLanguage.VPScenarioName = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatus") vpScenarioLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") vpScenarioLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") vpScenarioLanguage.LastUpdateContactTVItemID = 2;



            return vpScenarioLanguage;
        }
        private void CheckVPScenarioLanguageFields(List<VPScenarioLanguage> vpScenarioLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(vpScenarioLanguageList[0].VPScenarioName));
        }

        #endregion Functions private
    }
}
