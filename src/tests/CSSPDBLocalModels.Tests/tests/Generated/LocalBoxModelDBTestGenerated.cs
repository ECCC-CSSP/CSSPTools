/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalBoxModelTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalBoxModel localBoxModel { get; set; }
        #endregion Properties

        #region Constructors
        public LocalBoxModelTest()
        {
            localBoxModel = new LocalBoxModel();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalBoxModel_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "BoxModelID", "InfrastructureTVItemID", "Discharge_m3_day", "Depth_m", "Temperature_C", "Dilution", "DecayRate_per_day", "FCUntreated_MPN_100ml", "FCPreDisinfection_MPN_100ml", "Concentration_MPN_100ml", "T90_hour", "DischargeDuration_hour", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalBoxModel).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalBoxModel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalBoxModel_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalBoxModel).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalBoxModel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalBoxModel_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localBoxModel.LocalDBCommand = val1;
               Assert.Equal(val1, localBoxModel.LocalDBCommand);
               int val2 = 45;
               localBoxModel.BoxModelID = val2;
               Assert.Equal(val2, localBoxModel.BoxModelID);
               int val3 = 45;
               localBoxModel.InfrastructureTVItemID = val3;
               Assert.Equal(val3, localBoxModel.InfrastructureTVItemID);
               double val4 = 87.9D;
               localBoxModel.Discharge_m3_day = val4;
               Assert.Equal(val4, localBoxModel.Discharge_m3_day);
               double val5 = 87.9D;
               localBoxModel.Depth_m = val5;
               Assert.Equal(val5, localBoxModel.Depth_m);
               double val6 = 87.9D;
               localBoxModel.Temperature_C = val6;
               Assert.Equal(val6, localBoxModel.Temperature_C);
               int val7 = 45;
               localBoxModel.Dilution = val7;
               Assert.Equal(val7, localBoxModel.Dilution);
               double val8 = 87.9D;
               localBoxModel.DecayRate_per_day = val8;
               Assert.Equal(val8, localBoxModel.DecayRate_per_day);
               int val9 = 45;
               localBoxModel.FCUntreated_MPN_100ml = val9;
               Assert.Equal(val9, localBoxModel.FCUntreated_MPN_100ml);
               int val10 = 45;
               localBoxModel.FCPreDisinfection_MPN_100ml = val10;
               Assert.Equal(val10, localBoxModel.FCPreDisinfection_MPN_100ml);
               int val11 = 45;
               localBoxModel.Concentration_MPN_100ml = val11;
               Assert.Equal(val11, localBoxModel.Concentration_MPN_100ml);
               double val12 = 87.9D;
               localBoxModel.T90_hour = val12;
               Assert.Equal(val12, localBoxModel.T90_hour);
               double val13 = 87.9D;
               localBoxModel.DischargeDuration_hour = val13;
               Assert.Equal(val13, localBoxModel.DischargeDuration_hour);
               DateTime val14 = new DateTime(2010, 3, 4);
               localBoxModel.LastUpdateDate_UTC = val14;
               Assert.Equal(val14, localBoxModel.LastUpdateDate_UTC);
               int val15 = 45;
               localBoxModel.LastUpdateContactTVItemID = val15;
               Assert.Equal(val15, localBoxModel.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
