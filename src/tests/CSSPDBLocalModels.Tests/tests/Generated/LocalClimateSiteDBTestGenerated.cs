/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalClimateSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalClimateSite localClimateSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClimateSiteTest()
        {
            localClimateSite = new LocalClimateSite();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalClimateSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "ClimateSiteID", "ClimateSiteTVItemID", "ECDBID", "ClimateSiteName", "Province", "Elevation_m", "ClimateID", "WMOID", "TCID", "IsQuebecSite", "IsCoCoRaHS", "TimeOffset_hour", "File_desc", "HourlyStartDate_Local", "HourlyEndDate_Local", "HourlyNow", "DailyStartDate_Local", "DailyEndDate_Local", "DailyNow", "MonthlyStartDate_Local", "MonthlyEndDate_Local", "MonthlyNow", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalClimateSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalClimateSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalClimateSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalClimateSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalClimateSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalClimateSite_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localClimateSite.LocalDBCommand = val1;
               Assert.Equal(val1, localClimateSite.LocalDBCommand);
               int val2 = 45;
               localClimateSite.ClimateSiteID = val2;
               Assert.Equal(val2, localClimateSite.ClimateSiteID);
               int val3 = 45;
               localClimateSite.ClimateSiteTVItemID = val3;
               Assert.Equal(val3, localClimateSite.ClimateSiteTVItemID);
               int val4 = 45;
               localClimateSite.ECDBID = val4;
               Assert.Equal(val4, localClimateSite.ECDBID);
               string val5 = "Some text";
               localClimateSite.ClimateSiteName = val5;
               Assert.Equal(val5, localClimateSite.ClimateSiteName);
               string val6 = "Some text";
               localClimateSite.Province = val6;
               Assert.Equal(val6, localClimateSite.Province);
               double val7 = 87.9D;
               localClimateSite.Elevation_m = val7;
               Assert.Equal(val7, localClimateSite.Elevation_m);
               string val8 = "Some text";
               localClimateSite.ClimateID = val8;
               Assert.Equal(val8, localClimateSite.ClimateID);
               int val9 = 45;
               localClimateSite.WMOID = val9;
               Assert.Equal(val9, localClimateSite.WMOID);
               string val10 = "Some text";
               localClimateSite.TCID = val10;
               Assert.Equal(val10, localClimateSite.TCID);
               bool val11 = true;
               localClimateSite.IsQuebecSite = val11;
               Assert.Equal(val11, localClimateSite.IsQuebecSite);
               bool val12 = true;
               localClimateSite.IsCoCoRaHS = val12;
               Assert.Equal(val12, localClimateSite.IsCoCoRaHS);
               double val13 = 87.9D;
               localClimateSite.TimeOffset_hour = val13;
               Assert.Equal(val13, localClimateSite.TimeOffset_hour);
               string val14 = "Some text";
               localClimateSite.File_desc = val14;
               Assert.Equal(val14, localClimateSite.File_desc);
               DateTime val15 = new DateTime(2010, 3, 4);
               localClimateSite.HourlyStartDate_Local = val15;
               Assert.Equal(val15, localClimateSite.HourlyStartDate_Local);
               DateTime val16 = new DateTime(2010, 3, 4);
               localClimateSite.HourlyEndDate_Local = val16;
               Assert.Equal(val16, localClimateSite.HourlyEndDate_Local);
               bool val17 = true;
               localClimateSite.HourlyNow = val17;
               Assert.Equal(val17, localClimateSite.HourlyNow);
               DateTime val18 = new DateTime(2010, 3, 4);
               localClimateSite.DailyStartDate_Local = val18;
               Assert.Equal(val18, localClimateSite.DailyStartDate_Local);
               DateTime val19 = new DateTime(2010, 3, 4);
               localClimateSite.DailyEndDate_Local = val19;
               Assert.Equal(val19, localClimateSite.DailyEndDate_Local);
               bool val20 = true;
               localClimateSite.DailyNow = val20;
               Assert.Equal(val20, localClimateSite.DailyNow);
               DateTime val21 = new DateTime(2010, 3, 4);
               localClimateSite.MonthlyStartDate_Local = val21;
               Assert.Equal(val21, localClimateSite.MonthlyStartDate_Local);
               DateTime val22 = new DateTime(2010, 3, 4);
               localClimateSite.MonthlyEndDate_Local = val22;
               Assert.Equal(val22, localClimateSite.MonthlyEndDate_Local);
               bool val23 = true;
               localClimateSite.MonthlyNow = val23;
               Assert.Equal(val23, localClimateSite.MonthlyNow);
               DateTime val24 = new DateTime(2010, 3, 4);
               localClimateSite.LastUpdateDate_UTC = val24;
               Assert.Equal(val24, localClimateSite.LastUpdateDate_UTC);
               int val25 = 45;
               localClimateSite.LastUpdateContactTVItemID = val25;
               Assert.Equal(val25, localClimateSite.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
