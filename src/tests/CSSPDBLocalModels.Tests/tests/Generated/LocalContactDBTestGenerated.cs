/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalContactTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalContact localContact { get; set; }
        #endregion Properties

        #region Constructors
        public LocalContactTest()
        {
            localContact = new LocalContact();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalContact_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "ContactID", "Id", "ContactTVItemID", "LoginEmail", "FirstName", "LastName", "Initial", "WebName", "ContactTitle", "IsAdmin", "EmailValidated", "Disabled", "IsNew", "SamplingPlanner_ProvincesTVItemID", "Token", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalContact).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalContact).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalContact_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalContact).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalContact).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalContact_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localContact.LocalDBCommand = val1;
               Assert.Equal(val1, localContact.LocalDBCommand);
               int val2 = 45;
               localContact.ContactID = val2;
               Assert.Equal(val2, localContact.ContactID);
               string val3 = "Some text";
               localContact.Id = val3;
               Assert.Equal(val3, localContact.Id);
               int val4 = 45;
               localContact.ContactTVItemID = val4;
               Assert.Equal(val4, localContact.ContactTVItemID);
               string val5 = "Some text";
               localContact.LoginEmail = val5;
               Assert.Equal(val5, localContact.LoginEmail);
               string val6 = "Some text";
               localContact.FirstName = val6;
               Assert.Equal(val6, localContact.FirstName);
               string val7 = "Some text";
               localContact.LastName = val7;
               Assert.Equal(val7, localContact.LastName);
               string val8 = "Some text";
               localContact.Initial = val8;
               Assert.Equal(val8, localContact.Initial);
               string val9 = "Some text";
               localContact.WebName = val9;
               Assert.Equal(val9, localContact.WebName);
               ContactTitleEnum val10 = (ContactTitleEnum)3;
               localContact.ContactTitle = val10;
               Assert.Equal(val10, localContact.ContactTitle);
               bool val11 = true;
               localContact.IsAdmin = val11;
               Assert.Equal(val11, localContact.IsAdmin);
               bool val12 = true;
               localContact.EmailValidated = val12;
               Assert.Equal(val12, localContact.EmailValidated);
               bool val13 = true;
               localContact.Disabled = val13;
               Assert.Equal(val13, localContact.Disabled);
               bool val14 = true;
               localContact.IsNew = val14;
               Assert.Equal(val14, localContact.IsNew);
               string val15 = "Some text";
               localContact.SamplingPlanner_ProvincesTVItemID = val15;
               Assert.Equal(val15, localContact.SamplingPlanner_ProvincesTVItemID);
               string val16 = "Some text";
               localContact.Token = val16;
               Assert.Equal(val16, localContact.Token);
               DateTime val17 = new DateTime(2010, 3, 4);
               localContact.LastUpdateDate_UTC = val17;
               Assert.Equal(val17, localContact.LastUpdateDate_UTC);
               int val18 = 45;
               localContact.LastUpdateContactTVItemID = val18;
               Assert.Equal(val18, localContact.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
