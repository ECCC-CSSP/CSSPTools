/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalLabSheetDetailTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalLabSheetDetail localLabSheetDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetDetailTest()
        {
            localLabSheetDetail = new LocalLabSheetDetail();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalLabSheetDetail_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "LabSheetDetailID", "LabSheetID", "SamplingPlanID", "SubsectorTVItemID", "Version", "RunDate", "Tides", "SampleCrewInitials", "WaterBathCount", "IncubationBath1StartTime", "IncubationBath2StartTime", "IncubationBath3StartTime", "IncubationBath1EndTime", "IncubationBath2EndTime", "IncubationBath3EndTime", "IncubationBath1TimeCalculated_minutes", "IncubationBath2TimeCalculated_minutes", "IncubationBath3TimeCalculated_minutes", "WaterBath1", "WaterBath2", "WaterBath3", "TCField1", "TCLab1", "TCField2", "TCLab2", "TCFirst", "TCAverage", "ControlLot", "Positive35", "NonTarget35", "Negative35", "Bath1Positive44_5", "Bath2Positive44_5", "Bath3Positive44_5", "Bath1NonTarget44_5", "Bath2NonTarget44_5", "Bath3NonTarget44_5", "Bath1Negative44_5", "Bath2Negative44_5", "Bath3Negative44_5", "Blank35", "Bath1Blank44_5", "Bath2Blank44_5", "Bath3Blank44_5", "Lot35", "Lot44_5", "Weather", "RunComment", "RunWeatherComment", "SampleBottleLotNumber", "SalinitiesReadBy", "SalinitiesReadDate", "ResultsReadBy", "ResultsReadDate", "ResultsRecordedBy", "ResultsRecordedDate", "DailyDuplicateRLog", "DailyDuplicatePrecisionCriteria", "DailyDuplicateAcceptable", "IntertechDuplicateRLog", "IntertechDuplicatePrecisionCriteria", "IntertechDuplicateAcceptable", "IntertechReadAcceptable", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetDetail).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalLabSheetDetail_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetDetail).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalLabSheetDetail_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localLabSheetDetail.LocalDBCommand = val1;
               Assert.Equal(val1, localLabSheetDetail.LocalDBCommand);
               int val2 = 45;
               localLabSheetDetail.LabSheetDetailID = val2;
               Assert.Equal(val2, localLabSheetDetail.LabSheetDetailID);
               int val3 = 45;
               localLabSheetDetail.LabSheetID = val3;
               Assert.Equal(val3, localLabSheetDetail.LabSheetID);
               int val4 = 45;
               localLabSheetDetail.SamplingPlanID = val4;
               Assert.Equal(val4, localLabSheetDetail.SamplingPlanID);
               int val5 = 45;
               localLabSheetDetail.SubsectorTVItemID = val5;
               Assert.Equal(val5, localLabSheetDetail.SubsectorTVItemID);
               int val6 = 45;
               localLabSheetDetail.Version = val6;
               Assert.Equal(val6, localLabSheetDetail.Version);
               DateTime val7 = new DateTime(2010, 3, 4);
               localLabSheetDetail.RunDate = val7;
               Assert.Equal(val7, localLabSheetDetail.RunDate);
               string val8 = "Some text";
               localLabSheetDetail.Tides = val8;
               Assert.Equal(val8, localLabSheetDetail.Tides);
               string val9 = "Some text";
               localLabSheetDetail.SampleCrewInitials = val9;
               Assert.Equal(val9, localLabSheetDetail.SampleCrewInitials);
               int val10 = 45;
               localLabSheetDetail.WaterBathCount = val10;
               Assert.Equal(val10, localLabSheetDetail.WaterBathCount);
               DateTime val11 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath1StartTime = val11;
               Assert.Equal(val11, localLabSheetDetail.IncubationBath1StartTime);
               DateTime val12 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath2StartTime = val12;
               Assert.Equal(val12, localLabSheetDetail.IncubationBath2StartTime);
               DateTime val13 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath3StartTime = val13;
               Assert.Equal(val13, localLabSheetDetail.IncubationBath3StartTime);
               DateTime val14 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath1EndTime = val14;
               Assert.Equal(val14, localLabSheetDetail.IncubationBath1EndTime);
               DateTime val15 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath2EndTime = val15;
               Assert.Equal(val15, localLabSheetDetail.IncubationBath2EndTime);
               DateTime val16 = new DateTime(2010, 3, 4);
               localLabSheetDetail.IncubationBath3EndTime = val16;
               Assert.Equal(val16, localLabSheetDetail.IncubationBath3EndTime);
               int val17 = 45;
               localLabSheetDetail.IncubationBath1TimeCalculated_minutes = val17;
               Assert.Equal(val17, localLabSheetDetail.IncubationBath1TimeCalculated_minutes);
               int val18 = 45;
               localLabSheetDetail.IncubationBath2TimeCalculated_minutes = val18;
               Assert.Equal(val18, localLabSheetDetail.IncubationBath2TimeCalculated_minutes);
               int val19 = 45;
               localLabSheetDetail.IncubationBath3TimeCalculated_minutes = val19;
               Assert.Equal(val19, localLabSheetDetail.IncubationBath3TimeCalculated_minutes);
               string val20 = "Some text";
               localLabSheetDetail.WaterBath1 = val20;
               Assert.Equal(val20, localLabSheetDetail.WaterBath1);
               string val21 = "Some text";
               localLabSheetDetail.WaterBath2 = val21;
               Assert.Equal(val21, localLabSheetDetail.WaterBath2);
               string val22 = "Some text";
               localLabSheetDetail.WaterBath3 = val22;
               Assert.Equal(val22, localLabSheetDetail.WaterBath3);
               double val23 = 87.9D;
               localLabSheetDetail.TCField1 = val23;
               Assert.Equal(val23, localLabSheetDetail.TCField1);
               double val24 = 87.9D;
               localLabSheetDetail.TCLab1 = val24;
               Assert.Equal(val24, localLabSheetDetail.TCLab1);
               double val25 = 87.9D;
               localLabSheetDetail.TCField2 = val25;
               Assert.Equal(val25, localLabSheetDetail.TCField2);
               double val26 = 87.9D;
               localLabSheetDetail.TCLab2 = val26;
               Assert.Equal(val26, localLabSheetDetail.TCLab2);
               double val27 = 87.9D;
               localLabSheetDetail.TCFirst = val27;
               Assert.Equal(val27, localLabSheetDetail.TCFirst);
               double val28 = 87.9D;
               localLabSheetDetail.TCAverage = val28;
               Assert.Equal(val28, localLabSheetDetail.TCAverage);
               string val29 = "Some text";
               localLabSheetDetail.ControlLot = val29;
               Assert.Equal(val29, localLabSheetDetail.ControlLot);
               string val30 = "Some text";
               localLabSheetDetail.Positive35 = val30;
               Assert.Equal(val30, localLabSheetDetail.Positive35);
               string val31 = "Some text";
               localLabSheetDetail.NonTarget35 = val31;
               Assert.Equal(val31, localLabSheetDetail.NonTarget35);
               string val32 = "Some text";
               localLabSheetDetail.Negative35 = val32;
               Assert.Equal(val32, localLabSheetDetail.Negative35);
               string val33 = "Some text";
               localLabSheetDetail.Bath1Positive44_5 = val33;
               Assert.Equal(val33, localLabSheetDetail.Bath1Positive44_5);
               string val34 = "Some text";
               localLabSheetDetail.Bath2Positive44_5 = val34;
               Assert.Equal(val34, localLabSheetDetail.Bath2Positive44_5);
               string val35 = "Some text";
               localLabSheetDetail.Bath3Positive44_5 = val35;
               Assert.Equal(val35, localLabSheetDetail.Bath3Positive44_5);
               string val36 = "Some text";
               localLabSheetDetail.Bath1NonTarget44_5 = val36;
               Assert.Equal(val36, localLabSheetDetail.Bath1NonTarget44_5);
               string val37 = "Some text";
               localLabSheetDetail.Bath2NonTarget44_5 = val37;
               Assert.Equal(val37, localLabSheetDetail.Bath2NonTarget44_5);
               string val38 = "Some text";
               localLabSheetDetail.Bath3NonTarget44_5 = val38;
               Assert.Equal(val38, localLabSheetDetail.Bath3NonTarget44_5);
               string val39 = "Some text";
               localLabSheetDetail.Bath1Negative44_5 = val39;
               Assert.Equal(val39, localLabSheetDetail.Bath1Negative44_5);
               string val40 = "Some text";
               localLabSheetDetail.Bath2Negative44_5 = val40;
               Assert.Equal(val40, localLabSheetDetail.Bath2Negative44_5);
               string val41 = "Some text";
               localLabSheetDetail.Bath3Negative44_5 = val41;
               Assert.Equal(val41, localLabSheetDetail.Bath3Negative44_5);
               string val42 = "Some text";
               localLabSheetDetail.Blank35 = val42;
               Assert.Equal(val42, localLabSheetDetail.Blank35);
               string val43 = "Some text";
               localLabSheetDetail.Bath1Blank44_5 = val43;
               Assert.Equal(val43, localLabSheetDetail.Bath1Blank44_5);
               string val44 = "Some text";
               localLabSheetDetail.Bath2Blank44_5 = val44;
               Assert.Equal(val44, localLabSheetDetail.Bath2Blank44_5);
               string val45 = "Some text";
               localLabSheetDetail.Bath3Blank44_5 = val45;
               Assert.Equal(val45, localLabSheetDetail.Bath3Blank44_5);
               string val46 = "Some text";
               localLabSheetDetail.Lot35 = val46;
               Assert.Equal(val46, localLabSheetDetail.Lot35);
               string val47 = "Some text";
               localLabSheetDetail.Lot44_5 = val47;
               Assert.Equal(val47, localLabSheetDetail.Lot44_5);
               string val48 = "Some text";
               localLabSheetDetail.Weather = val48;
               Assert.Equal(val48, localLabSheetDetail.Weather);
               string val49 = "Some text";
               localLabSheetDetail.RunComment = val49;
               Assert.Equal(val49, localLabSheetDetail.RunComment);
               string val50 = "Some text";
               localLabSheetDetail.RunWeatherComment = val50;
               Assert.Equal(val50, localLabSheetDetail.RunWeatherComment);
               string val51 = "Some text";
               localLabSheetDetail.SampleBottleLotNumber = val51;
               Assert.Equal(val51, localLabSheetDetail.SampleBottleLotNumber);
               string val52 = "Some text";
               localLabSheetDetail.SalinitiesReadBy = val52;
               Assert.Equal(val52, localLabSheetDetail.SalinitiesReadBy);
               DateTime val53 = new DateTime(2010, 3, 4);
               localLabSheetDetail.SalinitiesReadDate = val53;
               Assert.Equal(val53, localLabSheetDetail.SalinitiesReadDate);
               string val54 = "Some text";
               localLabSheetDetail.ResultsReadBy = val54;
               Assert.Equal(val54, localLabSheetDetail.ResultsReadBy);
               DateTime val55 = new DateTime(2010, 3, 4);
               localLabSheetDetail.ResultsReadDate = val55;
               Assert.Equal(val55, localLabSheetDetail.ResultsReadDate);
               string val56 = "Some text";
               localLabSheetDetail.ResultsRecordedBy = val56;
               Assert.Equal(val56, localLabSheetDetail.ResultsRecordedBy);
               DateTime val57 = new DateTime(2010, 3, 4);
               localLabSheetDetail.ResultsRecordedDate = val57;
               Assert.Equal(val57, localLabSheetDetail.ResultsRecordedDate);
               double val58 = 87.9D;
               localLabSheetDetail.DailyDuplicateRLog = val58;
               Assert.Equal(val58, localLabSheetDetail.DailyDuplicateRLog);
               double val59 = 87.9D;
               localLabSheetDetail.DailyDuplicatePrecisionCriteria = val59;
               Assert.Equal(val59, localLabSheetDetail.DailyDuplicatePrecisionCriteria);
               bool val60 = true;
               localLabSheetDetail.DailyDuplicateAcceptable = val60;
               Assert.Equal(val60, localLabSheetDetail.DailyDuplicateAcceptable);
               double val61 = 87.9D;
               localLabSheetDetail.IntertechDuplicateRLog = val61;
               Assert.Equal(val61, localLabSheetDetail.IntertechDuplicateRLog);
               double val62 = 87.9D;
               localLabSheetDetail.IntertechDuplicatePrecisionCriteria = val62;
               Assert.Equal(val62, localLabSheetDetail.IntertechDuplicatePrecisionCriteria);
               bool val63 = true;
               localLabSheetDetail.IntertechDuplicateAcceptable = val63;
               Assert.Equal(val63, localLabSheetDetail.IntertechDuplicateAcceptable);
               bool val64 = true;
               localLabSheetDetail.IntertechReadAcceptable = val64;
               Assert.Equal(val64, localLabSheetDetail.IntertechReadAcceptable);
               DateTime val65 = new DateTime(2010, 3, 4);
               localLabSheetDetail.LastUpdateDate_UTC = val65;
               Assert.Equal(val65, localLabSheetDetail.LastUpdateDate_UTC);
               int val66 = 45;
               localLabSheetDetail.LastUpdateContactTVItemID = val66;
               Assert.Equal(val66, localLabSheetDetail.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
