/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalLabSheetTubeMPNDetailTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetTubeMPNDetailTest()
        {
            localLabSheetTubeMPNDetail = new LocalLabSheetTubeMPNDetail();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalLabSheetTubeMPNDetail_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "LabSheetTubeMPNDetailID", "LabSheetDetailID", "Ordinal", "MWQMSiteTVItemID", "SampleDateTime", "MPN", "Tube10", "Tube1_0", "Tube0_1", "Salinity", "Temperature", "ProcessedBy", "SampleType", "SiteComment", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetTubeMPNDetail).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetTubeMPNDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalLabSheetTubeMPNDetail_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetTubeMPNDetail).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalLabSheetTubeMPNDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalLabSheetTubeMPNDetail_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localLabSheetTubeMPNDetail.LocalDBCommand = val1;
               Assert.Equal(val1, localLabSheetTubeMPNDetail.LocalDBCommand);
               int val2 = 45;
               localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID = val2;
               Assert.Equal(val2, localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID);
               int val3 = 45;
               localLabSheetTubeMPNDetail.LabSheetDetailID = val3;
               Assert.Equal(val3, localLabSheetTubeMPNDetail.LabSheetDetailID);
               int val4 = 45;
               localLabSheetTubeMPNDetail.Ordinal = val4;
               Assert.Equal(val4, localLabSheetTubeMPNDetail.Ordinal);
               int val5 = 45;
               localLabSheetTubeMPNDetail.MWQMSiteTVItemID = val5;
               Assert.Equal(val5, localLabSheetTubeMPNDetail.MWQMSiteTVItemID);
               DateTime val6 = new DateTime(2010, 3, 4);
               localLabSheetTubeMPNDetail.SampleDateTime = val6;
               Assert.Equal(val6, localLabSheetTubeMPNDetail.SampleDateTime);
               int val7 = 45;
               localLabSheetTubeMPNDetail.MPN = val7;
               Assert.Equal(val7, localLabSheetTubeMPNDetail.MPN);
               int val8 = 45;
               localLabSheetTubeMPNDetail.Tube10 = val8;
               Assert.Equal(val8, localLabSheetTubeMPNDetail.Tube10);
               int val9 = 45;
               localLabSheetTubeMPNDetail.Tube1_0 = val9;
               Assert.Equal(val9, localLabSheetTubeMPNDetail.Tube1_0);
               int val10 = 45;
               localLabSheetTubeMPNDetail.Tube0_1 = val10;
               Assert.Equal(val10, localLabSheetTubeMPNDetail.Tube0_1);
               double val11 = 87.9D;
               localLabSheetTubeMPNDetail.Salinity = val11;
               Assert.Equal(val11, localLabSheetTubeMPNDetail.Salinity);
               double val12 = 87.9D;
               localLabSheetTubeMPNDetail.Temperature = val12;
               Assert.Equal(val12, localLabSheetTubeMPNDetail.Temperature);
               string val13 = "Some text";
               localLabSheetTubeMPNDetail.ProcessedBy = val13;
               Assert.Equal(val13, localLabSheetTubeMPNDetail.ProcessedBy);
               SampleTypeEnum val14 = (SampleTypeEnum)3;
               localLabSheetTubeMPNDetail.SampleType = val14;
               Assert.Equal(val14, localLabSheetTubeMPNDetail.SampleType);
               string val15 = "Some text";
               localLabSheetTubeMPNDetail.SiteComment = val15;
               Assert.Equal(val15, localLabSheetTubeMPNDetail.SiteComment);
               DateTime val16 = new DateTime(2010, 3, 4);
               localLabSheetTubeMPNDetail.LastUpdateDate_UTC = val16;
               Assert.Equal(val16, localLabSheetTubeMPNDetail.LastUpdateDate_UTC);
               int val17 = 45;
               localLabSheetTubeMPNDetail.LastUpdateContactTVItemID = val17;
               Assert.Equal(val17, localLabSheetTubeMPNDetail.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
