/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalMWQMAnalysisReportParameterTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalMWQMAnalysisReportParameter localMWQMAnalysisReportParameter { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMAnalysisReportParameterTest()
        {
            localMWQMAnalysisReportParameter = new LocalMWQMAnalysisReportParameter();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalMWQMAnalysisReportParameter_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "MWQMAnalysisReportParameterID", "SubsectorTVItemID", "AnalysisName", "AnalysisReportYear", "StartDate", "EndDate", "AnalysisCalculationType", "NumberOfRuns", "FullYear", "SalinityHighlightDeviationFromAverage", "ShortRangeNumberOfDays", "MidRangeNumberOfDays", "DryLimit24h", "DryLimit48h", "DryLimit72h", "DryLimit96h", "WetLimit24h", "WetLimit48h", "WetLimit72h", "WetLimit96h", "RunsToOmit", "ShowDataTypes", "ExcelTVFileTVItemID", "Command", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMAnalysisReportParameter).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMAnalysisReportParameter).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalMWQMAnalysisReportParameter_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMAnalysisReportParameter).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMAnalysisReportParameter).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalMWQMAnalysisReportParameter_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localMWQMAnalysisReportParameter.LocalDBCommand = val1;
               Assert.Equal(val1, localMWQMAnalysisReportParameter.LocalDBCommand);
               int val2 = 45;
               localMWQMAnalysisReportParameter.MWQMAnalysisReportParameterID = val2;
               Assert.Equal(val2, localMWQMAnalysisReportParameter.MWQMAnalysisReportParameterID);
               int val3 = 45;
               localMWQMAnalysisReportParameter.SubsectorTVItemID = val3;
               Assert.Equal(val3, localMWQMAnalysisReportParameter.SubsectorTVItemID);
               string val4 = "Some text";
               localMWQMAnalysisReportParameter.AnalysisName = val4;
               Assert.Equal(val4, localMWQMAnalysisReportParameter.AnalysisName);
               int val5 = 45;
               localMWQMAnalysisReportParameter.AnalysisReportYear = val5;
               Assert.Equal(val5, localMWQMAnalysisReportParameter.AnalysisReportYear);
               DateTime val6 = new DateTime(2010, 3, 4);
               localMWQMAnalysisReportParameter.StartDate = val6;
               Assert.Equal(val6, localMWQMAnalysisReportParameter.StartDate);
               DateTime val7 = new DateTime(2010, 3, 4);
               localMWQMAnalysisReportParameter.EndDate = val7;
               Assert.Equal(val7, localMWQMAnalysisReportParameter.EndDate);
               AnalysisCalculationTypeEnum val8 = (AnalysisCalculationTypeEnum)3;
               localMWQMAnalysisReportParameter.AnalysisCalculationType = val8;
               Assert.Equal(val8, localMWQMAnalysisReportParameter.AnalysisCalculationType);
               int val9 = 45;
               localMWQMAnalysisReportParameter.NumberOfRuns = val9;
               Assert.Equal(val9, localMWQMAnalysisReportParameter.NumberOfRuns);
               bool val10 = true;
               localMWQMAnalysisReportParameter.FullYear = val10;
               Assert.Equal(val10, localMWQMAnalysisReportParameter.FullYear);
               double val11 = 87.9D;
               localMWQMAnalysisReportParameter.SalinityHighlightDeviationFromAverage = val11;
               Assert.Equal(val11, localMWQMAnalysisReportParameter.SalinityHighlightDeviationFromAverage);
               int val12 = 45;
               localMWQMAnalysisReportParameter.ShortRangeNumberOfDays = val12;
               Assert.Equal(val12, localMWQMAnalysisReportParameter.ShortRangeNumberOfDays);
               int val13 = 45;
               localMWQMAnalysisReportParameter.MidRangeNumberOfDays = val13;
               Assert.Equal(val13, localMWQMAnalysisReportParameter.MidRangeNumberOfDays);
               int val14 = 45;
               localMWQMAnalysisReportParameter.DryLimit24h = val14;
               Assert.Equal(val14, localMWQMAnalysisReportParameter.DryLimit24h);
               int val15 = 45;
               localMWQMAnalysisReportParameter.DryLimit48h = val15;
               Assert.Equal(val15, localMWQMAnalysisReportParameter.DryLimit48h);
               int val16 = 45;
               localMWQMAnalysisReportParameter.DryLimit72h = val16;
               Assert.Equal(val16, localMWQMAnalysisReportParameter.DryLimit72h);
               int val17 = 45;
               localMWQMAnalysisReportParameter.DryLimit96h = val17;
               Assert.Equal(val17, localMWQMAnalysisReportParameter.DryLimit96h);
               int val18 = 45;
               localMWQMAnalysisReportParameter.WetLimit24h = val18;
               Assert.Equal(val18, localMWQMAnalysisReportParameter.WetLimit24h);
               int val19 = 45;
               localMWQMAnalysisReportParameter.WetLimit48h = val19;
               Assert.Equal(val19, localMWQMAnalysisReportParameter.WetLimit48h);
               int val20 = 45;
               localMWQMAnalysisReportParameter.WetLimit72h = val20;
               Assert.Equal(val20, localMWQMAnalysisReportParameter.WetLimit72h);
               int val21 = 45;
               localMWQMAnalysisReportParameter.WetLimit96h = val21;
               Assert.Equal(val21, localMWQMAnalysisReportParameter.WetLimit96h);
               string val22 = "Some text";
               localMWQMAnalysisReportParameter.RunsToOmit = val22;
               Assert.Equal(val22, localMWQMAnalysisReportParameter.RunsToOmit);
               string val23 = "Some text";
               localMWQMAnalysisReportParameter.ShowDataTypes = val23;
               Assert.Equal(val23, localMWQMAnalysisReportParameter.ShowDataTypes);
               int val24 = 45;
               localMWQMAnalysisReportParameter.ExcelTVFileTVItemID = val24;
               Assert.Equal(val24, localMWQMAnalysisReportParameter.ExcelTVFileTVItemID);
               AnalysisReportExportCommandEnum val25 = (AnalysisReportExportCommandEnum)3;
               localMWQMAnalysisReportParameter.Command = val25;
               Assert.Equal(val25, localMWQMAnalysisReportParameter.Command);
               DateTime val26 = new DateTime(2010, 3, 4);
               localMWQMAnalysisReportParameter.LastUpdateDate_UTC = val26;
               Assert.Equal(val26, localMWQMAnalysisReportParameter.LastUpdateDate_UTC);
               int val27 = 45;
               localMWQMAnalysisReportParameter.LastUpdateContactTVItemID = val27;
               Assert.Equal(val27, localMWQMAnalysisReportParameter.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
