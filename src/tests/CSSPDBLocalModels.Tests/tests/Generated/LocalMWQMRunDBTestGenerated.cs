/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalMWQMRunTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalMWQMRun localMWQMRun { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMRunTest()
        {
            localMWQMRun = new LocalMWQMRun();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalMWQMRun_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "MWQMRunID", "SubsectorTVItemID", "MWQMRunTVItemID", "RunSampleType", "DateTime_Local", "RunNumber", "StartDateTime_Local", "EndDateTime_Local", "LabReceivedDateTime_Local", "TemperatureControl1_C", "TemperatureControl2_C", "SeaStateAtStart_BeaufortScale", "SeaStateAtEnd_BeaufortScale", "WaterLevelAtBrook_m", "WaveHightAtStart_m", "WaveHightAtEnd_m", "SampleCrewInitials", "AnalyzeMethod", "SampleMatrix", "Laboratory", "SampleStatus", "LabSampleApprovalContactTVItemID", "LabAnalyzeBath1IncubationStartDateTime_Local", "LabAnalyzeBath2IncubationStartDateTime_Local", "LabAnalyzeBath3IncubationStartDateTime_Local", "LabRunSampleApprovalDateTime_Local", "Tide_Start", "Tide_End", "RainDay0_mm", "RainDay1_mm", "RainDay2_mm", "RainDay3_mm", "RainDay4_mm", "RainDay5_mm", "RainDay6_mm", "RainDay7_mm", "RainDay8_mm", "RainDay9_mm", "RainDay10_mm", "RemoveFromStat", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMRun).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalMWQMRun_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMRun).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalMWQMRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalMWQMRun_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localMWQMRun.LocalDBCommand = val1;
               Assert.Equal(val1, localMWQMRun.LocalDBCommand);
               int val2 = 45;
               localMWQMRun.MWQMRunID = val2;
               Assert.Equal(val2, localMWQMRun.MWQMRunID);
               int val3 = 45;
               localMWQMRun.SubsectorTVItemID = val3;
               Assert.Equal(val3, localMWQMRun.SubsectorTVItemID);
               int val4 = 45;
               localMWQMRun.MWQMRunTVItemID = val4;
               Assert.Equal(val4, localMWQMRun.MWQMRunTVItemID);
               SampleTypeEnum val5 = (SampleTypeEnum)3;
               localMWQMRun.RunSampleType = val5;
               Assert.Equal(val5, localMWQMRun.RunSampleType);
               DateTime val6 = new DateTime(2010, 3, 4);
               localMWQMRun.DateTime_Local = val6;
               Assert.Equal(val6, localMWQMRun.DateTime_Local);
               int val7 = 45;
               localMWQMRun.RunNumber = val7;
               Assert.Equal(val7, localMWQMRun.RunNumber);
               DateTime val8 = new DateTime(2010, 3, 4);
               localMWQMRun.StartDateTime_Local = val8;
               Assert.Equal(val8, localMWQMRun.StartDateTime_Local);
               DateTime val9 = new DateTime(2010, 3, 4);
               localMWQMRun.EndDateTime_Local = val9;
               Assert.Equal(val9, localMWQMRun.EndDateTime_Local);
               DateTime val10 = new DateTime(2010, 3, 4);
               localMWQMRun.LabReceivedDateTime_Local = val10;
               Assert.Equal(val10, localMWQMRun.LabReceivedDateTime_Local);
               double val11 = 87.9D;
               localMWQMRun.TemperatureControl1_C = val11;
               Assert.Equal(val11, localMWQMRun.TemperatureControl1_C);
               double val12 = 87.9D;
               localMWQMRun.TemperatureControl2_C = val12;
               Assert.Equal(val12, localMWQMRun.TemperatureControl2_C);
               BeaufortScaleEnum val13 = (BeaufortScaleEnum)3;
               localMWQMRun.SeaStateAtStart_BeaufortScale = val13;
               Assert.Equal(val13, localMWQMRun.SeaStateAtStart_BeaufortScale);
               BeaufortScaleEnum val14 = (BeaufortScaleEnum)3;
               localMWQMRun.SeaStateAtEnd_BeaufortScale = val14;
               Assert.Equal(val14, localMWQMRun.SeaStateAtEnd_BeaufortScale);
               double val15 = 87.9D;
               localMWQMRun.WaterLevelAtBrook_m = val15;
               Assert.Equal(val15, localMWQMRun.WaterLevelAtBrook_m);
               double val16 = 87.9D;
               localMWQMRun.WaveHightAtStart_m = val16;
               Assert.Equal(val16, localMWQMRun.WaveHightAtStart_m);
               double val17 = 87.9D;
               localMWQMRun.WaveHightAtEnd_m = val17;
               Assert.Equal(val17, localMWQMRun.WaveHightAtEnd_m);
               string val18 = "Some text";
               localMWQMRun.SampleCrewInitials = val18;
               Assert.Equal(val18, localMWQMRun.SampleCrewInitials);
               AnalyzeMethodEnum val19 = (AnalyzeMethodEnum)3;
               localMWQMRun.AnalyzeMethod = val19;
               Assert.Equal(val19, localMWQMRun.AnalyzeMethod);
               SampleMatrixEnum val20 = (SampleMatrixEnum)3;
               localMWQMRun.SampleMatrix = val20;
               Assert.Equal(val20, localMWQMRun.SampleMatrix);
               LaboratoryEnum val21 = (LaboratoryEnum)3;
               localMWQMRun.Laboratory = val21;
               Assert.Equal(val21, localMWQMRun.Laboratory);
               SampleStatusEnum val22 = (SampleStatusEnum)3;
               localMWQMRun.SampleStatus = val22;
               Assert.Equal(val22, localMWQMRun.SampleStatus);
               int val23 = 45;
               localMWQMRun.LabSampleApprovalContactTVItemID = val23;
               Assert.Equal(val23, localMWQMRun.LabSampleApprovalContactTVItemID);
               DateTime val24 = new DateTime(2010, 3, 4);
               localMWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local = val24;
               Assert.Equal(val24, localMWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local);
               DateTime val25 = new DateTime(2010, 3, 4);
               localMWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local = val25;
               Assert.Equal(val25, localMWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local);
               DateTime val26 = new DateTime(2010, 3, 4);
               localMWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local = val26;
               Assert.Equal(val26, localMWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local);
               DateTime val27 = new DateTime(2010, 3, 4);
               localMWQMRun.LabRunSampleApprovalDateTime_Local = val27;
               Assert.Equal(val27, localMWQMRun.LabRunSampleApprovalDateTime_Local);
               TideTextEnum val28 = (TideTextEnum)3;
               localMWQMRun.Tide_Start = val28;
               Assert.Equal(val28, localMWQMRun.Tide_Start);
               TideTextEnum val29 = (TideTextEnum)3;
               localMWQMRun.Tide_End = val29;
               Assert.Equal(val29, localMWQMRun.Tide_End);
               double val30 = 87.9D;
               localMWQMRun.RainDay0_mm = val30;
               Assert.Equal(val30, localMWQMRun.RainDay0_mm);
               double val31 = 87.9D;
               localMWQMRun.RainDay1_mm = val31;
               Assert.Equal(val31, localMWQMRun.RainDay1_mm);
               double val32 = 87.9D;
               localMWQMRun.RainDay2_mm = val32;
               Assert.Equal(val32, localMWQMRun.RainDay2_mm);
               double val33 = 87.9D;
               localMWQMRun.RainDay3_mm = val33;
               Assert.Equal(val33, localMWQMRun.RainDay3_mm);
               double val34 = 87.9D;
               localMWQMRun.RainDay4_mm = val34;
               Assert.Equal(val34, localMWQMRun.RainDay4_mm);
               double val35 = 87.9D;
               localMWQMRun.RainDay5_mm = val35;
               Assert.Equal(val35, localMWQMRun.RainDay5_mm);
               double val36 = 87.9D;
               localMWQMRun.RainDay6_mm = val36;
               Assert.Equal(val36, localMWQMRun.RainDay6_mm);
               double val37 = 87.9D;
               localMWQMRun.RainDay7_mm = val37;
               Assert.Equal(val37, localMWQMRun.RainDay7_mm);
               double val38 = 87.9D;
               localMWQMRun.RainDay8_mm = val38;
               Assert.Equal(val38, localMWQMRun.RainDay8_mm);
               double val39 = 87.9D;
               localMWQMRun.RainDay9_mm = val39;
               Assert.Equal(val39, localMWQMRun.RainDay9_mm);
               double val40 = 87.9D;
               localMWQMRun.RainDay10_mm = val40;
               Assert.Equal(val40, localMWQMRun.RainDay10_mm);
               bool val41 = true;
               localMWQMRun.RemoveFromStat = val41;
               Assert.Equal(val41, localMWQMRun.RemoveFromStat);
               DateTime val42 = new DateTime(2010, 3, 4);
               localMWQMRun.LastUpdateDate_UTC = val42;
               Assert.Equal(val42, localMWQMRun.LastUpdateDate_UTC);
               int val43 = 45;
               localMWQMRun.LastUpdateContactTVItemID = val43;
               Assert.Equal(val43, localMWQMRun.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
