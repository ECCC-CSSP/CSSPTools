/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalPolSourceGroupingLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceGroupingLanguageTest()
        {
            localPolSourceGroupingLanguage = new LocalPolSourceGroupingLanguage();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalPolSourceGroupingLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "PolSourceGroupingLanguageID", "PolSourceGroupingID", "Language", "SourceName", "SourceNameOrder", "TranslationStatusSourceName", "Init", "TranslationStatusInit", "Description", "TranslationStatusDescription", "Report", "TranslationStatusReport", "Text", "TranslationStatusText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalPolSourceGroupingLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalPolSourceGroupingLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalPolSourceGroupingLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalPolSourceGroupingLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalPolSourceGroupingLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalPolSourceGroupingLanguage_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localPolSourceGroupingLanguage.LocalDBCommand = val1;
               Assert.Equal(val1, localPolSourceGroupingLanguage.LocalDBCommand);
               int val2 = 45;
               localPolSourceGroupingLanguage.PolSourceGroupingLanguageID = val2;
               Assert.Equal(val2, localPolSourceGroupingLanguage.PolSourceGroupingLanguageID);
               int val3 = 45;
               localPolSourceGroupingLanguage.PolSourceGroupingID = val3;
               Assert.Equal(val3, localPolSourceGroupingLanguage.PolSourceGroupingID);
               LanguageEnum val4 = (LanguageEnum)3;
               localPolSourceGroupingLanguage.Language = val4;
               Assert.Equal(val4, localPolSourceGroupingLanguage.Language);
               string val5 = "Some text";
               localPolSourceGroupingLanguage.SourceName = val5;
               Assert.Equal(val5, localPolSourceGroupingLanguage.SourceName);
               int val6 = 45;
               localPolSourceGroupingLanguage.SourceNameOrder = val6;
               Assert.Equal(val6, localPolSourceGroupingLanguage.SourceNameOrder);
               TranslationStatusEnum val7 = (TranslationStatusEnum)3;
               localPolSourceGroupingLanguage.TranslationStatusSourceName = val7;
               Assert.Equal(val7, localPolSourceGroupingLanguage.TranslationStatusSourceName);
               string val8 = "Some text";
               localPolSourceGroupingLanguage.Init = val8;
               Assert.Equal(val8, localPolSourceGroupingLanguage.Init);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               localPolSourceGroupingLanguage.TranslationStatusInit = val9;
               Assert.Equal(val9, localPolSourceGroupingLanguage.TranslationStatusInit);
               string val10 = "Some text";
               localPolSourceGroupingLanguage.Description = val10;
               Assert.Equal(val10, localPolSourceGroupingLanguage.Description);
               TranslationStatusEnum val11 = (TranslationStatusEnum)3;
               localPolSourceGroupingLanguage.TranslationStatusDescription = val11;
               Assert.Equal(val11, localPolSourceGroupingLanguage.TranslationStatusDescription);
               string val12 = "Some text";
               localPolSourceGroupingLanguage.Report = val12;
               Assert.Equal(val12, localPolSourceGroupingLanguage.Report);
               TranslationStatusEnum val13 = (TranslationStatusEnum)3;
               localPolSourceGroupingLanguage.TranslationStatusReport = val13;
               Assert.Equal(val13, localPolSourceGroupingLanguage.TranslationStatusReport);
               string val14 = "Some text";
               localPolSourceGroupingLanguage.Text = val14;
               Assert.Equal(val14, localPolSourceGroupingLanguage.Text);
               TranslationStatusEnum val15 = (TranslationStatusEnum)3;
               localPolSourceGroupingLanguage.TranslationStatusText = val15;
               Assert.Equal(val15, localPolSourceGroupingLanguage.TranslationStatusText);
               DateTime val16 = new DateTime(2010, 3, 4);
               localPolSourceGroupingLanguage.LastUpdateDate_UTC = val16;
               Assert.Equal(val16, localPolSourceGroupingLanguage.LastUpdateDate_UTC);
               int val17 = 45;
               localPolSourceGroupingLanguage.LastUpdateContactTVItemID = val17;
               Assert.Equal(val17, localPolSourceGroupingLanguage.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
