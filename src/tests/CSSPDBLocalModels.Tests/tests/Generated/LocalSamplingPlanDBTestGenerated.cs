/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalSamplingPlanTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalSamplingPlan localSamplingPlan { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanTest()
        {
            localSamplingPlan = new LocalSamplingPlan();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalSamplingPlan_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalSamplingPlan).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalSamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalSamplingPlan_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalSamplingPlan).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalSamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalSamplingPlan_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localSamplingPlan.LocalDBCommand = val1;
               Assert.Equal(val1, localSamplingPlan.LocalDBCommand);
               int val2 = 45;
               localSamplingPlan.SamplingPlanID = val2;
               Assert.Equal(val2, localSamplingPlan.SamplingPlanID);
               bool val3 = true;
               localSamplingPlan.IsActive = val3;
               Assert.Equal(val3, localSamplingPlan.IsActive);
               string val4 = "Some text";
               localSamplingPlan.SamplingPlanName = val4;
               Assert.Equal(val4, localSamplingPlan.SamplingPlanName);
               string val5 = "Some text";
               localSamplingPlan.ForGroupName = val5;
               Assert.Equal(val5, localSamplingPlan.ForGroupName);
               SampleTypeEnum val6 = (SampleTypeEnum)3;
               localSamplingPlan.SampleType = val6;
               Assert.Equal(val6, localSamplingPlan.SampleType);
               SamplingPlanTypeEnum val7 = (SamplingPlanTypeEnum)3;
               localSamplingPlan.SamplingPlanType = val7;
               Assert.Equal(val7, localSamplingPlan.SamplingPlanType);
               LabSheetTypeEnum val8 = (LabSheetTypeEnum)3;
               localSamplingPlan.LabSheetType = val8;
               Assert.Equal(val8, localSamplingPlan.LabSheetType);
               int val9 = 45;
               localSamplingPlan.ProvinceTVItemID = val9;
               Assert.Equal(val9, localSamplingPlan.ProvinceTVItemID);
               int val10 = 45;
               localSamplingPlan.CreatorTVItemID = val10;
               Assert.Equal(val10, localSamplingPlan.CreatorTVItemID);
               int val11 = 45;
               localSamplingPlan.Year = val11;
               Assert.Equal(val11, localSamplingPlan.Year);
               string val12 = "Some text";
               localSamplingPlan.AccessCode = val12;
               Assert.Equal(val12, localSamplingPlan.AccessCode);
               double val13 = 87.9D;
               localSamplingPlan.DailyDuplicatePrecisionCriteria = val13;
               Assert.Equal(val13, localSamplingPlan.DailyDuplicatePrecisionCriteria);
               double val14 = 87.9D;
               localSamplingPlan.IntertechDuplicatePrecisionCriteria = val14;
               Assert.Equal(val14, localSamplingPlan.IntertechDuplicatePrecisionCriteria);
               bool val15 = true;
               localSamplingPlan.IncludeLaboratoryQAQC = val15;
               Assert.Equal(val15, localSamplingPlan.IncludeLaboratoryQAQC);
               string val16 = "Some text";
               localSamplingPlan.ApprovalCode = val16;
               Assert.Equal(val16, localSamplingPlan.ApprovalCode);
               int val17 = 45;
               localSamplingPlan.SamplingPlanFileTVItemID = val17;
               Assert.Equal(val17, localSamplingPlan.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val18 = (AnalyzeMethodEnum)3;
               localSamplingPlan.AnalyzeMethodDefault = val18;
               Assert.Equal(val18, localSamplingPlan.AnalyzeMethodDefault);
               SampleMatrixEnum val19 = (SampleMatrixEnum)3;
               localSamplingPlan.SampleMatrixDefault = val19;
               Assert.Equal(val19, localSamplingPlan.SampleMatrixDefault);
               LaboratoryEnum val20 = (LaboratoryEnum)3;
               localSamplingPlan.LaboratoryDefault = val20;
               Assert.Equal(val20, localSamplingPlan.LaboratoryDefault);
               string val21 = "Some text";
               localSamplingPlan.BackupDirectory = val21;
               Assert.Equal(val21, localSamplingPlan.BackupDirectory);
               DateTime val22 = new DateTime(2010, 3, 4);
               localSamplingPlan.LastUpdateDate_UTC = val22;
               Assert.Equal(val22, localSamplingPlan.LastUpdateDate_UTC);
               int val23 = 45;
               localSamplingPlan.LastUpdateContactTVItemID = val23;
               Assert.Equal(val23, localSamplingPlan.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
