/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalTideDataValueTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalTideDataValue localTideDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideDataValueTest()
        {
            localTideDataValue = new LocalTideDataValue();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalTideDataValue_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "TideDataValueID", "TideSiteTVItemID", "DateTime_Local", "Keep", "TideDataType", "StorageDataType", "Depth_m", "UVelocity_m_s", "VVelocity_m_s", "TideStart", "TideEnd", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalTideDataValue).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalTideDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalTideDataValue_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalTideDataValue).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalTideDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalTideDataValue_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localTideDataValue.LocalDBCommand = val1;
               Assert.Equal(val1, localTideDataValue.LocalDBCommand);
               int val2 = 45;
               localTideDataValue.TideDataValueID = val2;
               Assert.Equal(val2, localTideDataValue.TideDataValueID);
               int val3 = 45;
               localTideDataValue.TideSiteTVItemID = val3;
               Assert.Equal(val3, localTideDataValue.TideSiteTVItemID);
               DateTime val4 = new DateTime(2010, 3, 4);
               localTideDataValue.DateTime_Local = val4;
               Assert.Equal(val4, localTideDataValue.DateTime_Local);
               bool val5 = true;
               localTideDataValue.Keep = val5;
               Assert.Equal(val5, localTideDataValue.Keep);
               TideDataTypeEnum val6 = (TideDataTypeEnum)3;
               localTideDataValue.TideDataType = val6;
               Assert.Equal(val6, localTideDataValue.TideDataType);
               StorageDataTypeEnum val7 = (StorageDataTypeEnum)3;
               localTideDataValue.StorageDataType = val7;
               Assert.Equal(val7, localTideDataValue.StorageDataType);
               double val8 = 87.9D;
               localTideDataValue.Depth_m = val8;
               Assert.Equal(val8, localTideDataValue.Depth_m);
               double val9 = 87.9D;
               localTideDataValue.UVelocity_m_s = val9;
               Assert.Equal(val9, localTideDataValue.UVelocity_m_s);
               double val10 = 87.9D;
               localTideDataValue.VVelocity_m_s = val10;
               Assert.Equal(val10, localTideDataValue.VVelocity_m_s);
               TideTextEnum val11 = (TideTextEnum)3;
               localTideDataValue.TideStart = val11;
               Assert.Equal(val11, localTideDataValue.TideStart);
               TideTextEnum val12 = (TideTextEnum)3;
               localTideDataValue.TideEnd = val12;
               Assert.Equal(val12, localTideDataValue.TideEnd);
               DateTime val13 = new DateTime(2010, 3, 4);
               localTideDataValue.LastUpdateDate_UTC = val13;
               Assert.Equal(val13, localTideDataValue.LastUpdateDate_UTC);
               int val14 = 45;
               localTideDataValue.LastUpdateContactTVItemID = val14;
               Assert.Equal(val14, localTideDataValue.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
