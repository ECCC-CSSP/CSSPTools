/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBLocalModels.Tests
{
    public partial class LocalVPAmbientTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LocalVPAmbient localVPAmbient { get; set; }
        #endregion Properties

        #region Constructors
        public LocalVPAmbientTest()
        {
            localVPAmbient = new LocalVPAmbient();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LocalVPAmbient_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LocalDBCommand", "VPAmbientID", "VPScenarioID", "Row", "MeasurementDepth_m", "CurrentSpeed_m_s", "CurrentDirection_deg", "AmbientSalinity_PSU", "AmbientTemperature_C", "BackgroundConcentration_MPN_100ml", "PollutantDecayRate_per_day", "FarFieldCurrentSpeed_m_s", "FarFieldCurrentDirection_deg", "FarFieldDiffusionCoefficient", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalVPAmbient).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalVPAmbient).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LocalVPAmbient_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalVPAmbient).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LocalVPAmbient).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LocalVPAmbient_Every_Property_Has_Get_Set_Test()
        {
               LocalDBCommandEnum val1 = (LocalDBCommandEnum)3;
               localVPAmbient.LocalDBCommand = val1;
               Assert.Equal(val1, localVPAmbient.LocalDBCommand);
               int val2 = 45;
               localVPAmbient.VPAmbientID = val2;
               Assert.Equal(val2, localVPAmbient.VPAmbientID);
               int val3 = 45;
               localVPAmbient.VPScenarioID = val3;
               Assert.Equal(val3, localVPAmbient.VPScenarioID);
               int val4 = 45;
               localVPAmbient.Row = val4;
               Assert.Equal(val4, localVPAmbient.Row);
               double val5 = 87.9D;
               localVPAmbient.MeasurementDepth_m = val5;
               Assert.Equal(val5, localVPAmbient.MeasurementDepth_m);
               double val6 = 87.9D;
               localVPAmbient.CurrentSpeed_m_s = val6;
               Assert.Equal(val6, localVPAmbient.CurrentSpeed_m_s);
               double val7 = 87.9D;
               localVPAmbient.CurrentDirection_deg = val7;
               Assert.Equal(val7, localVPAmbient.CurrentDirection_deg);
               double val8 = 87.9D;
               localVPAmbient.AmbientSalinity_PSU = val8;
               Assert.Equal(val8, localVPAmbient.AmbientSalinity_PSU);
               double val9 = 87.9D;
               localVPAmbient.AmbientTemperature_C = val9;
               Assert.Equal(val9, localVPAmbient.AmbientTemperature_C);
               int val10 = 45;
               localVPAmbient.BackgroundConcentration_MPN_100ml = val10;
               Assert.Equal(val10, localVPAmbient.BackgroundConcentration_MPN_100ml);
               double val11 = 87.9D;
               localVPAmbient.PollutantDecayRate_per_day = val11;
               Assert.Equal(val11, localVPAmbient.PollutantDecayRate_per_day);
               double val12 = 87.9D;
               localVPAmbient.FarFieldCurrentSpeed_m_s = val12;
               Assert.Equal(val12, localVPAmbient.FarFieldCurrentSpeed_m_s);
               double val13 = 87.9D;
               localVPAmbient.FarFieldCurrentDirection_deg = val13;
               Assert.Equal(val13, localVPAmbient.FarFieldCurrentDirection_deg);
               double val14 = 87.9D;
               localVPAmbient.FarFieldDiffusionCoefficient = val14;
               Assert.Equal(val14, localVPAmbient.FarFieldDiffusionCoefficient);
               DateTime val15 = new DateTime(2010, 3, 4);
               localVPAmbient.LastUpdateDate_UTC = val15;
               Assert.Equal(val15, localVPAmbient.LastUpdateDate_UTC);
               int val16 = 45;
               localVPAmbient.LastUpdateContactTVItemID = val16;
               Assert.Equal(val16, localVPAmbient.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
