/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class ClassificationDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IClassificationDBLocalService ClassificationDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private Classification classification { get; set; }
        #endregion Properties

        #region Constructors
        public ClassificationDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ClassificationDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ClassificationDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            classification = GetFilledRandomClassification("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task Classification_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionClassificationList = await ClassificationDBLocalService.GetClassificationList();
            Assert.Equal(200, ((ObjectResult)actionClassificationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationList.Result).Value);
            List<Classification> classificationList = (List<Classification>)((OkObjectResult)actionClassificationList.Result).Value;

            count = classificationList.Count();

            Classification classification = GetFilledRandomClassification("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // classification.ClassificationID   (Int32)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.ClassificationID = 0;

            var actionClassification = await ClassificationDBLocalService.Put(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.ClassificationID = 10000000;
            actionClassification = await ClassificationDBLocalService.Put(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Classification)]
            // classification.ClassificationTVItemID   (Int32)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.ClassificationTVItemID = 0;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.ClassificationTVItemID = 1;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // classification.ClassificationType   (ClassificationTypeEnum)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.ClassificationType = (ClassificationTypeEnum)1000000;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // classification.Ordinal   (Int32)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.Ordinal = -1;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);
            //Assert.AreEqual(count, classificationService.GetClassificationList().Count());
            classification = null;
            classification = GetFilledRandomClassification("");
            classification.Ordinal = 10001;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);
            //Assert.AreEqual(count, classificationDBLocalService.GetClassificationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // classification.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.LastUpdateDate_UTC = new DateTime();
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);
            classification = null;
            classification = GetFilledRandomClassification("");
            classification.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // classification.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.LastUpdateContactTVItemID = 0;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);

            classification = null;
            classification = GetFilledRandomClassification("");
            classification.LastUpdateContactTVItemID = 1;
            actionClassification = await ClassificationDBLocalService.Post(classification);
            Assert.IsType<BadRequestObjectResult>(actionClassification.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post Classification
            var actionClassificationAdded = await ClassificationDBLocalService.Post(classification);
            Assert.Equal(200, ((ObjectResult)actionClassificationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationAdded.Result).Value);
            Classification classificationAdded = (Classification)((OkObjectResult)actionClassificationAdded.Result).Value;
            Assert.NotNull(classificationAdded);

            // List<Classification>
            var actionClassificationList = await ClassificationDBLocalService.GetClassificationList();
            Assert.Equal(200, ((ObjectResult)actionClassificationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationList.Result).Value);
            List<Classification> classificationList = (List<Classification>)((OkObjectResult)actionClassificationList.Result).Value;

            int count = ((List<Classification>)((OkObjectResult)actionClassificationList.Result).Value).Count();
            Assert.True(count > 0);

            // Get Classification With ClassificationID
            var actionClassificationGet = await ClassificationDBLocalService.GetClassificationWithClassificationID(classificationList[0].ClassificationID);
            Assert.Equal(200, ((ObjectResult)actionClassificationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationGet.Result).Value);
            Classification classificationGet = (Classification)((OkObjectResult)actionClassificationGet.Result).Value;
            Assert.NotNull(classificationGet);
            Assert.Equal(classificationGet.ClassificationID, classificationList[0].ClassificationID);

            // Put Classification
            var actionClassificationUpdated = await ClassificationDBLocalService.Put(classification);
            Assert.Equal(200, ((ObjectResult)actionClassificationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationUpdated.Result).Value);
            Classification classificationUpdated = (Classification)((OkObjectResult)actionClassificationUpdated.Result).Value;
            Assert.NotNull(classificationUpdated);

            // Delete Classification
            var actionClassificationDeleted = await ClassificationDBLocalService.Delete(classification.ClassificationID);
            Assert.Equal(200, ((ObjectResult)actionClassificationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClassificationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionClassificationDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IClassificationDBLocalService, ClassificationDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            ClassificationDBLocalService = Provider.GetService<IClassificationDBLocalService>();
            Assert.NotNull(ClassificationDBLocalService);

            return await Task.FromResult(true);
        }
        private Classification GetFilledRandomClassification(string OmitPropName)
        {
            Classification classification = new Classification();

            if (OmitPropName != "ClassificationTVItemID") classification.ClassificationTVItemID = 13;
            if (OmitPropName != "ClassificationType") classification.ClassificationType = (ClassificationTypeEnum)GetRandomEnumType(typeof(ClassificationTypeEnum));
            if (OmitPropName != "Ordinal") classification.Ordinal = GetRandomInt(0, 10000);
            if (OmitPropName != "LastUpdateDate_UTC") classification.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") classification.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 13, TVLevel = 6, TVPath = "p1p5p6p9p10p12p13", TVType = (TVTypeEnum)79, ParentID = 12, IsActive = true, LastUpdateDate_UTC = new DateTime(2018, 8, 23, 17, 33, 9), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return classification;
        }
        private void CheckClassificationFields(List<Classification> classificationList)
        {
        }

        #endregion Functions private
    }
}
