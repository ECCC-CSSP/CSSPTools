/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class EmailDistributionListContactDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IEmailDistributionListContactDBLocalService EmailDistributionListContactDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private EmailDistributionListContact emailDistributionListContact { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListContactDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContactDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContactDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContact_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionEmailDistributionListContactList = await EmailDistributionListContactDBLocalService.GetEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactList.Result).Value);
            List<EmailDistributionListContact> emailDistributionListContactList = (List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value;

            count = emailDistributionListContactList.Count();

            EmailDistributionListContact emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // emailDistributionListContact.EmailDistributionListContactID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListContactID = 0;

            var actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Put(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListContactID = 10000000;
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Put(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // emailDistributionListContact.EmailDistributionListID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListID = 0;
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.IsCC   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // emailDistributionListContact.Name   (String)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("Name");
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.Name = GetRandomString("", 101);
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            //Assert.AreEqual(count, emailDistributionListContactDBLocalService.GetEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(200)]
            // emailDistributionListContact.Email   (String)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("Email");
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.Email = GetRandomString("", 201);
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            //Assert.AreEqual(count, emailDistributionListContactDBLocalService.GetEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.CMPRainfallSeasonal   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.CMPWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.EmergencyWeather   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.EmergencyWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.ReopeningAllTypes   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // emailDistributionListContact.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateDate_UTC = new DateTime();
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // emailDistributionListContact.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateContactTVItemID = 0;
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateContactTVItemID = 1;
            actionEmailDistributionListContact = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post EmailDistributionListContact
            var actionEmailDistributionListContactAdded = await EmailDistributionListContactDBLocalService.Post(emailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactAdded.Result).Value);
            EmailDistributionListContact emailDistributionListContactAdded = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactAdded.Result).Value;
            Assert.NotNull(emailDistributionListContactAdded);

            // List<EmailDistributionListContact>
            var actionEmailDistributionListContactList = await EmailDistributionListContactDBLocalService.GetEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactList.Result).Value);
            List<EmailDistributionListContact> emailDistributionListContactList = (List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value;

            int count = ((List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value).Count();
            Assert.True(count > 0);

            // Get EmailDistributionListContact With EmailDistributionListContactID
            var actionEmailDistributionListContactGet = await EmailDistributionListContactDBLocalService.GetEmailDistributionListContactWithEmailDistributionListContactID(emailDistributionListContactList[0].EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactGet.Result).Value);
            EmailDistributionListContact emailDistributionListContactGet = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactGet.Result).Value;
            Assert.NotNull(emailDistributionListContactGet);
            Assert.Equal(emailDistributionListContactGet.EmailDistributionListContactID, emailDistributionListContactList[0].EmailDistributionListContactID);

            // Put EmailDistributionListContact
            var actionEmailDistributionListContactUpdated = await EmailDistributionListContactDBLocalService.Put(emailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactUpdated.Result).Value);
            EmailDistributionListContact emailDistributionListContactUpdated = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactUpdated.Result).Value;
            Assert.NotNull(emailDistributionListContactUpdated);

            // Delete EmailDistributionListContact
            var actionEmailDistributionListContactDeleted = await EmailDistributionListContactDBLocalService.Delete(emailDistributionListContact.EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionEmailDistributionListContactDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailDistributionListContactDBLocalService, EmailDistributionListContactDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            EmailDistributionListContactDBLocalService = Provider.GetService<IEmailDistributionListContactDBLocalService>();
            Assert.NotNull(EmailDistributionListContactDBLocalService);

            return await Task.FromResult(true);
        }
        private EmailDistributionListContact GetFilledRandomEmailDistributionListContact(string OmitPropName)
        {
            EmailDistributionListContact emailDistributionListContact = new EmailDistributionListContact();

            if (OmitPropName != "EmailDistributionListID") emailDistributionListContact.EmailDistributionListID = 1;
            if (OmitPropName != "IsCC") emailDistributionListContact.IsCC = true;
            if (OmitPropName != "Name") emailDistributionListContact.Name = GetRandomString("", 5);
            if (OmitPropName != "Email") emailDistributionListContact.Email = GetRandomEmail();
            if (OmitPropName != "CMPRainfallSeasonal") emailDistributionListContact.CMPRainfallSeasonal = true;
            if (OmitPropName != "CMPWastewater") emailDistributionListContact.CMPWastewater = true;
            if (OmitPropName != "EmergencyWeather") emailDistributionListContact.EmergencyWeather = true;
            if (OmitPropName != "EmergencyWastewater") emailDistributionListContact.EmergencyWastewater = true;
            if (OmitPropName != "ReopeningAllTypes") emailDistributionListContact.ReopeningAllTypes = true;
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionListContact.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionListContact.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.EmailDistributionLists.Add(new EmailDistributionList() { EmailDistributionListID = 1, ParentTVItemID = 5, Ordinal = 1, LastUpdateDate_UTC = new DateTime(2017, 6, 14, 18, 7, 57), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return emailDistributionListContact;
        }
        private void CheckEmailDistributionListContactFields(List<EmailDistributionListContact> emailDistributionListContactList)
        {
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListContactList[0].Name));
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListContactList[0].Email));
        }

        #endregion Functions private
    }
}
