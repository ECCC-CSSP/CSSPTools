/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class EmailDistributionListDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IEmailDistributionListDBLocalService EmailDistributionListDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private EmailDistributionList emailDistributionList { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            emailDistributionList = GetFilledRandomEmailDistributionList("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionList_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionEmailDistributionListList = await EmailDistributionListDBLocalService.GetEmailDistributionListList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListList.Result).Value);
            List<EmailDistributionList> emailDistributionListList = (List<EmailDistributionList>)((OkObjectResult)actionEmailDistributionListList.Result).Value;

            count = emailDistributionListList.Count();

            EmailDistributionList emailDistributionList = GetFilledRandomEmailDistributionList("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // emailDistributionList.EmailDistributionListID   (Int32)
            // -----------------------------------

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.EmailDistributionListID = 0;

            var actionEmailDistributionList = await EmailDistributionListDBLocalService.Put(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.EmailDistributionListID = 10000000;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Put(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Country)]
            // emailDistributionList.ParentTVItemID   (Int32)
            // -----------------------------------

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.ParentTVItemID = 0;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.ParentTVItemID = 1;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // emailDistributionList.Ordinal   (Int32)
            // -----------------------------------

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.Ordinal = -1;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);
            //Assert.AreEqual(count, emailDistributionListService.GetEmailDistributionListList().Count());
            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.Ordinal = 1001;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);
            //Assert.AreEqual(count, emailDistributionListDBLocalService.GetEmailDistributionListList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // emailDistributionList.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.LastUpdateDate_UTC = new DateTime();
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);
            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // emailDistributionList.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.LastUpdateContactTVItemID = 0;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);

            emailDistributionList = null;
            emailDistributionList = GetFilledRandomEmailDistributionList("");
            emailDistributionList.LastUpdateContactTVItemID = 1;
            actionEmailDistributionList = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionList.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post EmailDistributionList
            var actionEmailDistributionListAdded = await EmailDistributionListDBLocalService.Post(emailDistributionList);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListAdded.Result).Value);
            EmailDistributionList emailDistributionListAdded = (EmailDistributionList)((OkObjectResult)actionEmailDistributionListAdded.Result).Value;
            Assert.NotNull(emailDistributionListAdded);

            // List<EmailDistributionList>
            var actionEmailDistributionListList = await EmailDistributionListDBLocalService.GetEmailDistributionListList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListList.Result).Value);
            List<EmailDistributionList> emailDistributionListList = (List<EmailDistributionList>)((OkObjectResult)actionEmailDistributionListList.Result).Value;

            int count = ((List<EmailDistributionList>)((OkObjectResult)actionEmailDistributionListList.Result).Value).Count();
            Assert.True(count > 0);

            // List<EmailDistributionList> with skip and take
            var actionEmailDistributionListListSkipAndTake = await EmailDistributionListDBLocalService.GetEmailDistributionListList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListListSkipAndTake.Result).Value);
            List<EmailDistributionList> emailDistributionListListSkipAndTake = (List<EmailDistributionList>)((OkObjectResult)actionEmailDistributionListListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<EmailDistributionList>)((OkObjectResult)actionEmailDistributionListListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(emailDistributionListList[0].EmailDistributionListID == emailDistributionListListSkipAndTake[0].EmailDistributionListID);

            // Get EmailDistributionList With EmailDistributionListID
            var actionEmailDistributionListGet = await EmailDistributionListDBLocalService.GetEmailDistributionListWithEmailDistributionListID(emailDistributionListList[0].EmailDistributionListID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListGet.Result).Value);
            EmailDistributionList emailDistributionListGet = (EmailDistributionList)((OkObjectResult)actionEmailDistributionListGet.Result).Value;
            Assert.NotNull(emailDistributionListGet);
            Assert.Equal(emailDistributionListGet.EmailDistributionListID, emailDistributionListList[0].EmailDistributionListID);

            // Put EmailDistributionList
            var actionEmailDistributionListUpdated = await EmailDistributionListDBLocalService.Put(emailDistributionList);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListUpdated.Result).Value);
            EmailDistributionList emailDistributionListUpdated = (EmailDistributionList)((OkObjectResult)actionEmailDistributionListUpdated.Result).Value;
            Assert.NotNull(emailDistributionListUpdated);

            // Delete EmailDistributionList
            var actionEmailDistributionListDeleted = await EmailDistributionListDBLocalService.Delete(emailDistributionList.EmailDistributionListID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionEmailDistributionListDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailDistributionListDBLocalService, EmailDistributionListDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            EmailDistributionListDBLocalService = Provider.GetService<IEmailDistributionListDBLocalService>();
            Assert.NotNull(EmailDistributionListDBLocalService);

            return await Task.FromResult(true);
        }
        private EmailDistributionList GetFilledRandomEmailDistributionList(string OmitPropName)
        {
            EmailDistributionList emailDistributionList = new EmailDistributionList();

            if (OmitPropName != "ParentTVItemID") emailDistributionList.ParentTVItemID = 5;
            if (OmitPropName != "Ordinal") emailDistributionList.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionList.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionList.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 5, TVLevel = 1, TVPath = "p1p5", TVType = (TVTypeEnum)6, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2017, 8, 8, 16, 36, 15), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return emailDistributionList;
        }
        private void CheckEmailDistributionListFields(List<EmailDistributionList> emailDistributionListList)
        {
        }

        #endregion Functions private
    }
}
