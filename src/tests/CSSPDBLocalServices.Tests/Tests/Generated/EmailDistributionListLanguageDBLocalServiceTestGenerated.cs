/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class EmailDistributionListLanguageDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IEmailDistributionListLanguageDBLocalService EmailDistributionListLanguageDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private EmailDistributionListLanguage emailDistributionListLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListLanguageDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListLanguageDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListLanguageDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionEmailDistributionListLanguageList = await EmailDistributionListLanguageDBLocalService.GetEmailDistributionListLanguageList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value);
            List<EmailDistributionListLanguage> emailDistributionListLanguageList = (List<EmailDistributionListLanguage>)((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value;

            count = emailDistributionListLanguageList.Count();

            EmailDistributionListLanguage emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // emailDistributionListLanguage.EmailDistributionListLanguageID   (Int32)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.EmailDistributionListLanguageID = 0;

            var actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Put(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.EmailDistributionListLanguageID = 10000000;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Put(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // emailDistributionListLanguage.EmailDistributionListID   (Int32)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.EmailDistributionListID = 0;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // emailDistributionListLanguage.Language   (LanguageEnum)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.Language = (LanguageEnum)1000000;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // [CSSPMinLength(1)]
            // emailDistributionListLanguage.EmailListName   (String)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("EmailListName");
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.EmailListName = GetRandomString("", 101);
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);
            //Assert.AreEqual(count, emailDistributionListLanguageDBLocalService.GetEmailDistributionListLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // emailDistributionListLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // emailDistributionListLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.LastUpdateDate_UTC = new DateTime();
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);
            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // emailDistributionListLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.LastUpdateContactTVItemID = 0;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);

            emailDistributionListLanguage = null;
            emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage("");
            emailDistributionListLanguage.LastUpdateContactTVItemID = 1;
            actionEmailDistributionListLanguage = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post EmailDistributionListLanguage
            var actionEmailDistributionListLanguageAdded = await EmailDistributionListLanguageDBLocalService.Post(emailDistributionListLanguage);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageAdded.Result).Value);
            EmailDistributionListLanguage emailDistributionListLanguageAdded = (EmailDistributionListLanguage)((OkObjectResult)actionEmailDistributionListLanguageAdded.Result).Value;
            Assert.NotNull(emailDistributionListLanguageAdded);

            // List<EmailDistributionListLanguage>
            var actionEmailDistributionListLanguageList = await EmailDistributionListLanguageDBLocalService.GetEmailDistributionListLanguageList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value);
            List<EmailDistributionListLanguage> emailDistributionListLanguageList = (List<EmailDistributionListLanguage>)((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value;

            int count = ((List<EmailDistributionListLanguage>)((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // Get EmailDistributionListLanguage With EmailDistributionListLanguageID
            var actionEmailDistributionListLanguageGet = await EmailDistributionListLanguageDBLocalService.GetEmailDistributionListLanguageWithEmailDistributionListLanguageID(emailDistributionListLanguageList[0].EmailDistributionListLanguageID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageGet.Result).Value);
            EmailDistributionListLanguage emailDistributionListLanguageGet = (EmailDistributionListLanguage)((OkObjectResult)actionEmailDistributionListLanguageGet.Result).Value;
            Assert.NotNull(emailDistributionListLanguageGet);
            Assert.Equal(emailDistributionListLanguageGet.EmailDistributionListLanguageID, emailDistributionListLanguageList[0].EmailDistributionListLanguageID);

            // Put EmailDistributionListLanguage
            var actionEmailDistributionListLanguageUpdated = await EmailDistributionListLanguageDBLocalService.Put(emailDistributionListLanguage);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageUpdated.Result).Value);
            EmailDistributionListLanguage emailDistributionListLanguageUpdated = (EmailDistributionListLanguage)((OkObjectResult)actionEmailDistributionListLanguageUpdated.Result).Value;
            Assert.NotNull(emailDistributionListLanguageUpdated);

            // Delete EmailDistributionListLanguage
            var actionEmailDistributionListLanguageDeleted = await EmailDistributionListLanguageDBLocalService.Delete(emailDistributionListLanguage.EmailDistributionListLanguageID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionEmailDistributionListLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailDistributionListLanguageDBLocalService, EmailDistributionListLanguageDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            EmailDistributionListLanguageDBLocalService = Provider.GetService<IEmailDistributionListLanguageDBLocalService>();
            Assert.NotNull(EmailDistributionListLanguageDBLocalService);

            return await Task.FromResult(true);
        }
        private EmailDistributionListLanguage GetFilledRandomEmailDistributionListLanguage(string OmitPropName)
        {
            EmailDistributionListLanguage emailDistributionListLanguage = new EmailDistributionListLanguage();

            if (OmitPropName != "EmailDistributionListID") emailDistributionListLanguage.EmailDistributionListID = 1;
            if (OmitPropName != "Language") emailDistributionListLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "EmailListName") emailDistributionListLanguage.EmailListName = GetRandomString("", 6);
            if (OmitPropName != "TranslationStatus") emailDistributionListLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionListLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionListLanguage.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.EmailDistributionLists.Add(new EmailDistributionList() { EmailDistributionListID = 1, ParentTVItemID = 5, Ordinal = 1, LastUpdateDate_UTC = new DateTime(2017, 6, 14, 18, 7, 57), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return emailDistributionListLanguage;
        }
        private void CheckEmailDistributionListLanguageFields(List<EmailDistributionListLanguage> emailDistributionListLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListLanguageList[0].EmailListName));
        }

        #endregion Functions private
    }
}
