/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class HydrometricDataValueDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IHydrometricDataValueDBLocalService HydrometricDataValueDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private HydrometricDataValue hydrometricDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public HydrometricDataValueDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task HydrometricDataValueDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task HydrometricDataValueDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task HydrometricDataValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionHydrometricDataValueList = await HydrometricDataValueDBLocalService.GetHydrometricDataValueList();
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueList.Result).Value);
            List<HydrometricDataValue> hydrometricDataValueList = (List<HydrometricDataValue>)((OkObjectResult)actionHydrometricDataValueList.Result).Value;

            count = hydrometricDataValueList.Count();

            HydrometricDataValue hydrometricDataValue = GetFilledRandomHydrometricDataValue("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // hydrometricDataValue.HydrometricDataValueID   (Int32)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.HydrometricDataValueID = 0;

            var actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Put(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.HydrometricDataValueID = 10000000;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Put(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "HydrometricSite", ExistPlurial = "s", ExistFieldID = "HydrometricSiteID", AllowableTVtypeList = )]
            // hydrometricDataValue.HydrometricSiteID   (Int32)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.HydrometricSiteID = 0;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // hydrometricDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.DateTime_Local = new DateTime();
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // hydrometricDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // hydrometricDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // hydrometricDataValue.HasBeenRead   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000)]
            // hydrometricDataValue.Discharge_m3_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Discharge_m3_s]

            //CSSPError: Type not implemented [Discharge_m3_s]

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.Discharge_m3_s = -1.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueService.GetHydrometricDataValueList().Count());
            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.Discharge_m3_s = 100001.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueDBLocalService.GetHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000)]
            // hydrometricDataValue.DischargeEntered_m3_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DischargeEntered_m3_s]

            //CSSPError: Type not implemented [DischargeEntered_m3_s]

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.DischargeEntered_m3_s = -1.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueService.GetHydrometricDataValueList().Count());
            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.DischargeEntered_m3_s = 100001.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueDBLocalService.GetHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // hydrometricDataValue.Level_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Level_m]

            //CSSPError: Type not implemented [Level_m]

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.Level_m = -1.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueService.GetHydrometricDataValueList().Count());
            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.Level_m = 10001.0D;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            //Assert.AreEqual(count, hydrometricDataValueDBLocalService.GetHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // hydrometricDataValue.HourlyValues   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // hydrometricDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.LastUpdateDate_UTC = new DateTime();
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);
            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // hydrometricDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.LastUpdateContactTVItemID = 0;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);

            hydrometricDataValue = null;
            hydrometricDataValue = GetFilledRandomHydrometricDataValue("");
            hydrometricDataValue.LastUpdateContactTVItemID = 1;
            actionHydrometricDataValue = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionHydrometricDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post HydrometricDataValue
            var actionHydrometricDataValueAdded = await HydrometricDataValueDBLocalService.Post(hydrometricDataValue);
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueAdded.Result).Value);
            HydrometricDataValue hydrometricDataValueAdded = (HydrometricDataValue)((OkObjectResult)actionHydrometricDataValueAdded.Result).Value;
            Assert.NotNull(hydrometricDataValueAdded);

            // List<HydrometricDataValue>
            var actionHydrometricDataValueList = await HydrometricDataValueDBLocalService.GetHydrometricDataValueList();
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueList.Result).Value);
            List<HydrometricDataValue> hydrometricDataValueList = (List<HydrometricDataValue>)((OkObjectResult)actionHydrometricDataValueList.Result).Value;

            int count = ((List<HydrometricDataValue>)((OkObjectResult)actionHydrometricDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // Get HydrometricDataValue With HydrometricDataValueID
            var actionHydrometricDataValueGet = await HydrometricDataValueDBLocalService.GetHydrometricDataValueWithHydrometricDataValueID(hydrometricDataValueList[0].HydrometricDataValueID);
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueGet.Result).Value);
            HydrometricDataValue hydrometricDataValueGet = (HydrometricDataValue)((OkObjectResult)actionHydrometricDataValueGet.Result).Value;
            Assert.NotNull(hydrometricDataValueGet);
            Assert.Equal(hydrometricDataValueGet.HydrometricDataValueID, hydrometricDataValueList[0].HydrometricDataValueID);

            // Put HydrometricDataValue
            var actionHydrometricDataValueUpdated = await HydrometricDataValueDBLocalService.Put(hydrometricDataValue);
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueUpdated.Result).Value);
            HydrometricDataValue hydrometricDataValueUpdated = (HydrometricDataValue)((OkObjectResult)actionHydrometricDataValueUpdated.Result).Value;
            Assert.NotNull(hydrometricDataValueUpdated);

            // Delete HydrometricDataValue
            var actionHydrometricDataValueDeleted = await HydrometricDataValueDBLocalService.Delete(hydrometricDataValue.HydrometricDataValueID);
            Assert.Equal(200, ((ObjectResult)actionHydrometricDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionHydrometricDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionHydrometricDataValueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IHydrometricDataValueDBLocalService, HydrometricDataValueDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            HydrometricDataValueDBLocalService = Provider.GetService<IHydrometricDataValueDBLocalService>();
            Assert.NotNull(HydrometricDataValueDBLocalService);

            return await Task.FromResult(true);
        }
        private HydrometricDataValue GetFilledRandomHydrometricDataValue(string OmitPropName)
        {
            HydrometricDataValue hydrometricDataValue = new HydrometricDataValue();

            if (OmitPropName != "HydrometricSiteID") hydrometricDataValue.HydrometricSiteID = 1;
            if (OmitPropName != "DateTime_Local") hydrometricDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") hydrometricDataValue.Keep = true;
            if (OmitPropName != "StorageDataType") hydrometricDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "HasBeenRead") hydrometricDataValue.HasBeenRead = true;
            if (OmitPropName != "Discharge_m3_s") hydrometricDataValue.Discharge_m3_s = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "DischargeEntered_m3_s") hydrometricDataValue.DischargeEntered_m3_s = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "Level_m") hydrometricDataValue.Level_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "HourlyValues") hydrometricDataValue.HourlyValues = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") hydrometricDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") hydrometricDataValue.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.HydrometricSites.Add(new HydrometricSite() { HydrometricSiteID = 1, HydrometricSiteTVItemID = 8, FedSiteNumber = "01BL003", QuebecSiteNumber = "null", HydrometricSiteName = "BIG TRACADIE RIVER AT MURCHY BRIDGE CROSSING", Description = "null", Province = "NB", Elevation_m = null, StartDate_Local = new DateTime(1970, 1, 1, 0, 0, 0), EndDate_Local = new DateTime(2028, 12, 31, 0, 0, 0), TimeOffset_hour = -4D, DrainageArea_km2 = 383, IsNatural = true, IsActive = true, Sediment = false, RHBN = false, RealTime = true, HasDischarge = true, HasLevel = true, HasRatingCurve = true, LastUpdateDate_UTC = new DateTime(2018, 9, 13, 16, 56, 10), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return hydrometricDataValue;
        }
        private void CheckHydrometricDataValueFields(List<HydrometricDataValue> hydrometricDataValueList)
        {
            if (hydrometricDataValueList[0].Discharge_m3_s != null)
            {
                Assert.NotNull(hydrometricDataValueList[0].Discharge_m3_s);
            }
            if (hydrometricDataValueList[0].DischargeEntered_m3_s != null)
            {
                Assert.NotNull(hydrometricDataValueList[0].DischargeEntered_m3_s);
            }
            if (hydrometricDataValueList[0].Level_m != null)
            {
                Assert.NotNull(hydrometricDataValueList[0].Level_m);
            }
            if (!string.IsNullOrWhiteSpace(hydrometricDataValueList[0].HourlyValues))
            {
                Assert.False(string.IsNullOrWhiteSpace(hydrometricDataValueList[0].HourlyValues));
            }
        }

        #endregion Functions private
    }
}
