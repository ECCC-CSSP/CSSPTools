/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LabSheetTubeMPNDetailDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILabSheetTubeMPNDetailDBLocalService LabSheetTubeMPNDetailDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private LabSheetTubeMPNDetail labSheetTubeMPNDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetTubeMPNDetailDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LabSheetTubeMPNDetailDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LabSheetTubeMPNDetailDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LabSheetTubeMPNDetail_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLabSheetTubeMPNDetailList = await LabSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList();
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailList.Result).Value);
            List<LabSheetTubeMPNDetail> labSheetTubeMPNDetailList = (List<LabSheetTubeMPNDetail>)((OkObjectResult)actionLabSheetTubeMPNDetailList.Result).Value;

            count = labSheetTubeMPNDetailList.Count();

            LabSheetTubeMPNDetail labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // labSheetTubeMPNDetail.LabSheetTubeMPNDetailID   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LabSheetTubeMPNDetailID = 0;

            var actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Put(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LabSheetTubeMPNDetailID = 10000000;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Put(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "LabSheetDetail", ExistPlurial = "s", ExistFieldID = "LabSheetDetailID", AllowableTVtypeList = )]
            // labSheetTubeMPNDetail.LabSheetDetailID   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LabSheetDetailID = 0;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // labSheetTubeMPNDetail.Ordinal   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Ordinal = -1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Ordinal = 1001;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // labSheetTubeMPNDetail.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.MWQMSiteTVItemID = 0;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.MWQMSiteTVItemID = 1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // labSheetTubeMPNDetail.SampleDateTime   (DateTime)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.SampleDateTime = new DateTime(1979, 1, 1);
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 10000000)]
            // labSheetTubeMPNDetail.MPN   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.MPN = 0;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.MPN = 10000001;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // labSheetTubeMPNDetail.Tube10   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube10 = -1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube10 = 6;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // labSheetTubeMPNDetail.Tube1_0   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube1_0 = -1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube1_0 = 6;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // labSheetTubeMPNDetail.Tube0_1   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube0_1 = -1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Tube0_1 = 6;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 40)]
            // labSheetTubeMPNDetail.Salinity   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Salinity]

            //CSSPError: Type not implemented [Salinity]

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Salinity = -1.0D;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Salinity = 41.0D;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // labSheetTubeMPNDetail.Temperature   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Temperature]

            //CSSPError: Type not implemented [Temperature]

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Temperature = -11.0D;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailService.GetLabSheetTubeMPNDetailList().Count());
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.Temperature = 41.0D;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // labSheetTubeMPNDetail.ProcessedBy   (String)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.ProcessedBy = GetRandomString("", 11);
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // labSheetTubeMPNDetail.SampleType   (SampleTypeEnum)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.SampleType = (SampleTypeEnum)1000000;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // labSheetTubeMPNDetail.SiteComment   (String)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.SiteComment = GetRandomString("", 251);
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, labSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // labSheetTubeMPNDetail.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime();
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);
            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // labSheetTubeMPNDetail.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LastUpdateContactTVItemID = 0;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

            labSheetTubeMPNDetail = null;
            labSheetTubeMPNDetail = GetFilledRandomLabSheetTubeMPNDetail("");
            labSheetTubeMPNDetail.LastUpdateContactTVItemID = 1;
            actionLabSheetTubeMPNDetail = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLabSheetTubeMPNDetail.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LabSheetTubeMPNDetail
            var actionLabSheetTubeMPNDetailAdded = await LabSheetTubeMPNDetailDBLocalService.Post(labSheetTubeMPNDetail);
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailAdded.Result).Value);
            LabSheetTubeMPNDetail labSheetTubeMPNDetailAdded = (LabSheetTubeMPNDetail)((OkObjectResult)actionLabSheetTubeMPNDetailAdded.Result).Value;
            Assert.NotNull(labSheetTubeMPNDetailAdded);

            // List<LabSheetTubeMPNDetail>
            var actionLabSheetTubeMPNDetailList = await LabSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailList();
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailList.Result).Value);
            List<LabSheetTubeMPNDetail> labSheetTubeMPNDetailList = (List<LabSheetTubeMPNDetail>)((OkObjectResult)actionLabSheetTubeMPNDetailList.Result).Value;

            int count = ((List<LabSheetTubeMPNDetail>)((OkObjectResult)actionLabSheetTubeMPNDetailList.Result).Value).Count();
            Assert.True(count > 0);

            // Get LabSheetTubeMPNDetail With LabSheetTubeMPNDetailID
            var actionLabSheetTubeMPNDetailGet = await LabSheetTubeMPNDetailDBLocalService.GetLabSheetTubeMPNDetailWithLabSheetTubeMPNDetailID(labSheetTubeMPNDetailList[0].LabSheetTubeMPNDetailID);
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailGet.Result).Value);
            LabSheetTubeMPNDetail labSheetTubeMPNDetailGet = (LabSheetTubeMPNDetail)((OkObjectResult)actionLabSheetTubeMPNDetailGet.Result).Value;
            Assert.NotNull(labSheetTubeMPNDetailGet);
            Assert.Equal(labSheetTubeMPNDetailGet.LabSheetTubeMPNDetailID, labSheetTubeMPNDetailList[0].LabSheetTubeMPNDetailID);

            // Put LabSheetTubeMPNDetail
            var actionLabSheetTubeMPNDetailUpdated = await LabSheetTubeMPNDetailDBLocalService.Put(labSheetTubeMPNDetail);
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailUpdated.Result).Value);
            LabSheetTubeMPNDetail labSheetTubeMPNDetailUpdated = (LabSheetTubeMPNDetail)((OkObjectResult)actionLabSheetTubeMPNDetailUpdated.Result).Value;
            Assert.NotNull(labSheetTubeMPNDetailUpdated);

            // Delete LabSheetTubeMPNDetail
            var actionLabSheetTubeMPNDetailDeleted = await LabSheetTubeMPNDetailDBLocalService.Delete(labSheetTubeMPNDetail.LabSheetTubeMPNDetailID);
            Assert.Equal(200, ((ObjectResult)actionLabSheetTubeMPNDetailDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLabSheetTubeMPNDetailDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLabSheetTubeMPNDetailDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILabSheetTubeMPNDetailDBLocalService, LabSheetTubeMPNDetailDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            LabSheetTubeMPNDetailDBLocalService = Provider.GetService<ILabSheetTubeMPNDetailDBLocalService>();
            Assert.NotNull(LabSheetTubeMPNDetailDBLocalService);

            return await Task.FromResult(true);
        }
        private LabSheetTubeMPNDetail GetFilledRandomLabSheetTubeMPNDetail(string OmitPropName)
        {
            LabSheetTubeMPNDetail labSheetTubeMPNDetail = new LabSheetTubeMPNDetail();

            if (OmitPropName != "LabSheetDetailID") labSheetTubeMPNDetail.LabSheetDetailID = 1;
            if (OmitPropName != "Ordinal") labSheetTubeMPNDetail.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "MWQMSiteTVItemID") labSheetTubeMPNDetail.MWQMSiteTVItemID = 44;
            if (OmitPropName != "SampleDateTime") labSheetTubeMPNDetail.SampleDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "MPN") labSheetTubeMPNDetail.MPN = GetRandomInt(1, 10000000);
            if (OmitPropName != "Tube10") labSheetTubeMPNDetail.Tube10 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube1_0") labSheetTubeMPNDetail.Tube1_0 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube0_1") labSheetTubeMPNDetail.Tube0_1 = GetRandomInt(0, 5);
            if (OmitPropName != "Salinity") labSheetTubeMPNDetail.Salinity = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "Temperature") labSheetTubeMPNDetail.Temperature = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "ProcessedBy") labSheetTubeMPNDetail.ProcessedBy = GetRandomString("", 5);
            if (OmitPropName != "SampleType") labSheetTubeMPNDetail.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "SiteComment") labSheetTubeMPNDetail.SiteComment = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") labSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") labSheetTubeMPNDetail.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.LabSheetDetails.Add(new LabSheetDetail() { LabSheetDetailID = 1, LabSheetID = 1, SamplingPlanID = 1, SubsectorTVItemID = 12, Version = 1, RunDate = new DateTime(2017, 6, 21, 0, 0, 0), Tides = @"HT / HF", SampleCrewInitials = "", WaterBathCount = null, IncubationBath1StartTime = null, IncubationBath2StartTime = null, IncubationBath3StartTime = null, IncubationBath1EndTime = null, IncubationBath2EndTime = null, IncubationBath3EndTime = null, IncubationBath1TimeCalculated_minutes = null, IncubationBath2TimeCalculated_minutes = null, IncubationBath3TimeCalculated_minutes = null, WaterBath1 = "", WaterBath2 = "", WaterBath3 = "", TCField1 = null, TCLab1 = null, TCField2 = null, TCLab2 = null, TCFirst = null, TCAverage = null, ControlLot = "null", Positive35 = "null", NonTarget35 = "null", Negative35 = "null", Bath1Positive44_5 = "null", Bath2Positive44_5 = "null", Bath3Positive44_5 = "null", Bath1NonTarget44_5 = "null", Bath2NonTarget44_5 = "null", Bath3NonTarget44_5 = "null", Bath1Negative44_5 = "null", Bath2Negative44_5 = "null", Bath3Negative44_5 = "null", Blank35 = null, Bath1Blank44_5 = "null", Bath2Blank44_5 = "null", Bath3Blank44_5 = "null", Lot35 = "null", Lot44_5 = "null", Weather = "null", RunComment = "null", RunWeatherComment = "null", SampleBottleLotNumber = "null", SalinitiesReadBy = "null", SalinitiesReadDate = null, ResultsReadBy = "null", ResultsReadDate = null, ResultsRecordedBy = "null", ResultsRecordedDate = null, DailyDuplicateRLog = null, DailyDuplicatePrecisionCriteria = null, DailyDuplicateAcceptable = null, IntertechDuplicateRLog = null, IntertechDuplicatePrecisionCriteria = null, IntertechDuplicateAcceptable = null, IntertechReadAcceptable = null, LastUpdateDate_UTC = new DateTime(2017, 6, 26, 18, 38, 21), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 44, TVLevel = 6, TVPath = "p1p5p6p9p10p12p44", TVType = (TVTypeEnum)16, ParentID = 12, IsActive = true, LastUpdateDate_UTC = new DateTime(2017, 10, 12, 17, 39, 34), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return labSheetTubeMPNDetail;
        }
        private void CheckLabSheetTubeMPNDetailFields(List<LabSheetTubeMPNDetail> labSheetTubeMPNDetailList)
        {
            if (labSheetTubeMPNDetailList[0].SampleDateTime != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].SampleDateTime);
            }
            if (labSheetTubeMPNDetailList[0].MPN != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].MPN);
            }
            if (labSheetTubeMPNDetailList[0].Tube10 != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].Tube10);
            }
            if (labSheetTubeMPNDetailList[0].Tube1_0 != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].Tube1_0);
            }
            if (labSheetTubeMPNDetailList[0].Tube0_1 != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].Tube0_1);
            }
            if (labSheetTubeMPNDetailList[0].Salinity != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].Salinity);
            }
            if (labSheetTubeMPNDetailList[0].Temperature != null)
            {
                Assert.NotNull(labSheetTubeMPNDetailList[0].Temperature);
            }
            if (!string.IsNullOrWhiteSpace(labSheetTubeMPNDetailList[0].ProcessedBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetTubeMPNDetailList[0].ProcessedBy));
            }
            if (!string.IsNullOrWhiteSpace(labSheetTubeMPNDetailList[0].SiteComment))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetTubeMPNDetailList[0].SiteComment));
            }
        }

        #endregion Functions private
    }
}
