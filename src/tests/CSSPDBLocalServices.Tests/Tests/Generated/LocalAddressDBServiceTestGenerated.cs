/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalAddressDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalAddressDBService LocalAddressDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalAddress localAddress { get; set; }
        #endregion Properties

        #region Constructors
        public LocalAddressDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAddressDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAddressDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localAddress = GetFilledRandomLocalAddress("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAddress_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalAddressList = await LocalAddressDBService.GetLocalAddressList();
            Assert.Equal(200, ((ObjectResult)actionLocalAddressList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressList.Result).Value);
            List<LocalAddress> localAddressList = (List<LocalAddress>)((OkObjectResult)actionLocalAddressList.Result).Value;

            count = localAddressList.Count();

            LocalAddress localAddress = GetFilledRandomLocalAddress("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAddress.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localAddress.AddressID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.AddressID = 0;

            actionLocalAddress = await LocalAddressDBService.Put(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.AddressID = 10000000;
            actionLocalAddress = await LocalAddressDBService.Put(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Address)]
            // localAddress.AddressTVItemID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.AddressTVItemID = 0;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.AddressTVItemID = 1;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAddress.AddressType   (AddressTypeEnum)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.AddressType = (AddressTypeEnum)1000000;
             actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Country)]
            // localAddress.CountryTVItemID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.CountryTVItemID = 0;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.CountryTVItemID = 1;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Province)]
            // localAddress.ProvinceTVItemID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.ProvinceTVItemID = 0;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.ProvinceTVItemID = 1;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Municipality)]
            // localAddress.MunicipalityTVItemID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.MunicipalityTVItemID = 0;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.MunicipalityTVItemID = 1;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(200)]
            // localAddress.StreetName   (String)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.StreetName = GetRandomString("", 201);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(50)]
            // localAddress.StreetNumber   (String)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.StreetNumber = GetRandomString("", 51);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localAddress.StreetType   (StreetTypeEnum)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.StreetType = (StreetTypeEnum)1000000;
             actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(11)]
            // [CSSPMinLength(6)]
            // localAddress.PostalCode   (String)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.PostalCode = GetRandomString("", 5);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());
            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.PostalCode = GetRandomString("", 12);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(200)]
            // [CSSPMinLength(10)]
            // localAddress.GoogleAddressText   (String)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.GoogleAddressText = GetRandomString("", 9);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());
            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.GoogleAddressText = GetRandomString("", 201);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            //Assert.AreEqual(count, localAddressDBService.GetLocalAddressList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localAddress.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.LastUpdateDate_UTC = new DateTime();
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);
            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localAddress.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.LastUpdateContactTVItemID = 0;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

            localAddress = null;
            localAddress = GetFilledRandomLocalAddress("");
            localAddress.LastUpdateContactTVItemID = 1;
            actionLocalAddress = await LocalAddressDBService.Post(localAddress);
            Assert.IsType<BadRequestObjectResult>(actionLocalAddress.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalAddress
            var actionLocalAddressAdded = await LocalAddressDBService.Post(localAddress);
            Assert.Equal(200, ((ObjectResult)actionLocalAddressAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressAdded.Result).Value);
            LocalAddress localAddressAdded = (LocalAddress)((OkObjectResult)actionLocalAddressAdded.Result).Value;
            Assert.NotNull(localAddressAdded);

            // List<LocalAddress>
            var actionLocalAddressList = await LocalAddressDBService.GetLocalAddressList();
            Assert.Equal(200, ((ObjectResult)actionLocalAddressList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressList.Result).Value);
            List<LocalAddress> localAddressList = (List<LocalAddress>)((OkObjectResult)actionLocalAddressList.Result).Value;

            int count = ((List<LocalAddress>)((OkObjectResult)actionLocalAddressList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalAddress> with skip and take
            var actionLocalAddressListSkipAndTake = await LocalAddressDBService.GetLocalAddressList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalAddressListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressListSkipAndTake.Result).Value);
            List<LocalAddress> localAddressListSkipAndTake = (List<LocalAddress>)((OkObjectResult)actionLocalAddressListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalAddress>)((OkObjectResult)actionLocalAddressListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localAddressList[0].AddressID == localAddressListSkipAndTake[0].AddressID);

            // Get LocalAddress With AddressID
            var actionLocalAddressGet = await LocalAddressDBService.GetLocalAddressWithAddressID(localAddressList[0].AddressID);
            Assert.Equal(200, ((ObjectResult)actionLocalAddressGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressGet.Result).Value);
            LocalAddress localAddressGet = (LocalAddress)((OkObjectResult)actionLocalAddressGet.Result).Value;
            Assert.NotNull(localAddressGet);
            Assert.Equal(localAddressGet.AddressID, localAddressList[0].AddressID);

            // Put LocalAddress
            var actionLocalAddressUpdated = await LocalAddressDBService.Put(localAddress);
            Assert.Equal(200, ((ObjectResult)actionLocalAddressUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressUpdated.Result).Value);
            LocalAddress localAddressUpdated = (LocalAddress)((OkObjectResult)actionLocalAddressUpdated.Result).Value;
            Assert.NotNull(localAddressUpdated);

            // Delete LocalAddress
            var actionLocalAddressDeleted = await LocalAddressDBService.Delete(localAddress.AddressID);
            Assert.Equal(200, ((ObjectResult)actionLocalAddressDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAddressDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalAddressDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalAddressDBService, LocalAddressDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalAddressDBService = Provider.GetService<ILocalAddressDBService>();
            Assert.NotNull(LocalAddressDBService);

            return await Task.FromResult(true);
        }
        private LocalAddress GetFilledRandomLocalAddress(string OmitPropName)
        {
            LocalAddress localAddress = new LocalAddress();

            if (OmitPropName != "LocalDBCommand") localAddress.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "AddressTVItemID") localAddress.AddressTVItemID = 46;
            if (OmitPropName != "AddressType") localAddress.AddressType = (AddressTypeEnum)GetRandomEnumType(typeof(AddressTypeEnum));
            if (OmitPropName != "CountryTVItemID") localAddress.CountryTVItemID = 5;
            if (OmitPropName != "ProvinceTVItemID") localAddress.ProvinceTVItemID = 6;
            if (OmitPropName != "MunicipalityTVItemID") localAddress.MunicipalityTVItemID = 39;
            if (OmitPropName != "StreetName") localAddress.StreetName = GetRandomString("", 5);
            if (OmitPropName != "StreetNumber") localAddress.StreetNumber = GetRandomString("", 5);
            if (OmitPropName != "StreetType") localAddress.StreetType = (StreetTypeEnum)GetRandomEnumType(typeof(StreetTypeEnum));
            if (OmitPropName != "PostalCode") localAddress.PostalCode = GetRandomString("", 11);
            if (OmitPropName != "GoogleAddressText") localAddress.GoogleAddressText = GetRandomString("", 15);
            if (OmitPropName != "LastUpdateDate_UTC") localAddress.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localAddress.LastUpdateContactTVItemID = 2;



            return localAddress;
        }
        private void CheckLocalAddressFields(List<LocalAddress> localAddressList)
        {
            if (!string.IsNullOrWhiteSpace(localAddressList[0].StreetName))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAddressList[0].StreetName));
            }
            if (!string.IsNullOrWhiteSpace(localAddressList[0].StreetNumber))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAddressList[0].StreetNumber));
            }
            if (localAddressList[0].StreetType != null)
            {
                Assert.NotNull(localAddressList[0].StreetType);
            }
            if (!string.IsNullOrWhiteSpace(localAddressList[0].PostalCode))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAddressList[0].PostalCode));
            }
            if (!string.IsNullOrWhiteSpace(localAddressList[0].GoogleAddressText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAddressList[0].GoogleAddressText));
            }
        }

        #endregion Functions private
    }
}
