/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalAppTaskDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalAppTaskDBService LocalAppTaskDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalAppTask localAppTask { get; set; }
        #endregion Properties

        #region Constructors
        public LocalAppTaskDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTaskDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTaskDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localAppTask = GetFilledRandomLocalAppTask("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTask_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalAppTaskList = await LocalAppTaskDBService.GetLocalAppTaskList();
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskList.Result).Value);
            List<LocalAppTask> localAppTaskList = (List<LocalAppTask>)((OkObjectResult)actionLocalAppTaskList.Result).Value;

            count = localAppTaskList.Count();

            LocalAppTask localAppTask = GetFilledRandomLocalAppTask("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTask.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localAppTask.AppTaskID   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.AppTaskID = 0;

            actionLocalAppTask = await LocalAppTaskDBService.Put(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.AppTaskID = 10000000;
            actionLocalAppTask = await LocalAppTaskDBService.Put(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Country,File,HydrometricSite,MikeBoundaryConditionWebTide,MikeBoundaryConditionMesh,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,Outfall,OtherInfrastructure,SeeOtherMunicipality,LineOverflow)]
            // localAppTask.TVItemID   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.TVItemID = 0;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.TVItemID = 2;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Country,File,HydrometricSite,MikeBoundaryConditionWebTide,MikeBoundaryConditionMesh,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,Outfall,OtherInfrastructure,SeeOtherMunicipality,LineOverflow)]
            // localAppTask.TVItemID2   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.TVItemID2 = 0;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.TVItemID2 = 2;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTask.AppTaskCommand   (AppTaskCommandEnum)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.AppTaskCommand = (AppTaskCommandEnum)1000000;
             actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTask.AppTaskStatus   (AppTaskStatusEnum)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.AppTaskStatus = (AppTaskStatusEnum)1000000;
             actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localAppTask.PercentCompleted   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.PercentCompleted = -1;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskService.GetLocalAppTaskList().Count());
            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.PercentCompleted = 101;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskDBService.GetLocalAppTaskList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localAppTask.Parameters   (String)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("Parameters");
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTask.Language   (LanguageEnum)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.Language = (LanguageEnum)1000000;
             actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localAppTask.StartDateTime_UTC   (DateTime)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.StartDateTime_UTC = new DateTime();
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.StartDateTime_UTC = new DateTime(1979, 1, 1);
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // [CSSPBigger(OtherField = StartDateTime_UTC)]
            // localAppTask.EndDateTime_UTC   (DateTime)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.EndDateTime_UTC = new DateTime(1979, 1, 1);
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // localAppTask.EstimatedLength_second   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.EstimatedLength_second = -1;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskService.GetLocalAppTaskList().Count());
            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.EstimatedLength_second = 1000001;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskDBService.GetLocalAppTaskList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // localAppTask.RemainingTime_second   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.RemainingTime_second = -1;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskService.GetLocalAppTaskList().Count());
            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.RemainingTime_second = 1000001;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            //Assert.AreEqual(count, localAppTaskDBService.GetLocalAppTaskList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localAppTask.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.LastUpdateDate_UTC = new DateTime();
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);
            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localAppTask.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.LastUpdateContactTVItemID = 0;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

            localAppTask = null;
            localAppTask = GetFilledRandomLocalAppTask("");
            localAppTask.LastUpdateContactTVItemID = 1;
            actionLocalAppTask = await LocalAppTaskDBService.Post(localAppTask);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTask.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalAppTask
            var actionLocalAppTaskAdded = await LocalAppTaskDBService.Post(localAppTask);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskAdded.Result).Value);
            LocalAppTask localAppTaskAdded = (LocalAppTask)((OkObjectResult)actionLocalAppTaskAdded.Result).Value;
            Assert.NotNull(localAppTaskAdded);

            // List<LocalAppTask>
            var actionLocalAppTaskList = await LocalAppTaskDBService.GetLocalAppTaskList();
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskList.Result).Value);
            List<LocalAppTask> localAppTaskList = (List<LocalAppTask>)((OkObjectResult)actionLocalAppTaskList.Result).Value;

            int count = ((List<LocalAppTask>)((OkObjectResult)actionLocalAppTaskList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalAppTask> with skip and take
            var actionLocalAppTaskListSkipAndTake = await LocalAppTaskDBService.GetLocalAppTaskList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskListSkipAndTake.Result).Value);
            List<LocalAppTask> localAppTaskListSkipAndTake = (List<LocalAppTask>)((OkObjectResult)actionLocalAppTaskListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalAppTask>)((OkObjectResult)actionLocalAppTaskListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localAppTaskList[0].AppTaskID == localAppTaskListSkipAndTake[0].AppTaskID);

            // Get LocalAppTask With AppTaskID
            var actionLocalAppTaskGet = await LocalAppTaskDBService.GetLocalAppTaskWithAppTaskID(localAppTaskList[0].AppTaskID);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskGet.Result).Value);
            LocalAppTask localAppTaskGet = (LocalAppTask)((OkObjectResult)actionLocalAppTaskGet.Result).Value;
            Assert.NotNull(localAppTaskGet);
            Assert.Equal(localAppTaskGet.AppTaskID, localAppTaskList[0].AppTaskID);

            // Put LocalAppTask
            var actionLocalAppTaskUpdated = await LocalAppTaskDBService.Put(localAppTask);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskUpdated.Result).Value);
            LocalAppTask localAppTaskUpdated = (LocalAppTask)((OkObjectResult)actionLocalAppTaskUpdated.Result).Value;
            Assert.NotNull(localAppTaskUpdated);

            // Delete LocalAppTask
            var actionLocalAppTaskDeleted = await LocalAppTaskDBService.Delete(localAppTask.AppTaskID);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalAppTaskDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalAppTaskDBService, LocalAppTaskDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalAppTaskDBService = Provider.GetService<ILocalAppTaskDBService>();
            Assert.NotNull(LocalAppTaskDBService);

            return await Task.FromResult(true);
        }
        private LocalAppTask GetFilledRandomLocalAppTask(string OmitPropName)
        {
            LocalAppTask localAppTask = new LocalAppTask();

            if (OmitPropName != "LocalDBCommand") localAppTask.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TVItemID") localAppTask.TVItemID = 1;
            if (OmitPropName != "TVItemID2") localAppTask.TVItemID2 = 1;
            if (OmitPropName != "AppTaskCommand") localAppTask.AppTaskCommand = (AppTaskCommandEnum)GetRandomEnumType(typeof(AppTaskCommandEnum));
            if (OmitPropName != "AppTaskStatus") localAppTask.AppTaskStatus = (AppTaskStatusEnum)GetRandomEnumType(typeof(AppTaskStatusEnum));
            if (OmitPropName != "PercentCompleted") localAppTask.PercentCompleted = GetRandomInt(0, 100);
            if (OmitPropName != "Parameters") localAppTask.Parameters = GetRandomString("", 20);
            if (OmitPropName != "Language") localAppTask.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "StartDateTime_UTC") localAppTask.StartDateTime_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDateTime_UTC") localAppTask.EndDateTime_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "EstimatedLength_second") localAppTask.EstimatedLength_second = GetRandomInt(0, 1000000);
            if (OmitPropName != "RemainingTime_second") localAppTask.RemainingTime_second = GetRandomInt(0, 1000000);
            if (OmitPropName != "LastUpdateDate_UTC") localAppTask.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localAppTask.LastUpdateContactTVItemID = 2;



            return localAppTask;
        }
        private void CheckLocalAppTaskFields(List<LocalAppTask> localAppTaskList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localAppTaskList[0].Parameters));
            if (localAppTaskList[0].EndDateTime_UTC != null)
            {
                Assert.NotNull(localAppTaskList[0].EndDateTime_UTC);
            }
            if (localAppTaskList[0].EstimatedLength_second != null)
            {
                Assert.NotNull(localAppTaskList[0].EstimatedLength_second);
            }
            if (localAppTaskList[0].RemainingTime_second != null)
            {
                Assert.NotNull(localAppTaskList[0].RemainingTime_second);
            }
        }

        #endregion Functions private
    }
}
