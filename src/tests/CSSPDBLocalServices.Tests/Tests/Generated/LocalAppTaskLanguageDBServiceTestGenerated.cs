/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalAppTaskLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalAppTaskLanguageDBService LocalAppTaskLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalAppTaskLanguage localAppTaskLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalAppTaskLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTaskLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTaskLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalAppTaskLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalAppTaskLanguageList = await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageList.Result).Value);
            List<LocalAppTaskLanguage> localAppTaskLanguageList = (List<LocalAppTaskLanguage>)((OkObjectResult)actionLocalAppTaskLanguageList.Result).Value;

            count = localAppTaskLanguageList.Count();

            LocalAppTaskLanguage localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTaskLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localAppTaskLanguage.AppTaskLanguageID   (Int32)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.AppTaskLanguageID = 0;

            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Put(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.AppTaskLanguageID = 10000000;
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Put(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "AppTask", ExistPlurial = "s", ExistFieldID = "AppTaskID", AllowableTVtypeList = )]
            // localAppTaskLanguage.AppTaskID   (Int32)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.AppTaskID = 0;
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTaskLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.Language = (LanguageEnum)1000000;
             actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localAppTaskLanguage.StatusText   (String)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.StatusText = GetRandomString("", 251);
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);
            //Assert.AreEqual(count, localAppTaskLanguageDBService.GetLocalAppTaskLanguageList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localAppTaskLanguage.ErrorText   (String)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.ErrorText = GetRandomString("", 251);
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);
            //Assert.AreEqual(count, localAppTaskLanguageDBService.GetLocalAppTaskLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localAppTaskLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
             actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localAppTaskLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);
            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localAppTaskLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.LastUpdateContactTVItemID = 0;
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);

            localAppTaskLanguage = null;
            localAppTaskLanguage = GetFilledRandomLocalAppTaskLanguage("");
            localAppTaskLanguage.LastUpdateContactTVItemID = 1;
            actionLocalAppTaskLanguage = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalAppTaskLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalAppTaskLanguage
            var actionLocalAppTaskLanguageAdded = await LocalAppTaskLanguageDBService.Post(localAppTaskLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageAdded.Result).Value);
            LocalAppTaskLanguage localAppTaskLanguageAdded = (LocalAppTaskLanguage)((OkObjectResult)actionLocalAppTaskLanguageAdded.Result).Value;
            Assert.NotNull(localAppTaskLanguageAdded);

            // List<LocalAppTaskLanguage>
            var actionLocalAppTaskLanguageList = await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageList.Result).Value);
            List<LocalAppTaskLanguage> localAppTaskLanguageList = (List<LocalAppTaskLanguage>)((OkObjectResult)actionLocalAppTaskLanguageList.Result).Value;

            int count = ((List<LocalAppTaskLanguage>)((OkObjectResult)actionLocalAppTaskLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalAppTaskLanguage> with skip and take
            var actionLocalAppTaskLanguageListSkipAndTake = await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageListSkipAndTake.Result).Value);
            List<LocalAppTaskLanguage> localAppTaskLanguageListSkipAndTake = (List<LocalAppTaskLanguage>)((OkObjectResult)actionLocalAppTaskLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalAppTaskLanguage>)((OkObjectResult)actionLocalAppTaskLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localAppTaskLanguageList[0].AppTaskLanguageID == localAppTaskLanguageListSkipAndTake[0].AppTaskLanguageID);

            // Get LocalAppTaskLanguage With AppTaskLanguageID
            var actionLocalAppTaskLanguageGet = await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageWithAppTaskLanguageID(localAppTaskLanguageList[0].AppTaskLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageGet.Result).Value);
            LocalAppTaskLanguage localAppTaskLanguageGet = (LocalAppTaskLanguage)((OkObjectResult)actionLocalAppTaskLanguageGet.Result).Value;
            Assert.NotNull(localAppTaskLanguageGet);
            Assert.Equal(localAppTaskLanguageGet.AppTaskLanguageID, localAppTaskLanguageList[0].AppTaskLanguageID);

            // Put LocalAppTaskLanguage
            var actionLocalAppTaskLanguageUpdated = await LocalAppTaskLanguageDBService.Put(localAppTaskLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageUpdated.Result).Value);
            LocalAppTaskLanguage localAppTaskLanguageUpdated = (LocalAppTaskLanguage)((OkObjectResult)actionLocalAppTaskLanguageUpdated.Result).Value;
            Assert.NotNull(localAppTaskLanguageUpdated);

            // Delete LocalAppTaskLanguage
            var actionLocalAppTaskLanguageDeleted = await LocalAppTaskLanguageDBService.Delete(localAppTaskLanguage.AppTaskLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalAppTaskLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalAppTaskLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalAppTaskLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalAppTaskLanguageDBService, LocalAppTaskLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalAppTaskLanguageDBService = Provider.GetService<ILocalAppTaskLanguageDBService>();
            Assert.NotNull(LocalAppTaskLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalAppTaskLanguage GetFilledRandomLocalAppTaskLanguage(string OmitPropName)
        {
            LocalAppTaskLanguage localAppTaskLanguage = new LocalAppTaskLanguage();

            if (OmitPropName != "LocalDBCommand") localAppTaskLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "AppTaskID") localAppTaskLanguage.AppTaskID = 0;
            if (OmitPropName != "Language") localAppTaskLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "StatusText") localAppTaskLanguage.StatusText = GetRandomString("", 5);
            if (OmitPropName != "ErrorText") localAppTaskLanguage.ErrorText = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatus") localAppTaskLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localAppTaskLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localAppTaskLanguage.LastUpdateContactTVItemID = 2;



            return localAppTaskLanguage;
        }
        private void CheckLocalAppTaskLanguageFields(List<LocalAppTaskLanguage> localAppTaskLanguageList)
        {
            if (!string.IsNullOrWhiteSpace(localAppTaskLanguageList[0].StatusText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAppTaskLanguageList[0].StatusText));
            }
            if (!string.IsNullOrWhiteSpace(localAppTaskLanguageList[0].ErrorText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localAppTaskLanguageList[0].ErrorText));
            }
        }

        #endregion Functions private
    }
}
