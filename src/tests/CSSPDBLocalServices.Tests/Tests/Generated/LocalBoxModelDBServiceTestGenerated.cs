/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalBoxModelDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalBoxModelDBService LocalBoxModelDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalBoxModel localBoxModel { get; set; }
        #endregion Properties

        #region Constructors
        public LocalBoxModelDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModelDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModelDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localBoxModel = GetFilledRandomLocalBoxModel("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModel_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalBoxModelList = await LocalBoxModelDBService.GetLocalBoxModelList();
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelList.Result).Value);
            List<LocalBoxModel> localBoxModelList = (List<LocalBoxModel>)((OkObjectResult)actionLocalBoxModelList.Result).Value;

            count = localBoxModelList.Count();

            LocalBoxModel localBoxModel = GetFilledRandomLocalBoxModel("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localBoxModel.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localBoxModel.BoxModelID   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.BoxModelID = 0;

            actionLocalBoxModel = await LocalBoxModelDBService.Put(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.BoxModelID = 10000000;
            actionLocalBoxModel = await LocalBoxModelDBService.Put(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Infrastructure)]
            // localBoxModel.InfrastructureTVItemID   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.InfrastructureTVItemID = 0;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.InfrastructureTVItemID = 1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localBoxModel.Discharge_m3_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Discharge_m3_day]

            //CSSPError: Type not implemented [Discharge_m3_day]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Discharge_m3_day = -1.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Discharge_m3_day = 10001.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localBoxModel.Depth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Depth_m]

            //CSSPError: Type not implemented [Depth_m]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Depth_m = -1.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Depth_m = 1001.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-15, 40)]
            // localBoxModel.Temperature_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Temperature_C]

            //CSSPError: Type not implemented [Temperature_C]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Temperature_C = -16.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Temperature_C = 41.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localBoxModel.Dilution   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Dilution = -1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Dilution = 10000001;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localBoxModel.DecayRate_per_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayRate_per_day]

            //CSSPError: Type not implemented [DecayRate_per_day]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.DecayRate_per_day = -1.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.DecayRate_per_day = 101.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localBoxModel.FCUntreated_MPN_100ml   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.FCUntreated_MPN_100ml = -1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.FCUntreated_MPN_100ml = 10000001;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localBoxModel.FCPreDisinfection_MPN_100ml   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.FCPreDisinfection_MPN_100ml = -1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.FCPreDisinfection_MPN_100ml = 10000001;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localBoxModel.Concentration_MPN_100ml   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Concentration_MPN_100ml = -1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.Concentration_MPN_100ml = 10000001;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, -1)]
            // localBoxModel.T90_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [T90_hour]

            //CSSPError: Type not implemented [T90_hour]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.T90_hour = -1.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 24)]
            // localBoxModel.DischargeDuration_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DischargeDuration_hour]

            //CSSPError: Type not implemented [DischargeDuration_hour]

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.DischargeDuration_hour = -1.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelService.GetLocalBoxModelList().Count());
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.DischargeDuration_hour = 25.0D;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            //Assert.AreEqual(count, localBoxModelDBService.GetLocalBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localBoxModel.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.LastUpdateDate_UTC = new DateTime();
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);
            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localBoxModel.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.LastUpdateContactTVItemID = 0;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);

            localBoxModel = null;
            localBoxModel = GetFilledRandomLocalBoxModel("");
            localBoxModel.LastUpdateContactTVItemID = 1;
            actionLocalBoxModel = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModel.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalBoxModel
            var actionLocalBoxModelAdded = await LocalBoxModelDBService.Post(localBoxModel);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelAdded.Result).Value);
            LocalBoxModel localBoxModelAdded = (LocalBoxModel)((OkObjectResult)actionLocalBoxModelAdded.Result).Value;
            Assert.NotNull(localBoxModelAdded);

            // List<LocalBoxModel>
            var actionLocalBoxModelList = await LocalBoxModelDBService.GetLocalBoxModelList();
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelList.Result).Value);
            List<LocalBoxModel> localBoxModelList = (List<LocalBoxModel>)((OkObjectResult)actionLocalBoxModelList.Result).Value;

            int count = ((List<LocalBoxModel>)((OkObjectResult)actionLocalBoxModelList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalBoxModel> with skip and take
            var actionLocalBoxModelListSkipAndTake = await LocalBoxModelDBService.GetLocalBoxModelList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelListSkipAndTake.Result).Value);
            List<LocalBoxModel> localBoxModelListSkipAndTake = (List<LocalBoxModel>)((OkObjectResult)actionLocalBoxModelListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalBoxModel>)((OkObjectResult)actionLocalBoxModelListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localBoxModelList[0].BoxModelID == localBoxModelListSkipAndTake[0].BoxModelID);

            // Get LocalBoxModel With BoxModelID
            var actionLocalBoxModelGet = await LocalBoxModelDBService.GetLocalBoxModelWithBoxModelID(localBoxModelList[0].BoxModelID);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelGet.Result).Value);
            LocalBoxModel localBoxModelGet = (LocalBoxModel)((OkObjectResult)actionLocalBoxModelGet.Result).Value;
            Assert.NotNull(localBoxModelGet);
            Assert.Equal(localBoxModelGet.BoxModelID, localBoxModelList[0].BoxModelID);

            // Put LocalBoxModel
            var actionLocalBoxModelUpdated = await LocalBoxModelDBService.Put(localBoxModel);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelUpdated.Result).Value);
            LocalBoxModel localBoxModelUpdated = (LocalBoxModel)((OkObjectResult)actionLocalBoxModelUpdated.Result).Value;
            Assert.NotNull(localBoxModelUpdated);

            // Delete LocalBoxModel
            var actionLocalBoxModelDeleted = await LocalBoxModelDBService.Delete(localBoxModel.BoxModelID);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalBoxModelDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalBoxModelDBService, LocalBoxModelDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalBoxModelDBService = Provider.GetService<ILocalBoxModelDBService>();
            Assert.NotNull(LocalBoxModelDBService);

            return await Task.FromResult(true);
        }
        private LocalBoxModel GetFilledRandomLocalBoxModel(string OmitPropName)
        {
            LocalBoxModel localBoxModel = new LocalBoxModel();

            if (OmitPropName != "LocalDBCommand") localBoxModel.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "InfrastructureTVItemID") localBoxModel.InfrastructureTVItemID = 41;
            if (OmitPropName != "Discharge_m3_day") localBoxModel.Discharge_m3_day = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "Depth_m") localBoxModel.Depth_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "Temperature_C") localBoxModel.Temperature_C = GetRandomDouble(-15.0D, 40.0D);
            if (OmitPropName != "Dilution") localBoxModel.Dilution = GetRandomInt(0, 10000000);
            if (OmitPropName != "DecayRate_per_day") localBoxModel.DecayRate_per_day = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "FCUntreated_MPN_100ml") localBoxModel.FCUntreated_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "FCPreDisinfection_MPN_100ml") localBoxModel.FCPreDisinfection_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "Concentration_MPN_100ml") localBoxModel.Concentration_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "T90_hour") localBoxModel.T90_hour = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "DischargeDuration_hour") localBoxModel.DischargeDuration_hour = GetRandomDouble(0.0D, 24.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localBoxModel.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localBoxModel.LastUpdateContactTVItemID = 2;



            return localBoxModel;
        }
        private void CheckLocalBoxModelFields(List<LocalBoxModel> localBoxModelList)
        {
        }

        #endregion Functions private
    }
}
