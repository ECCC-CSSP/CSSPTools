/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalBoxModelLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalBoxModelLanguageDBService LocalBoxModelLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalBoxModelLanguage localBoxModelLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalBoxModelLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModelLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModelLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalBoxModelLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalBoxModelLanguageList = await LocalBoxModelLanguageDBService.GetLocalBoxModelLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageList.Result).Value);
            List<LocalBoxModelLanguage> localBoxModelLanguageList = (List<LocalBoxModelLanguage>)((OkObjectResult)actionLocalBoxModelLanguageList.Result).Value;

            count = localBoxModelLanguageList.Count();

            LocalBoxModelLanguage localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localBoxModelLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localBoxModelLanguage.BoxModelLanguageID   (Int32)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.BoxModelLanguageID = 0;

            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Put(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.BoxModelLanguageID = 10000000;
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Put(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "BoxModel", ExistPlurial = "s", ExistFieldID = "BoxModelID", AllowableTVtypeList = )]
            // localBoxModelLanguage.BoxModelID   (Int32)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.BoxModelID = 0;
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localBoxModelLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.Language = (LanguageEnum)1000000;
             actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // localBoxModelLanguage.ScenarioName   (String)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("ScenarioName");
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.ScenarioName = GetRandomString("", 251);
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);
            //Assert.AreEqual(count, localBoxModelLanguageDBService.GetLocalBoxModelLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localBoxModelLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
             actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localBoxModelLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);
            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localBoxModelLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.LastUpdateContactTVItemID = 0;
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);

            localBoxModelLanguage = null;
            localBoxModelLanguage = GetFilledRandomLocalBoxModelLanguage("");
            localBoxModelLanguage.LastUpdateContactTVItemID = 1;
            actionLocalBoxModelLanguage = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalBoxModelLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalBoxModelLanguage
            var actionLocalBoxModelLanguageAdded = await LocalBoxModelLanguageDBService.Post(localBoxModelLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageAdded.Result).Value);
            LocalBoxModelLanguage localBoxModelLanguageAdded = (LocalBoxModelLanguage)((OkObjectResult)actionLocalBoxModelLanguageAdded.Result).Value;
            Assert.NotNull(localBoxModelLanguageAdded);

            // List<LocalBoxModelLanguage>
            var actionLocalBoxModelLanguageList = await LocalBoxModelLanguageDBService.GetLocalBoxModelLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageList.Result).Value);
            List<LocalBoxModelLanguage> localBoxModelLanguageList = (List<LocalBoxModelLanguage>)((OkObjectResult)actionLocalBoxModelLanguageList.Result).Value;

            int count = ((List<LocalBoxModelLanguage>)((OkObjectResult)actionLocalBoxModelLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalBoxModelLanguage> with skip and take
            var actionLocalBoxModelLanguageListSkipAndTake = await LocalBoxModelLanguageDBService.GetLocalBoxModelLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageListSkipAndTake.Result).Value);
            List<LocalBoxModelLanguage> localBoxModelLanguageListSkipAndTake = (List<LocalBoxModelLanguage>)((OkObjectResult)actionLocalBoxModelLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalBoxModelLanguage>)((OkObjectResult)actionLocalBoxModelLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localBoxModelLanguageList[0].BoxModelLanguageID == localBoxModelLanguageListSkipAndTake[0].BoxModelLanguageID);

            // Get LocalBoxModelLanguage With BoxModelLanguageID
            var actionLocalBoxModelLanguageGet = await LocalBoxModelLanguageDBService.GetLocalBoxModelLanguageWithBoxModelLanguageID(localBoxModelLanguageList[0].BoxModelLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageGet.Result).Value);
            LocalBoxModelLanguage localBoxModelLanguageGet = (LocalBoxModelLanguage)((OkObjectResult)actionLocalBoxModelLanguageGet.Result).Value;
            Assert.NotNull(localBoxModelLanguageGet);
            Assert.Equal(localBoxModelLanguageGet.BoxModelLanguageID, localBoxModelLanguageList[0].BoxModelLanguageID);

            // Put LocalBoxModelLanguage
            var actionLocalBoxModelLanguageUpdated = await LocalBoxModelLanguageDBService.Put(localBoxModelLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageUpdated.Result).Value);
            LocalBoxModelLanguage localBoxModelLanguageUpdated = (LocalBoxModelLanguage)((OkObjectResult)actionLocalBoxModelLanguageUpdated.Result).Value;
            Assert.NotNull(localBoxModelLanguageUpdated);

            // Delete LocalBoxModelLanguage
            var actionLocalBoxModelLanguageDeleted = await LocalBoxModelLanguageDBService.Delete(localBoxModelLanguage.BoxModelLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalBoxModelLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalBoxModelLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalBoxModelLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalBoxModelLanguageDBService, LocalBoxModelLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalBoxModelLanguageDBService = Provider.GetService<ILocalBoxModelLanguageDBService>();
            Assert.NotNull(LocalBoxModelLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalBoxModelLanguage GetFilledRandomLocalBoxModelLanguage(string OmitPropName)
        {
            LocalBoxModelLanguage localBoxModelLanguage = new LocalBoxModelLanguage();

            if (OmitPropName != "LocalDBCommand") localBoxModelLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "BoxModelID") localBoxModelLanguage.BoxModelID = 0;
            if (OmitPropName != "Language") localBoxModelLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "ScenarioName") localBoxModelLanguage.ScenarioName = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatus") localBoxModelLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localBoxModelLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localBoxModelLanguage.LastUpdateContactTVItemID = 2;



            return localBoxModelLanguage;
        }
        private void CheckLocalBoxModelLanguageFields(List<LocalBoxModelLanguage> localBoxModelLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localBoxModelLanguageList[0].ScenarioName));
        }

        #endregion Functions private
    }
}
