/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalClassificationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalClassificationDBService LocalClassificationDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalClassification localClassification { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClassificationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClassificationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClassificationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localClassification = GetFilledRandomLocalClassification("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClassification_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalClassificationList = await LocalClassificationDBService.GetLocalClassificationList();
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationList.Result).Value);
            List<LocalClassification> localClassificationList = (List<LocalClassification>)((OkObjectResult)actionLocalClassificationList.Result).Value;

            count = localClassificationList.Count();

            LocalClassification localClassification = GetFilledRandomLocalClassification("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localClassification.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localClassification.ClassificationID   (Int32)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.ClassificationID = 0;

            actionLocalClassification = await LocalClassificationDBService.Put(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.ClassificationID = 10000000;
            actionLocalClassification = await LocalClassificationDBService.Put(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Classification)]
            // localClassification.ClassificationTVItemID   (Int32)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.ClassificationTVItemID = 0;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.ClassificationTVItemID = 1;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localClassification.ClassificationType   (ClassificationTypeEnum)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.ClassificationType = (ClassificationTypeEnum)1000000;
             actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localClassification.Ordinal   (Int32)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.Ordinal = -1;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);
            //Assert.AreEqual(count, localClassificationService.GetLocalClassificationList().Count());
            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.Ordinal = 10001;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);
            //Assert.AreEqual(count, localClassificationDBService.GetLocalClassificationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localClassification.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.LastUpdateDate_UTC = new DateTime();
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);
            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localClassification.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.LastUpdateContactTVItemID = 0;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);

            localClassification = null;
            localClassification = GetFilledRandomLocalClassification("");
            localClassification.LastUpdateContactTVItemID = 1;
            actionLocalClassification = await LocalClassificationDBService.Post(localClassification);
            Assert.IsType<BadRequestObjectResult>(actionLocalClassification.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalClassification
            var actionLocalClassificationAdded = await LocalClassificationDBService.Post(localClassification);
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationAdded.Result).Value);
            LocalClassification localClassificationAdded = (LocalClassification)((OkObjectResult)actionLocalClassificationAdded.Result).Value;
            Assert.NotNull(localClassificationAdded);

            // List<LocalClassification>
            var actionLocalClassificationList = await LocalClassificationDBService.GetLocalClassificationList();
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationList.Result).Value);
            List<LocalClassification> localClassificationList = (List<LocalClassification>)((OkObjectResult)actionLocalClassificationList.Result).Value;

            int count = ((List<LocalClassification>)((OkObjectResult)actionLocalClassificationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalClassification> with skip and take
            var actionLocalClassificationListSkipAndTake = await LocalClassificationDBService.GetLocalClassificationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationListSkipAndTake.Result).Value);
            List<LocalClassification> localClassificationListSkipAndTake = (List<LocalClassification>)((OkObjectResult)actionLocalClassificationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalClassification>)((OkObjectResult)actionLocalClassificationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localClassificationList[0].ClassificationID == localClassificationListSkipAndTake[0].ClassificationID);

            // Get LocalClassification With ClassificationID
            var actionLocalClassificationGet = await LocalClassificationDBService.GetLocalClassificationWithClassificationID(localClassificationList[0].ClassificationID);
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationGet.Result).Value);
            LocalClassification localClassificationGet = (LocalClassification)((OkObjectResult)actionLocalClassificationGet.Result).Value;
            Assert.NotNull(localClassificationGet);
            Assert.Equal(localClassificationGet.ClassificationID, localClassificationList[0].ClassificationID);

            // Put LocalClassification
            var actionLocalClassificationUpdated = await LocalClassificationDBService.Put(localClassification);
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationUpdated.Result).Value);
            LocalClassification localClassificationUpdated = (LocalClassification)((OkObjectResult)actionLocalClassificationUpdated.Result).Value;
            Assert.NotNull(localClassificationUpdated);

            // Delete LocalClassification
            var actionLocalClassificationDeleted = await LocalClassificationDBService.Delete(localClassification.ClassificationID);
            Assert.Equal(200, ((ObjectResult)actionLocalClassificationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClassificationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalClassificationDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalClassificationDBService, LocalClassificationDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalClassificationDBService = Provider.GetService<ILocalClassificationDBService>();
            Assert.NotNull(LocalClassificationDBService);

            return await Task.FromResult(true);
        }
        private LocalClassification GetFilledRandomLocalClassification(string OmitPropName)
        {
            LocalClassification localClassification = new LocalClassification();

            if (OmitPropName != "LocalDBCommand") localClassification.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ClassificationTVItemID") localClassification.ClassificationTVItemID = 13;
            if (OmitPropName != "ClassificationType") localClassification.ClassificationType = (ClassificationTypeEnum)GetRandomEnumType(typeof(ClassificationTypeEnum));
            if (OmitPropName != "Ordinal") localClassification.Ordinal = GetRandomInt(0, 10000);
            if (OmitPropName != "LastUpdateDate_UTC") localClassification.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localClassification.LastUpdateContactTVItemID = 2;



            return localClassification;
        }
        private void CheckLocalClassificationFields(List<LocalClassification> localClassificationList)
        {
        }

        #endregion Functions private
    }
}
