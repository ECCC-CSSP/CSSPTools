/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalClimateDataValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalClimateDataValueDBService LocalClimateDataValueDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalClimateDataValue localClimateDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClimateDataValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateDataValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateDataValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateDataValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalClimateDataValueList = await LocalClimateDataValueDBService.GetLocalClimateDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueList.Result).Value);
            List<LocalClimateDataValue> localClimateDataValueList = (List<LocalClimateDataValue>)((OkObjectResult)actionLocalClimateDataValueList.Result).Value;

            count = localClimateDataValueList.Count();

            LocalClimateDataValue localClimateDataValue = GetFilledRandomLocalClimateDataValue("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localClimateDataValue.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localClimateDataValue.ClimateDataValueID   (Int32)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.ClimateDataValueID = 0;

            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Put(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.ClimateDataValueID = 10000000;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Put(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "ClimateSite", ExistPlurial = "s", ExistFieldID = "ClimateSiteID", AllowableTVtypeList = )]
            // localClimateDataValue.ClimateSiteID   (Int32)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.ClimateSiteID = 0;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.DateTime_Local = new DateTime();
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // localClimateDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localClimateDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
             actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localClimateDataValue.HasBeenRead   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateDataValue.Snow_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Snow_cm]

            //CSSPError: Type not implemented [Snow_cm]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.Snow_cm = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.Snow_cm = 10001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateDataValue.Rainfall_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Rainfall_mm]

            //CSSPError: Type not implemented [Rainfall_mm]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.Rainfall_mm = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.Rainfall_mm = 10001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateDataValue.RainfallEntered_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainfallEntered_mm]

            //CSSPError: Type not implemented [RainfallEntered_mm]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.RainfallEntered_mm = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.RainfallEntered_mm = 10001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateDataValue.TotalPrecip_mm_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TotalPrecip_mm_cm]

            //CSSPError: Type not implemented [TotalPrecip_mm_cm]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.TotalPrecip_mm_cm = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.TotalPrecip_mm_cm = 10001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-50, 50)]
            // localClimateDataValue.MaxTemp_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MaxTemp_C]

            //CSSPError: Type not implemented [MaxTemp_C]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.MaxTemp_C = -51.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.MaxTemp_C = 51.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-50, 50)]
            // localClimateDataValue.MinTemp_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MinTemp_C]

            //CSSPError: Type not implemented [MinTemp_C]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.MinTemp_C = -51.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.MinTemp_C = 51.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-1000, 100)]
            // localClimateDataValue.HeatDegDays_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [HeatDegDays_C]

            //CSSPError: Type not implemented [HeatDegDays_C]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.HeatDegDays_C = -1001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.HeatDegDays_C = 101.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-1000, 100)]
            // localClimateDataValue.CoolDegDays_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [CoolDegDays_C]

            //CSSPError: Type not implemented [CoolDegDays_C]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.CoolDegDays_C = -1001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.CoolDegDays_C = 101.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateDataValue.SnowOnGround_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [SnowOnGround_cm]

            //CSSPError: Type not implemented [SnowOnGround_cm]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.SnowOnGround_cm = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.SnowOnGround_cm = 10001.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 360)]
            // localClimateDataValue.DirMaxGust_0North   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DirMaxGust_0North]

            //CSSPError: Type not implemented [DirMaxGust_0North]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.DirMaxGust_0North = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.DirMaxGust_0North = 361.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localClimateDataValue.SpdMaxGust_kmh   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [SpdMaxGust_kmh]

            //CSSPError: Type not implemented [SpdMaxGust_kmh]

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.SpdMaxGust_kmh = -1.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueService.GetLocalClimateDataValueList().Count());
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.SpdMaxGust_kmh = 301.0D;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            //Assert.AreEqual(count, localClimateDataValueDBService.GetLocalClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // localClimateDataValue.HourlyValues   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.LastUpdateDate_UTC = new DateTime();
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);
            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localClimateDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.LastUpdateContactTVItemID = 0;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);

            localClimateDataValue = null;
            localClimateDataValue = GetFilledRandomLocalClimateDataValue("");
            localClimateDataValue.LastUpdateContactTVItemID = 1;
            actionLocalClimateDataValue = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalClimateDataValue
            var actionLocalClimateDataValueAdded = await LocalClimateDataValueDBService.Post(localClimateDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueAdded.Result).Value);
            LocalClimateDataValue localClimateDataValueAdded = (LocalClimateDataValue)((OkObjectResult)actionLocalClimateDataValueAdded.Result).Value;
            Assert.NotNull(localClimateDataValueAdded);

            // List<LocalClimateDataValue>
            var actionLocalClimateDataValueList = await LocalClimateDataValueDBService.GetLocalClimateDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueList.Result).Value);
            List<LocalClimateDataValue> localClimateDataValueList = (List<LocalClimateDataValue>)((OkObjectResult)actionLocalClimateDataValueList.Result).Value;

            int count = ((List<LocalClimateDataValue>)((OkObjectResult)actionLocalClimateDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalClimateDataValue> with skip and take
            var actionLocalClimateDataValueListSkipAndTake = await LocalClimateDataValueDBService.GetLocalClimateDataValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueListSkipAndTake.Result).Value);
            List<LocalClimateDataValue> localClimateDataValueListSkipAndTake = (List<LocalClimateDataValue>)((OkObjectResult)actionLocalClimateDataValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalClimateDataValue>)((OkObjectResult)actionLocalClimateDataValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localClimateDataValueList[0].ClimateDataValueID == localClimateDataValueListSkipAndTake[0].ClimateDataValueID);

            // Get LocalClimateDataValue With ClimateDataValueID
            var actionLocalClimateDataValueGet = await LocalClimateDataValueDBService.GetLocalClimateDataValueWithClimateDataValueID(localClimateDataValueList[0].ClimateDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueGet.Result).Value);
            LocalClimateDataValue localClimateDataValueGet = (LocalClimateDataValue)((OkObjectResult)actionLocalClimateDataValueGet.Result).Value;
            Assert.NotNull(localClimateDataValueGet);
            Assert.Equal(localClimateDataValueGet.ClimateDataValueID, localClimateDataValueList[0].ClimateDataValueID);

            // Put LocalClimateDataValue
            var actionLocalClimateDataValueUpdated = await LocalClimateDataValueDBService.Put(localClimateDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueUpdated.Result).Value);
            LocalClimateDataValue localClimateDataValueUpdated = (LocalClimateDataValue)((OkObjectResult)actionLocalClimateDataValueUpdated.Result).Value;
            Assert.NotNull(localClimateDataValueUpdated);

            // Delete LocalClimateDataValue
            var actionLocalClimateDataValueDeleted = await LocalClimateDataValueDBService.Delete(localClimateDataValue.ClimateDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalClimateDataValueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalClimateDataValueDBService, LocalClimateDataValueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalClimateDataValueDBService = Provider.GetService<ILocalClimateDataValueDBService>();
            Assert.NotNull(LocalClimateDataValueDBService);

            return await Task.FromResult(true);
        }
        private LocalClimateDataValue GetFilledRandomLocalClimateDataValue(string OmitPropName)
        {
            LocalClimateDataValue localClimateDataValue = new LocalClimateDataValue();

            if (OmitPropName != "LocalDBCommand") localClimateDataValue.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ClimateSiteID") localClimateDataValue.ClimateSiteID = 0;
            if (OmitPropName != "DateTime_Local") localClimateDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") localClimateDataValue.Keep = true;
            if (OmitPropName != "StorageDataType") localClimateDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "HasBeenRead") localClimateDataValue.HasBeenRead = true;
            if (OmitPropName != "Snow_cm") localClimateDataValue.Snow_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "Rainfall_mm") localClimateDataValue.Rainfall_mm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "RainfallEntered_mm") localClimateDataValue.RainfallEntered_mm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "TotalPrecip_mm_cm") localClimateDataValue.TotalPrecip_mm_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "MaxTemp_C") localClimateDataValue.MaxTemp_C = GetRandomDouble(-50.0D, 50.0D);
            if (OmitPropName != "MinTemp_C") localClimateDataValue.MinTemp_C = GetRandomDouble(-50.0D, 50.0D);
            if (OmitPropName != "HeatDegDays_C") localClimateDataValue.HeatDegDays_C = GetRandomDouble(-1000.0D, 100.0D);
            if (OmitPropName != "CoolDegDays_C") localClimateDataValue.CoolDegDays_C = GetRandomDouble(-1000.0D, 100.0D);
            if (OmitPropName != "SnowOnGround_cm") localClimateDataValue.SnowOnGround_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "DirMaxGust_0North") localClimateDataValue.DirMaxGust_0North = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "SpdMaxGust_kmh") localClimateDataValue.SpdMaxGust_kmh = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "HourlyValues") localClimateDataValue.HourlyValues = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") localClimateDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localClimateDataValue.LastUpdateContactTVItemID = 2;



            return localClimateDataValue;
        }
        private void CheckLocalClimateDataValueFields(List<LocalClimateDataValue> localClimateDataValueList)
        {
            if (localClimateDataValueList[0].Snow_cm != null)
            {
                Assert.NotNull(localClimateDataValueList[0].Snow_cm);
            }
            if (localClimateDataValueList[0].Rainfall_mm != null)
            {
                Assert.NotNull(localClimateDataValueList[0].Rainfall_mm);
            }
            if (localClimateDataValueList[0].RainfallEntered_mm != null)
            {
                Assert.NotNull(localClimateDataValueList[0].RainfallEntered_mm);
            }
            if (localClimateDataValueList[0].TotalPrecip_mm_cm != null)
            {
                Assert.NotNull(localClimateDataValueList[0].TotalPrecip_mm_cm);
            }
            if (localClimateDataValueList[0].MaxTemp_C != null)
            {
                Assert.NotNull(localClimateDataValueList[0].MaxTemp_C);
            }
            if (localClimateDataValueList[0].MinTemp_C != null)
            {
                Assert.NotNull(localClimateDataValueList[0].MinTemp_C);
            }
            if (localClimateDataValueList[0].HeatDegDays_C != null)
            {
                Assert.NotNull(localClimateDataValueList[0].HeatDegDays_C);
            }
            if (localClimateDataValueList[0].CoolDegDays_C != null)
            {
                Assert.NotNull(localClimateDataValueList[0].CoolDegDays_C);
            }
            if (localClimateDataValueList[0].SnowOnGround_cm != null)
            {
                Assert.NotNull(localClimateDataValueList[0].SnowOnGround_cm);
            }
            if (localClimateDataValueList[0].DirMaxGust_0North != null)
            {
                Assert.NotNull(localClimateDataValueList[0].DirMaxGust_0North);
            }
            if (localClimateDataValueList[0].SpdMaxGust_kmh != null)
            {
                Assert.NotNull(localClimateDataValueList[0].SpdMaxGust_kmh);
            }
            if (!string.IsNullOrWhiteSpace(localClimateDataValueList[0].HourlyValues))
            {
                Assert.False(string.IsNullOrWhiteSpace(localClimateDataValueList[0].HourlyValues));
            }
        }

        #endregion Functions private
    }
}
