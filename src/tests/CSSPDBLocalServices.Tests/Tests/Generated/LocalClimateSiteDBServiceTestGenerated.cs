/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalClimateSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalClimateSiteDBService LocalClimateSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalClimateSite localClimateSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalClimateSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localClimateSite = GetFilledRandomLocalClimateSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalClimateSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalClimateSiteList = await LocalClimateSiteDBService.GetLocalClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteList.Result).Value);
            List<LocalClimateSite> localClimateSiteList = (List<LocalClimateSite>)((OkObjectResult)actionLocalClimateSiteList.Result).Value;

            count = localClimateSiteList.Count();

            LocalClimateSite localClimateSite = GetFilledRandomLocalClimateSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localClimateSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localClimateSite.ClimateSiteID   (Int32)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateSiteID = 0;

            actionLocalClimateSite = await LocalClimateSiteDBService.Put(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateSiteID = 10000000;
            actionLocalClimateSite = await LocalClimateSiteDBService.Put(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite)]
            // localClimateSite.ClimateSiteTVItemID   (Int32)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateSiteTVItemID = 0;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateSiteTVItemID = 1;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 100000)]
            // localClimateSite.ECDBID   (Int32)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ECDBID = 0;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteService.GetLocalClimateSiteList().Count());
            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ECDBID = 100001;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localClimateSite.ClimateSiteName   (String)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("ClimateSiteName");
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateSiteName = GetRandomString("", 101);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(4)]
            // localClimateSite.Province   (String)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("Province");
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.Province = GetRandomString("", 5);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localClimateSite.Elevation_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Elevation_m]

            //CSSPError: Type not implemented [Elevation_m]

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.Elevation_m = -1.0D;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteService.GetLocalClimateSiteList().Count());
            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.Elevation_m = 10001.0D;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localClimateSite.ClimateID   (String)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.ClimateID = GetRandomString("", 11);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 100000)]
            // localClimateSite.WMOID   (Int32)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.WMOID = 0;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteService.GetLocalClimateSiteList().Count());
            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.WMOID = 100001;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(3)]
            // localClimateSite.TCID   (String)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.TCID = GetRandomString("", 4);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // localClimateSite.IsQuebecSite   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localClimateSite.IsCoCoRaHS   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 0)]
            // localClimateSite.TimeOffset_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TimeOffset_hour]

            //CSSPError: Type not implemented [TimeOffset_hour]

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.TimeOffset_hour = -11.0D;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteService.GetLocalClimateSiteList().Count());
            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.TimeOffset_hour = 1.0D;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(50)]
            // localClimateSite.File_desc   (String)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.File_desc = GetRandomString("", 51);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            //Assert.AreEqual(count, localClimateSiteDBService.GetLocalClimateSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.HourlyStartDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.HourlyStartDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.HourlyEndDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.HourlyEndDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // localClimateSite.HourlyNow   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.DailyStartDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.DailyStartDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.DailyEndDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.DailyEndDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // localClimateSite.DailyNow   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.MonthlyStartDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.MonthlyStartDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.MonthlyEndDate_Local   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.MonthlyEndDate_Local = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is Nullable
            // localClimateSite.MonthlyNow   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localClimateSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.LastUpdateDate_UTC = new DateTime();
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);
            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localClimateSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.LastUpdateContactTVItemID = 0;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

            localClimateSite = null;
            localClimateSite = GetFilledRandomLocalClimateSite("");
            localClimateSite.LastUpdateContactTVItemID = 1;
            actionLocalClimateSite = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalClimateSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalClimateSite
            var actionLocalClimateSiteAdded = await LocalClimateSiteDBService.Post(localClimateSite);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteAdded.Result).Value);
            LocalClimateSite localClimateSiteAdded = (LocalClimateSite)((OkObjectResult)actionLocalClimateSiteAdded.Result).Value;
            Assert.NotNull(localClimateSiteAdded);

            // List<LocalClimateSite>
            var actionLocalClimateSiteList = await LocalClimateSiteDBService.GetLocalClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteList.Result).Value);
            List<LocalClimateSite> localClimateSiteList = (List<LocalClimateSite>)((OkObjectResult)actionLocalClimateSiteList.Result).Value;

            int count = ((List<LocalClimateSite>)((OkObjectResult)actionLocalClimateSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalClimateSite> with skip and take
            var actionLocalClimateSiteListSkipAndTake = await LocalClimateSiteDBService.GetLocalClimateSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteListSkipAndTake.Result).Value);
            List<LocalClimateSite> localClimateSiteListSkipAndTake = (List<LocalClimateSite>)((OkObjectResult)actionLocalClimateSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalClimateSite>)((OkObjectResult)actionLocalClimateSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localClimateSiteList[0].ClimateSiteID == localClimateSiteListSkipAndTake[0].ClimateSiteID);

            // Get LocalClimateSite With ClimateSiteID
            var actionLocalClimateSiteGet = await LocalClimateSiteDBService.GetLocalClimateSiteWithClimateSiteID(localClimateSiteList[0].ClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteGet.Result).Value);
            LocalClimateSite localClimateSiteGet = (LocalClimateSite)((OkObjectResult)actionLocalClimateSiteGet.Result).Value;
            Assert.NotNull(localClimateSiteGet);
            Assert.Equal(localClimateSiteGet.ClimateSiteID, localClimateSiteList[0].ClimateSiteID);

            // Put LocalClimateSite
            var actionLocalClimateSiteUpdated = await LocalClimateSiteDBService.Put(localClimateSite);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteUpdated.Result).Value);
            LocalClimateSite localClimateSiteUpdated = (LocalClimateSite)((OkObjectResult)actionLocalClimateSiteUpdated.Result).Value;
            Assert.NotNull(localClimateSiteUpdated);

            // Delete LocalClimateSite
            var actionLocalClimateSiteDeleted = await LocalClimateSiteDBService.Delete(localClimateSite.ClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalClimateSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalClimateSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalClimateSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalClimateSiteDBService, LocalClimateSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalClimateSiteDBService = Provider.GetService<ILocalClimateSiteDBService>();
            Assert.NotNull(LocalClimateSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalClimateSite GetFilledRandomLocalClimateSite(string OmitPropName)
        {
            LocalClimateSite localClimateSite = new LocalClimateSite();

            if (OmitPropName != "LocalDBCommand") localClimateSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ClimateSiteTVItemID") localClimateSite.ClimateSiteTVItemID = 7;
            if (OmitPropName != "ECDBID") localClimateSite.ECDBID = GetRandomInt(1, 100000);
            if (OmitPropName != "ClimateSiteName") localClimateSite.ClimateSiteName = GetRandomString("", 5);
            if (OmitPropName != "Province") localClimateSite.Province = GetRandomString("", 4);
            if (OmitPropName != "Elevation_m") localClimateSite.Elevation_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "ClimateID") localClimateSite.ClimateID = GetRandomString("", 5);
            if (OmitPropName != "WMOID") localClimateSite.WMOID = GetRandomInt(1, 100000);
            if (OmitPropName != "TCID") localClimateSite.TCID = GetRandomString("", 3);
            if (OmitPropName != "IsQuebecSite") localClimateSite.IsQuebecSite = true;
            if (OmitPropName != "IsCoCoRaHS") localClimateSite.IsCoCoRaHS = true;
            if (OmitPropName != "TimeOffset_hour") localClimateSite.TimeOffset_hour = GetRandomDouble(-10.0D, 0.0D);
            if (OmitPropName != "File_desc") localClimateSite.File_desc = GetRandomString("", 5);
            if (OmitPropName != "HourlyStartDate_Local") localClimateSite.HourlyStartDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "HourlyEndDate_Local") localClimateSite.HourlyEndDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "HourlyNow") localClimateSite.HourlyNow = true;
            if (OmitPropName != "DailyStartDate_Local") localClimateSite.DailyStartDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "DailyEndDate_Local") localClimateSite.DailyEndDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "DailyNow") localClimateSite.DailyNow = true;
            if (OmitPropName != "MonthlyStartDate_Local") localClimateSite.MonthlyStartDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MonthlyEndDate_Local") localClimateSite.MonthlyEndDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MonthlyNow") localClimateSite.MonthlyNow = true;
            if (OmitPropName != "LastUpdateDate_UTC") localClimateSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localClimateSite.LastUpdateContactTVItemID = 2;



            return localClimateSite;
        }
        private void CheckLocalClimateSiteFields(List<LocalClimateSite> localClimateSiteList)
        {
            if (localClimateSiteList[0].ECDBID != null)
            {
                Assert.NotNull(localClimateSiteList[0].ECDBID);
            }
            Assert.False(string.IsNullOrWhiteSpace(localClimateSiteList[0].ClimateSiteName));
            Assert.False(string.IsNullOrWhiteSpace(localClimateSiteList[0].Province));
            if (localClimateSiteList[0].Elevation_m != null)
            {
                Assert.NotNull(localClimateSiteList[0].Elevation_m);
            }
            if (!string.IsNullOrWhiteSpace(localClimateSiteList[0].ClimateID))
            {
                Assert.False(string.IsNullOrWhiteSpace(localClimateSiteList[0].ClimateID));
            }
            if (localClimateSiteList[0].WMOID != null)
            {
                Assert.NotNull(localClimateSiteList[0].WMOID);
            }
            if (!string.IsNullOrWhiteSpace(localClimateSiteList[0].TCID))
            {
                Assert.False(string.IsNullOrWhiteSpace(localClimateSiteList[0].TCID));
            }
            if (localClimateSiteList[0].IsQuebecSite != null)
            {
                Assert.NotNull(localClimateSiteList[0].IsQuebecSite);
            }
            if (localClimateSiteList[0].IsCoCoRaHS != null)
            {
                Assert.NotNull(localClimateSiteList[0].IsCoCoRaHS);
            }
            if (localClimateSiteList[0].TimeOffset_hour != null)
            {
                Assert.NotNull(localClimateSiteList[0].TimeOffset_hour);
            }
            if (!string.IsNullOrWhiteSpace(localClimateSiteList[0].File_desc))
            {
                Assert.False(string.IsNullOrWhiteSpace(localClimateSiteList[0].File_desc));
            }
            if (localClimateSiteList[0].HourlyStartDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].HourlyStartDate_Local);
            }
            if (localClimateSiteList[0].HourlyEndDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].HourlyEndDate_Local);
            }
            if (localClimateSiteList[0].HourlyNow != null)
            {
                Assert.NotNull(localClimateSiteList[0].HourlyNow);
            }
            if (localClimateSiteList[0].DailyStartDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].DailyStartDate_Local);
            }
            if (localClimateSiteList[0].DailyEndDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].DailyEndDate_Local);
            }
            if (localClimateSiteList[0].DailyNow != null)
            {
                Assert.NotNull(localClimateSiteList[0].DailyNow);
            }
            if (localClimateSiteList[0].MonthlyStartDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].MonthlyStartDate_Local);
            }
            if (localClimateSiteList[0].MonthlyEndDate_Local != null)
            {
                Assert.NotNull(localClimateSiteList[0].MonthlyEndDate_Local);
            }
            if (localClimateSiteList[0].MonthlyNow != null)
            {
                Assert.NotNull(localClimateSiteList[0].MonthlyNow);
            }
        }

        #endregion Functions private
    }
}
