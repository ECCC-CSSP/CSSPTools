/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalContactDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalContactDBService LocalContactDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalContact localContact { get; set; }
        #endregion Properties

        #region Constructors
        public LocalContactDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localContact = GetFilledRandomLocalContact("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContact_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalContactList = await LocalContactDBService.GetLocalContactList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactList.Result).Value);
            List<LocalContact> localContactList = (List<LocalContact>)((OkObjectResult)actionLocalContactList.Result).Value;

            count = localContactList.Count();

            LocalContact localContact = GetFilledRandomLocalContact("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localContact.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localContact.ContactID   (Int32)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.ContactID = 0;

            actionLocalContact = await LocalContactDBService.Put(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.ContactID = 10000000;
            actionLocalContact = await LocalContactDBService.Put(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "AspNetUser", ExistPlurial = "s", ExistFieldID = "Id", AllowableTVtypeList = )]
            // [CSSPMaxLength(450)]
            // localContact.Id   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("Id");
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.Id = GetRandomString("", 451);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localContact.ContactTVItemID   (Int32)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.ContactTVItemID = 0;
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.ContactTVItemID = 1;
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(255)]
            // [CSSPMinLength(6)]
            // localContact.LoginEmail   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("LoginEmail");
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LoginEmail = GetRandomString("", 5);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());
            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LoginEmail = GetRandomString("", 256);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localContact.FirstName   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("FirstName");
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.FirstName = GetRandomString("", 101);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localContact.LastName   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("LastName");
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LastName = GetRandomString("", 101);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(50)]
            // localContact.Initial   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.Initial = GetRandomString("", 51);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localContact.WebName   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("WebName");
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.WebName = GetRandomString("", 101);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localContact.ContactTitle   (ContactTitleEnum)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.ContactTitle = (ContactTitleEnum)1000000;
             actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localContact.IsAdmin   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localContact.EmailValidated   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localContact.Disabled   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localContact.IsNew   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(200)]
            // localContact.SamplingPlanner_ProvincesTVItemID   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.SamplingPlanner_ProvincesTVItemID = GetRandomString("", 201);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(255)]
            // localContact.Token   (String)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.Token = GetRandomString("", 256);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            //Assert.AreEqual(count, localContactDBService.GetLocalContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localContact.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LastUpdateDate_UTC = new DateTime();
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);
            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localContact.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LastUpdateContactTVItemID = 0;
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

            localContact = null;
            localContact = GetFilledRandomLocalContact("");
            localContact.LastUpdateContactTVItemID = 1;
            actionLocalContact = await LocalContactDBService.Post(localContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalContact.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalContact
            var actionLocalContactAdded = await LocalContactDBService.Post(localContact);
            Assert.Equal(200, ((ObjectResult)actionLocalContactAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactAdded.Result).Value);
            LocalContact localContactAdded = (LocalContact)((OkObjectResult)actionLocalContactAdded.Result).Value;
            Assert.NotNull(localContactAdded);

            // List<LocalContact>
            var actionLocalContactList = await LocalContactDBService.GetLocalContactList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactList.Result).Value);
            List<LocalContact> localContactList = (List<LocalContact>)((OkObjectResult)actionLocalContactList.Result).Value;

            int count = ((List<LocalContact>)((OkObjectResult)actionLocalContactList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalContact> with skip and take
            var actionLocalContactListSkipAndTake = await LocalContactDBService.GetLocalContactList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalContactListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactListSkipAndTake.Result).Value);
            List<LocalContact> localContactListSkipAndTake = (List<LocalContact>)((OkObjectResult)actionLocalContactListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalContact>)((OkObjectResult)actionLocalContactListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localContactList[0].ContactID == localContactListSkipAndTake[0].ContactID);

            // Get LocalContact With ContactID
            var actionLocalContactGet = await LocalContactDBService.GetLocalContactWithContactID(localContactList[0].ContactID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactGet.Result).Value);
            LocalContact localContactGet = (LocalContact)((OkObjectResult)actionLocalContactGet.Result).Value;
            Assert.NotNull(localContactGet);
            Assert.Equal(localContactGet.ContactID, localContactList[0].ContactID);

            // Put LocalContact
            var actionLocalContactUpdated = await LocalContactDBService.Put(localContact);
            Assert.Equal(200, ((ObjectResult)actionLocalContactUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactUpdated.Result).Value);
            LocalContact localContactUpdated = (LocalContact)((OkObjectResult)actionLocalContactUpdated.Result).Value;
            Assert.NotNull(localContactUpdated);

            // Delete LocalContact
            var actionLocalContactDeleted = await LocalContactDBService.Delete(localContact.ContactID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalContactDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalContactDBService, LocalContactDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalContactDBService = Provider.GetService<ILocalContactDBService>();
            Assert.NotNull(LocalContactDBService);

            return await Task.FromResult(true);
        }
        private LocalContact GetFilledRandomLocalContact(string OmitPropName)
        {
            LocalContact localContact = new LocalContact();

            if (OmitPropName != "LocalDBCommand") localContact.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "Id") localContact.Id = "023566a4-4a25-4484-88f5-584aa8e1da38";
            if (OmitPropName != "ContactTVItemID") localContact.ContactTVItemID = 2;
            if (OmitPropName != "LoginEmail") localContact.LoginEmail = GetRandomEmail();
            if (OmitPropName != "FirstName") localContact.FirstName = GetRandomString("", 5);
            if (OmitPropName != "LastName") localContact.LastName = GetRandomString("", 5);
            if (OmitPropName != "Initial") localContact.Initial = GetRandomString("", 5);
            if (OmitPropName != "WebName") localContact.WebName = GetRandomString("", 5);
            if (OmitPropName != "ContactTitle") localContact.ContactTitle = (ContactTitleEnum)GetRandomEnumType(typeof(ContactTitleEnum));
            if (OmitPropName != "IsAdmin") localContact.IsAdmin = true;
            if (OmitPropName != "EmailValidated") localContact.EmailValidated = true;
            if (OmitPropName != "Disabled") localContact.Disabled = true;
            if (OmitPropName != "IsNew") localContact.IsNew = true;
            if (OmitPropName != "SamplingPlanner_ProvincesTVItemID") localContact.SamplingPlanner_ProvincesTVItemID = GetRandomString("", 5);
            if (OmitPropName != "Token") localContact.Token = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localContact.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localContact.LastUpdateContactTVItemID = 2;



            return localContact;
        }
        private void CheckLocalContactFields(List<LocalContact> localContactList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localContactList[0].Id));
            Assert.False(string.IsNullOrWhiteSpace(localContactList[0].LoginEmail));
            Assert.False(string.IsNullOrWhiteSpace(localContactList[0].FirstName));
            Assert.False(string.IsNullOrWhiteSpace(localContactList[0].LastName));
            if (!string.IsNullOrWhiteSpace(localContactList[0].Initial))
            {
                Assert.False(string.IsNullOrWhiteSpace(localContactList[0].Initial));
            }
            Assert.False(string.IsNullOrWhiteSpace(localContactList[0].WebName));
            if (localContactList[0].ContactTitle != null)
            {
                Assert.NotNull(localContactList[0].ContactTitle);
            }
            if (!string.IsNullOrWhiteSpace(localContactList[0].SamplingPlanner_ProvincesTVItemID))
            {
                Assert.False(string.IsNullOrWhiteSpace(localContactList[0].SamplingPlanner_ProvincesTVItemID));
            }
            if (!string.IsNullOrWhiteSpace(localContactList[0].Token))
            {
                Assert.False(string.IsNullOrWhiteSpace(localContactList[0].Token));
            }
        }

        #endregion Functions private
    }
}
