/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalContactPreferenceDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalContactPreferenceDBService LocalContactPreferenceDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalContactPreference localContactPreference { get; set; }
        #endregion Properties

        #region Constructors
        public LocalContactPreferenceDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactPreferenceDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactPreferenceDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localContactPreference = GetFilledRandomLocalContactPreference("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactPreference_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalContactPreferenceList = await LocalContactPreferenceDBService.GetLocalContactPreferenceList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceList.Result).Value);
            List<LocalContactPreference> localContactPreferenceList = (List<LocalContactPreference>)((OkObjectResult)actionLocalContactPreferenceList.Result).Value;

            count = localContactPreferenceList.Count();

            LocalContactPreference localContactPreference = GetFilledRandomLocalContactPreference("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localContactPreference.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localContactPreference.ContactPreferenceID   (Int32)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.ContactPreferenceID = 0;

            actionLocalContactPreference = await LocalContactPreferenceDBService.Put(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.ContactPreferenceID = 10000000;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Put(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "Contact", ExistPlurial = "s", ExistFieldID = "ContactID", AllowableTVtypeList = )]
            // localContactPreference.ContactID   (Int32)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.ContactID = 0;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localContactPreference.TVType   (TVTypeEnum)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.TVType = (TVTypeEnum)1000000;
             actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 1000)]
            // localContactPreference.MarkerSize   (Int32)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.MarkerSize = 0;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);
            //Assert.AreEqual(count, localContactPreferenceService.GetLocalContactPreferenceList().Count());
            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.MarkerSize = 1001;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);
            //Assert.AreEqual(count, localContactPreferenceDBService.GetLocalContactPreferenceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localContactPreference.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.LastUpdateDate_UTC = new DateTime();
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);
            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localContactPreference.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.LastUpdateContactTVItemID = 0;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);

            localContactPreference = null;
            localContactPreference = GetFilledRandomLocalContactPreference("");
            localContactPreference.LastUpdateContactTVItemID = 1;
            actionLocalContactPreference = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactPreference.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalContactPreference
            var actionLocalContactPreferenceAdded = await LocalContactPreferenceDBService.Post(localContactPreference);
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceAdded.Result).Value);
            LocalContactPreference localContactPreferenceAdded = (LocalContactPreference)((OkObjectResult)actionLocalContactPreferenceAdded.Result).Value;
            Assert.NotNull(localContactPreferenceAdded);

            // List<LocalContactPreference>
            var actionLocalContactPreferenceList = await LocalContactPreferenceDBService.GetLocalContactPreferenceList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceList.Result).Value);
            List<LocalContactPreference> localContactPreferenceList = (List<LocalContactPreference>)((OkObjectResult)actionLocalContactPreferenceList.Result).Value;

            int count = ((List<LocalContactPreference>)((OkObjectResult)actionLocalContactPreferenceList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalContactPreference> with skip and take
            var actionLocalContactPreferenceListSkipAndTake = await LocalContactPreferenceDBService.GetLocalContactPreferenceList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceListSkipAndTake.Result).Value);
            List<LocalContactPreference> localContactPreferenceListSkipAndTake = (List<LocalContactPreference>)((OkObjectResult)actionLocalContactPreferenceListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalContactPreference>)((OkObjectResult)actionLocalContactPreferenceListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localContactPreferenceList[0].ContactPreferenceID == localContactPreferenceListSkipAndTake[0].ContactPreferenceID);

            // Get LocalContactPreference With ContactPreferenceID
            var actionLocalContactPreferenceGet = await LocalContactPreferenceDBService.GetLocalContactPreferenceWithContactPreferenceID(localContactPreferenceList[0].ContactPreferenceID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceGet.Result).Value);
            LocalContactPreference localContactPreferenceGet = (LocalContactPreference)((OkObjectResult)actionLocalContactPreferenceGet.Result).Value;
            Assert.NotNull(localContactPreferenceGet);
            Assert.Equal(localContactPreferenceGet.ContactPreferenceID, localContactPreferenceList[0].ContactPreferenceID);

            // Put LocalContactPreference
            var actionLocalContactPreferenceUpdated = await LocalContactPreferenceDBService.Put(localContactPreference);
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceUpdated.Result).Value);
            LocalContactPreference localContactPreferenceUpdated = (LocalContactPreference)((OkObjectResult)actionLocalContactPreferenceUpdated.Result).Value;
            Assert.NotNull(localContactPreferenceUpdated);

            // Delete LocalContactPreference
            var actionLocalContactPreferenceDeleted = await LocalContactPreferenceDBService.Delete(localContactPreference.ContactPreferenceID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactPreferenceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactPreferenceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalContactPreferenceDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalContactPreferenceDBService, LocalContactPreferenceDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalContactPreferenceDBService = Provider.GetService<ILocalContactPreferenceDBService>();
            Assert.NotNull(LocalContactPreferenceDBService);

            return await Task.FromResult(true);
        }
        private LocalContactPreference GetFilledRandomLocalContactPreference(string OmitPropName)
        {
            LocalContactPreference localContactPreference = new LocalContactPreference();

            if (OmitPropName != "LocalDBCommand") localContactPreference.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ContactID") localContactPreference.ContactID = 0;
            if (OmitPropName != "TVType") localContactPreference.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "MarkerSize") localContactPreference.MarkerSize = GetRandomInt(1, 1000);
            if (OmitPropName != "LastUpdateDate_UTC") localContactPreference.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localContactPreference.LastUpdateContactTVItemID = 2;



            return localContactPreference;
        }
        private void CheckLocalContactPreferenceFields(List<LocalContactPreference> localContactPreferenceList)
        {
        }

        #endregion Functions private
    }
}
