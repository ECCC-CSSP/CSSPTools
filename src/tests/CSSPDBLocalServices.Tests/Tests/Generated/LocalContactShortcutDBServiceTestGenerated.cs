/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalContactShortcutDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalContactShortcutDBService LocalContactShortcutDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalContactShortcut localContactShortcut { get; set; }
        #endregion Properties

        #region Constructors
        public LocalContactShortcutDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactShortcutDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactShortcutDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localContactShortcut = GetFilledRandomLocalContactShortcut("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalContactShortcut_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalContactShortcutList = await LocalContactShortcutDBService.GetLocalContactShortcutList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutList.Result).Value);
            List<LocalContactShortcut> localContactShortcutList = (List<LocalContactShortcut>)((OkObjectResult)actionLocalContactShortcutList.Result).Value;

            count = localContactShortcutList.Count();

            LocalContactShortcut localContactShortcut = GetFilledRandomLocalContactShortcut("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localContactShortcut.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localContactShortcut.ContactShortcutID   (Int32)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.ContactShortcutID = 0;

            actionLocalContactShortcut = await LocalContactShortcutDBService.Put(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.ContactShortcutID = 10000000;
            actionLocalContactShortcut = await LocalContactShortcutDBService.Put(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "Contact", ExistPlurial = "s", ExistFieldID = "ContactID", AllowableTVtypeList = )]
            // localContactShortcut.ContactID   (Int32)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.ContactID = 0;
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localContactShortcut.ShortCutText   (String)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("ShortCutText");
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.ShortCutText = GetRandomString("", 101);
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);
            //Assert.AreEqual(count, localContactShortcutDBService.GetLocalContactShortcutList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(200)]
            // localContactShortcut.ShortCutAddress   (String)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("ShortCutAddress");
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.ShortCutAddress = GetRandomString("", 201);
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);
            //Assert.AreEqual(count, localContactShortcutDBService.GetLocalContactShortcutList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localContactShortcut.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.LastUpdateDate_UTC = new DateTime();
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);
            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localContactShortcut.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.LastUpdateContactTVItemID = 0;
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

            localContactShortcut = null;
            localContactShortcut = GetFilledRandomLocalContactShortcut("");
            localContactShortcut.LastUpdateContactTVItemID = 1;
            actionLocalContactShortcut = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.IsType<BadRequestObjectResult>(actionLocalContactShortcut.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalContactShortcut
            var actionLocalContactShortcutAdded = await LocalContactShortcutDBService.Post(localContactShortcut);
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutAdded.Result).Value);
            LocalContactShortcut localContactShortcutAdded = (LocalContactShortcut)((OkObjectResult)actionLocalContactShortcutAdded.Result).Value;
            Assert.NotNull(localContactShortcutAdded);

            // List<LocalContactShortcut>
            var actionLocalContactShortcutList = await LocalContactShortcutDBService.GetLocalContactShortcutList();
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutList.Result).Value);
            List<LocalContactShortcut> localContactShortcutList = (List<LocalContactShortcut>)((OkObjectResult)actionLocalContactShortcutList.Result).Value;

            int count = ((List<LocalContactShortcut>)((OkObjectResult)actionLocalContactShortcutList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalContactShortcut> with skip and take
            var actionLocalContactShortcutListSkipAndTake = await LocalContactShortcutDBService.GetLocalContactShortcutList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutListSkipAndTake.Result).Value);
            List<LocalContactShortcut> localContactShortcutListSkipAndTake = (List<LocalContactShortcut>)((OkObjectResult)actionLocalContactShortcutListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalContactShortcut>)((OkObjectResult)actionLocalContactShortcutListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localContactShortcutList[0].ContactShortcutID == localContactShortcutListSkipAndTake[0].ContactShortcutID);

            // Get LocalContactShortcut With ContactShortcutID
            var actionLocalContactShortcutGet = await LocalContactShortcutDBService.GetLocalContactShortcutWithContactShortcutID(localContactShortcutList[0].ContactShortcutID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutGet.Result).Value);
            LocalContactShortcut localContactShortcutGet = (LocalContactShortcut)((OkObjectResult)actionLocalContactShortcutGet.Result).Value;
            Assert.NotNull(localContactShortcutGet);
            Assert.Equal(localContactShortcutGet.ContactShortcutID, localContactShortcutList[0].ContactShortcutID);

            // Put LocalContactShortcut
            var actionLocalContactShortcutUpdated = await LocalContactShortcutDBService.Put(localContactShortcut);
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutUpdated.Result).Value);
            LocalContactShortcut localContactShortcutUpdated = (LocalContactShortcut)((OkObjectResult)actionLocalContactShortcutUpdated.Result).Value;
            Assert.NotNull(localContactShortcutUpdated);

            // Delete LocalContactShortcut
            var actionLocalContactShortcutDeleted = await LocalContactShortcutDBService.Delete(localContactShortcut.ContactShortcutID);
            Assert.Equal(200, ((ObjectResult)actionLocalContactShortcutDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalContactShortcutDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalContactShortcutDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalContactShortcutDBService, LocalContactShortcutDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalContactShortcutDBService = Provider.GetService<ILocalContactShortcutDBService>();
            Assert.NotNull(LocalContactShortcutDBService);

            return await Task.FromResult(true);
        }
        private LocalContactShortcut GetFilledRandomLocalContactShortcut(string OmitPropName)
        {
            LocalContactShortcut localContactShortcut = new LocalContactShortcut();

            if (OmitPropName != "LocalDBCommand") localContactShortcut.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ContactID") localContactShortcut.ContactID = 0;
            if (OmitPropName != "ShortCutText") localContactShortcut.ShortCutText = GetRandomString("", 5);
            if (OmitPropName != "ShortCutAddress") localContactShortcut.ShortCutAddress = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localContactShortcut.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localContactShortcut.LastUpdateContactTVItemID = 2;



            return localContactShortcut;
        }
        private void CheckLocalContactShortcutFields(List<LocalContactShortcut> localContactShortcutList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localContactShortcutList[0].ShortCutText));
            Assert.False(string.IsNullOrWhiteSpace(localContactShortcutList[0].ShortCutAddress));
        }

        #endregion Functions private
    }
}
