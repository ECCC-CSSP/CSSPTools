/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalDocTemplateDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalDocTemplateDBService LocalDocTemplateDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalDocTemplate localDocTemplate { get; set; }
        #endregion Properties

        #region Constructors
        public LocalDocTemplateDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDocTemplateDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDocTemplateDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localDocTemplate = GetFilledRandomLocalDocTemplate("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDocTemplate_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalDocTemplateList = await LocalDocTemplateDBService.GetLocalDocTemplateList();
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateList.Result).Value);
            List<LocalDocTemplate> localDocTemplateList = (List<LocalDocTemplate>)((OkObjectResult)actionLocalDocTemplateList.Result).Value;

            count = localDocTemplateList.Count();

            LocalDocTemplate localDocTemplate = GetFilledRandomLocalDocTemplate("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDocTemplate.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localDocTemplate.DocTemplateID   (Int32)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.DocTemplateID = 0;

            actionLocalDocTemplate = await LocalDocTemplateDBService.Put(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.DocTemplateID = 10000000;
            actionLocalDocTemplate = await LocalDocTemplateDBService.Put(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDocTemplate.Language   (LanguageEnum)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.Language = (LanguageEnum)1000000;
             actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDocTemplate.TVType   (TVTypeEnum)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.TVType = (TVTypeEnum)1000000;
             actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // localDocTemplate.TVFileTVItemID   (Int32)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.TVFileTVItemID = 0;
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.TVFileTVItemID = 1;
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(150)]
            // localDocTemplate.FileName   (String)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("FileName");
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.FileName = GetRandomString("", 151);
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);
            //Assert.AreEqual(count, localDocTemplateDBService.GetLocalDocTemplateList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localDocTemplate.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.LastUpdateDate_UTC = new DateTime();
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);
            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localDocTemplate.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.LastUpdateContactTVItemID = 0;
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

            localDocTemplate = null;
            localDocTemplate = GetFilledRandomLocalDocTemplate("");
            localDocTemplate.LastUpdateContactTVItemID = 1;
            actionLocalDocTemplate = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.IsType<BadRequestObjectResult>(actionLocalDocTemplate.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalDocTemplate
            var actionLocalDocTemplateAdded = await LocalDocTemplateDBService.Post(localDocTemplate);
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateAdded.Result).Value);
            LocalDocTemplate localDocTemplateAdded = (LocalDocTemplate)((OkObjectResult)actionLocalDocTemplateAdded.Result).Value;
            Assert.NotNull(localDocTemplateAdded);

            // List<LocalDocTemplate>
            var actionLocalDocTemplateList = await LocalDocTemplateDBService.GetLocalDocTemplateList();
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateList.Result).Value);
            List<LocalDocTemplate> localDocTemplateList = (List<LocalDocTemplate>)((OkObjectResult)actionLocalDocTemplateList.Result).Value;

            int count = ((List<LocalDocTemplate>)((OkObjectResult)actionLocalDocTemplateList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalDocTemplate> with skip and take
            var actionLocalDocTemplateListSkipAndTake = await LocalDocTemplateDBService.GetLocalDocTemplateList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateListSkipAndTake.Result).Value);
            List<LocalDocTemplate> localDocTemplateListSkipAndTake = (List<LocalDocTemplate>)((OkObjectResult)actionLocalDocTemplateListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalDocTemplate>)((OkObjectResult)actionLocalDocTemplateListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localDocTemplateList[0].DocTemplateID == localDocTemplateListSkipAndTake[0].DocTemplateID);

            // Get LocalDocTemplate With DocTemplateID
            var actionLocalDocTemplateGet = await LocalDocTemplateDBService.GetLocalDocTemplateWithDocTemplateID(localDocTemplateList[0].DocTemplateID);
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateGet.Result).Value);
            LocalDocTemplate localDocTemplateGet = (LocalDocTemplate)((OkObjectResult)actionLocalDocTemplateGet.Result).Value;
            Assert.NotNull(localDocTemplateGet);
            Assert.Equal(localDocTemplateGet.DocTemplateID, localDocTemplateList[0].DocTemplateID);

            // Put LocalDocTemplate
            var actionLocalDocTemplateUpdated = await LocalDocTemplateDBService.Put(localDocTemplate);
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateUpdated.Result).Value);
            LocalDocTemplate localDocTemplateUpdated = (LocalDocTemplate)((OkObjectResult)actionLocalDocTemplateUpdated.Result).Value;
            Assert.NotNull(localDocTemplateUpdated);

            // Delete LocalDocTemplate
            var actionLocalDocTemplateDeleted = await LocalDocTemplateDBService.Delete(localDocTemplate.DocTemplateID);
            Assert.Equal(200, ((ObjectResult)actionLocalDocTemplateDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDocTemplateDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalDocTemplateDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalDocTemplateDBService, LocalDocTemplateDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalDocTemplateDBService = Provider.GetService<ILocalDocTemplateDBService>();
            Assert.NotNull(LocalDocTemplateDBService);

            return await Task.FromResult(true);
        }
        private LocalDocTemplate GetFilledRandomLocalDocTemplate(string OmitPropName)
        {
            LocalDocTemplate localDocTemplate = new LocalDocTemplate();

            if (OmitPropName != "LocalDBCommand") localDocTemplate.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "Language") localDocTemplate.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "TVType") localDocTemplate.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "TVFileTVItemID") localDocTemplate.TVFileTVItemID = 42;
            if (OmitPropName != "FileName") localDocTemplate.FileName = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localDocTemplate.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localDocTemplate.LastUpdateContactTVItemID = 2;



            return localDocTemplate;
        }
        private void CheckLocalDocTemplateFields(List<LocalDocTemplate> localDocTemplateList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localDocTemplateList[0].FileName));
        }

        #endregion Functions private
    }
}
