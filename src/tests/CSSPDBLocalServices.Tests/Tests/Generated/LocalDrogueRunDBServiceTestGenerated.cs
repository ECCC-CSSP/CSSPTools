/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalDrogueRunDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalDrogueRunDBService LocalDrogueRunDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalDrogueRun localDrogueRun { get; set; }
        #endregion Properties

        #region Constructors
        public LocalDrogueRunDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRunDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRunDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localDrogueRun = GetFilledRandomLocalDrogueRun("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRun_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalDrogueRunList = await LocalDrogueRunDBService.GetLocalDrogueRunList();
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunList.Result).Value);
            List<LocalDrogueRun> localDrogueRunList = (List<LocalDrogueRun>)((OkObjectResult)actionLocalDrogueRunList.Result).Value;

            count = localDrogueRunList.Count();

            LocalDrogueRun localDrogueRun = GetFilledRandomLocalDrogueRun("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDrogueRun.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localDrogueRun.DrogueRunID   (Int32)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.DrogueRunID = 0;

            actionLocalDrogueRun = await LocalDrogueRunDBService.Put(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.DrogueRunID = 10000000;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Put(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localDrogueRun.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.SubsectorTVItemID = 0;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.SubsectorTVItemID = 1;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localDrogueRun.DrogueNumber   (Int32)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.DrogueNumber = -1;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);
            //Assert.AreEqual(count, localDrogueRunService.GetLocalDrogueRunList().Count());
            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.DrogueNumber = 101;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);
            //Assert.AreEqual(count, localDrogueRunDBService.GetLocalDrogueRunList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDrogueRun.DrogueType   (DrogueTypeEnum)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.DrogueType = (DrogueTypeEnum)1000000;
             actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localDrogueRun.RunStartDateTime   (DateTime)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.RunStartDateTime = new DateTime();
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);
            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.RunStartDateTime = new DateTime(1979, 1, 1);
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

            // -----------------------------------
            // Is NOT Nullable
            // localDrogueRun.IsRisingTide   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localDrogueRun.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.LastUpdateDate_UTC = new DateTime();
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);
            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localDrogueRun.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.LastUpdateContactTVItemID = 0;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

            localDrogueRun = null;
            localDrogueRun = GetFilledRandomLocalDrogueRun("");
            localDrogueRun.LastUpdateContactTVItemID = 1;
            actionLocalDrogueRun = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRun.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalDrogueRun
            var actionLocalDrogueRunAdded = await LocalDrogueRunDBService.Post(localDrogueRun);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunAdded.Result).Value);
            LocalDrogueRun localDrogueRunAdded = (LocalDrogueRun)((OkObjectResult)actionLocalDrogueRunAdded.Result).Value;
            Assert.NotNull(localDrogueRunAdded);

            // List<LocalDrogueRun>
            var actionLocalDrogueRunList = await LocalDrogueRunDBService.GetLocalDrogueRunList();
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunList.Result).Value);
            List<LocalDrogueRun> localDrogueRunList = (List<LocalDrogueRun>)((OkObjectResult)actionLocalDrogueRunList.Result).Value;

            int count = ((List<LocalDrogueRun>)((OkObjectResult)actionLocalDrogueRunList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalDrogueRun> with skip and take
            var actionLocalDrogueRunListSkipAndTake = await LocalDrogueRunDBService.GetLocalDrogueRunList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunListSkipAndTake.Result).Value);
            List<LocalDrogueRun> localDrogueRunListSkipAndTake = (List<LocalDrogueRun>)((OkObjectResult)actionLocalDrogueRunListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalDrogueRun>)((OkObjectResult)actionLocalDrogueRunListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localDrogueRunList[0].DrogueRunID == localDrogueRunListSkipAndTake[0].DrogueRunID);

            // Get LocalDrogueRun With DrogueRunID
            var actionLocalDrogueRunGet = await LocalDrogueRunDBService.GetLocalDrogueRunWithDrogueRunID(localDrogueRunList[0].DrogueRunID);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunGet.Result).Value);
            LocalDrogueRun localDrogueRunGet = (LocalDrogueRun)((OkObjectResult)actionLocalDrogueRunGet.Result).Value;
            Assert.NotNull(localDrogueRunGet);
            Assert.Equal(localDrogueRunGet.DrogueRunID, localDrogueRunList[0].DrogueRunID);

            // Put LocalDrogueRun
            var actionLocalDrogueRunUpdated = await LocalDrogueRunDBService.Put(localDrogueRun);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunUpdated.Result).Value);
            LocalDrogueRun localDrogueRunUpdated = (LocalDrogueRun)((OkObjectResult)actionLocalDrogueRunUpdated.Result).Value;
            Assert.NotNull(localDrogueRunUpdated);

            // Delete LocalDrogueRun
            var actionLocalDrogueRunDeleted = await LocalDrogueRunDBService.Delete(localDrogueRun.DrogueRunID);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalDrogueRunDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalDrogueRunDBService, LocalDrogueRunDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalDrogueRunDBService = Provider.GetService<ILocalDrogueRunDBService>();
            Assert.NotNull(LocalDrogueRunDBService);

            return await Task.FromResult(true);
        }
        private LocalDrogueRun GetFilledRandomLocalDrogueRun(string OmitPropName)
        {
            LocalDrogueRun localDrogueRun = new LocalDrogueRun();

            if (OmitPropName != "LocalDBCommand") localDrogueRun.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SubsectorTVItemID") localDrogueRun.SubsectorTVItemID = 11;
            if (OmitPropName != "DrogueNumber") localDrogueRun.DrogueNumber = GetRandomInt(0, 100);
            if (OmitPropName != "DrogueType") localDrogueRun.DrogueType = (DrogueTypeEnum)GetRandomEnumType(typeof(DrogueTypeEnum));
            if (OmitPropName != "RunStartDateTime") localDrogueRun.RunStartDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IsRisingTide") localDrogueRun.IsRisingTide = true;
            if (OmitPropName != "LastUpdateDate_UTC") localDrogueRun.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localDrogueRun.LastUpdateContactTVItemID = 2;



            return localDrogueRun;
        }
        private void CheckLocalDrogueRunFields(List<LocalDrogueRun> localDrogueRunList)
        {
        }

        #endregion Functions private
    }
}
