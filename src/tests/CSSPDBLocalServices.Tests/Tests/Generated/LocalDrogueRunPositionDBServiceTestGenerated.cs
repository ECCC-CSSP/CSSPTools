/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalDrogueRunPositionDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalDrogueRunPositionDBService LocalDrogueRunPositionDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalDrogueRunPosition localDrogueRunPosition { get; set; }
        #endregion Properties

        #region Constructors
        public LocalDrogueRunPositionDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRunPositionDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRunPositionDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalDrogueRunPosition_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalDrogueRunPositionList = await LocalDrogueRunPositionDBService.GetLocalDrogueRunPositionList();
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionList.Result).Value);
            List<LocalDrogueRunPosition> localDrogueRunPositionList = (List<LocalDrogueRunPosition>)((OkObjectResult)actionLocalDrogueRunPositionList.Result).Value;

            count = localDrogueRunPositionList.Count();

            LocalDrogueRunPosition localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localDrogueRunPosition.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localDrogueRunPosition.DrogueRunPositionID   (Int32)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.DrogueRunPositionID = 0;

            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Put(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.DrogueRunPositionID = 10000000;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Put(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "DrogueRun", ExistPlurial = "s", ExistFieldID = "DrogueRunID", AllowableTVtypeList = )]
            // localDrogueRunPosition.DrogueRunID   (Int32)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.DrogueRunID = 0;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000)]
            // localDrogueRunPosition.Ordinal   (Int32)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.Ordinal = -1;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionService.GetLocalDrogueRunPositionList().Count());
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.Ordinal = 100001;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionDBService.GetLocalDrogueRunPositionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // localDrogueRunPosition.StepLat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [StepLat]

            //CSSPError: Type not implemented [StepLat]

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepLat = -181.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionService.GetLocalDrogueRunPositionList().Count());
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepLat = 181.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionDBService.GetLocalDrogueRunPositionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // localDrogueRunPosition.StepLng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [StepLng]

            //CSSPError: Type not implemented [StepLng]

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepLng = -91.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionService.GetLocalDrogueRunPositionList().Count());
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepLng = 91.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionDBService.GetLocalDrogueRunPositionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localDrogueRunPosition.StepDateTime_Local   (DateTime)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepDateTime_Local = new DateTime();
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.StepDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10)]
            // localDrogueRunPosition.CalculatedSpeed_m_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [CalculatedSpeed_m_s]

            //CSSPError: Type not implemented [CalculatedSpeed_m_s]

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.CalculatedSpeed_m_s = -1.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionService.GetLocalDrogueRunPositionList().Count());
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.CalculatedSpeed_m_s = 11.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionDBService.GetLocalDrogueRunPositionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 360)]
            // localDrogueRunPosition.CalculatedDirection_deg   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [CalculatedDirection_deg]

            //CSSPError: Type not implemented [CalculatedDirection_deg]

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.CalculatedDirection_deg = -1.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionService.GetLocalDrogueRunPositionList().Count());
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.CalculatedDirection_deg = 361.0D;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            //Assert.AreEqual(count, localDrogueRunPositionDBService.GetLocalDrogueRunPositionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localDrogueRunPosition.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.LastUpdateDate_UTC = new DateTime();
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);
            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localDrogueRunPosition.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.LastUpdateContactTVItemID = 0;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);

            localDrogueRunPosition = null;
            localDrogueRunPosition = GetFilledRandomLocalDrogueRunPosition("");
            localDrogueRunPosition.LastUpdateContactTVItemID = 1;
            actionLocalDrogueRunPosition = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.IsType<BadRequestObjectResult>(actionLocalDrogueRunPosition.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalDrogueRunPosition
            var actionLocalDrogueRunPositionAdded = await LocalDrogueRunPositionDBService.Post(localDrogueRunPosition);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionAdded.Result).Value);
            LocalDrogueRunPosition localDrogueRunPositionAdded = (LocalDrogueRunPosition)((OkObjectResult)actionLocalDrogueRunPositionAdded.Result).Value;
            Assert.NotNull(localDrogueRunPositionAdded);

            // List<LocalDrogueRunPosition>
            var actionLocalDrogueRunPositionList = await LocalDrogueRunPositionDBService.GetLocalDrogueRunPositionList();
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionList.Result).Value);
            List<LocalDrogueRunPosition> localDrogueRunPositionList = (List<LocalDrogueRunPosition>)((OkObjectResult)actionLocalDrogueRunPositionList.Result).Value;

            int count = ((List<LocalDrogueRunPosition>)((OkObjectResult)actionLocalDrogueRunPositionList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalDrogueRunPosition> with skip and take
            var actionLocalDrogueRunPositionListSkipAndTake = await LocalDrogueRunPositionDBService.GetLocalDrogueRunPositionList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionListSkipAndTake.Result).Value);
            List<LocalDrogueRunPosition> localDrogueRunPositionListSkipAndTake = (List<LocalDrogueRunPosition>)((OkObjectResult)actionLocalDrogueRunPositionListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalDrogueRunPosition>)((OkObjectResult)actionLocalDrogueRunPositionListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localDrogueRunPositionList[0].DrogueRunPositionID == localDrogueRunPositionListSkipAndTake[0].DrogueRunPositionID);

            // Get LocalDrogueRunPosition With DrogueRunPositionID
            var actionLocalDrogueRunPositionGet = await LocalDrogueRunPositionDBService.GetLocalDrogueRunPositionWithDrogueRunPositionID(localDrogueRunPositionList[0].DrogueRunPositionID);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionGet.Result).Value);
            LocalDrogueRunPosition localDrogueRunPositionGet = (LocalDrogueRunPosition)((OkObjectResult)actionLocalDrogueRunPositionGet.Result).Value;
            Assert.NotNull(localDrogueRunPositionGet);
            Assert.Equal(localDrogueRunPositionGet.DrogueRunPositionID, localDrogueRunPositionList[0].DrogueRunPositionID);

            // Put LocalDrogueRunPosition
            var actionLocalDrogueRunPositionUpdated = await LocalDrogueRunPositionDBService.Put(localDrogueRunPosition);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionUpdated.Result).Value);
            LocalDrogueRunPosition localDrogueRunPositionUpdated = (LocalDrogueRunPosition)((OkObjectResult)actionLocalDrogueRunPositionUpdated.Result).Value;
            Assert.NotNull(localDrogueRunPositionUpdated);

            // Delete LocalDrogueRunPosition
            var actionLocalDrogueRunPositionDeleted = await LocalDrogueRunPositionDBService.Delete(localDrogueRunPosition.DrogueRunPositionID);
            Assert.Equal(200, ((ObjectResult)actionLocalDrogueRunPositionDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalDrogueRunPositionDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalDrogueRunPositionDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalDrogueRunPositionDBService, LocalDrogueRunPositionDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalDrogueRunPositionDBService = Provider.GetService<ILocalDrogueRunPositionDBService>();
            Assert.NotNull(LocalDrogueRunPositionDBService);

            return await Task.FromResult(true);
        }
        private LocalDrogueRunPosition GetFilledRandomLocalDrogueRunPosition(string OmitPropName)
        {
            LocalDrogueRunPosition localDrogueRunPosition = new LocalDrogueRunPosition();

            if (OmitPropName != "LocalDBCommand") localDrogueRunPosition.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "DrogueRunID") localDrogueRunPosition.DrogueRunID = 0;
            if (OmitPropName != "Ordinal") localDrogueRunPosition.Ordinal = GetRandomInt(0, 100000);
            if (OmitPropName != "StepLat") localDrogueRunPosition.StepLat = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "StepLng") localDrogueRunPosition.StepLng = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "StepDateTime_Local") localDrogueRunPosition.StepDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "CalculatedSpeed_m_s") localDrogueRunPosition.CalculatedSpeed_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "CalculatedDirection_deg") localDrogueRunPosition.CalculatedDirection_deg = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localDrogueRunPosition.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localDrogueRunPosition.LastUpdateContactTVItemID = 2;



            return localDrogueRunPosition;
        }
        private void CheckLocalDrogueRunPositionFields(List<LocalDrogueRunPosition> localDrogueRunPositionList)
        {
        }

        #endregion Functions private
    }
}
