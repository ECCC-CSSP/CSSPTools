/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalEmailDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalEmailDBService LocalEmailDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalEmail localEmail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalEmailDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localEmail = GetFilledRandomLocalEmail("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmail_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalEmailList = await LocalEmailDBService.GetLocalEmailList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailList.Result).Value);
            List<LocalEmail> localEmailList = (List<LocalEmail>)((OkObjectResult)actionLocalEmailList.Result).Value;

            count = localEmailList.Count();

            LocalEmail localEmail = GetFilledRandomLocalEmail("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmail.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localEmail.EmailID   (Int32)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailID = 0;

            actionLocalEmail = await LocalEmailDBService.Put(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailID = 10000000;
            actionLocalEmail = await LocalEmailDBService.Put(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Email)]
            // localEmail.EmailTVItemID   (Int32)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailTVItemID = 0;
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailTVItemID = 1;
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(255)]
            // localEmail.EmailAddress   (String)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("EmailAddress");
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailAddress = GetRandomString("", 256);
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);
            //Assert.AreEqual(count, localEmailDBService.GetLocalEmailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmail.EmailType   (EmailTypeEnum)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.EmailType = (EmailTypeEnum)1000000;
             actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localEmail.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.LastUpdateDate_UTC = new DateTime();
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);
            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localEmail.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.LastUpdateContactTVItemID = 0;
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

            localEmail = null;
            localEmail = GetFilledRandomLocalEmail("");
            localEmail.LastUpdateContactTVItemID = 1;
            actionLocalEmail = await LocalEmailDBService.Post(localEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmail.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalEmail
            var actionLocalEmailAdded = await LocalEmailDBService.Post(localEmail);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailAdded.Result).Value);
            LocalEmail localEmailAdded = (LocalEmail)((OkObjectResult)actionLocalEmailAdded.Result).Value;
            Assert.NotNull(localEmailAdded);

            // List<LocalEmail>
            var actionLocalEmailList = await LocalEmailDBService.GetLocalEmailList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailList.Result).Value);
            List<LocalEmail> localEmailList = (List<LocalEmail>)((OkObjectResult)actionLocalEmailList.Result).Value;

            int count = ((List<LocalEmail>)((OkObjectResult)actionLocalEmailList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalEmail> with skip and take
            var actionLocalEmailListSkipAndTake = await LocalEmailDBService.GetLocalEmailList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailListSkipAndTake.Result).Value);
            List<LocalEmail> localEmailListSkipAndTake = (List<LocalEmail>)((OkObjectResult)actionLocalEmailListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalEmail>)((OkObjectResult)actionLocalEmailListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localEmailList[0].EmailID == localEmailListSkipAndTake[0].EmailID);

            // Get LocalEmail With EmailID
            var actionLocalEmailGet = await LocalEmailDBService.GetLocalEmailWithEmailID(localEmailList[0].EmailID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailGet.Result).Value);
            LocalEmail localEmailGet = (LocalEmail)((OkObjectResult)actionLocalEmailGet.Result).Value;
            Assert.NotNull(localEmailGet);
            Assert.Equal(localEmailGet.EmailID, localEmailList[0].EmailID);

            // Put LocalEmail
            var actionLocalEmailUpdated = await LocalEmailDBService.Put(localEmail);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailUpdated.Result).Value);
            LocalEmail localEmailUpdated = (LocalEmail)((OkObjectResult)actionLocalEmailUpdated.Result).Value;
            Assert.NotNull(localEmailUpdated);

            // Delete LocalEmail
            var actionLocalEmailDeleted = await LocalEmailDBService.Delete(localEmail.EmailID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalEmailDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalEmailDBService, LocalEmailDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalEmailDBService = Provider.GetService<ILocalEmailDBService>();
            Assert.NotNull(LocalEmailDBService);

            return await Task.FromResult(true);
        }
        private LocalEmail GetFilledRandomLocalEmail(string OmitPropName)
        {
            LocalEmail localEmail = new LocalEmail();

            if (OmitPropName != "LocalDBCommand") localEmail.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "EmailTVItemID") localEmail.EmailTVItemID = 54;
            if (OmitPropName != "EmailAddress") localEmail.EmailAddress = GetRandomEmail();
            if (OmitPropName != "EmailType") localEmail.EmailType = (EmailTypeEnum)GetRandomEnumType(typeof(EmailTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localEmail.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localEmail.LastUpdateContactTVItemID = 2;



            return localEmail;
        }
        private void CheckLocalEmailFields(List<LocalEmail> localEmailList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localEmailList[0].EmailAddress));
        }

        #endregion Functions private
    }
}
