/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalEmailDistributionListContactDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalEmailDistributionListContactDBService LocalEmailDistributionListContactDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalEmailDistributionListContact localEmailDistributionListContact { get; set; }
        #endregion Properties

        #region Constructors
        public LocalEmailDistributionListContactDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContactDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContactDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContact_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalEmailDistributionListContactList = await LocalEmailDistributionListContactDBService.GetLocalEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactList.Result).Value);
            List<LocalEmailDistributionListContact> localEmailDistributionListContactList = (List<LocalEmailDistributionListContact>)((OkObjectResult)actionLocalEmailDistributionListContactList.Result).Value;

            count = localEmailDistributionListContactList.Count();

            LocalEmailDistributionListContact localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmailDistributionListContact.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localEmailDistributionListContact.EmailDistributionListContactID   (Int32)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.EmailDistributionListContactID = 0;

            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Put(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.EmailDistributionListContactID = 10000000;
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Put(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // localEmailDistributionListContact.EmailDistributionListID   (Int32)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.EmailDistributionListID = 0;
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.IsCC   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localEmailDistributionListContact.Name   (String)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("Name");
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.Name = GetRandomString("", 101);
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);
            //Assert.AreEqual(count, localEmailDistributionListContactDBService.GetLocalEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(200)]
            // localEmailDistributionListContact.Email   (String)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("Email");
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.Email = GetRandomString("", 201);
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);
            //Assert.AreEqual(count, localEmailDistributionListContactDBService.GetLocalEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.CMPRainfallSeasonal   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.CMPWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.EmergencyWeather   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.EmergencyWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localEmailDistributionListContact.ReopeningAllTypes   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localEmailDistributionListContact.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.LastUpdateDate_UTC = new DateTime();
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);
            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localEmailDistributionListContact.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.LastUpdateContactTVItemID = 0;
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

            localEmailDistributionListContact = null;
            localEmailDistributionListContact = GetFilledRandomLocalEmailDistributionListContact("");
            localEmailDistributionListContact.LastUpdateContactTVItemID = 1;
            actionLocalEmailDistributionListContact = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContact.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalEmailDistributionListContact
            var actionLocalEmailDistributionListContactAdded = await LocalEmailDistributionListContactDBService.Post(localEmailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactAdded.Result).Value);
            LocalEmailDistributionListContact localEmailDistributionListContactAdded = (LocalEmailDistributionListContact)((OkObjectResult)actionLocalEmailDistributionListContactAdded.Result).Value;
            Assert.NotNull(localEmailDistributionListContactAdded);

            // List<LocalEmailDistributionListContact>
            var actionLocalEmailDistributionListContactList = await LocalEmailDistributionListContactDBService.GetLocalEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactList.Result).Value);
            List<LocalEmailDistributionListContact> localEmailDistributionListContactList = (List<LocalEmailDistributionListContact>)((OkObjectResult)actionLocalEmailDistributionListContactList.Result).Value;

            int count = ((List<LocalEmailDistributionListContact>)((OkObjectResult)actionLocalEmailDistributionListContactList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalEmailDistributionListContact> with skip and take
            var actionLocalEmailDistributionListContactListSkipAndTake = await LocalEmailDistributionListContactDBService.GetLocalEmailDistributionListContactList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactListSkipAndTake.Result).Value);
            List<LocalEmailDistributionListContact> localEmailDistributionListContactListSkipAndTake = (List<LocalEmailDistributionListContact>)((OkObjectResult)actionLocalEmailDistributionListContactListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalEmailDistributionListContact>)((OkObjectResult)actionLocalEmailDistributionListContactListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localEmailDistributionListContactList[0].EmailDistributionListContactID == localEmailDistributionListContactListSkipAndTake[0].EmailDistributionListContactID);

            // Get LocalEmailDistributionListContact With EmailDistributionListContactID
            var actionLocalEmailDistributionListContactGet = await LocalEmailDistributionListContactDBService.GetLocalEmailDistributionListContactWithEmailDistributionListContactID(localEmailDistributionListContactList[0].EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactGet.Result).Value);
            LocalEmailDistributionListContact localEmailDistributionListContactGet = (LocalEmailDistributionListContact)((OkObjectResult)actionLocalEmailDistributionListContactGet.Result).Value;
            Assert.NotNull(localEmailDistributionListContactGet);
            Assert.Equal(localEmailDistributionListContactGet.EmailDistributionListContactID, localEmailDistributionListContactList[0].EmailDistributionListContactID);

            // Put LocalEmailDistributionListContact
            var actionLocalEmailDistributionListContactUpdated = await LocalEmailDistributionListContactDBService.Put(localEmailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactUpdated.Result).Value);
            LocalEmailDistributionListContact localEmailDistributionListContactUpdated = (LocalEmailDistributionListContact)((OkObjectResult)actionLocalEmailDistributionListContactUpdated.Result).Value;
            Assert.NotNull(localEmailDistributionListContactUpdated);

            // Delete LocalEmailDistributionListContact
            var actionLocalEmailDistributionListContactDeleted = await LocalEmailDistributionListContactDBService.Delete(localEmailDistributionListContact.EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalEmailDistributionListContactDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalEmailDistributionListContactDBService, LocalEmailDistributionListContactDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalEmailDistributionListContactDBService = Provider.GetService<ILocalEmailDistributionListContactDBService>();
            Assert.NotNull(LocalEmailDistributionListContactDBService);

            return await Task.FromResult(true);
        }
        private LocalEmailDistributionListContact GetFilledRandomLocalEmailDistributionListContact(string OmitPropName)
        {
            LocalEmailDistributionListContact localEmailDistributionListContact = new LocalEmailDistributionListContact();

            if (OmitPropName != "LocalDBCommand") localEmailDistributionListContact.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "EmailDistributionListID") localEmailDistributionListContact.EmailDistributionListID = 0;
            if (OmitPropName != "IsCC") localEmailDistributionListContact.IsCC = true;
            if (OmitPropName != "Name") localEmailDistributionListContact.Name = GetRandomString("", 5);
            if (OmitPropName != "Email") localEmailDistributionListContact.Email = GetRandomEmail();
            if (OmitPropName != "CMPRainfallSeasonal") localEmailDistributionListContact.CMPRainfallSeasonal = true;
            if (OmitPropName != "CMPWastewater") localEmailDistributionListContact.CMPWastewater = true;
            if (OmitPropName != "EmergencyWeather") localEmailDistributionListContact.EmergencyWeather = true;
            if (OmitPropName != "EmergencyWastewater") localEmailDistributionListContact.EmergencyWastewater = true;
            if (OmitPropName != "ReopeningAllTypes") localEmailDistributionListContact.ReopeningAllTypes = true;
            if (OmitPropName != "LastUpdateDate_UTC") localEmailDistributionListContact.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localEmailDistributionListContact.LastUpdateContactTVItemID = 2;



            return localEmailDistributionListContact;
        }
        private void CheckLocalEmailDistributionListContactFields(List<LocalEmailDistributionListContact> localEmailDistributionListContactList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localEmailDistributionListContactList[0].Name));
            Assert.False(string.IsNullOrWhiteSpace(localEmailDistributionListContactList[0].Email));
        }

        #endregion Functions private
    }
}
