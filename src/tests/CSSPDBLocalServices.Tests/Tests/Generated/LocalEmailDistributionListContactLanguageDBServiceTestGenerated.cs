/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalEmailDistributionListContactLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalEmailDistributionListContactLanguageDBService LocalEmailDistributionListContactLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalEmailDistributionListContactLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContactLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContactLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalEmailDistributionListContactLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalEmailDistributionListContactLanguageList = await LocalEmailDistributionListContactLanguageDBService.GetLocalEmailDistributionListContactLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).Value);
            List<LocalEmailDistributionListContactLanguage> localEmailDistributionListContactLanguageList = (List<LocalEmailDistributionListContactLanguage>)((OkObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).Value;

            count = localEmailDistributionListContactLanguageList.Count();

            LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmailDistributionListContactLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localEmailDistributionListContactLanguage.EmailDistributionListContactLanguageID   (Int32)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.EmailDistributionListContactLanguageID = 0;

            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Put(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.EmailDistributionListContactLanguageID = 10000000;
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Put(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionListContact", ExistPlurial = "s", ExistFieldID = "EmailDistributionListContactID", AllowableTVtypeList = )]
            // localEmailDistributionListContactLanguage.EmailDistributionListContactID   (Int32)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.EmailDistributionListContactID = 0;
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmailDistributionListContactLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.Language = (LanguageEnum)1000000;
             actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // [CSSPMinLength(1)]
            // localEmailDistributionListContactLanguage.Agency   (String)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("Agency");
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.Agency = GetRandomString("", 101);
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);
            //Assert.AreEqual(count, localEmailDistributionListContactLanguageDBService.GetLocalEmailDistributionListContactLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localEmailDistributionListContactLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
             actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localEmailDistributionListContactLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);
            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localEmailDistributionListContactLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.LastUpdateContactTVItemID = 0;
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);

            localEmailDistributionListContactLanguage = null;
            localEmailDistributionListContactLanguage = GetFilledRandomLocalEmailDistributionListContactLanguage("");
            localEmailDistributionListContactLanguage.LastUpdateContactTVItemID = 1;
            actionLocalEmailDistributionListContactLanguage = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalEmailDistributionListContactLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalEmailDistributionListContactLanguage
            var actionLocalEmailDistributionListContactLanguageAdded = await LocalEmailDistributionListContactLanguageDBService.Post(localEmailDistributionListContactLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageAdded.Result).Value);
            LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguageAdded = (LocalEmailDistributionListContactLanguage)((OkObjectResult)actionLocalEmailDistributionListContactLanguageAdded.Result).Value;
            Assert.NotNull(localEmailDistributionListContactLanguageAdded);

            // List<LocalEmailDistributionListContactLanguage>
            var actionLocalEmailDistributionListContactLanguageList = await LocalEmailDistributionListContactLanguageDBService.GetLocalEmailDistributionListContactLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).Value);
            List<LocalEmailDistributionListContactLanguage> localEmailDistributionListContactLanguageList = (List<LocalEmailDistributionListContactLanguage>)((OkObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).Value;

            int count = ((List<LocalEmailDistributionListContactLanguage>)((OkObjectResult)actionLocalEmailDistributionListContactLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalEmailDistributionListContactLanguage> with skip and take
            var actionLocalEmailDistributionListContactLanguageListSkipAndTake = await LocalEmailDistributionListContactLanguageDBService.GetLocalEmailDistributionListContactLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageListSkipAndTake.Result).Value);
            List<LocalEmailDistributionListContactLanguage> localEmailDistributionListContactLanguageListSkipAndTake = (List<LocalEmailDistributionListContactLanguage>)((OkObjectResult)actionLocalEmailDistributionListContactLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalEmailDistributionListContactLanguage>)((OkObjectResult)actionLocalEmailDistributionListContactLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localEmailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID == localEmailDistributionListContactLanguageListSkipAndTake[0].EmailDistributionListContactLanguageID);

            // Get LocalEmailDistributionListContactLanguage With EmailDistributionListContactLanguageID
            var actionLocalEmailDistributionListContactLanguageGet = await LocalEmailDistributionListContactLanguageDBService.GetLocalEmailDistributionListContactLanguageWithEmailDistributionListContactLanguageID(localEmailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageGet.Result).Value);
            LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguageGet = (LocalEmailDistributionListContactLanguage)((OkObjectResult)actionLocalEmailDistributionListContactLanguageGet.Result).Value;
            Assert.NotNull(localEmailDistributionListContactLanguageGet);
            Assert.Equal(localEmailDistributionListContactLanguageGet.EmailDistributionListContactLanguageID, localEmailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);

            // Put LocalEmailDistributionListContactLanguage
            var actionLocalEmailDistributionListContactLanguageUpdated = await LocalEmailDistributionListContactLanguageDBService.Put(localEmailDistributionListContactLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageUpdated.Result).Value);
            LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguageUpdated = (LocalEmailDistributionListContactLanguage)((OkObjectResult)actionLocalEmailDistributionListContactLanguageUpdated.Result).Value;
            Assert.NotNull(localEmailDistributionListContactLanguageUpdated);

            // Delete LocalEmailDistributionListContactLanguage
            var actionLocalEmailDistributionListContactLanguageDeleted = await LocalEmailDistributionListContactLanguageDBService.Delete(localEmailDistributionListContactLanguage.EmailDistributionListContactLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalEmailDistributionListContactLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalEmailDistributionListContactLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalEmailDistributionListContactLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalEmailDistributionListContactLanguageDBService, LocalEmailDistributionListContactLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalEmailDistributionListContactLanguageDBService = Provider.GetService<ILocalEmailDistributionListContactLanguageDBService>();
            Assert.NotNull(LocalEmailDistributionListContactLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalEmailDistributionListContactLanguage GetFilledRandomLocalEmailDistributionListContactLanguage(string OmitPropName)
        {
            LocalEmailDistributionListContactLanguage localEmailDistributionListContactLanguage = new LocalEmailDistributionListContactLanguage();

            if (OmitPropName != "LocalDBCommand") localEmailDistributionListContactLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "EmailDistributionListContactID") localEmailDistributionListContactLanguage.EmailDistributionListContactID = 0;
            if (OmitPropName != "Language") localEmailDistributionListContactLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "Agency") localEmailDistributionListContactLanguage.Agency = GetRandomString("", 6);
            if (OmitPropName != "TranslationStatus") localEmailDistributionListContactLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localEmailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localEmailDistributionListContactLanguage.LastUpdateContactTVItemID = 2;



            return localEmailDistributionListContactLanguage;
        }
        private void CheckLocalEmailDistributionListContactLanguageFields(List<LocalEmailDistributionListContactLanguage> localEmailDistributionListContactLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localEmailDistributionListContactLanguageList[0].Agency));
        }

        #endregion Functions private
    }
}
