/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalHydrometricDataValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalHydrometricDataValueDBService LocalHydrometricDataValueDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalHydrometricDataValue localHydrometricDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalHydrometricDataValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricDataValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricDataValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricDataValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalHydrometricDataValueList = await LocalHydrometricDataValueDBService.GetLocalHydrometricDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueList.Result).Value);
            List<LocalHydrometricDataValue> localHydrometricDataValueList = (List<LocalHydrometricDataValue>)((OkObjectResult)actionLocalHydrometricDataValueList.Result).Value;

            count = localHydrometricDataValueList.Count();

            LocalHydrometricDataValue localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localHydrometricDataValue.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localHydrometricDataValue.HydrometricDataValueID   (Int32)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.HydrometricDataValueID = 0;

            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Put(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.HydrometricDataValueID = 10000000;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Put(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "HydrometricSite", ExistPlurial = "s", ExistFieldID = "HydrometricSiteID", AllowableTVtypeList = )]
            // localHydrometricDataValue.HydrometricSiteID   (Int32)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.HydrometricSiteID = 0;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localHydrometricDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.DateTime_Local = new DateTime();
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // localHydrometricDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localHydrometricDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
             actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localHydrometricDataValue.HasBeenRead   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000)]
            // localHydrometricDataValue.Discharge_m3_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Discharge_m3_s]

            //CSSPError: Type not implemented [Discharge_m3_s]

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.Discharge_m3_s = -1.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueService.GetLocalHydrometricDataValueList().Count());
            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.Discharge_m3_s = 100001.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueDBService.GetLocalHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000)]
            // localHydrometricDataValue.DischargeEntered_m3_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DischargeEntered_m3_s]

            //CSSPError: Type not implemented [DischargeEntered_m3_s]

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.DischargeEntered_m3_s = -1.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueService.GetLocalHydrometricDataValueList().Count());
            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.DischargeEntered_m3_s = 100001.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueDBService.GetLocalHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localHydrometricDataValue.Level_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Level_m]

            //CSSPError: Type not implemented [Level_m]

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.Level_m = -1.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueService.GetLocalHydrometricDataValueList().Count());
            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.Level_m = 10001.0D;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            //Assert.AreEqual(count, localHydrometricDataValueDBService.GetLocalHydrometricDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // localHydrometricDataValue.HourlyValues   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localHydrometricDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.LastUpdateDate_UTC = new DateTime();
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);
            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localHydrometricDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.LastUpdateContactTVItemID = 0;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);

            localHydrometricDataValue = null;
            localHydrometricDataValue = GetFilledRandomLocalHydrometricDataValue("");
            localHydrometricDataValue.LastUpdateContactTVItemID = 1;
            actionLocalHydrometricDataValue = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalHydrometricDataValue
            var actionLocalHydrometricDataValueAdded = await LocalHydrometricDataValueDBService.Post(localHydrometricDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueAdded.Result).Value);
            LocalHydrometricDataValue localHydrometricDataValueAdded = (LocalHydrometricDataValue)((OkObjectResult)actionLocalHydrometricDataValueAdded.Result).Value;
            Assert.NotNull(localHydrometricDataValueAdded);

            // List<LocalHydrometricDataValue>
            var actionLocalHydrometricDataValueList = await LocalHydrometricDataValueDBService.GetLocalHydrometricDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueList.Result).Value);
            List<LocalHydrometricDataValue> localHydrometricDataValueList = (List<LocalHydrometricDataValue>)((OkObjectResult)actionLocalHydrometricDataValueList.Result).Value;

            int count = ((List<LocalHydrometricDataValue>)((OkObjectResult)actionLocalHydrometricDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalHydrometricDataValue> with skip and take
            var actionLocalHydrometricDataValueListSkipAndTake = await LocalHydrometricDataValueDBService.GetLocalHydrometricDataValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueListSkipAndTake.Result).Value);
            List<LocalHydrometricDataValue> localHydrometricDataValueListSkipAndTake = (List<LocalHydrometricDataValue>)((OkObjectResult)actionLocalHydrometricDataValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalHydrometricDataValue>)((OkObjectResult)actionLocalHydrometricDataValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localHydrometricDataValueList[0].HydrometricDataValueID == localHydrometricDataValueListSkipAndTake[0].HydrometricDataValueID);

            // Get LocalHydrometricDataValue With HydrometricDataValueID
            var actionLocalHydrometricDataValueGet = await LocalHydrometricDataValueDBService.GetLocalHydrometricDataValueWithHydrometricDataValueID(localHydrometricDataValueList[0].HydrometricDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueGet.Result).Value);
            LocalHydrometricDataValue localHydrometricDataValueGet = (LocalHydrometricDataValue)((OkObjectResult)actionLocalHydrometricDataValueGet.Result).Value;
            Assert.NotNull(localHydrometricDataValueGet);
            Assert.Equal(localHydrometricDataValueGet.HydrometricDataValueID, localHydrometricDataValueList[0].HydrometricDataValueID);

            // Put LocalHydrometricDataValue
            var actionLocalHydrometricDataValueUpdated = await LocalHydrometricDataValueDBService.Put(localHydrometricDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueUpdated.Result).Value);
            LocalHydrometricDataValue localHydrometricDataValueUpdated = (LocalHydrometricDataValue)((OkObjectResult)actionLocalHydrometricDataValueUpdated.Result).Value;
            Assert.NotNull(localHydrometricDataValueUpdated);

            // Delete LocalHydrometricDataValue
            var actionLocalHydrometricDataValueDeleted = await LocalHydrometricDataValueDBService.Delete(localHydrometricDataValue.HydrometricDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalHydrometricDataValueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalHydrometricDataValueDBService, LocalHydrometricDataValueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalHydrometricDataValueDBService = Provider.GetService<ILocalHydrometricDataValueDBService>();
            Assert.NotNull(LocalHydrometricDataValueDBService);

            return await Task.FromResult(true);
        }
        private LocalHydrometricDataValue GetFilledRandomLocalHydrometricDataValue(string OmitPropName)
        {
            LocalHydrometricDataValue localHydrometricDataValue = new LocalHydrometricDataValue();

            if (OmitPropName != "LocalDBCommand") localHydrometricDataValue.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "HydrometricSiteID") localHydrometricDataValue.HydrometricSiteID = 0;
            if (OmitPropName != "DateTime_Local") localHydrometricDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") localHydrometricDataValue.Keep = true;
            if (OmitPropName != "StorageDataType") localHydrometricDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "HasBeenRead") localHydrometricDataValue.HasBeenRead = true;
            if (OmitPropName != "Discharge_m3_s") localHydrometricDataValue.Discharge_m3_s = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "DischargeEntered_m3_s") localHydrometricDataValue.DischargeEntered_m3_s = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "Level_m") localHydrometricDataValue.Level_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "HourlyValues") localHydrometricDataValue.HourlyValues = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") localHydrometricDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localHydrometricDataValue.LastUpdateContactTVItemID = 2;



            return localHydrometricDataValue;
        }
        private void CheckLocalHydrometricDataValueFields(List<LocalHydrometricDataValue> localHydrometricDataValueList)
        {
            if (localHydrometricDataValueList[0].Discharge_m3_s != null)
            {
                Assert.NotNull(localHydrometricDataValueList[0].Discharge_m3_s);
            }
            if (localHydrometricDataValueList[0].DischargeEntered_m3_s != null)
            {
                Assert.NotNull(localHydrometricDataValueList[0].DischargeEntered_m3_s);
            }
            if (localHydrometricDataValueList[0].Level_m != null)
            {
                Assert.NotNull(localHydrometricDataValueList[0].Level_m);
            }
            if (!string.IsNullOrWhiteSpace(localHydrometricDataValueList[0].HourlyValues))
            {
                Assert.False(string.IsNullOrWhiteSpace(localHydrometricDataValueList[0].HourlyValues));
            }
        }

        #endregion Functions private
    }
}
