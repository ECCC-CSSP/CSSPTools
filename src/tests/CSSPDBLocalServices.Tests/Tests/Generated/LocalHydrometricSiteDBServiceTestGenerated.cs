/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalHydrometricSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalHydrometricSiteDBService LocalHydrometricSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalHydrometricSite localHydrometricSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalHydrometricSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalHydrometricSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalHydrometricSiteList = await LocalHydrometricSiteDBService.GetLocalHydrometricSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteList.Result).Value);
            List<LocalHydrometricSite> localHydrometricSiteList = (List<LocalHydrometricSite>)((OkObjectResult)actionLocalHydrometricSiteList.Result).Value;

            count = localHydrometricSiteList.Count();

            LocalHydrometricSite localHydrometricSite = GetFilledRandomLocalHydrometricSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localHydrometricSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localHydrometricSite.HydrometricSiteID   (Int32)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.HydrometricSiteID = 0;

            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Put(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.HydrometricSiteID = 10000000;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Put(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = HydrometricSite)]
            // localHydrometricSite.HydrometricSiteTVItemID   (Int32)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.HydrometricSiteTVItemID = 0;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.HydrometricSiteTVItemID = 1;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(7)]
            // localHydrometricSite.FedSiteNumber   (String)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.FedSiteNumber = GetRandomString("", 8);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(7)]
            // localHydrometricSite.QuebecSiteNumber   (String)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.QuebecSiteNumber = GetRandomString("", 8);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(200)]
            // localHydrometricSite.HydrometricSiteName   (String)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("HydrometricSiteName");
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.HydrometricSiteName = GetRandomString("", 201);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(200)]
            // localHydrometricSite.Description   (String)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.Description = GetRandomString("", 201);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(4)]
            // localHydrometricSite.Province   (String)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("Province");
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.Province = GetRandomString("", 5);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localHydrometricSite.Elevation_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Elevation_m]

            //CSSPError: Type not implemented [Elevation_m]

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.Elevation_m = -1.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteService.GetLocalHydrometricSiteList().Count());
            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.Elevation_m = 10001.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1849)]
            // localHydrometricSite.StartDate_Local   (DateTime)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.StartDate_Local = new DateTime(1848, 1, 1);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1849)]
            // [CSSPBigger(OtherField = StartDate_Local)]
            // localHydrometricSite.EndDate_Local   (DateTime)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.EndDate_Local = new DateTime(1848, 1, 1);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 0)]
            // localHydrometricSite.TimeOffset_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TimeOffset_hour]

            //CSSPError: Type not implemented [TimeOffset_hour]

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.TimeOffset_hour = -11.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteService.GetLocalHydrometricSiteList().Count());
            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.TimeOffset_hour = 1.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // localHydrometricSite.DrainageArea_km2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DrainageArea_km2]

            //CSSPError: Type not implemented [DrainageArea_km2]

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.DrainageArea_km2 = -1.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteService.GetLocalHydrometricSiteList().Count());
            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.DrainageArea_km2 = 1000001.0D;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            //Assert.AreEqual(count, localHydrometricSiteDBService.GetLocalHydrometricSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.IsNatural   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.Sediment   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.RHBN   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.RealTime   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.HasDischarge   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.HasLevel   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localHydrometricSite.HasRatingCurve   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localHydrometricSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.LastUpdateDate_UTC = new DateTime();
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);
            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localHydrometricSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.LastUpdateContactTVItemID = 0;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

            localHydrometricSite = null;
            localHydrometricSite = GetFilledRandomLocalHydrometricSite("");
            localHydrometricSite.LastUpdateContactTVItemID = 1;
            actionLocalHydrometricSite = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalHydrometricSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalHydrometricSite
            var actionLocalHydrometricSiteAdded = await LocalHydrometricSiteDBService.Post(localHydrometricSite);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteAdded.Result).Value);
            LocalHydrometricSite localHydrometricSiteAdded = (LocalHydrometricSite)((OkObjectResult)actionLocalHydrometricSiteAdded.Result).Value;
            Assert.NotNull(localHydrometricSiteAdded);

            // List<LocalHydrometricSite>
            var actionLocalHydrometricSiteList = await LocalHydrometricSiteDBService.GetLocalHydrometricSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteList.Result).Value);
            List<LocalHydrometricSite> localHydrometricSiteList = (List<LocalHydrometricSite>)((OkObjectResult)actionLocalHydrometricSiteList.Result).Value;

            int count = ((List<LocalHydrometricSite>)((OkObjectResult)actionLocalHydrometricSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalHydrometricSite> with skip and take
            var actionLocalHydrometricSiteListSkipAndTake = await LocalHydrometricSiteDBService.GetLocalHydrometricSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteListSkipAndTake.Result).Value);
            List<LocalHydrometricSite> localHydrometricSiteListSkipAndTake = (List<LocalHydrometricSite>)((OkObjectResult)actionLocalHydrometricSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalHydrometricSite>)((OkObjectResult)actionLocalHydrometricSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localHydrometricSiteList[0].HydrometricSiteID == localHydrometricSiteListSkipAndTake[0].HydrometricSiteID);

            // Get LocalHydrometricSite With HydrometricSiteID
            var actionLocalHydrometricSiteGet = await LocalHydrometricSiteDBService.GetLocalHydrometricSiteWithHydrometricSiteID(localHydrometricSiteList[0].HydrometricSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteGet.Result).Value);
            LocalHydrometricSite localHydrometricSiteGet = (LocalHydrometricSite)((OkObjectResult)actionLocalHydrometricSiteGet.Result).Value;
            Assert.NotNull(localHydrometricSiteGet);
            Assert.Equal(localHydrometricSiteGet.HydrometricSiteID, localHydrometricSiteList[0].HydrometricSiteID);

            // Put LocalHydrometricSite
            var actionLocalHydrometricSiteUpdated = await LocalHydrometricSiteDBService.Put(localHydrometricSite);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteUpdated.Result).Value);
            LocalHydrometricSite localHydrometricSiteUpdated = (LocalHydrometricSite)((OkObjectResult)actionLocalHydrometricSiteUpdated.Result).Value;
            Assert.NotNull(localHydrometricSiteUpdated);

            // Delete LocalHydrometricSite
            var actionLocalHydrometricSiteDeleted = await LocalHydrometricSiteDBService.Delete(localHydrometricSite.HydrometricSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalHydrometricSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalHydrometricSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalHydrometricSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalHydrometricSiteDBService, LocalHydrometricSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalHydrometricSiteDBService = Provider.GetService<ILocalHydrometricSiteDBService>();
            Assert.NotNull(LocalHydrometricSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalHydrometricSite GetFilledRandomLocalHydrometricSite(string OmitPropName)
        {
            LocalHydrometricSite localHydrometricSite = new LocalHydrometricSite();

            if (OmitPropName != "LocalDBCommand") localHydrometricSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "HydrometricSiteTVItemID") localHydrometricSite.HydrometricSiteTVItemID = 8;
            if (OmitPropName != "FedSiteNumber") localHydrometricSite.FedSiteNumber = GetRandomString("", 5);
            if (OmitPropName != "QuebecSiteNumber") localHydrometricSite.QuebecSiteNumber = GetRandomString("", 5);
            if (OmitPropName != "HydrometricSiteName") localHydrometricSite.HydrometricSiteName = GetRandomString("", 5);
            if (OmitPropName != "Description") localHydrometricSite.Description = GetRandomString("", 5);
            if (OmitPropName != "Province") localHydrometricSite.Province = GetRandomString("", 4);
            if (OmitPropName != "Elevation_m") localHydrometricSite.Elevation_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "StartDate_Local") localHydrometricSite.StartDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDate_Local") localHydrometricSite.EndDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "TimeOffset_hour") localHydrometricSite.TimeOffset_hour = GetRandomDouble(-10.0D, 0.0D);
            if (OmitPropName != "DrainageArea_km2") localHydrometricSite.DrainageArea_km2 = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "IsNatural") localHydrometricSite.IsNatural = true;
            if (OmitPropName != "IsActive") localHydrometricSite.IsActive = true;
            if (OmitPropName != "Sediment") localHydrometricSite.Sediment = true;
            if (OmitPropName != "RHBN") localHydrometricSite.RHBN = true;
            if (OmitPropName != "RealTime") localHydrometricSite.RealTime = true;
            if (OmitPropName != "HasDischarge") localHydrometricSite.HasDischarge = true;
            if (OmitPropName != "HasLevel") localHydrometricSite.HasLevel = true;
            if (OmitPropName != "HasRatingCurve") localHydrometricSite.HasRatingCurve = true;
            if (OmitPropName != "LastUpdateDate_UTC") localHydrometricSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localHydrometricSite.LastUpdateContactTVItemID = 2;



            return localHydrometricSite;
        }
        private void CheckLocalHydrometricSiteFields(List<LocalHydrometricSite> localHydrometricSiteList)
        {
            if (!string.IsNullOrWhiteSpace(localHydrometricSiteList[0].FedSiteNumber))
            {
                Assert.False(string.IsNullOrWhiteSpace(localHydrometricSiteList[0].FedSiteNumber));
            }
            if (!string.IsNullOrWhiteSpace(localHydrometricSiteList[0].QuebecSiteNumber))
            {
                Assert.False(string.IsNullOrWhiteSpace(localHydrometricSiteList[0].QuebecSiteNumber));
            }
            Assert.False(string.IsNullOrWhiteSpace(localHydrometricSiteList[0].HydrometricSiteName));
            if (!string.IsNullOrWhiteSpace(localHydrometricSiteList[0].Description))
            {
                Assert.False(string.IsNullOrWhiteSpace(localHydrometricSiteList[0].Description));
            }
            Assert.False(string.IsNullOrWhiteSpace(localHydrometricSiteList[0].Province));
            if (localHydrometricSiteList[0].Elevation_m != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].Elevation_m);
            }
            if (localHydrometricSiteList[0].StartDate_Local != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].StartDate_Local);
            }
            if (localHydrometricSiteList[0].EndDate_Local != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].EndDate_Local);
            }
            if (localHydrometricSiteList[0].TimeOffset_hour != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].TimeOffset_hour);
            }
            if (localHydrometricSiteList[0].DrainageArea_km2 != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].DrainageArea_km2);
            }
            if (localHydrometricSiteList[0].IsNatural != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].IsNatural);
            }
            if (localHydrometricSiteList[0].IsActive != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].IsActive);
            }
            if (localHydrometricSiteList[0].Sediment != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].Sediment);
            }
            if (localHydrometricSiteList[0].RHBN != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].RHBN);
            }
            if (localHydrometricSiteList[0].RealTime != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].RealTime);
            }
            if (localHydrometricSiteList[0].HasDischarge != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].HasDischarge);
            }
            if (localHydrometricSiteList[0].HasLevel != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].HasLevel);
            }
            if (localHydrometricSiteList[0].HasRatingCurve != null)
            {
                Assert.NotNull(localHydrometricSiteList[0].HasRatingCurve);
            }
        }

        #endregion Functions private
    }
}
