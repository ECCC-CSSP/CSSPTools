/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalLabSheetDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalLabSheetDBService LocalLabSheetDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalLabSheet localLabSheet { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localLabSheet = GetFilledRandomLocalLabSheet("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheet_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalLabSheetList = await LocalLabSheetDBService.GetLocalLabSheetList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetList.Result).Value);
            List<LocalLabSheet> localLabSheetList = (List<LocalLabSheet>)((OkObjectResult)actionLocalLabSheetList.Result).Value;

            count = localLabSheetList.Count();

            LocalLabSheet localLabSheet = GetFilledRandomLocalLabSheet("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheet.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localLabSheet.LabSheetID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LabSheetID = 0;

            actionLocalLabSheet = await LocalLabSheetDBService.Put(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LabSheetID = 10000000;
            actionLocalLabSheet = await LocalLabSheetDBService.Put(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, -1)]
            // localLabSheet.OtherServerLabSheetID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.OtherServerLabSheetID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlan", ExistPlurial = "s", ExistFieldID = "SamplingPlanID", AllowableTVtypeList = )]
            // localLabSheet.SamplingPlanID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SamplingPlanID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // [CSSPMinLength(1)]
            // localLabSheet.SamplingPlanName   (String)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("SamplingPlanName");
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SamplingPlanName = GetRandomString("", 251);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1980, -1)]
            // localLabSheet.Year   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.Year = 1979;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // localLabSheet.Month   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.Month = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetService.GetLocalLabSheetList().Count());
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.Month = 13;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // localLabSheet.Day   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.Day = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetService.GetLocalLabSheetList().Count());
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.Day = 32;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // localLabSheet.RunNumber   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.RunNumber = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetService.GetLocalLabSheetList().Count());
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.RunNumber = 101;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localLabSheet.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SubsectorTVItemID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SubsectorTVItemID = 1;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
            // localLabSheet.MWQMRunTVItemID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.MWQMRunTVItemID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.MWQMRunTVItemID = 1;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheet.SamplingPlanType   (SamplingPlanTypeEnum)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SamplingPlanType = (SamplingPlanTypeEnum)1000000;
             actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheet.SampleType   (SampleTypeEnum)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.SampleType = (SampleTypeEnum)1000000;
             actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheet.LabSheetType   (LabSheetTypeEnum)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LabSheetType = (LabSheetTypeEnum)1000000;
             actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheet.LabSheetStatus   (LabSheetStatusEnum)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LabSheetStatus = (LabSheetStatusEnum)1000000;
             actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // [CSSPMinLength(1)]
            // localLabSheet.FileName   (String)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("FileName");
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.FileName = GetRandomString("", 251);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheet.FileLastModifiedDate_Local   (DateTime)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.FileLastModifiedDate_Local = new DateTime();
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.FileLastModifiedDate_Local = new DateTime(1979, 1, 1);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            // -----------------------------------
            // Is NOT Nullable
            // localLabSheet.FileContent   (String)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("FileContent");
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localLabSheet.AcceptedOrRejectedByContactTVItemID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.AcceptedOrRejectedByContactTVItemID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.AcceptedOrRejectedByContactTVItemID = 1;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheet.AcceptedOrRejectedDateTime   (DateTime)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.AcceptedOrRejectedDateTime = new DateTime(1979, 1, 1);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localLabSheet.RejectReason   (String)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.RejectReason = GetRandomString("", 251);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            //Assert.AreEqual(count, localLabSheetDBService.GetLocalLabSheetList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheet.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LastUpdateDate_UTC = new DateTime();
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);
            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localLabSheet.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LastUpdateContactTVItemID = 0;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

            localLabSheet = null;
            localLabSheet = GetFilledRandomLocalLabSheet("");
            localLabSheet.LastUpdateContactTVItemID = 1;
            actionLocalLabSheet = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheet.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalLabSheet
            var actionLocalLabSheetAdded = await LocalLabSheetDBService.Post(localLabSheet);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetAdded.Result).Value);
            LocalLabSheet localLabSheetAdded = (LocalLabSheet)((OkObjectResult)actionLocalLabSheetAdded.Result).Value;
            Assert.NotNull(localLabSheetAdded);

            // List<LocalLabSheet>
            var actionLocalLabSheetList = await LocalLabSheetDBService.GetLocalLabSheetList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetList.Result).Value);
            List<LocalLabSheet> localLabSheetList = (List<LocalLabSheet>)((OkObjectResult)actionLocalLabSheetList.Result).Value;

            int count = ((List<LocalLabSheet>)((OkObjectResult)actionLocalLabSheetList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalLabSheet> with skip and take
            var actionLocalLabSheetListSkipAndTake = await LocalLabSheetDBService.GetLocalLabSheetList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetListSkipAndTake.Result).Value);
            List<LocalLabSheet> localLabSheetListSkipAndTake = (List<LocalLabSheet>)((OkObjectResult)actionLocalLabSheetListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalLabSheet>)((OkObjectResult)actionLocalLabSheetListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localLabSheetList[0].LabSheetID == localLabSheetListSkipAndTake[0].LabSheetID);

            // Get LocalLabSheet With LabSheetID
            var actionLocalLabSheetGet = await LocalLabSheetDBService.GetLocalLabSheetWithLabSheetID(localLabSheetList[0].LabSheetID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetGet.Result).Value);
            LocalLabSheet localLabSheetGet = (LocalLabSheet)((OkObjectResult)actionLocalLabSheetGet.Result).Value;
            Assert.NotNull(localLabSheetGet);
            Assert.Equal(localLabSheetGet.LabSheetID, localLabSheetList[0].LabSheetID);

            // Put LocalLabSheet
            var actionLocalLabSheetUpdated = await LocalLabSheetDBService.Put(localLabSheet);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetUpdated.Result).Value);
            LocalLabSheet localLabSheetUpdated = (LocalLabSheet)((OkObjectResult)actionLocalLabSheetUpdated.Result).Value;
            Assert.NotNull(localLabSheetUpdated);

            // Delete LocalLabSheet
            var actionLocalLabSheetDeleted = await LocalLabSheetDBService.Delete(localLabSheet.LabSheetID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalLabSheetDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalLabSheetDBService, LocalLabSheetDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalLabSheetDBService = Provider.GetService<ILocalLabSheetDBService>();
            Assert.NotNull(LocalLabSheetDBService);

            return await Task.FromResult(true);
        }
        private LocalLabSheet GetFilledRandomLocalLabSheet(string OmitPropName)
        {
            LocalLabSheet localLabSheet = new LocalLabSheet();

            if (OmitPropName != "LocalDBCommand") localLabSheet.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "OtherServerLabSheetID") localLabSheet.OtherServerLabSheetID = GetRandomInt(1, 11);
            if (OmitPropName != "SamplingPlanID") localLabSheet.SamplingPlanID = 0;
            if (OmitPropName != "SamplingPlanName") localLabSheet.SamplingPlanName = GetRandomString("", 6);
            if (OmitPropName != "Year") localLabSheet.Year = GetRandomInt(1980, 1990);
            if (OmitPropName != "Month") localLabSheet.Month = GetRandomInt(1, 12);
            if (OmitPropName != "Day") localLabSheet.Day = GetRandomInt(1, 31);
            if (OmitPropName != "RunNumber") localLabSheet.RunNumber = GetRandomInt(1, 100);
            if (OmitPropName != "SubsectorTVItemID") localLabSheet.SubsectorTVItemID = 11;
            if (OmitPropName != "MWQMRunTVItemID") localLabSheet.MWQMRunTVItemID = 50;
            if (OmitPropName != "SamplingPlanType") localLabSheet.SamplingPlanType = (SamplingPlanTypeEnum)GetRandomEnumType(typeof(SamplingPlanTypeEnum));
            if (OmitPropName != "SampleType") localLabSheet.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "LabSheetType") localLabSheet.LabSheetType = (LabSheetTypeEnum)GetRandomEnumType(typeof(LabSheetTypeEnum));
            if (OmitPropName != "LabSheetStatus") localLabSheet.LabSheetStatus = (LabSheetStatusEnum)GetRandomEnumType(typeof(LabSheetStatusEnum));
            if (OmitPropName != "FileName") localLabSheet.FileName = GetRandomString("", 6);
            if (OmitPropName != "FileLastModifiedDate_Local") localLabSheet.FileLastModifiedDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "FileContent") localLabSheet.FileContent = GetRandomString("", 20);
            if (OmitPropName != "AcceptedOrRejectedByContactTVItemID") localLabSheet.AcceptedOrRejectedByContactTVItemID = 2;
            if (OmitPropName != "AcceptedOrRejectedDateTime") localLabSheet.AcceptedOrRejectedDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "RejectReason") localLabSheet.RejectReason = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localLabSheet.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localLabSheet.LastUpdateContactTVItemID = 2;



            return localLabSheet;
        }
        private void CheckLocalLabSheetFields(List<LocalLabSheet> localLabSheetList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localLabSheetList[0].SamplingPlanName));
            if (localLabSheetList[0].MWQMRunTVItemID != null)
            {
                Assert.NotNull(localLabSheetList[0].MWQMRunTVItemID);
            }
            Assert.False(string.IsNullOrWhiteSpace(localLabSheetList[0].FileName));
            Assert.False(string.IsNullOrWhiteSpace(localLabSheetList[0].FileContent));
            if (localLabSheetList[0].AcceptedOrRejectedByContactTVItemID != null)
            {
                Assert.NotNull(localLabSheetList[0].AcceptedOrRejectedByContactTVItemID);
            }
            if (localLabSheetList[0].AcceptedOrRejectedDateTime != null)
            {
                Assert.NotNull(localLabSheetList[0].AcceptedOrRejectedDateTime);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetList[0].RejectReason))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetList[0].RejectReason));
            }
        }

        #endregion Functions private
    }
}
