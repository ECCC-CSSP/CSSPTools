/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalLabSheetDetailDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalLabSheetDetailDBService LocalLabSheetDetailDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalLabSheetDetail localLabSheetDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetDetailDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetDetailDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetDetailDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetDetail_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalLabSheetDetailList = await LocalLabSheetDetailDBService.GetLocalLabSheetDetailList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailList.Result).Value);
            List<LocalLabSheetDetail> localLabSheetDetailList = (List<LocalLabSheetDetail>)((OkObjectResult)actionLocalLabSheetDetailList.Result).Value;

            count = localLabSheetDetailList.Count();

            LocalLabSheetDetail localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheetDetail.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localLabSheetDetail.LabSheetDetailID   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LabSheetDetailID = 0;

            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Put(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LabSheetDetailID = 10000000;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Put(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "LabSheet", ExistPlurial = "s", ExistFieldID = "LabSheetID", AllowableTVtypeList = )]
            // localLabSheetDetail.LabSheetID   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LabSheetID = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlan", ExistPlurial = "s", ExistFieldID = "SamplingPlanID", AllowableTVtypeList = )]
            // localLabSheetDetail.SamplingPlanID   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SamplingPlanID = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localLabSheetDetail.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SubsectorTVItemID = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SubsectorTVItemID = 1;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 5)]
            // localLabSheetDetail.Version   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Version = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Version = 6;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.RunDate   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.RunDate = new DateTime();
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.RunDate = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(7)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Tides   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("Tides");
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Tides = GetRandomString("", 8);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.SampleCrewInitials   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SampleCrewInitials = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 3)]
            // localLabSheetDetail.WaterBathCount   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.WaterBathCount = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.WaterBathCount = 4;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath1StartTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath1StartTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath2StartTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath2StartTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath3StartTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath3StartTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath1EndTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath1EndTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath2EndTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath2EndTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.IncubationBath3EndTime   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath3EndTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localLabSheetDetail.IncubationBath1TimeCalculated_minutes   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath1TimeCalculated_minutes = -1;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath1TimeCalculated_minutes = 10001;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localLabSheetDetail.IncubationBath2TimeCalculated_minutes   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath2TimeCalculated_minutes = -1;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath2TimeCalculated_minutes = 10001;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // localLabSheetDetail.IncubationBath3TimeCalculated_minutes   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath3TimeCalculated_minutes = -1;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IncubationBath3TimeCalculated_minutes = 10001;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localLabSheetDetail.WaterBath1   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.WaterBath1 = GetRandomString("", 11);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localLabSheetDetail.WaterBath2   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.WaterBath2 = GetRandomString("", 11);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localLabSheetDetail.WaterBath3   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.WaterBath3 = GetRandomString("", 11);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCField1   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCField1]

            //CSSPError: Type not implemented [TCField1]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCField1 = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCField1 = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCLab1   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCLab1]

            //CSSPError: Type not implemented [TCLab1]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCLab1 = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCLab1 = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCField2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCField2]

            //CSSPError: Type not implemented [TCField2]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCField2 = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCField2 = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCLab2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCLab2]

            //CSSPError: Type not implemented [TCLab2]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCLab2 = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCLab2 = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCFirst   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCFirst]

            //CSSPError: Type not implemented [TCFirst]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCFirst = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCFirst = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetDetail.TCAverage   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TCAverage]

            //CSSPError: Type not implemented [TCAverage]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCAverage = -11.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.TCAverage = 41.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // localLabSheetDetail.ControlLot   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.ControlLot = GetRandomString("", 101);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Positive35   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Positive35 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.NonTarget35   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.NonTarget35 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Negative35   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Negative35 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath1Positive44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath1Positive44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath2Positive44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath2Positive44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath3Positive44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath3Positive44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath1NonTarget44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath1NonTarget44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath2NonTarget44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath2NonTarget44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath3NonTarget44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath3NonTarget44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath1Negative44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath1Negative44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath2Negative44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath2Negative44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath3Negative44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath3Negative44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Blank35   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Blank35 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath1Blank44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath1Blank44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath2Blank44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath2Blank44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1)]
            // [CSSPMinLength(1)]
            // localLabSheetDetail.Bath3Blank44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Bath3Blank44_5 = GetRandomString("", 2);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.Lot35   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Lot35 = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.Lot44_5   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Lot44_5 = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localLabSheetDetail.Weather   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.Weather = GetRandomString("", 251);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localLabSheetDetail.RunComment   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.RunComment = GetRandomString("", 251);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localLabSheetDetail.RunWeatherComment   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.RunWeatherComment = GetRandomString("", 251);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.SampleBottleLotNumber   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SampleBottleLotNumber = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.SalinitiesReadBy   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SalinitiesReadBy = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.SalinitiesReadDate   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.SalinitiesReadDate = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.ResultsReadBy   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.ResultsReadBy = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.ResultsReadDate   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.ResultsReadDate = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localLabSheetDetail.ResultsRecordedBy   (String)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.ResultsRecordedBy = GetRandomString("", 21);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.ResultsRecordedDate   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.ResultsRecordedDate = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localLabSheetDetail.DailyDuplicateRLog   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DailyDuplicateRLog]

            //CSSPError: Type not implemented [DailyDuplicateRLog]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.DailyDuplicateRLog = -1.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.DailyDuplicateRLog = 101.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localLabSheetDetail.DailyDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.DailyDuplicatePrecisionCriteria = -1.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.DailyDuplicatePrecisionCriteria = 101.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // localLabSheetDetail.DailyDuplicateAcceptable   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localLabSheetDetail.IntertechDuplicateRLog   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [IntertechDuplicateRLog]

            //CSSPError: Type not implemented [IntertechDuplicateRLog]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IntertechDuplicateRLog = -1.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IntertechDuplicateRLog = 101.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localLabSheetDetail.IntertechDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IntertechDuplicatePrecisionCriteria = -1.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailService.GetLocalLabSheetDetailList().Count());
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.IntertechDuplicatePrecisionCriteria = 101.0D;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            //Assert.AreEqual(count, localLabSheetDetailDBService.GetLocalLabSheetDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // localLabSheetDetail.IntertechDuplicateAcceptable   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localLabSheetDetail.IntertechReadAcceptable   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetDetail.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LastUpdateDate_UTC = new DateTime();
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);
            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localLabSheetDetail.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LastUpdateContactTVItemID = 0;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

            localLabSheetDetail = null;
            localLabSheetDetail = GetFilledRandomLocalLabSheetDetail("");
            localLabSheetDetail.LastUpdateContactTVItemID = 1;
            actionLocalLabSheetDetail = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetDetail.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalLabSheetDetail
            var actionLocalLabSheetDetailAdded = await LocalLabSheetDetailDBService.Post(localLabSheetDetail);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailAdded.Result).Value);
            LocalLabSheetDetail localLabSheetDetailAdded = (LocalLabSheetDetail)((OkObjectResult)actionLocalLabSheetDetailAdded.Result).Value;
            Assert.NotNull(localLabSheetDetailAdded);

            // List<LocalLabSheetDetail>
            var actionLocalLabSheetDetailList = await LocalLabSheetDetailDBService.GetLocalLabSheetDetailList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailList.Result).Value);
            List<LocalLabSheetDetail> localLabSheetDetailList = (List<LocalLabSheetDetail>)((OkObjectResult)actionLocalLabSheetDetailList.Result).Value;

            int count = ((List<LocalLabSheetDetail>)((OkObjectResult)actionLocalLabSheetDetailList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalLabSheetDetail> with skip and take
            var actionLocalLabSheetDetailListSkipAndTake = await LocalLabSheetDetailDBService.GetLocalLabSheetDetailList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailListSkipAndTake.Result).Value);
            List<LocalLabSheetDetail> localLabSheetDetailListSkipAndTake = (List<LocalLabSheetDetail>)((OkObjectResult)actionLocalLabSheetDetailListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalLabSheetDetail>)((OkObjectResult)actionLocalLabSheetDetailListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localLabSheetDetailList[0].LabSheetDetailID == localLabSheetDetailListSkipAndTake[0].LabSheetDetailID);

            // Get LocalLabSheetDetail With LabSheetDetailID
            var actionLocalLabSheetDetailGet = await LocalLabSheetDetailDBService.GetLocalLabSheetDetailWithLabSheetDetailID(localLabSheetDetailList[0].LabSheetDetailID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailGet.Result).Value);
            LocalLabSheetDetail localLabSheetDetailGet = (LocalLabSheetDetail)((OkObjectResult)actionLocalLabSheetDetailGet.Result).Value;
            Assert.NotNull(localLabSheetDetailGet);
            Assert.Equal(localLabSheetDetailGet.LabSheetDetailID, localLabSheetDetailList[0].LabSheetDetailID);

            // Put LocalLabSheetDetail
            var actionLocalLabSheetDetailUpdated = await LocalLabSheetDetailDBService.Put(localLabSheetDetail);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailUpdated.Result).Value);
            LocalLabSheetDetail localLabSheetDetailUpdated = (LocalLabSheetDetail)((OkObjectResult)actionLocalLabSheetDetailUpdated.Result).Value;
            Assert.NotNull(localLabSheetDetailUpdated);

            // Delete LocalLabSheetDetail
            var actionLocalLabSheetDetailDeleted = await LocalLabSheetDetailDBService.Delete(localLabSheetDetail.LabSheetDetailID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetDetailDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetDetailDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalLabSheetDetailDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalLabSheetDetailDBService, LocalLabSheetDetailDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalLabSheetDetailDBService = Provider.GetService<ILocalLabSheetDetailDBService>();
            Assert.NotNull(LocalLabSheetDetailDBService);

            return await Task.FromResult(true);
        }
        private LocalLabSheetDetail GetFilledRandomLocalLabSheetDetail(string OmitPropName)
        {
            LocalLabSheetDetail localLabSheetDetail = new LocalLabSheetDetail();

            if (OmitPropName != "LocalDBCommand") localLabSheetDetail.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "LabSheetID") localLabSheetDetail.LabSheetID = 0;
            if (OmitPropName != "SamplingPlanID") localLabSheetDetail.SamplingPlanID = 0;
            if (OmitPropName != "SubsectorTVItemID") localLabSheetDetail.SubsectorTVItemID = 11;
            if (OmitPropName != "Version") localLabSheetDetail.Version = GetRandomInt(1, 5);
            if (OmitPropName != "RunDate") localLabSheetDetail.RunDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "Tides") localLabSheetDetail.Tides = GetRandomString("", 6);
            if (OmitPropName != "SampleCrewInitials") localLabSheetDetail.SampleCrewInitials = GetRandomString("", 5);
            if (OmitPropName != "WaterBathCount") localLabSheetDetail.WaterBathCount = GetRandomInt(1, 3);
            if (OmitPropName != "IncubationBath1StartTime") localLabSheetDetail.IncubationBath1StartTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath2StartTime") localLabSheetDetail.IncubationBath2StartTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath3StartTime") localLabSheetDetail.IncubationBath3StartTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath1EndTime") localLabSheetDetail.IncubationBath1EndTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath2EndTime") localLabSheetDetail.IncubationBath2EndTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath3EndTime") localLabSheetDetail.IncubationBath3EndTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IncubationBath1TimeCalculated_minutes") localLabSheetDetail.IncubationBath1TimeCalculated_minutes = GetRandomInt(0, 10000);
            if (OmitPropName != "IncubationBath2TimeCalculated_minutes") localLabSheetDetail.IncubationBath2TimeCalculated_minutes = GetRandomInt(0, 10000);
            if (OmitPropName != "IncubationBath3TimeCalculated_minutes") localLabSheetDetail.IncubationBath3TimeCalculated_minutes = GetRandomInt(0, 10000);
            if (OmitPropName != "WaterBath1") localLabSheetDetail.WaterBath1 = GetRandomString("", 5);
            if (OmitPropName != "WaterBath2") localLabSheetDetail.WaterBath2 = GetRandomString("", 5);
            if (OmitPropName != "WaterBath3") localLabSheetDetail.WaterBath3 = GetRandomString("", 5);
            if (OmitPropName != "TCField1") localLabSheetDetail.TCField1 = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TCLab1") localLabSheetDetail.TCLab1 = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TCField2") localLabSheetDetail.TCField2 = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TCLab2") localLabSheetDetail.TCLab2 = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TCFirst") localLabSheetDetail.TCFirst = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TCAverage") localLabSheetDetail.TCAverage = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "ControlLot") localLabSheetDetail.ControlLot = GetRandomString("", 5);
            if (OmitPropName != "Positive35") localLabSheetDetail.Positive35 = GetRandomString("", 1);
            if (OmitPropName != "NonTarget35") localLabSheetDetail.NonTarget35 = GetRandomString("", 1);
            if (OmitPropName != "Negative35") localLabSheetDetail.Negative35 = GetRandomString("", 1);
            if (OmitPropName != "Bath1Positive44_5") localLabSheetDetail.Bath1Positive44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath2Positive44_5") localLabSheetDetail.Bath2Positive44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath3Positive44_5") localLabSheetDetail.Bath3Positive44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath1NonTarget44_5") localLabSheetDetail.Bath1NonTarget44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath2NonTarget44_5") localLabSheetDetail.Bath2NonTarget44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath3NonTarget44_5") localLabSheetDetail.Bath3NonTarget44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath1Negative44_5") localLabSheetDetail.Bath1Negative44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath2Negative44_5") localLabSheetDetail.Bath2Negative44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath3Negative44_5") localLabSheetDetail.Bath3Negative44_5 = GetRandomString("", 1);
            if (OmitPropName != "Blank35") localLabSheetDetail.Blank35 = GetRandomString("", 1);
            if (OmitPropName != "Bath1Blank44_5") localLabSheetDetail.Bath1Blank44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath2Blank44_5") localLabSheetDetail.Bath2Blank44_5 = GetRandomString("", 1);
            if (OmitPropName != "Bath3Blank44_5") localLabSheetDetail.Bath3Blank44_5 = GetRandomString("", 1);
            if (OmitPropName != "Lot35") localLabSheetDetail.Lot35 = GetRandomString("", 5);
            if (OmitPropName != "Lot44_5") localLabSheetDetail.Lot44_5 = GetRandomString("", 5);
            if (OmitPropName != "Weather") localLabSheetDetail.Weather = GetRandomString("", 5);
            if (OmitPropName != "RunComment") localLabSheetDetail.RunComment = GetRandomString("", 5);
            if (OmitPropName != "RunWeatherComment") localLabSheetDetail.RunWeatherComment = GetRandomString("", 5);
            if (OmitPropName != "SampleBottleLotNumber") localLabSheetDetail.SampleBottleLotNumber = GetRandomString("", 5);
            if (OmitPropName != "SalinitiesReadBy") localLabSheetDetail.SalinitiesReadBy = GetRandomString("", 5);
            if (OmitPropName != "SalinitiesReadDate") localLabSheetDetail.SalinitiesReadDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "ResultsReadBy") localLabSheetDetail.ResultsReadBy = GetRandomString("", 5);
            if (OmitPropName != "ResultsReadDate") localLabSheetDetail.ResultsReadDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "ResultsRecordedBy") localLabSheetDetail.ResultsRecordedBy = GetRandomString("", 5);
            if (OmitPropName != "ResultsRecordedDate") localLabSheetDetail.ResultsRecordedDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "DailyDuplicateRLog") localLabSheetDetail.DailyDuplicateRLog = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "DailyDuplicatePrecisionCriteria") localLabSheetDetail.DailyDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "DailyDuplicateAcceptable") localLabSheetDetail.DailyDuplicateAcceptable = true;
            if (OmitPropName != "IntertechDuplicateRLog") localLabSheetDetail.IntertechDuplicateRLog = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IntertechDuplicatePrecisionCriteria") localLabSheetDetail.IntertechDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IntertechDuplicateAcceptable") localLabSheetDetail.IntertechDuplicateAcceptable = true;
            if (OmitPropName != "IntertechReadAcceptable") localLabSheetDetail.IntertechReadAcceptable = true;
            if (OmitPropName != "LastUpdateDate_UTC") localLabSheetDetail.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localLabSheetDetail.LastUpdateContactTVItemID = 2;



            return localLabSheetDetail;
        }
        private void CheckLocalLabSheetDetailFields(List<LocalLabSheetDetail> localLabSheetDetailList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Tides));
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SampleCrewInitials))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SampleCrewInitials));
            }
            if (localLabSheetDetailList[0].WaterBathCount != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].WaterBathCount);
            }
            if (localLabSheetDetailList[0].IncubationBath1StartTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath1StartTime);
            }
            if (localLabSheetDetailList[0].IncubationBath2StartTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath2StartTime);
            }
            if (localLabSheetDetailList[0].IncubationBath3StartTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath3StartTime);
            }
            if (localLabSheetDetailList[0].IncubationBath1EndTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath1EndTime);
            }
            if (localLabSheetDetailList[0].IncubationBath2EndTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath2EndTime);
            }
            if (localLabSheetDetailList[0].IncubationBath3EndTime != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath3EndTime);
            }
            if (localLabSheetDetailList[0].IncubationBath1TimeCalculated_minutes != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath1TimeCalculated_minutes);
            }
            if (localLabSheetDetailList[0].IncubationBath2TimeCalculated_minutes != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath2TimeCalculated_minutes);
            }
            if (localLabSheetDetailList[0].IncubationBath3TimeCalculated_minutes != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IncubationBath3TimeCalculated_minutes);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath1))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath1));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath2))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath2));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath3))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].WaterBath3));
            }
            if (localLabSheetDetailList[0].TCField1 != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCField1);
            }
            if (localLabSheetDetailList[0].TCLab1 != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCLab1);
            }
            if (localLabSheetDetailList[0].TCField2 != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCField2);
            }
            if (localLabSheetDetailList[0].TCLab2 != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCLab2);
            }
            if (localLabSheetDetailList[0].TCFirst != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCFirst);
            }
            if (localLabSheetDetailList[0].TCAverage != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].TCAverage);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ControlLot))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ControlLot));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Positive35))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Positive35));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].NonTarget35))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].NonTarget35));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Negative35))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Negative35));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Positive44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Positive44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Positive44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Positive44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Positive44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Positive44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1NonTarget44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1NonTarget44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2NonTarget44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2NonTarget44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3NonTarget44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3NonTarget44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Negative44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Negative44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Negative44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Negative44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Negative44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Negative44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Blank35))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Blank35));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Blank44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath1Blank44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Blank44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath2Blank44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Blank44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Bath3Blank44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Lot35))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Lot35));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Lot44_5))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Lot44_5));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Weather))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].Weather));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].RunComment))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].RunComment));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].RunWeatherComment))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].RunWeatherComment));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SampleBottleLotNumber))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SampleBottleLotNumber));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SalinitiesReadBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].SalinitiesReadBy));
            }
            if (localLabSheetDetailList[0].SalinitiesReadDate != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].SalinitiesReadDate);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ResultsReadBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ResultsReadBy));
            }
            if (localLabSheetDetailList[0].ResultsReadDate != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].ResultsReadDate);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ResultsRecordedBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetDetailList[0].ResultsRecordedBy));
            }
            if (localLabSheetDetailList[0].ResultsRecordedDate != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].ResultsRecordedDate);
            }
            if (localLabSheetDetailList[0].DailyDuplicateRLog != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].DailyDuplicateRLog);
            }
            if (localLabSheetDetailList[0].DailyDuplicatePrecisionCriteria != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].DailyDuplicatePrecisionCriteria);
            }
            if (localLabSheetDetailList[0].DailyDuplicateAcceptable != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].DailyDuplicateAcceptable);
            }
            if (localLabSheetDetailList[0].IntertechDuplicateRLog != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IntertechDuplicateRLog);
            }
            if (localLabSheetDetailList[0].IntertechDuplicatePrecisionCriteria != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IntertechDuplicatePrecisionCriteria);
            }
            if (localLabSheetDetailList[0].IntertechDuplicateAcceptable != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IntertechDuplicateAcceptable);
            }
            if (localLabSheetDetailList[0].IntertechReadAcceptable != null)
            {
                Assert.NotNull(localLabSheetDetailList[0].IntertechReadAcceptable);
            }
        }

        #endregion Functions private
    }
}
