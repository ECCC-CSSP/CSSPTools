/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalLabSheetTubeMPNDetailDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalLabSheetTubeMPNDetailDBService LocalLabSheetTubeMPNDetailDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLabSheetTubeMPNDetailDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetTubeMPNDetailDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetTubeMPNDetailDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLabSheetTubeMPNDetail_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalLabSheetTubeMPNDetailList = await LocalLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).Value);
            List<LocalLabSheetTubeMPNDetail> localLabSheetTubeMPNDetailList = (List<LocalLabSheetTubeMPNDetail>)((OkObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).Value;

            count = localLabSheetTubeMPNDetailList.Count();

            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheetTubeMPNDetail.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID = 0;

            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Put(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID = 10000000;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Put(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "LabSheetDetail", ExistPlurial = "s", ExistFieldID = "LabSheetDetailID", AllowableTVtypeList = )]
            // localLabSheetTubeMPNDetail.LabSheetDetailID   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LabSheetDetailID = 0;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localLabSheetTubeMPNDetail.Ordinal   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Ordinal = -1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Ordinal = 1001;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // localLabSheetTubeMPNDetail.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.MWQMSiteTVItemID = 0;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.MWQMSiteTVItemID = 1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetTubeMPNDetail.SampleDateTime   (DateTime)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.SampleDateTime = new DateTime(1979, 1, 1);
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 10000000)]
            // localLabSheetTubeMPNDetail.MPN   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.MPN = 0;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.MPN = 10000001;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localLabSheetTubeMPNDetail.Tube10   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube10 = -1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube10 = 6;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localLabSheetTubeMPNDetail.Tube1_0   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube1_0 = -1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube1_0 = 6;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localLabSheetTubeMPNDetail.Tube0_1   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube0_1 = -1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Tube0_1 = 6;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 40)]
            // localLabSheetTubeMPNDetail.Salinity   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Salinity]

            //CSSPError: Type not implemented [Salinity]

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Salinity = -1.0D;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Salinity = 41.0D;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localLabSheetTubeMPNDetail.Temperature   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Temperature]

            //CSSPError: Type not implemented [Temperature]

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Temperature = -11.0D;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailService.GetLocalLabSheetTubeMPNDetailList().Count());
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.Temperature = 41.0D;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localLabSheetTubeMPNDetail.ProcessedBy   (String)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.ProcessedBy = GetRandomString("", 11);
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLabSheetTubeMPNDetail.SampleType   (SampleTypeEnum)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.SampleType = (SampleTypeEnum)1000000;
             actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // localLabSheetTubeMPNDetail.SiteComment   (String)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.SiteComment = GetRandomString("", 251);
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            //Assert.AreEqual(count, localLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLabSheetTubeMPNDetail.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime();
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);
            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localLabSheetTubeMPNDetail.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LastUpdateContactTVItemID = 0;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

            localLabSheetTubeMPNDetail = null;
            localLabSheetTubeMPNDetail = GetFilledRandomLocalLabSheetTubeMPNDetail("");
            localLabSheetTubeMPNDetail.LastUpdateContactTVItemID = 1;
            actionLocalLabSheetTubeMPNDetail = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.IsType<BadRequestObjectResult>(actionLocalLabSheetTubeMPNDetail.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalLabSheetTubeMPNDetail
            var actionLocalLabSheetTubeMPNDetailAdded = await LocalLabSheetTubeMPNDetailDBService.Post(localLabSheetTubeMPNDetail);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailAdded.Result).Value);
            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetailAdded = (LocalLabSheetTubeMPNDetail)((OkObjectResult)actionLocalLabSheetTubeMPNDetailAdded.Result).Value;
            Assert.NotNull(localLabSheetTubeMPNDetailAdded);

            // List<LocalLabSheetTubeMPNDetail>
            var actionLocalLabSheetTubeMPNDetailList = await LocalLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList();
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).Value);
            List<LocalLabSheetTubeMPNDetail> localLabSheetTubeMPNDetailList = (List<LocalLabSheetTubeMPNDetail>)((OkObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).Value;

            int count = ((List<LocalLabSheetTubeMPNDetail>)((OkObjectResult)actionLocalLabSheetTubeMPNDetailList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalLabSheetTubeMPNDetail> with skip and take
            var actionLocalLabSheetTubeMPNDetailListSkipAndTake = await LocalLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailListSkipAndTake.Result).Value);
            List<LocalLabSheetTubeMPNDetail> localLabSheetTubeMPNDetailListSkipAndTake = (List<LocalLabSheetTubeMPNDetail>)((OkObjectResult)actionLocalLabSheetTubeMPNDetailListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalLabSheetTubeMPNDetail>)((OkObjectResult)actionLocalLabSheetTubeMPNDetailListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localLabSheetTubeMPNDetailList[0].LabSheetTubeMPNDetailID == localLabSheetTubeMPNDetailListSkipAndTake[0].LabSheetTubeMPNDetailID);

            // Get LocalLabSheetTubeMPNDetail With LabSheetTubeMPNDetailID
            var actionLocalLabSheetTubeMPNDetailGet = await LocalLabSheetTubeMPNDetailDBService.GetLocalLabSheetTubeMPNDetailWithLabSheetTubeMPNDetailID(localLabSheetTubeMPNDetailList[0].LabSheetTubeMPNDetailID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailGet.Result).Value);
            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetailGet = (LocalLabSheetTubeMPNDetail)((OkObjectResult)actionLocalLabSheetTubeMPNDetailGet.Result).Value;
            Assert.NotNull(localLabSheetTubeMPNDetailGet);
            Assert.Equal(localLabSheetTubeMPNDetailGet.LabSheetTubeMPNDetailID, localLabSheetTubeMPNDetailList[0].LabSheetTubeMPNDetailID);

            // Put LocalLabSheetTubeMPNDetail
            var actionLocalLabSheetTubeMPNDetailUpdated = await LocalLabSheetTubeMPNDetailDBService.Put(localLabSheetTubeMPNDetail);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailUpdated.Result).Value);
            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetailUpdated = (LocalLabSheetTubeMPNDetail)((OkObjectResult)actionLocalLabSheetTubeMPNDetailUpdated.Result).Value;
            Assert.NotNull(localLabSheetTubeMPNDetailUpdated);

            // Delete LocalLabSheetTubeMPNDetail
            var actionLocalLabSheetTubeMPNDetailDeleted = await LocalLabSheetTubeMPNDetailDBService.Delete(localLabSheetTubeMPNDetail.LabSheetTubeMPNDetailID);
            Assert.Equal(200, ((ObjectResult)actionLocalLabSheetTubeMPNDetailDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLabSheetTubeMPNDetailDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalLabSheetTubeMPNDetailDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalLabSheetTubeMPNDetailDBService, LocalLabSheetTubeMPNDetailDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalLabSheetTubeMPNDetailDBService = Provider.GetService<ILocalLabSheetTubeMPNDetailDBService>();
            Assert.NotNull(LocalLabSheetTubeMPNDetailDBService);

            return await Task.FromResult(true);
        }
        private LocalLabSheetTubeMPNDetail GetFilledRandomLocalLabSheetTubeMPNDetail(string OmitPropName)
        {
            LocalLabSheetTubeMPNDetail localLabSheetTubeMPNDetail = new LocalLabSheetTubeMPNDetail();

            if (OmitPropName != "LocalDBCommand") localLabSheetTubeMPNDetail.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "LabSheetDetailID") localLabSheetTubeMPNDetail.LabSheetDetailID = 0;
            if (OmitPropName != "Ordinal") localLabSheetTubeMPNDetail.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "MWQMSiteTVItemID") localLabSheetTubeMPNDetail.MWQMSiteTVItemID = 44;
            if (OmitPropName != "SampleDateTime") localLabSheetTubeMPNDetail.SampleDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "MPN") localLabSheetTubeMPNDetail.MPN = GetRandomInt(1, 10000000);
            if (OmitPropName != "Tube10") localLabSheetTubeMPNDetail.Tube10 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube1_0") localLabSheetTubeMPNDetail.Tube1_0 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube0_1") localLabSheetTubeMPNDetail.Tube0_1 = GetRandomInt(0, 5);
            if (OmitPropName != "Salinity") localLabSheetTubeMPNDetail.Salinity = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "Temperature") localLabSheetTubeMPNDetail.Temperature = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "ProcessedBy") localLabSheetTubeMPNDetail.ProcessedBy = GetRandomString("", 5);
            if (OmitPropName != "SampleType") localLabSheetTubeMPNDetail.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "SiteComment") localLabSheetTubeMPNDetail.SiteComment = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localLabSheetTubeMPNDetail.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localLabSheetTubeMPNDetail.LastUpdateContactTVItemID = 2;



            return localLabSheetTubeMPNDetail;
        }
        private void CheckLocalLabSheetTubeMPNDetailFields(List<LocalLabSheetTubeMPNDetail> localLabSheetTubeMPNDetailList)
        {
            if (localLabSheetTubeMPNDetailList[0].SampleDateTime != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].SampleDateTime);
            }
            if (localLabSheetTubeMPNDetailList[0].MPN != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].MPN);
            }
            if (localLabSheetTubeMPNDetailList[0].Tube10 != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].Tube10);
            }
            if (localLabSheetTubeMPNDetailList[0].Tube1_0 != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].Tube1_0);
            }
            if (localLabSheetTubeMPNDetailList[0].Tube0_1 != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].Tube0_1);
            }
            if (localLabSheetTubeMPNDetailList[0].Salinity != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].Salinity);
            }
            if (localLabSheetTubeMPNDetailList[0].Temperature != null)
            {
                Assert.NotNull(localLabSheetTubeMPNDetailList[0].Temperature);
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetailList[0].ProcessedBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetailList[0].ProcessedBy));
            }
            if (!string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetailList[0].SiteComment))
            {
                Assert.False(string.IsNullOrWhiteSpace(localLabSheetTubeMPNDetailList[0].SiteComment));
            }
        }

        #endregion Functions private
    }
}
