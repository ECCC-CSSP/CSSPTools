/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalLogDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalLogDBService LocalLogDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalLog localLog { get; set; }
        #endregion Properties

        #region Constructors
        public LocalLogDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLogDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLogDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localLog = GetFilledRandomLocalLog("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalLog_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalLogList = await LocalLogDBService.GetLocalLogList();
            Assert.Equal(200, ((ObjectResult)actionLocalLogList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogList.Result).Value);
            List<LocalLog> localLogList = (List<LocalLog>)((OkObjectResult)actionLocalLogList.Result).Value;

            count = localLogList.Count();

            LocalLog localLog = GetFilledRandomLocalLog("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLog.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localLog.LogID   (Int32)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LogID = 0;

            actionLocalLog = await LocalLogDBService.Put(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LogID = 10000000;
            actionLocalLog = await LocalLogDBService.Put(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // localLog.TableName   (String)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("TableName");
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.TableName = GetRandomString("", 51);
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);
            //Assert.AreEqual(count, localLogDBService.GetLocalLogList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, -1)]
            // localLog.ID   (Int32)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.ID = 0;
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);
            //Assert.AreEqual(count, localLogService.GetLocalLogList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localLog.LogCommand   (LogCommandEnum)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LogCommand = (LogCommandEnum)1000000;
             actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localLog.Information   (String)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("Information");
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localLog.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LastUpdateDate_UTC = new DateTime();
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);
            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localLog.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LastUpdateContactTVItemID = 0;
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);

            localLog = null;
            localLog = GetFilledRandomLocalLog("");
            localLog.LastUpdateContactTVItemID = 1;
            actionLocalLog = await LocalLogDBService.Post(localLog);
            Assert.IsType<BadRequestObjectResult>(actionLocalLog.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalLog
            var actionLocalLogAdded = await LocalLogDBService.Post(localLog);
            Assert.Equal(200, ((ObjectResult)actionLocalLogAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogAdded.Result).Value);
            LocalLog localLogAdded = (LocalLog)((OkObjectResult)actionLocalLogAdded.Result).Value;
            Assert.NotNull(localLogAdded);

            // List<LocalLog>
            var actionLocalLogList = await LocalLogDBService.GetLocalLogList();
            Assert.Equal(200, ((ObjectResult)actionLocalLogList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogList.Result).Value);
            List<LocalLog> localLogList = (List<LocalLog>)((OkObjectResult)actionLocalLogList.Result).Value;

            int count = ((List<LocalLog>)((OkObjectResult)actionLocalLogList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalLog> with skip and take
            var actionLocalLogListSkipAndTake = await LocalLogDBService.GetLocalLogList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalLogListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogListSkipAndTake.Result).Value);
            List<LocalLog> localLogListSkipAndTake = (List<LocalLog>)((OkObjectResult)actionLocalLogListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalLog>)((OkObjectResult)actionLocalLogListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localLogList[0].LogID == localLogListSkipAndTake[0].LogID);

            // Get LocalLog With LogID
            var actionLocalLogGet = await LocalLogDBService.GetLocalLogWithLogID(localLogList[0].LogID);
            Assert.Equal(200, ((ObjectResult)actionLocalLogGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogGet.Result).Value);
            LocalLog localLogGet = (LocalLog)((OkObjectResult)actionLocalLogGet.Result).Value;
            Assert.NotNull(localLogGet);
            Assert.Equal(localLogGet.LogID, localLogList[0].LogID);

            // Put LocalLog
            var actionLocalLogUpdated = await LocalLogDBService.Put(localLog);
            Assert.Equal(200, ((ObjectResult)actionLocalLogUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogUpdated.Result).Value);
            LocalLog localLogUpdated = (LocalLog)((OkObjectResult)actionLocalLogUpdated.Result).Value;
            Assert.NotNull(localLogUpdated);

            // Delete LocalLog
            var actionLocalLogDeleted = await LocalLogDBService.Delete(localLog.LogID);
            Assert.Equal(200, ((ObjectResult)actionLocalLogDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalLogDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalLogDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalLogDBService, LocalLogDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalLogDBService = Provider.GetService<ILocalLogDBService>();
            Assert.NotNull(LocalLogDBService);

            return await Task.FromResult(true);
        }
        private LocalLog GetFilledRandomLocalLog(string OmitPropName)
        {
            LocalLog localLog = new LocalLog();

            if (OmitPropName != "LocalDBCommand") localLog.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TableName") localLog.TableName = GetRandomString("", 5);
            if (OmitPropName != "ID") localLog.ID = GetRandomInt(1, 11);
            if (OmitPropName != "LogCommand") localLog.LogCommand = (LogCommandEnum)GetRandomEnumType(typeof(LogCommandEnum));
            if (OmitPropName != "Information") localLog.Information = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") localLog.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localLog.LastUpdateContactTVItemID = 2;



            return localLog;
        }
        private void CheckLocalLogFields(List<LocalLog> localLogList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localLogList[0].TableName));
            Assert.False(string.IsNullOrWhiteSpace(localLogList[0].Information));
        }

        #endregion Functions private
    }
}
