/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMRunDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMRunDBService LocalMWQMRunDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMRun localMWQMRun { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMRunDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRunDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRunDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMRun = GetFilledRandomLocalMWQMRun("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRun_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMRunList = await LocalMWQMRunDBService.GetLocalMWQMRunList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunList.Result).Value);
            List<LocalMWQMRun> localMWQMRunList = (List<LocalMWQMRun>)((OkObjectResult)actionLocalMWQMRunList.Result).Value;

            count = localMWQMRunList.Count();

            LocalMWQMRun localMWQMRun = GetFilledRandomLocalMWQMRun("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRun.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMRun.MWQMRunID   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.MWQMRunID = 0;

            actionLocalMWQMRun = await LocalMWQMRunDBService.Put(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.MWQMRunID = 10000000;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Put(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localMWQMRun.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SubsectorTVItemID = 0;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SubsectorTVItemID = 1;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
            // localMWQMRun.MWQMRunTVItemID   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.MWQMRunTVItemID = 0;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.MWQMRunTVItemID = 1;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRun.RunSampleType   (SampleTypeEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RunSampleType = (SampleTypeEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.DateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.DateTime_Local = new DateTime();
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.DateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 1000)]
            // localMWQMRun.RunNumber   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RunNumber = 0;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RunNumber = 1001;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.StartDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.StartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // [CSSPBigger(OtherField = StartDateTime_Local)]
            // localMWQMRun.EndDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.EndDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LabReceivedDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabReceivedDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localMWQMRun.TemperatureControl1_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TemperatureControl1_C]

            //CSSPError: Type not implemented [TemperatureControl1_C]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.TemperatureControl1_C = -11.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.TemperatureControl1_C = 41.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localMWQMRun.TemperatureControl2_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TemperatureControl2_C]

            //CSSPError: Type not implemented [TemperatureControl2_C]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.TemperatureControl2_C = -11.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.TemperatureControl2_C = 41.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.SeaStateAtStart_BeaufortScale   (BeaufortScaleEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SeaStateAtStart_BeaufortScale = (BeaufortScaleEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.SeaStateAtEnd_BeaufortScale   (BeaufortScaleEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SeaStateAtEnd_BeaufortScale = (BeaufortScaleEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMWQMRun.WaterLevelAtBrook_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WaterLevelAtBrook_m]

            //CSSPError: Type not implemented [WaterLevelAtBrook_m]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaterLevelAtBrook_m = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaterLevelAtBrook_m = 101.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMWQMRun.WaveHightAtStart_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WaveHightAtStart_m]

            //CSSPError: Type not implemented [WaveHightAtStart_m]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaveHightAtStart_m = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaveHightAtStart_m = 101.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMWQMRun.WaveHightAtEnd_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WaveHightAtEnd_m]

            //CSSPError: Type not implemented [WaveHightAtEnd_m]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaveHightAtEnd_m = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.WaveHightAtEnd_m = 101.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localMWQMRun.SampleCrewInitials   (String)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SampleCrewInitials = GetRandomString("", 21);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.AnalyzeMethod   (AnalyzeMethodEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.AnalyzeMethod = (AnalyzeMethodEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.SampleMatrix   (SampleMatrixEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SampleMatrix = (SampleMatrixEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.Laboratory   (LaboratoryEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.Laboratory = (LaboratoryEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.SampleStatus   (SampleStatusEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.SampleStatus = (SampleStatusEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMRun.LabSampleApprovalContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabSampleApprovalContactTVItemID = 0;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabSampleApprovalContactTVItemID = 1;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LabRunSampleApprovalDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LabRunSampleApprovalDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.Tide_Start   (TideTextEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.Tide_Start = (TideTextEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMRun.Tide_End   (TideTextEnum)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.Tide_End = (TideTextEnum)1000000;
             actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay0_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay0_mm]

            //CSSPError: Type not implemented [RainDay0_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay0_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay0_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay1_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay1_mm]

            //CSSPError: Type not implemented [RainDay1_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay1_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay1_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay2_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay2_mm]

            //CSSPError: Type not implemented [RainDay2_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay2_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay2_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay3_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay3_mm]

            //CSSPError: Type not implemented [RainDay3_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay3_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay3_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay4_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay4_mm]

            //CSSPError: Type not implemented [RainDay4_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay4_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay4_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay5_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay5_mm]

            //CSSPError: Type not implemented [RainDay5_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay5_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay5_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay6_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay6_mm]

            //CSSPError: Type not implemented [RainDay6_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay6_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay6_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay7_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay7_mm]

            //CSSPError: Type not implemented [RainDay7_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay7_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay7_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay8_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay8_mm]

            //CSSPError: Type not implemented [RainDay8_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay8_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay8_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay9_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay9_mm]

            //CSSPError: Type not implemented [RainDay9_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay9_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay9_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // localMWQMRun.RainDay10_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainDay10_mm]

            //CSSPError: Type not implemented [RainDay10_mm]

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay10_mm = -1.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunService.GetLocalMWQMRunList().Count());
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.RainDay10_mm = 301.0D;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            //Assert.AreEqual(count, localMWQMRunDBService.GetLocalMWQMRunList().Count());

            // -----------------------------------
            // Is Nullable
            // localMWQMRun.RemoveFromStat   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRun.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);
            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMRun.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LastUpdateContactTVItemID = 0;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

            localMWQMRun = null;
            localMWQMRun = GetFilledRandomLocalMWQMRun("");
            localMWQMRun.LastUpdateContactTVItemID = 1;
            actionLocalMWQMRun = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRun.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMRun
            var actionLocalMWQMRunAdded = await LocalMWQMRunDBService.Post(localMWQMRun);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunAdded.Result).Value);
            LocalMWQMRun localMWQMRunAdded = (LocalMWQMRun)((OkObjectResult)actionLocalMWQMRunAdded.Result).Value;
            Assert.NotNull(localMWQMRunAdded);

            // List<LocalMWQMRun>
            var actionLocalMWQMRunList = await LocalMWQMRunDBService.GetLocalMWQMRunList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunList.Result).Value);
            List<LocalMWQMRun> localMWQMRunList = (List<LocalMWQMRun>)((OkObjectResult)actionLocalMWQMRunList.Result).Value;

            int count = ((List<LocalMWQMRun>)((OkObjectResult)actionLocalMWQMRunList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMRun> with skip and take
            var actionLocalMWQMRunListSkipAndTake = await LocalMWQMRunDBService.GetLocalMWQMRunList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunListSkipAndTake.Result).Value);
            List<LocalMWQMRun> localMWQMRunListSkipAndTake = (List<LocalMWQMRun>)((OkObjectResult)actionLocalMWQMRunListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMRun>)((OkObjectResult)actionLocalMWQMRunListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMRunList[0].MWQMRunID == localMWQMRunListSkipAndTake[0].MWQMRunID);

            // Get LocalMWQMRun With MWQMRunID
            var actionLocalMWQMRunGet = await LocalMWQMRunDBService.GetLocalMWQMRunWithMWQMRunID(localMWQMRunList[0].MWQMRunID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunGet.Result).Value);
            LocalMWQMRun localMWQMRunGet = (LocalMWQMRun)((OkObjectResult)actionLocalMWQMRunGet.Result).Value;
            Assert.NotNull(localMWQMRunGet);
            Assert.Equal(localMWQMRunGet.MWQMRunID, localMWQMRunList[0].MWQMRunID);

            // Put LocalMWQMRun
            var actionLocalMWQMRunUpdated = await LocalMWQMRunDBService.Put(localMWQMRun);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunUpdated.Result).Value);
            LocalMWQMRun localMWQMRunUpdated = (LocalMWQMRun)((OkObjectResult)actionLocalMWQMRunUpdated.Result).Value;
            Assert.NotNull(localMWQMRunUpdated);

            // Delete LocalMWQMRun
            var actionLocalMWQMRunDeleted = await LocalMWQMRunDBService.Delete(localMWQMRun.MWQMRunID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMRunDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMRunDBService, LocalMWQMRunDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMRunDBService = Provider.GetService<ILocalMWQMRunDBService>();
            Assert.NotNull(LocalMWQMRunDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMRun GetFilledRandomLocalMWQMRun(string OmitPropName)
        {
            LocalMWQMRun localMWQMRun = new LocalMWQMRun();

            if (OmitPropName != "LocalDBCommand") localMWQMRun.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SubsectorTVItemID") localMWQMRun.SubsectorTVItemID = 11;
            if (OmitPropName != "MWQMRunTVItemID") localMWQMRun.MWQMRunTVItemID = 50;
            if (OmitPropName != "RunSampleType") localMWQMRun.RunSampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "DateTime_Local") localMWQMRun.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "RunNumber") localMWQMRun.RunNumber = GetRandomInt(1, 1000);
            if (OmitPropName != "StartDateTime_Local") localMWQMRun.StartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDateTime_Local") localMWQMRun.EndDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabReceivedDateTime_Local") localMWQMRun.LabReceivedDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "TemperatureControl1_C") localMWQMRun.TemperatureControl1_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TemperatureControl2_C") localMWQMRun.TemperatureControl2_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "SeaStateAtStart_BeaufortScale") localMWQMRun.SeaStateAtStart_BeaufortScale = (BeaufortScaleEnum)GetRandomEnumType(typeof(BeaufortScaleEnum));
            if (OmitPropName != "SeaStateAtEnd_BeaufortScale") localMWQMRun.SeaStateAtEnd_BeaufortScale = (BeaufortScaleEnum)GetRandomEnumType(typeof(BeaufortScaleEnum));
            if (OmitPropName != "WaterLevelAtBrook_m") localMWQMRun.WaterLevelAtBrook_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WaveHightAtStart_m") localMWQMRun.WaveHightAtStart_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WaveHightAtEnd_m") localMWQMRun.WaveHightAtEnd_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "SampleCrewInitials") localMWQMRun.SampleCrewInitials = GetRandomString("", 5);
            if (OmitPropName != "AnalyzeMethod") localMWQMRun.AnalyzeMethod = (AnalyzeMethodEnum)GetRandomEnumType(typeof(AnalyzeMethodEnum));
            if (OmitPropName != "SampleMatrix") localMWQMRun.SampleMatrix = (SampleMatrixEnum)GetRandomEnumType(typeof(SampleMatrixEnum));
            if (OmitPropName != "Laboratory") localMWQMRun.Laboratory = (LaboratoryEnum)GetRandomEnumType(typeof(LaboratoryEnum));
            if (OmitPropName != "SampleStatus") localMWQMRun.SampleStatus = (SampleStatusEnum)GetRandomEnumType(typeof(SampleStatusEnum));
            if (OmitPropName != "LabSampleApprovalContactTVItemID") localMWQMRun.LabSampleApprovalContactTVItemID = 2;
            if (OmitPropName != "LabAnalyzeBath1IncubationStartDateTime_Local") localMWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabAnalyzeBath2IncubationStartDateTime_Local") localMWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabAnalyzeBath3IncubationStartDateTime_Local") localMWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabRunSampleApprovalDateTime_Local") localMWQMRun.LabRunSampleApprovalDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Tide_Start") localMWQMRun.Tide_Start = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "Tide_End") localMWQMRun.Tide_End = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "RainDay0_mm") localMWQMRun.RainDay0_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay1_mm") localMWQMRun.RainDay1_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay2_mm") localMWQMRun.RainDay2_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay3_mm") localMWQMRun.RainDay3_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay4_mm") localMWQMRun.RainDay4_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay5_mm") localMWQMRun.RainDay5_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay6_mm") localMWQMRun.RainDay6_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay7_mm") localMWQMRun.RainDay7_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay8_mm") localMWQMRun.RainDay8_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay9_mm") localMWQMRun.RainDay9_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay10_mm") localMWQMRun.RainDay10_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RemoveFromStat") localMWQMRun.RemoveFromStat = true;
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMRun.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMRun.LastUpdateContactTVItemID = 2;



            return localMWQMRun;
        }
        private void CheckLocalMWQMRunFields(List<LocalMWQMRun> localMWQMRunList)
        {
            if (localMWQMRunList[0].StartDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].StartDateTime_Local);
            }
            if (localMWQMRunList[0].EndDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].EndDateTime_Local);
            }
            if (localMWQMRunList[0].LabReceivedDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabReceivedDateTime_Local);
            }
            if (localMWQMRunList[0].TemperatureControl1_C != null)
            {
                Assert.NotNull(localMWQMRunList[0].TemperatureControl1_C);
            }
            if (localMWQMRunList[0].TemperatureControl2_C != null)
            {
                Assert.NotNull(localMWQMRunList[0].TemperatureControl2_C);
            }
            if (localMWQMRunList[0].SeaStateAtStart_BeaufortScale != null)
            {
                Assert.NotNull(localMWQMRunList[0].SeaStateAtStart_BeaufortScale);
            }
            if (localMWQMRunList[0].SeaStateAtEnd_BeaufortScale != null)
            {
                Assert.NotNull(localMWQMRunList[0].SeaStateAtEnd_BeaufortScale);
            }
            if (localMWQMRunList[0].WaterLevelAtBrook_m != null)
            {
                Assert.NotNull(localMWQMRunList[0].WaterLevelAtBrook_m);
            }
            if (localMWQMRunList[0].WaveHightAtStart_m != null)
            {
                Assert.NotNull(localMWQMRunList[0].WaveHightAtStart_m);
            }
            if (localMWQMRunList[0].WaveHightAtEnd_m != null)
            {
                Assert.NotNull(localMWQMRunList[0].WaveHightAtEnd_m);
            }
            if (!string.IsNullOrWhiteSpace(localMWQMRunList[0].SampleCrewInitials))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMWQMRunList[0].SampleCrewInitials));
            }
            if (localMWQMRunList[0].AnalyzeMethod != null)
            {
                Assert.NotNull(localMWQMRunList[0].AnalyzeMethod);
            }
            if (localMWQMRunList[0].SampleMatrix != null)
            {
                Assert.NotNull(localMWQMRunList[0].SampleMatrix);
            }
            if (localMWQMRunList[0].Laboratory != null)
            {
                Assert.NotNull(localMWQMRunList[0].Laboratory);
            }
            if (localMWQMRunList[0].SampleStatus != null)
            {
                Assert.NotNull(localMWQMRunList[0].SampleStatus);
            }
            if (localMWQMRunList[0].LabSampleApprovalContactTVItemID != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabSampleApprovalContactTVItemID);
            }
            if (localMWQMRunList[0].LabAnalyzeBath1IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabAnalyzeBath1IncubationStartDateTime_Local);
            }
            if (localMWQMRunList[0].LabAnalyzeBath2IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabAnalyzeBath2IncubationStartDateTime_Local);
            }
            if (localMWQMRunList[0].LabAnalyzeBath3IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabAnalyzeBath3IncubationStartDateTime_Local);
            }
            if (localMWQMRunList[0].LabRunSampleApprovalDateTime_Local != null)
            {
                Assert.NotNull(localMWQMRunList[0].LabRunSampleApprovalDateTime_Local);
            }
            if (localMWQMRunList[0].Tide_Start != null)
            {
                Assert.NotNull(localMWQMRunList[0].Tide_Start);
            }
            if (localMWQMRunList[0].Tide_End != null)
            {
                Assert.NotNull(localMWQMRunList[0].Tide_End);
            }
            if (localMWQMRunList[0].RainDay0_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay0_mm);
            }
            if (localMWQMRunList[0].RainDay1_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay1_mm);
            }
            if (localMWQMRunList[0].RainDay2_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay2_mm);
            }
            if (localMWQMRunList[0].RainDay3_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay3_mm);
            }
            if (localMWQMRunList[0].RainDay4_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay4_mm);
            }
            if (localMWQMRunList[0].RainDay5_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay5_mm);
            }
            if (localMWQMRunList[0].RainDay6_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay6_mm);
            }
            if (localMWQMRunList[0].RainDay7_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay7_mm);
            }
            if (localMWQMRunList[0].RainDay8_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay8_mm);
            }
            if (localMWQMRunList[0].RainDay9_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay9_mm);
            }
            if (localMWQMRunList[0].RainDay10_mm != null)
            {
                Assert.NotNull(localMWQMRunList[0].RainDay10_mm);
            }
            if (localMWQMRunList[0].RemoveFromStat != null)
            {
                Assert.NotNull(localMWQMRunList[0].RemoveFromStat);
            }
        }

        #endregion Functions private
    }
}
