/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMRunLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMRunLanguageDBService LocalMWQMRunLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMRunLanguage localMWQMRunLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMRunLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRunLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRunLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMRunLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMRunLanguageList = await LocalMWQMRunLanguageDBService.GetLocalMWQMRunLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageList.Result).Value);
            List<LocalMWQMRunLanguage> localMWQMRunLanguageList = (List<LocalMWQMRunLanguage>)((OkObjectResult)actionLocalMWQMRunLanguageList.Result).Value;

            count = localMWQMRunLanguageList.Count();

            LocalMWQMRunLanguage localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRunLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMRunLanguage.MWQMRunLanguageID   (Int32)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.MWQMRunLanguageID = 0;

            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Put(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.MWQMRunLanguageID = 10000000;
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Put(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MWQMRun", ExistPlurial = "s", ExistFieldID = "MWQMRunID", AllowableTVtypeList = )]
            // localMWQMRunLanguage.MWQMRunID   (Int32)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.MWQMRunID = 0;
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRunLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.Language = (LanguageEnum)1000000;
             actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localMWQMRunLanguage.RunComment   (String)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("RunComment");
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRunLanguage.TranslationStatusRunComment   (TranslationStatusEnum)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.TranslationStatusRunComment = (TranslationStatusEnum)1000000;
             actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localMWQMRunLanguage.RunWeatherComment   (String)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("RunWeatherComment");
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMRunLanguage.TranslationStatusRunWeatherComment   (TranslationStatusEnum)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.TranslationStatusRunWeatherComment = (TranslationStatusEnum)1000000;
             actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMRunLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);
            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMRunLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.LastUpdateContactTVItemID = 0;
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);

            localMWQMRunLanguage = null;
            localMWQMRunLanguage = GetFilledRandomLocalMWQMRunLanguage("");
            localMWQMRunLanguage.LastUpdateContactTVItemID = 1;
            actionLocalMWQMRunLanguage = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMRunLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMRunLanguage
            var actionLocalMWQMRunLanguageAdded = await LocalMWQMRunLanguageDBService.Post(localMWQMRunLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageAdded.Result).Value);
            LocalMWQMRunLanguage localMWQMRunLanguageAdded = (LocalMWQMRunLanguage)((OkObjectResult)actionLocalMWQMRunLanguageAdded.Result).Value;
            Assert.NotNull(localMWQMRunLanguageAdded);

            // List<LocalMWQMRunLanguage>
            var actionLocalMWQMRunLanguageList = await LocalMWQMRunLanguageDBService.GetLocalMWQMRunLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageList.Result).Value);
            List<LocalMWQMRunLanguage> localMWQMRunLanguageList = (List<LocalMWQMRunLanguage>)((OkObjectResult)actionLocalMWQMRunLanguageList.Result).Value;

            int count = ((List<LocalMWQMRunLanguage>)((OkObjectResult)actionLocalMWQMRunLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMRunLanguage> with skip and take
            var actionLocalMWQMRunLanguageListSkipAndTake = await LocalMWQMRunLanguageDBService.GetLocalMWQMRunLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageListSkipAndTake.Result).Value);
            List<LocalMWQMRunLanguage> localMWQMRunLanguageListSkipAndTake = (List<LocalMWQMRunLanguage>)((OkObjectResult)actionLocalMWQMRunLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMRunLanguage>)((OkObjectResult)actionLocalMWQMRunLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMRunLanguageList[0].MWQMRunLanguageID == localMWQMRunLanguageListSkipAndTake[0].MWQMRunLanguageID);

            // Get LocalMWQMRunLanguage With MWQMRunLanguageID
            var actionLocalMWQMRunLanguageGet = await LocalMWQMRunLanguageDBService.GetLocalMWQMRunLanguageWithMWQMRunLanguageID(localMWQMRunLanguageList[0].MWQMRunLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageGet.Result).Value);
            LocalMWQMRunLanguage localMWQMRunLanguageGet = (LocalMWQMRunLanguage)((OkObjectResult)actionLocalMWQMRunLanguageGet.Result).Value;
            Assert.NotNull(localMWQMRunLanguageGet);
            Assert.Equal(localMWQMRunLanguageGet.MWQMRunLanguageID, localMWQMRunLanguageList[0].MWQMRunLanguageID);

            // Put LocalMWQMRunLanguage
            var actionLocalMWQMRunLanguageUpdated = await LocalMWQMRunLanguageDBService.Put(localMWQMRunLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageUpdated.Result).Value);
            LocalMWQMRunLanguage localMWQMRunLanguageUpdated = (LocalMWQMRunLanguage)((OkObjectResult)actionLocalMWQMRunLanguageUpdated.Result).Value;
            Assert.NotNull(localMWQMRunLanguageUpdated);

            // Delete LocalMWQMRunLanguage
            var actionLocalMWQMRunLanguageDeleted = await LocalMWQMRunLanguageDBService.Delete(localMWQMRunLanguage.MWQMRunLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMRunLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMRunLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMRunLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMRunLanguageDBService, LocalMWQMRunLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMRunLanguageDBService = Provider.GetService<ILocalMWQMRunLanguageDBService>();
            Assert.NotNull(LocalMWQMRunLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMRunLanguage GetFilledRandomLocalMWQMRunLanguage(string OmitPropName)
        {
            LocalMWQMRunLanguage localMWQMRunLanguage = new LocalMWQMRunLanguage();

            if (OmitPropName != "LocalDBCommand") localMWQMRunLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MWQMRunID") localMWQMRunLanguage.MWQMRunID = 0;
            if (OmitPropName != "Language") localMWQMRunLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "RunComment") localMWQMRunLanguage.RunComment = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusRunComment") localMWQMRunLanguage.TranslationStatusRunComment = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "RunWeatherComment") localMWQMRunLanguage.RunWeatherComment = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusRunWeatherComment") localMWQMRunLanguage.TranslationStatusRunWeatherComment = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMRunLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMRunLanguage.LastUpdateContactTVItemID = 2;



            return localMWQMRunLanguage;
        }
        private void CheckLocalMWQMRunLanguageFields(List<LocalMWQMRunLanguage> localMWQMRunLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localMWQMRunLanguageList[0].RunComment));
            Assert.False(string.IsNullOrWhiteSpace(localMWQMRunLanguageList[0].RunWeatherComment));
        }

        #endregion Functions private
    }
}
