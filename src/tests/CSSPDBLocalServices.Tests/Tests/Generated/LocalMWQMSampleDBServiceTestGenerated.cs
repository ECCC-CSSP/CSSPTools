/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMSampleDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMSampleDBService LocalMWQMSampleDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMSample localMWQMSample { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSampleDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSampleDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSampleDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMSample = GetFilledRandomLocalMWQMSample("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSample_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMSampleList = await LocalMWQMSampleDBService.GetLocalMWQMSampleList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleList.Result).Value);
            List<LocalMWQMSample> localMWQMSampleList = (List<LocalMWQMSample>)((OkObjectResult)actionLocalMWQMSampleList.Result).Value;

            count = localMWQMSampleList.Count();

            LocalMWQMSample localMWQMSample = GetFilledRandomLocalMWQMSample("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSample.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMSample.MWQMSampleID   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMSampleID = 0;

            actionLocalMWQMSample = await LocalMWQMSampleDBService.Put(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMSampleID = 10000000;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Put(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // localMWQMSample.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMSiteTVItemID = 0;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMSiteTVItemID = 1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
            // localMWQMSample.MWQMRunTVItemID   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMRunTVItemID = 0;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.MWQMRunTVItemID = 1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMSample.SampleDateTime_Local   (DateTime)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.SampleDateTime_Local = new DateTime();
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.SampleDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(6)]
            // localMWQMSample.TimeText   (String)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.TimeText = GetRandomString("", 7);
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000)]
            // localMWQMSample.Depth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Depth_m]

            //CSSPError: Type not implemented [Depth_m]

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Depth_m = -1.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Depth_m = 1001.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localMWQMSample.FecCol_MPN_100ml   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.FecCol_MPN_100ml = -1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.FecCol_MPN_100ml = 10000001;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 40)]
            // localMWQMSample.Salinity_PPT   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Salinity_PPT]

            //CSSPError: Type not implemented [Salinity_PPT]

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Salinity_PPT = -1.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Salinity_PPT = 41.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-10, 40)]
            // localMWQMSample.WaterTemp_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WaterTemp_C]

            //CSSPError: Type not implemented [WaterTemp_C]

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.WaterTemp_C = -11.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.WaterTemp_C = 41.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 14)]
            // localMWQMSample.PH   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [PH]

            //CSSPError: Type not implemented [PH]

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.PH = -1.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.PH = 15.0D;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // localMWQMSample.SampleTypesText   (String)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("SampleTypesText");
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.SampleTypesText = GetRandomString("", 51);
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localMWQMSample.SampleType_old   (SampleTypeEnum)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.SampleType_old = (SampleTypeEnum)1000000;
             actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localMWQMSample.Tube_10   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_10 = -1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_10 = 6;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localMWQMSample.Tube_1_0   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_1_0 = -1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_1_0 = 6;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 5)]
            // localMWQMSample.Tube_0_1   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_0_1 = -1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleService.GetLocalMWQMSampleList().Count());
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.Tube_0_1 = 6;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10)]
            // localMWQMSample.ProcessedBy   (String)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.ProcessedBy = GetRandomString("", 11);
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            //Assert.AreEqual(count, localMWQMSampleDBService.GetLocalMWQMSampleList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localMWQMSample.UseForOpenData   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMSample.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);
            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMSample.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.LastUpdateContactTVItemID = 0;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

            localMWQMSample = null;
            localMWQMSample = GetFilledRandomLocalMWQMSample("");
            localMWQMSample.LastUpdateContactTVItemID = 1;
            actionLocalMWQMSample = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSample.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMSample
            var actionLocalMWQMSampleAdded = await LocalMWQMSampleDBService.Post(localMWQMSample);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleAdded.Result).Value);
            LocalMWQMSample localMWQMSampleAdded = (LocalMWQMSample)((OkObjectResult)actionLocalMWQMSampleAdded.Result).Value;
            Assert.NotNull(localMWQMSampleAdded);

            // List<LocalMWQMSample>
            var actionLocalMWQMSampleList = await LocalMWQMSampleDBService.GetLocalMWQMSampleList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleList.Result).Value);
            List<LocalMWQMSample> localMWQMSampleList = (List<LocalMWQMSample>)((OkObjectResult)actionLocalMWQMSampleList.Result).Value;

            int count = ((List<LocalMWQMSample>)((OkObjectResult)actionLocalMWQMSampleList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMSample> with skip and take
            var actionLocalMWQMSampleListSkipAndTake = await LocalMWQMSampleDBService.GetLocalMWQMSampleList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleListSkipAndTake.Result).Value);
            List<LocalMWQMSample> localMWQMSampleListSkipAndTake = (List<LocalMWQMSample>)((OkObjectResult)actionLocalMWQMSampleListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMSample>)((OkObjectResult)actionLocalMWQMSampleListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMSampleList[0].MWQMSampleID == localMWQMSampleListSkipAndTake[0].MWQMSampleID);

            // Get LocalMWQMSample With MWQMSampleID
            var actionLocalMWQMSampleGet = await LocalMWQMSampleDBService.GetLocalMWQMSampleWithMWQMSampleID(localMWQMSampleList[0].MWQMSampleID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleGet.Result).Value);
            LocalMWQMSample localMWQMSampleGet = (LocalMWQMSample)((OkObjectResult)actionLocalMWQMSampleGet.Result).Value;
            Assert.NotNull(localMWQMSampleGet);
            Assert.Equal(localMWQMSampleGet.MWQMSampleID, localMWQMSampleList[0].MWQMSampleID);

            // Put LocalMWQMSample
            var actionLocalMWQMSampleUpdated = await LocalMWQMSampleDBService.Put(localMWQMSample);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleUpdated.Result).Value);
            LocalMWQMSample localMWQMSampleUpdated = (LocalMWQMSample)((OkObjectResult)actionLocalMWQMSampleUpdated.Result).Value;
            Assert.NotNull(localMWQMSampleUpdated);

            // Delete LocalMWQMSample
            var actionLocalMWQMSampleDeleted = await LocalMWQMSampleDBService.Delete(localMWQMSample.MWQMSampleID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMSampleDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMSampleDBService, LocalMWQMSampleDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMSampleDBService = Provider.GetService<ILocalMWQMSampleDBService>();
            Assert.NotNull(LocalMWQMSampleDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMSample GetFilledRandomLocalMWQMSample(string OmitPropName)
        {
            LocalMWQMSample localMWQMSample = new LocalMWQMSample();

            if (OmitPropName != "LocalDBCommand") localMWQMSample.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MWQMSiteTVItemID") localMWQMSample.MWQMSiteTVItemID = 44;
            if (OmitPropName != "MWQMRunTVItemID") localMWQMSample.MWQMRunTVItemID = 50;
            if (OmitPropName != "SampleDateTime_Local") localMWQMSample.SampleDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "TimeText") localMWQMSample.TimeText = GetRandomString("", 5);
            if (OmitPropName != "Depth_m") localMWQMSample.Depth_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "FecCol_MPN_100ml") localMWQMSample.FecCol_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "Salinity_PPT") localMWQMSample.Salinity_PPT = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "WaterTemp_C") localMWQMSample.WaterTemp_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "PH") localMWQMSample.PH = GetRandomDouble(0.0D, 14.0D);
            if (OmitPropName != "SampleTypesText") localMWQMSample.SampleTypesText = GetRandomString("", 5);
            if (OmitPropName != "SampleType_old") localMWQMSample.SampleType_old = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "Tube_10") localMWQMSample.Tube_10 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube_1_0") localMWQMSample.Tube_1_0 = GetRandomInt(0, 5);
            if (OmitPropName != "Tube_0_1") localMWQMSample.Tube_0_1 = GetRandomInt(0, 5);
            if (OmitPropName != "ProcessedBy") localMWQMSample.ProcessedBy = GetRandomString("", 5);
            if (OmitPropName != "UseForOpenData") localMWQMSample.UseForOpenData = true;
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMSample.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMSample.LastUpdateContactTVItemID = 2;



            return localMWQMSample;
        }
        private void CheckLocalMWQMSampleFields(List<LocalMWQMSample> localMWQMSampleList)
        {
            if (!string.IsNullOrWhiteSpace(localMWQMSampleList[0].TimeText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMWQMSampleList[0].TimeText));
            }
            if (localMWQMSampleList[0].Depth_m != null)
            {
                Assert.NotNull(localMWQMSampleList[0].Depth_m);
            }
            if (localMWQMSampleList[0].Salinity_PPT != null)
            {
                Assert.NotNull(localMWQMSampleList[0].Salinity_PPT);
            }
            if (localMWQMSampleList[0].WaterTemp_C != null)
            {
                Assert.NotNull(localMWQMSampleList[0].WaterTemp_C);
            }
            if (localMWQMSampleList[0].PH != null)
            {
                Assert.NotNull(localMWQMSampleList[0].PH);
            }
            Assert.False(string.IsNullOrWhiteSpace(localMWQMSampleList[0].SampleTypesText));
            if (localMWQMSampleList[0].SampleType_old != null)
            {
                Assert.NotNull(localMWQMSampleList[0].SampleType_old);
            }
            if (localMWQMSampleList[0].Tube_10 != null)
            {
                Assert.NotNull(localMWQMSampleList[0].Tube_10);
            }
            if (localMWQMSampleList[0].Tube_1_0 != null)
            {
                Assert.NotNull(localMWQMSampleList[0].Tube_1_0);
            }
            if (localMWQMSampleList[0].Tube_0_1 != null)
            {
                Assert.NotNull(localMWQMSampleList[0].Tube_0_1);
            }
            if (!string.IsNullOrWhiteSpace(localMWQMSampleList[0].ProcessedBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMWQMSampleList[0].ProcessedBy));
            }
        }

        #endregion Functions private
    }
}
