/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMSampleLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMSampleLanguageDBService LocalMWQMSampleLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMSampleLanguage localMWQMSampleLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSampleLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSampleLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSampleLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSampleLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMSampleLanguageList = await LocalMWQMSampleLanguageDBService.GetLocalMWQMSampleLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageList.Result).Value);
            List<LocalMWQMSampleLanguage> localMWQMSampleLanguageList = (List<LocalMWQMSampleLanguage>)((OkObjectResult)actionLocalMWQMSampleLanguageList.Result).Value;

            count = localMWQMSampleLanguageList.Count();

            LocalMWQMSampleLanguage localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSampleLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMSampleLanguage.MWQMSampleLanguageID   (Int32)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.MWQMSampleLanguageID = 0;

            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Put(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.MWQMSampleLanguageID = 10000000;
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Put(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MWQMSample", ExistPlurial = "s", ExistFieldID = "MWQMSampleID", AllowableTVtypeList = )]
            // localMWQMSampleLanguage.MWQMSampleID   (Int32)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.MWQMSampleID = 0;
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSampleLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.Language = (LanguageEnum)1000000;
             actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localMWQMSampleLanguage.MWQMSampleNote   (String)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("MWQMSampleNote");
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSampleLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
             actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMSampleLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);
            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMSampleLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.LastUpdateContactTVItemID = 0;
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);

            localMWQMSampleLanguage = null;
            localMWQMSampleLanguage = GetFilledRandomLocalMWQMSampleLanguage("");
            localMWQMSampleLanguage.LastUpdateContactTVItemID = 1;
            actionLocalMWQMSampleLanguage = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSampleLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMSampleLanguage
            var actionLocalMWQMSampleLanguageAdded = await LocalMWQMSampleLanguageDBService.Post(localMWQMSampleLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageAdded.Result).Value);
            LocalMWQMSampleLanguage localMWQMSampleLanguageAdded = (LocalMWQMSampleLanguage)((OkObjectResult)actionLocalMWQMSampleLanguageAdded.Result).Value;
            Assert.NotNull(localMWQMSampleLanguageAdded);

            // List<LocalMWQMSampleLanguage>
            var actionLocalMWQMSampleLanguageList = await LocalMWQMSampleLanguageDBService.GetLocalMWQMSampleLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageList.Result).Value);
            List<LocalMWQMSampleLanguage> localMWQMSampleLanguageList = (List<LocalMWQMSampleLanguage>)((OkObjectResult)actionLocalMWQMSampleLanguageList.Result).Value;

            int count = ((List<LocalMWQMSampleLanguage>)((OkObjectResult)actionLocalMWQMSampleLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMSampleLanguage> with skip and take
            var actionLocalMWQMSampleLanguageListSkipAndTake = await LocalMWQMSampleLanguageDBService.GetLocalMWQMSampleLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageListSkipAndTake.Result).Value);
            List<LocalMWQMSampleLanguage> localMWQMSampleLanguageListSkipAndTake = (List<LocalMWQMSampleLanguage>)((OkObjectResult)actionLocalMWQMSampleLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMSampleLanguage>)((OkObjectResult)actionLocalMWQMSampleLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMSampleLanguageList[0].MWQMSampleLanguageID == localMWQMSampleLanguageListSkipAndTake[0].MWQMSampleLanguageID);

            // Get LocalMWQMSampleLanguage With MWQMSampleLanguageID
            var actionLocalMWQMSampleLanguageGet = await LocalMWQMSampleLanguageDBService.GetLocalMWQMSampleLanguageWithMWQMSampleLanguageID(localMWQMSampleLanguageList[0].MWQMSampleLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageGet.Result).Value);
            LocalMWQMSampleLanguage localMWQMSampleLanguageGet = (LocalMWQMSampleLanguage)((OkObjectResult)actionLocalMWQMSampleLanguageGet.Result).Value;
            Assert.NotNull(localMWQMSampleLanguageGet);
            Assert.Equal(localMWQMSampleLanguageGet.MWQMSampleLanguageID, localMWQMSampleLanguageList[0].MWQMSampleLanguageID);

            // Put LocalMWQMSampleLanguage
            var actionLocalMWQMSampleLanguageUpdated = await LocalMWQMSampleLanguageDBService.Put(localMWQMSampleLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageUpdated.Result).Value);
            LocalMWQMSampleLanguage localMWQMSampleLanguageUpdated = (LocalMWQMSampleLanguage)((OkObjectResult)actionLocalMWQMSampleLanguageUpdated.Result).Value;
            Assert.NotNull(localMWQMSampleLanguageUpdated);

            // Delete LocalMWQMSampleLanguage
            var actionLocalMWQMSampleLanguageDeleted = await LocalMWQMSampleLanguageDBService.Delete(localMWQMSampleLanguage.MWQMSampleLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSampleLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSampleLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMSampleLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMSampleLanguageDBService, LocalMWQMSampleLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMSampleLanguageDBService = Provider.GetService<ILocalMWQMSampleLanguageDBService>();
            Assert.NotNull(LocalMWQMSampleLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMSampleLanguage GetFilledRandomLocalMWQMSampleLanguage(string OmitPropName)
        {
            LocalMWQMSampleLanguage localMWQMSampleLanguage = new LocalMWQMSampleLanguage();

            if (OmitPropName != "LocalDBCommand") localMWQMSampleLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MWQMSampleID") localMWQMSampleLanguage.MWQMSampleID = 0;
            if (OmitPropName != "Language") localMWQMSampleLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "MWQMSampleNote") localMWQMSampleLanguage.MWQMSampleNote = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatus") localMWQMSampleLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMSampleLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMSampleLanguage.LastUpdateContactTVItemID = 2;



            return localMWQMSampleLanguage;
        }
        private void CheckLocalMWQMSampleLanguageFields(List<LocalMWQMSampleLanguage> localMWQMSampleLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localMWQMSampleLanguageList[0].MWQMSampleNote));
        }

        #endregion Functions private
    }
}
