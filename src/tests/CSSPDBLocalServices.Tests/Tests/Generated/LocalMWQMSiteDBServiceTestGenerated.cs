/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMSiteDBService LocalMWQMSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMSite localMWQMSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMSite = GetFilledRandomLocalMWQMSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMSiteList = await LocalMWQMSiteDBService.GetLocalMWQMSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteList.Result).Value);
            List<LocalMWQMSite> localMWQMSiteList = (List<LocalMWQMSite>)((OkObjectResult)actionLocalMWQMSiteList.Result).Value;

            count = localMWQMSiteList.Count();

            LocalMWQMSite localMWQMSite = GetFilledRandomLocalMWQMSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMSite.MWQMSiteID   (Int32)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteID = 0;

            actionLocalMWQMSite = await LocalMWQMSiteDBService.Put(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteID = 10000000;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Put(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // localMWQMSite.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteTVItemID = 0;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteTVItemID = 1;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(8)]
            // localMWQMSite.MWQMSiteNumber   (String)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("MWQMSiteNumber");
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteNumber = GetRandomString("", 9);
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);
            //Assert.AreEqual(count, localMWQMSiteDBService.GetLocalMWQMSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(200)]
            // localMWQMSite.MWQMSiteDescription   (String)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("MWQMSiteDescription");
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteDescription = GetRandomString("", 201);
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);
            //Assert.AreEqual(count, localMWQMSiteDBService.GetLocalMWQMSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSite.MWQMSiteLatestClassification   (MWQMSiteLatestClassificationEnum)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.MWQMSiteLatestClassification = (MWQMSiteLatestClassificationEnum)1000000;
             actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localMWQMSite.Ordinal   (Int32)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.Ordinal = -1;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);
            //Assert.AreEqual(count, localMWQMSiteService.GetLocalMWQMSiteList().Count());
            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.Ordinal = 1001;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);
            //Assert.AreEqual(count, localMWQMSiteDBService.GetLocalMWQMSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);
            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.LastUpdateContactTVItemID = 0;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

            localMWQMSite = null;
            localMWQMSite = GetFilledRandomLocalMWQMSite("");
            localMWQMSite.LastUpdateContactTVItemID = 1;
            actionLocalMWQMSite = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMSite
            var actionLocalMWQMSiteAdded = await LocalMWQMSiteDBService.Post(localMWQMSite);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteAdded.Result).Value);
            LocalMWQMSite localMWQMSiteAdded = (LocalMWQMSite)((OkObjectResult)actionLocalMWQMSiteAdded.Result).Value;
            Assert.NotNull(localMWQMSiteAdded);

            // List<LocalMWQMSite>
            var actionLocalMWQMSiteList = await LocalMWQMSiteDBService.GetLocalMWQMSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteList.Result).Value);
            List<LocalMWQMSite> localMWQMSiteList = (List<LocalMWQMSite>)((OkObjectResult)actionLocalMWQMSiteList.Result).Value;

            int count = ((List<LocalMWQMSite>)((OkObjectResult)actionLocalMWQMSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMSite> with skip and take
            var actionLocalMWQMSiteListSkipAndTake = await LocalMWQMSiteDBService.GetLocalMWQMSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteListSkipAndTake.Result).Value);
            List<LocalMWQMSite> localMWQMSiteListSkipAndTake = (List<LocalMWQMSite>)((OkObjectResult)actionLocalMWQMSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMSite>)((OkObjectResult)actionLocalMWQMSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMSiteList[0].MWQMSiteID == localMWQMSiteListSkipAndTake[0].MWQMSiteID);

            // Get LocalMWQMSite With MWQMSiteID
            var actionLocalMWQMSiteGet = await LocalMWQMSiteDBService.GetLocalMWQMSiteWithMWQMSiteID(localMWQMSiteList[0].MWQMSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteGet.Result).Value);
            LocalMWQMSite localMWQMSiteGet = (LocalMWQMSite)((OkObjectResult)actionLocalMWQMSiteGet.Result).Value;
            Assert.NotNull(localMWQMSiteGet);
            Assert.Equal(localMWQMSiteGet.MWQMSiteID, localMWQMSiteList[0].MWQMSiteID);

            // Put LocalMWQMSite
            var actionLocalMWQMSiteUpdated = await LocalMWQMSiteDBService.Put(localMWQMSite);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteUpdated.Result).Value);
            LocalMWQMSite localMWQMSiteUpdated = (LocalMWQMSite)((OkObjectResult)actionLocalMWQMSiteUpdated.Result).Value;
            Assert.NotNull(localMWQMSiteUpdated);

            // Delete LocalMWQMSite
            var actionLocalMWQMSiteDeleted = await LocalMWQMSiteDBService.Delete(localMWQMSite.MWQMSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMSiteDBService, LocalMWQMSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMSiteDBService = Provider.GetService<ILocalMWQMSiteDBService>();
            Assert.NotNull(LocalMWQMSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMSite GetFilledRandomLocalMWQMSite(string OmitPropName)
        {
            LocalMWQMSite localMWQMSite = new LocalMWQMSite();

            if (OmitPropName != "LocalDBCommand") localMWQMSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MWQMSiteTVItemID") localMWQMSite.MWQMSiteTVItemID = 44;
            if (OmitPropName != "MWQMSiteNumber") localMWQMSite.MWQMSiteNumber = GetRandomString("", 5);
            if (OmitPropName != "MWQMSiteDescription") localMWQMSite.MWQMSiteDescription = GetRandomString("", 5);
            if (OmitPropName != "MWQMSiteLatestClassification") localMWQMSite.MWQMSiteLatestClassification = (MWQMSiteLatestClassificationEnum)GetRandomEnumType(typeof(MWQMSiteLatestClassificationEnum));
            if (OmitPropName != "Ordinal") localMWQMSite.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMSite.LastUpdateContactTVItemID = 2;



            return localMWQMSite;
        }
        private void CheckLocalMWQMSiteFields(List<LocalMWQMSite> localMWQMSiteList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localMWQMSiteList[0].MWQMSiteNumber));
            Assert.False(string.IsNullOrWhiteSpace(localMWQMSiteList[0].MWQMSiteDescription));
        }

        #endregion Functions private
    }
}
