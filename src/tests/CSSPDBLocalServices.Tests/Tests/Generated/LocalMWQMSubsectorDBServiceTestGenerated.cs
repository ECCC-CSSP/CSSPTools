/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMWQMSubsectorDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMWQMSubsectorDBService LocalMWQMSubsectorDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMWQMSubsector localMWQMSubsector { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMWQMSubsectorDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSubsectorDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSubsectorDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMWQMSubsector_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMWQMSubsectorList = await LocalMWQMSubsectorDBService.GetLocalMWQMSubsectorList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorList.Result).Value);
            List<LocalMWQMSubsector> localMWQMSubsectorList = (List<LocalMWQMSubsector>)((OkObjectResult)actionLocalMWQMSubsectorList.Result).Value;

            count = localMWQMSubsectorList.Count();

            LocalMWQMSubsector localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMWQMSubsector.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMWQMSubsector.MWQMSubsectorID   (Int32)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.MWQMSubsectorID = 0;

            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Put(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.MWQMSubsectorID = 10000000;
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Put(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localMWQMSubsector.MWQMSubsectorTVItemID   (Int32)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.MWQMSubsectorTVItemID = 0;
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.MWQMSubsectorTVItemID = 1;
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(20)]
            // localMWQMSubsector.SubsectorHistoricKey   (String)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("SubsectorHistoricKey");
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.SubsectorHistoricKey = GetRandomString("", 21);
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);
            //Assert.AreEqual(count, localMWQMSubsectorDBService.GetLocalMWQMSubsectorList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // localMWQMSubsector.TideLocationSIDText   (String)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.TideLocationSIDText = GetRandomString("", 21);
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);
            //Assert.AreEqual(count, localMWQMSubsectorDBService.GetLocalMWQMSubsectorList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMWQMSubsector.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.LastUpdateDate_UTC = new DateTime();
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);
            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMWQMSubsector.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.LastUpdateContactTVItemID = 0;
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

            localMWQMSubsector = null;
            localMWQMSubsector = GetFilledRandomLocalMWQMSubsector("");
            localMWQMSubsector.LastUpdateContactTVItemID = 1;
            actionLocalMWQMSubsector = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalMWQMSubsector.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMWQMSubsector
            var actionLocalMWQMSubsectorAdded = await LocalMWQMSubsectorDBService.Post(localMWQMSubsector);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorAdded.Result).Value);
            LocalMWQMSubsector localMWQMSubsectorAdded = (LocalMWQMSubsector)((OkObjectResult)actionLocalMWQMSubsectorAdded.Result).Value;
            Assert.NotNull(localMWQMSubsectorAdded);

            // List<LocalMWQMSubsector>
            var actionLocalMWQMSubsectorList = await LocalMWQMSubsectorDBService.GetLocalMWQMSubsectorList();
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorList.Result).Value);
            List<LocalMWQMSubsector> localMWQMSubsectorList = (List<LocalMWQMSubsector>)((OkObjectResult)actionLocalMWQMSubsectorList.Result).Value;

            int count = ((List<LocalMWQMSubsector>)((OkObjectResult)actionLocalMWQMSubsectorList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMWQMSubsector> with skip and take
            var actionLocalMWQMSubsectorListSkipAndTake = await LocalMWQMSubsectorDBService.GetLocalMWQMSubsectorList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorListSkipAndTake.Result).Value);
            List<LocalMWQMSubsector> localMWQMSubsectorListSkipAndTake = (List<LocalMWQMSubsector>)((OkObjectResult)actionLocalMWQMSubsectorListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMWQMSubsector>)((OkObjectResult)actionLocalMWQMSubsectorListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMWQMSubsectorList[0].MWQMSubsectorID == localMWQMSubsectorListSkipAndTake[0].MWQMSubsectorID);

            // Get LocalMWQMSubsector With MWQMSubsectorID
            var actionLocalMWQMSubsectorGet = await LocalMWQMSubsectorDBService.GetLocalMWQMSubsectorWithMWQMSubsectorID(localMWQMSubsectorList[0].MWQMSubsectorID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorGet.Result).Value);
            LocalMWQMSubsector localMWQMSubsectorGet = (LocalMWQMSubsector)((OkObjectResult)actionLocalMWQMSubsectorGet.Result).Value;
            Assert.NotNull(localMWQMSubsectorGet);
            Assert.Equal(localMWQMSubsectorGet.MWQMSubsectorID, localMWQMSubsectorList[0].MWQMSubsectorID);

            // Put LocalMWQMSubsector
            var actionLocalMWQMSubsectorUpdated = await LocalMWQMSubsectorDBService.Put(localMWQMSubsector);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorUpdated.Result).Value);
            LocalMWQMSubsector localMWQMSubsectorUpdated = (LocalMWQMSubsector)((OkObjectResult)actionLocalMWQMSubsectorUpdated.Result).Value;
            Assert.NotNull(localMWQMSubsectorUpdated);

            // Delete LocalMWQMSubsector
            var actionLocalMWQMSubsectorDeleted = await LocalMWQMSubsectorDBService.Delete(localMWQMSubsector.MWQMSubsectorID);
            Assert.Equal(200, ((ObjectResult)actionLocalMWQMSubsectorDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMWQMSubsectorDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMWQMSubsectorDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMWQMSubsectorDBService, LocalMWQMSubsectorDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMWQMSubsectorDBService = Provider.GetService<ILocalMWQMSubsectorDBService>();
            Assert.NotNull(LocalMWQMSubsectorDBService);

            return await Task.FromResult(true);
        }
        private LocalMWQMSubsector GetFilledRandomLocalMWQMSubsector(string OmitPropName)
        {
            LocalMWQMSubsector localMWQMSubsector = new LocalMWQMSubsector();

            if (OmitPropName != "LocalDBCommand") localMWQMSubsector.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MWQMSubsectorTVItemID") localMWQMSubsector.MWQMSubsectorTVItemID = 11;
            if (OmitPropName != "SubsectorHistoricKey") localMWQMSubsector.SubsectorHistoricKey = GetRandomString("", 5);
            if (OmitPropName != "TideLocationSIDText") localMWQMSubsector.TideLocationSIDText = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localMWQMSubsector.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMWQMSubsector.LastUpdateContactTVItemID = 2;



            return localMWQMSubsector;
        }
        private void CheckLocalMWQMSubsectorFields(List<LocalMWQMSubsector> localMWQMSubsectorList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localMWQMSubsectorList[0].SubsectorHistoricKey));
            if (!string.IsNullOrWhiteSpace(localMWQMSubsectorList[0].TideLocationSIDText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMWQMSubsectorList[0].TideLocationSIDText));
            }
        }

        #endregion Functions private
    }
}
