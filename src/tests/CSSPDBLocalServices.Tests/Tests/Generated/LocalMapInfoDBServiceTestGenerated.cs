/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMapInfoDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMapInfoDBService LocalMapInfoDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMapInfo localMapInfo { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMapInfoDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfoDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfoDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMapInfo = GetFilledRandomLocalMapInfo("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfo_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMapInfoList = await LocalMapInfoDBService.GetLocalMapInfoList();
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoList.Result).Value);
            List<LocalMapInfo> localMapInfoList = (List<LocalMapInfo>)((OkObjectResult)actionLocalMapInfoList.Result).Value;

            count = localMapInfoList.Count();

            LocalMapInfo localMapInfo = GetFilledRandomLocalMapInfo("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMapInfo.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMapInfo.MapInfoID   (Int32)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.MapInfoID = 0;

            actionLocalMapInfo = await LocalMapInfoDBService.Put(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.MapInfoID = 10000000;
            actionLocalMapInfo = await LocalMapInfoDBService.Put(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Country,File,HydrometricSite,MikeBoundaryConditionWebTide,MikeBoundaryConditionMesh,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,Outfall,OtherInfrastructure,SeeOtherMunicipality,LineOverflow,RainExceedance,Classification,Approved,Restricted,Prohibited,ConditionallyApproved,ConditionallyRestricted)]
            // localMapInfo.TVItemID   (Int32)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.TVItemID = 0;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.TVItemID = 2;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMapInfo.TVType   (TVTypeEnum)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.TVType = (TVTypeEnum)1000000;
             actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // localMapInfo.LatMin   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [LatMin]

            //CSSPError: Type not implemented [LatMin]

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LatMin = -91.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoService.GetLocalMapInfoList().Count());
            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LatMin = 91.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoDBService.GetLocalMapInfoList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // localMapInfo.LatMax   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [LatMax]

            //CSSPError: Type not implemented [LatMax]

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LatMax = -91.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoService.GetLocalMapInfoList().Count());
            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LatMax = 91.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoDBService.GetLocalMapInfoList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // localMapInfo.LngMin   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [LngMin]

            //CSSPError: Type not implemented [LngMin]

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LngMin = -181.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoService.GetLocalMapInfoList().Count());
            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LngMin = 181.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoDBService.GetLocalMapInfoList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // localMapInfo.LngMax   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [LngMax]

            //CSSPError: Type not implemented [LngMax]

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LngMax = -181.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoService.GetLocalMapInfoList().Count());
            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LngMax = 181.0D;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            //Assert.AreEqual(count, localMapInfoDBService.GetLocalMapInfoList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMapInfo.MapInfoDrawType   (MapInfoDrawTypeEnum)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.MapInfoDrawType = (MapInfoDrawTypeEnum)1000000;
             actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMapInfo.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LastUpdateDate_UTC = new DateTime();
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);
            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMapInfo.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LastUpdateContactTVItemID = 0;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);

            localMapInfo = null;
            localMapInfo = GetFilledRandomLocalMapInfo("");
            localMapInfo.LastUpdateContactTVItemID = 1;
            actionLocalMapInfo = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfo.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMapInfo
            var actionLocalMapInfoAdded = await LocalMapInfoDBService.Post(localMapInfo);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoAdded.Result).Value);
            LocalMapInfo localMapInfoAdded = (LocalMapInfo)((OkObjectResult)actionLocalMapInfoAdded.Result).Value;
            Assert.NotNull(localMapInfoAdded);

            // List<LocalMapInfo>
            var actionLocalMapInfoList = await LocalMapInfoDBService.GetLocalMapInfoList();
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoList.Result).Value);
            List<LocalMapInfo> localMapInfoList = (List<LocalMapInfo>)((OkObjectResult)actionLocalMapInfoList.Result).Value;

            int count = ((List<LocalMapInfo>)((OkObjectResult)actionLocalMapInfoList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMapInfo> with skip and take
            var actionLocalMapInfoListSkipAndTake = await LocalMapInfoDBService.GetLocalMapInfoList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoListSkipAndTake.Result).Value);
            List<LocalMapInfo> localMapInfoListSkipAndTake = (List<LocalMapInfo>)((OkObjectResult)actionLocalMapInfoListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMapInfo>)((OkObjectResult)actionLocalMapInfoListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMapInfoList[0].MapInfoID == localMapInfoListSkipAndTake[0].MapInfoID);

            // Get LocalMapInfo With MapInfoID
            var actionLocalMapInfoGet = await LocalMapInfoDBService.GetLocalMapInfoWithMapInfoID(localMapInfoList[0].MapInfoID);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoGet.Result).Value);
            LocalMapInfo localMapInfoGet = (LocalMapInfo)((OkObjectResult)actionLocalMapInfoGet.Result).Value;
            Assert.NotNull(localMapInfoGet);
            Assert.Equal(localMapInfoGet.MapInfoID, localMapInfoList[0].MapInfoID);

            // Put LocalMapInfo
            var actionLocalMapInfoUpdated = await LocalMapInfoDBService.Put(localMapInfo);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoUpdated.Result).Value);
            LocalMapInfo localMapInfoUpdated = (LocalMapInfo)((OkObjectResult)actionLocalMapInfoUpdated.Result).Value;
            Assert.NotNull(localMapInfoUpdated);

            // Delete LocalMapInfo
            var actionLocalMapInfoDeleted = await LocalMapInfoDBService.Delete(localMapInfo.MapInfoID);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMapInfoDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMapInfoDBService, LocalMapInfoDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMapInfoDBService = Provider.GetService<ILocalMapInfoDBService>();
            Assert.NotNull(LocalMapInfoDBService);

            return await Task.FromResult(true);
        }
        private LocalMapInfo GetFilledRandomLocalMapInfo(string OmitPropName)
        {
            LocalMapInfo localMapInfo = new LocalMapInfo();

            if (OmitPropName != "LocalDBCommand") localMapInfo.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TVItemID") localMapInfo.TVItemID = 1;
            if (OmitPropName != "TVType") localMapInfo.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "LatMin") localMapInfo.LatMin = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "LatMax") localMapInfo.LatMax = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "LngMin") localMapInfo.LngMin = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LngMax") localMapInfo.LngMax = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "MapInfoDrawType") localMapInfo.MapInfoDrawType = (MapInfoDrawTypeEnum)GetRandomEnumType(typeof(MapInfoDrawTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localMapInfo.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMapInfo.LastUpdateContactTVItemID = 2;



            return localMapInfo;
        }
        private void CheckLocalMapInfoFields(List<LocalMapInfo> localMapInfoList)
        {
        }

        #endregion Functions private
    }
}
