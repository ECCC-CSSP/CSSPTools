/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMapInfoPointDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMapInfoPointDBService LocalMapInfoPointDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMapInfoPoint localMapInfoPoint { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMapInfoPointDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfoPointDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfoPointDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMapInfoPoint_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMapInfoPointList = await LocalMapInfoPointDBService.GetLocalMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointList.Result).Value);
            List<LocalMapInfoPoint> localMapInfoPointList = (List<LocalMapInfoPoint>)((OkObjectResult)actionLocalMapInfoPointList.Result).Value;

            count = localMapInfoPointList.Count();

            LocalMapInfoPoint localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMapInfoPoint.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMapInfoPoint.MapInfoPointID   (Int32)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.MapInfoPointID = 0;

            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Put(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.MapInfoPointID = 10000000;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Put(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MapInfo", ExistPlurial = "s", ExistFieldID = "MapInfoID", AllowableTVtypeList = )]
            // localMapInfoPoint.MapInfoID   (Int32)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.MapInfoID = 0;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, -1)]
            // localMapInfoPoint.Ordinal   (Int32)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.Ordinal = -1;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            //Assert.AreEqual(count, localMapInfoPointService.GetLocalMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // localMapInfoPoint.Lat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lat]

            //CSSPError: Type not implemented [Lat]

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.Lat = -91.0D;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            //Assert.AreEqual(count, localMapInfoPointService.GetLocalMapInfoPointList().Count());
            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.Lat = 91.0D;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            //Assert.AreEqual(count, localMapInfoPointDBService.GetLocalMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // localMapInfoPoint.Lng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lng]

            //CSSPError: Type not implemented [Lng]

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.Lng = -181.0D;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            //Assert.AreEqual(count, localMapInfoPointService.GetLocalMapInfoPointList().Count());
            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.Lng = 181.0D;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            //Assert.AreEqual(count, localMapInfoPointDBService.GetLocalMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMapInfoPoint.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.LastUpdateDate_UTC = new DateTime();
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);
            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMapInfoPoint.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.LastUpdateContactTVItemID = 0;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);

            localMapInfoPoint = null;
            localMapInfoPoint = GetFilledRandomLocalMapInfoPoint("");
            localMapInfoPoint.LastUpdateContactTVItemID = 1;
            actionLocalMapInfoPoint = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionLocalMapInfoPoint.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMapInfoPoint
            var actionLocalMapInfoPointAdded = await LocalMapInfoPointDBService.Post(localMapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointAdded.Result).Value);
            LocalMapInfoPoint localMapInfoPointAdded = (LocalMapInfoPoint)((OkObjectResult)actionLocalMapInfoPointAdded.Result).Value;
            Assert.NotNull(localMapInfoPointAdded);

            // List<LocalMapInfoPoint>
            var actionLocalMapInfoPointList = await LocalMapInfoPointDBService.GetLocalMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointList.Result).Value);
            List<LocalMapInfoPoint> localMapInfoPointList = (List<LocalMapInfoPoint>)((OkObjectResult)actionLocalMapInfoPointList.Result).Value;

            int count = ((List<LocalMapInfoPoint>)((OkObjectResult)actionLocalMapInfoPointList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMapInfoPoint> with skip and take
            var actionLocalMapInfoPointListSkipAndTake = await LocalMapInfoPointDBService.GetLocalMapInfoPointList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointListSkipAndTake.Result).Value);
            List<LocalMapInfoPoint> localMapInfoPointListSkipAndTake = (List<LocalMapInfoPoint>)((OkObjectResult)actionLocalMapInfoPointListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMapInfoPoint>)((OkObjectResult)actionLocalMapInfoPointListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMapInfoPointList[0].MapInfoPointID == localMapInfoPointListSkipAndTake[0].MapInfoPointID);

            // Get LocalMapInfoPoint With MapInfoPointID
            var actionLocalMapInfoPointGet = await LocalMapInfoPointDBService.GetLocalMapInfoPointWithMapInfoPointID(localMapInfoPointList[0].MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointGet.Result).Value);
            LocalMapInfoPoint localMapInfoPointGet = (LocalMapInfoPoint)((OkObjectResult)actionLocalMapInfoPointGet.Result).Value;
            Assert.NotNull(localMapInfoPointGet);
            Assert.Equal(localMapInfoPointGet.MapInfoPointID, localMapInfoPointList[0].MapInfoPointID);

            // Put LocalMapInfoPoint
            var actionLocalMapInfoPointUpdated = await LocalMapInfoPointDBService.Put(localMapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointUpdated.Result).Value);
            LocalMapInfoPoint localMapInfoPointUpdated = (LocalMapInfoPoint)((OkObjectResult)actionLocalMapInfoPointUpdated.Result).Value;
            Assert.NotNull(localMapInfoPointUpdated);

            // Delete LocalMapInfoPoint
            var actionLocalMapInfoPointDeleted = await LocalMapInfoPointDBService.Delete(localMapInfoPoint.MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionLocalMapInfoPointDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMapInfoPointDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMapInfoPointDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMapInfoPointDBService, LocalMapInfoPointDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMapInfoPointDBService = Provider.GetService<ILocalMapInfoPointDBService>();
            Assert.NotNull(LocalMapInfoPointDBService);

            return await Task.FromResult(true);
        }
        private LocalMapInfoPoint GetFilledRandomLocalMapInfoPoint(string OmitPropName)
        {
            LocalMapInfoPoint localMapInfoPoint = new LocalMapInfoPoint();

            if (OmitPropName != "LocalDBCommand") localMapInfoPoint.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MapInfoID") localMapInfoPoint.MapInfoID = 0;
            if (OmitPropName != "Ordinal") localMapInfoPoint.Ordinal = GetRandomInt(0, 10);
            if (OmitPropName != "Lat") localMapInfoPoint.Lat = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Lng") localMapInfoPoint.Lng = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localMapInfoPoint.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMapInfoPoint.LastUpdateContactTVItemID = 2;



            return localMapInfoPoint;
        }
        private void CheckLocalMapInfoPointFields(List<LocalMapInfoPoint> localMapInfoPointList)
        {
        }

        #endregion Functions private
    }
}
