/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMikeBoundaryConditionDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMikeBoundaryConditionDBService LocalMikeBoundaryConditionDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMikeBoundaryCondition localMikeBoundaryCondition { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeBoundaryConditionDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeBoundaryConditionDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeBoundaryConditionDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeBoundaryCondition_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMikeBoundaryConditionList = await LocalMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionList.Result).Value);
            List<LocalMikeBoundaryCondition> localMikeBoundaryConditionList = (List<LocalMikeBoundaryCondition>)((OkObjectResult)actionLocalMikeBoundaryConditionList.Result).Value;

            count = localMikeBoundaryConditionList.Count();

            LocalMikeBoundaryCondition localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeBoundaryCondition.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMikeBoundaryCondition.MikeBoundaryConditionID   (Int32)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionID = 0;

            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Put(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionID = 10000000;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Put(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeBoundaryConditionMesh,MikeBoundaryConditionWebTide)]
            // localMikeBoundaryCondition.MikeBoundaryConditionTVItemID   (Int32)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionTVItemID = 0;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionTVItemID = 1;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localMikeBoundaryCondition.MikeBoundaryConditionCode   (String)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("MikeBoundaryConditionCode");
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionCode = GetRandomString("", 101);
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localMikeBoundaryCondition.MikeBoundaryConditionName   (String)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("MikeBoundaryConditionName");
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionName = GetRandomString("", 101);
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100000)]
            // localMikeBoundaryCondition.MikeBoundaryConditionLength_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MikeBoundaryConditionLength_m]

            //CSSPError: Type not implemented [MikeBoundaryConditionLength_m]

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionLength_m = 0.0D;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionService.GetLocalMikeBoundaryConditionList().Count());
            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionLength_m = 100001.0D;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localMikeBoundaryCondition.MikeBoundaryConditionFormat   (String)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("MikeBoundaryConditionFormat");
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionFormat = GetRandomString("", 101);
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity   (MikeBoundaryConditionLevelOrVelocityEnum)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity = (MikeBoundaryConditionLevelOrVelocityEnum)1000000;
             actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeBoundaryCondition.WebTideDataSet   (WebTideDataSetEnum)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.WebTideDataSet = (WebTideDataSetEnum)1000000;
             actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localMikeBoundaryCondition.NumberOfWebTideNodes   (Int32)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.NumberOfWebTideNodes = -1;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionService.GetLocalMikeBoundaryConditionList().Count());
            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.NumberOfWebTideNodes = 1001;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            //Assert.AreEqual(count, localMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localMikeBoundaryCondition.WebTideDataFromStartToEndDate   (String)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("WebTideDataFromStartToEndDate");
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeBoundaryCondition.TVType   (TVTypeEnum)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.TVType = (TVTypeEnum)1000000;
             actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeBoundaryCondition.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.LastUpdateDate_UTC = new DateTime();
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);
            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMikeBoundaryCondition.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.LastUpdateContactTVItemID = 0;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

            localMikeBoundaryCondition = null;
            localMikeBoundaryCondition = GetFilledRandomLocalMikeBoundaryCondition("");
            localMikeBoundaryCondition.LastUpdateContactTVItemID = 1;
            actionLocalMikeBoundaryCondition = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeBoundaryCondition.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMikeBoundaryCondition
            var actionLocalMikeBoundaryConditionAdded = await LocalMikeBoundaryConditionDBService.Post(localMikeBoundaryCondition);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionAdded.Result).Value);
            LocalMikeBoundaryCondition localMikeBoundaryConditionAdded = (LocalMikeBoundaryCondition)((OkObjectResult)actionLocalMikeBoundaryConditionAdded.Result).Value;
            Assert.NotNull(localMikeBoundaryConditionAdded);

            // List<LocalMikeBoundaryCondition>
            var actionLocalMikeBoundaryConditionList = await LocalMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionList.Result).Value);
            List<LocalMikeBoundaryCondition> localMikeBoundaryConditionList = (List<LocalMikeBoundaryCondition>)((OkObjectResult)actionLocalMikeBoundaryConditionList.Result).Value;

            int count = ((List<LocalMikeBoundaryCondition>)((OkObjectResult)actionLocalMikeBoundaryConditionList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMikeBoundaryCondition> with skip and take
            var actionLocalMikeBoundaryConditionListSkipAndTake = await LocalMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionListSkipAndTake.Result).Value);
            List<LocalMikeBoundaryCondition> localMikeBoundaryConditionListSkipAndTake = (List<LocalMikeBoundaryCondition>)((OkObjectResult)actionLocalMikeBoundaryConditionListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMikeBoundaryCondition>)((OkObjectResult)actionLocalMikeBoundaryConditionListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMikeBoundaryConditionList[0].MikeBoundaryConditionID == localMikeBoundaryConditionListSkipAndTake[0].MikeBoundaryConditionID);

            // Get LocalMikeBoundaryCondition With MikeBoundaryConditionID
            var actionLocalMikeBoundaryConditionGet = await LocalMikeBoundaryConditionDBService.GetLocalMikeBoundaryConditionWithMikeBoundaryConditionID(localMikeBoundaryConditionList[0].MikeBoundaryConditionID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionGet.Result).Value);
            LocalMikeBoundaryCondition localMikeBoundaryConditionGet = (LocalMikeBoundaryCondition)((OkObjectResult)actionLocalMikeBoundaryConditionGet.Result).Value;
            Assert.NotNull(localMikeBoundaryConditionGet);
            Assert.Equal(localMikeBoundaryConditionGet.MikeBoundaryConditionID, localMikeBoundaryConditionList[0].MikeBoundaryConditionID);

            // Put LocalMikeBoundaryCondition
            var actionLocalMikeBoundaryConditionUpdated = await LocalMikeBoundaryConditionDBService.Put(localMikeBoundaryCondition);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionUpdated.Result).Value);
            LocalMikeBoundaryCondition localMikeBoundaryConditionUpdated = (LocalMikeBoundaryCondition)((OkObjectResult)actionLocalMikeBoundaryConditionUpdated.Result).Value;
            Assert.NotNull(localMikeBoundaryConditionUpdated);

            // Delete LocalMikeBoundaryCondition
            var actionLocalMikeBoundaryConditionDeleted = await LocalMikeBoundaryConditionDBService.Delete(localMikeBoundaryCondition.MikeBoundaryConditionID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeBoundaryConditionDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeBoundaryConditionDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMikeBoundaryConditionDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMikeBoundaryConditionDBService, LocalMikeBoundaryConditionDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMikeBoundaryConditionDBService = Provider.GetService<ILocalMikeBoundaryConditionDBService>();
            Assert.NotNull(LocalMikeBoundaryConditionDBService);

            return await Task.FromResult(true);
        }
        private LocalMikeBoundaryCondition GetFilledRandomLocalMikeBoundaryCondition(string OmitPropName)
        {
            LocalMikeBoundaryCondition localMikeBoundaryCondition = new LocalMikeBoundaryCondition();

            if (OmitPropName != "LocalDBCommand") localMikeBoundaryCondition.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MikeBoundaryConditionTVItemID") localMikeBoundaryCondition.MikeBoundaryConditionTVItemID = 52;
            if (OmitPropName != "MikeBoundaryConditionCode") localMikeBoundaryCondition.MikeBoundaryConditionCode = GetRandomString("", 5);
            if (OmitPropName != "MikeBoundaryConditionName") localMikeBoundaryCondition.MikeBoundaryConditionName = GetRandomString("", 5);
            if (OmitPropName != "MikeBoundaryConditionLength_m") localMikeBoundaryCondition.MikeBoundaryConditionLength_m = GetRandomDouble(1.0D, 100000.0D);
            if (OmitPropName != "MikeBoundaryConditionFormat") localMikeBoundaryCondition.MikeBoundaryConditionFormat = GetRandomString("", 5);
            if (OmitPropName != "MikeBoundaryConditionLevelOrVelocity") localMikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity = (MikeBoundaryConditionLevelOrVelocityEnum)GetRandomEnumType(typeof(MikeBoundaryConditionLevelOrVelocityEnum));
            if (OmitPropName != "WebTideDataSet") localMikeBoundaryCondition.WebTideDataSet = (WebTideDataSetEnum)GetRandomEnumType(typeof(WebTideDataSetEnum));
            if (OmitPropName != "NumberOfWebTideNodes") localMikeBoundaryCondition.NumberOfWebTideNodes = GetRandomInt(0, 1000);
            if (OmitPropName != "WebTideDataFromStartToEndDate") localMikeBoundaryCondition.WebTideDataFromStartToEndDate = GetRandomString("", 20);
            if (OmitPropName != "TVType") localMikeBoundaryCondition.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localMikeBoundaryCondition.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMikeBoundaryCondition.LastUpdateContactTVItemID = 2;



            return localMikeBoundaryCondition;
        }
        private void CheckLocalMikeBoundaryConditionFields(List<LocalMikeBoundaryCondition> localMikeBoundaryConditionList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localMikeBoundaryConditionList[0].MikeBoundaryConditionCode));
            Assert.False(string.IsNullOrWhiteSpace(localMikeBoundaryConditionList[0].MikeBoundaryConditionName));
            Assert.False(string.IsNullOrWhiteSpace(localMikeBoundaryConditionList[0].MikeBoundaryConditionFormat));
            Assert.False(string.IsNullOrWhiteSpace(localMikeBoundaryConditionList[0].WebTideDataFromStartToEndDate));
        }

        #endregion Functions private
    }
}
