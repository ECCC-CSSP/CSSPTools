/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMikeScenarioDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMikeScenarioDBService LocalMikeScenarioDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMikeScenario localMikeScenario { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeScenarioDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenarioDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenarioDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMikeScenario = GetFilledRandomLocalMikeScenario("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenario_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMikeScenarioList = await LocalMikeScenarioDBService.GetLocalMikeScenarioList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioList.Result).Value);
            List<LocalMikeScenario> localMikeScenarioList = (List<LocalMikeScenario>)((OkObjectResult)actionLocalMikeScenarioList.Result).Value;

            count = localMikeScenarioList.Count();

            LocalMikeScenario localMikeScenario = GetFilledRandomLocalMikeScenario("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeScenario.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMikeScenario.MikeScenarioID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioID = 0;

            actionLocalMikeScenario = await LocalMikeScenarioDBService.Put(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioID = 10000000;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Put(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeScenario)]
            // localMikeScenario.MikeScenarioTVItemID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioTVItemID = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioTVItemID = 1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "MikeScenario", ExistPlurial = "s", ExistFieldID = "MikeScenarioID", AllowableTVtypeList = MikeScenario)]
            // localMikeScenario.ParentMikeScenarioID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ParentMikeScenarioID = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeScenario.ScenarioStatus   (ScenarioStatusEnum)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ScenarioStatus = (ScenarioStatusEnum)1000000;
             actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // localMikeScenario.ErrorInfo   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeScenario.MikeScenarioStartDateTime_Local   (DateTime)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioStartDateTime_Local = new DateTime();
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioStartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeScenario.MikeScenarioEndDateTime_Local   (DateTime)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioEndDateTime_Local = new DateTime();
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioEndDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeScenario.MikeScenarioStartExecutionDateTime_Local   (DateTime)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioStartExecutionDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 100000)]
            // localMikeScenario.MikeScenarioExecutionTime_min   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MikeScenarioExecutionTime_min]

            //CSSPError: Type not implemented [MikeScenarioExecutionTime_min]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioExecutionTime_min = 0.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.MikeScenarioExecutionTime_min = 100001.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.WindSpeed_km_h   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WindSpeed_km_h]

            //CSSPError: Type not implemented [WindSpeed_km_h]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.WindSpeed_km_h = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.WindSpeed_km_h = 101.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 360)]
            // localMikeScenario.WindDirection_deg   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [WindDirection_deg]

            //CSSPError: Type not implemented [WindDirection_deg]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.WindDirection_deg = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.WindDirection_deg = 361.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.DecayFactor_per_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayFactor_per_day]

            //CSSPError: Type not implemented [DecayFactor_per_day]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.DecayFactor_per_day = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.DecayFactor_per_day = 101.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localMikeScenario.DecayIsConstant   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.DecayFactorAmplitude   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayFactorAmplitude]

            //CSSPError: Type not implemented [DecayFactorAmplitude]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.DecayFactorAmplitude = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.DecayFactorAmplitude = 101.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.ResultFrequency_min   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ResultFrequency_min = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ResultFrequency_min = 101;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-10, 40)]
            // localMikeScenario.AmbientTemperature_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [AmbientTemperature_C]

            //CSSPError: Type not implemented [AmbientTemperature_C]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.AmbientTemperature_C = -11.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.AmbientTemperature_C = 41.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 40)]
            // localMikeScenario.AmbientSalinity_PSU   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [AmbientSalinity_PSU]

            //CSSPError: Type not implemented [AmbientSalinity_PSU]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.AmbientSalinity_PSU = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.AmbientSalinity_PSU = 41.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // localMikeScenario.GenerateDecouplingFiles   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // localMikeScenario.UseDecouplingFiles   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
            // localMikeScenario.ForSimulatingMWQMRunTVItemID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ForSimulatingMWQMRunTVItemID = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ForSimulatingMWQMRunTVItemID = 1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.ManningNumber   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [ManningNumber]

            //CSSPError: Type not implemented [ManningNumber]

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ManningNumber = -1.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.ManningNumber = 101.0D;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 1000000)]
            // localMikeScenario.NumberOfElements   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfElements = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfElements = 1000001;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1, 1000000)]
            // localMikeScenario.NumberOfTimeSteps   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfTimeSteps = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfTimeSteps = 1000001;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.NumberOfSigmaLayers   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfSigmaLayers = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfSigmaLayers = 101;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.NumberOfZLayers   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfZLayers = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfZLayers = 101;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.NumberOfHydroOutputParameters   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfHydroOutputParameters = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfHydroOutputParameters = 101;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localMikeScenario.NumberOfTransOutputParameters   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfTransOutputParameters = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.NumberOfTransOutputParameters = 101;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000000)]
            // localMikeScenario.EstimatedHydroFileSize   (Int64)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.EstimatedHydroFileSize = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.EstimatedHydroFileSize = 100000001;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100000000)]
            // localMikeScenario.EstimatedTransFileSize   (Int64)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.EstimatedTransFileSize = -1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioService.GetLocalMikeScenarioList().Count());
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.EstimatedTransFileSize = 100000001;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            //Assert.AreEqual(count, localMikeScenarioDBService.GetLocalMikeScenarioList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeScenario.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.LastUpdateDate_UTC = new DateTime();
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);
            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMikeScenario.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.LastUpdateContactTVItemID = 0;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

            localMikeScenario = null;
            localMikeScenario = GetFilledRandomLocalMikeScenario("");
            localMikeScenario.LastUpdateContactTVItemID = 1;
            actionLocalMikeScenario = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenario.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMikeScenario
            var actionLocalMikeScenarioAdded = await LocalMikeScenarioDBService.Post(localMikeScenario);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioAdded.Result).Value);
            LocalMikeScenario localMikeScenarioAdded = (LocalMikeScenario)((OkObjectResult)actionLocalMikeScenarioAdded.Result).Value;
            Assert.NotNull(localMikeScenarioAdded);

            // List<LocalMikeScenario>
            var actionLocalMikeScenarioList = await LocalMikeScenarioDBService.GetLocalMikeScenarioList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioList.Result).Value);
            List<LocalMikeScenario> localMikeScenarioList = (List<LocalMikeScenario>)((OkObjectResult)actionLocalMikeScenarioList.Result).Value;

            int count = ((List<LocalMikeScenario>)((OkObjectResult)actionLocalMikeScenarioList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMikeScenario> with skip and take
            var actionLocalMikeScenarioListSkipAndTake = await LocalMikeScenarioDBService.GetLocalMikeScenarioList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioListSkipAndTake.Result).Value);
            List<LocalMikeScenario> localMikeScenarioListSkipAndTake = (List<LocalMikeScenario>)((OkObjectResult)actionLocalMikeScenarioListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMikeScenario>)((OkObjectResult)actionLocalMikeScenarioListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMikeScenarioList[0].MikeScenarioID == localMikeScenarioListSkipAndTake[0].MikeScenarioID);

            // Get LocalMikeScenario With MikeScenarioID
            var actionLocalMikeScenarioGet = await LocalMikeScenarioDBService.GetLocalMikeScenarioWithMikeScenarioID(localMikeScenarioList[0].MikeScenarioID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioGet.Result).Value);
            LocalMikeScenario localMikeScenarioGet = (LocalMikeScenario)((OkObjectResult)actionLocalMikeScenarioGet.Result).Value;
            Assert.NotNull(localMikeScenarioGet);
            Assert.Equal(localMikeScenarioGet.MikeScenarioID, localMikeScenarioList[0].MikeScenarioID);

            // Put LocalMikeScenario
            var actionLocalMikeScenarioUpdated = await LocalMikeScenarioDBService.Put(localMikeScenario);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioUpdated.Result).Value);
            LocalMikeScenario localMikeScenarioUpdated = (LocalMikeScenario)((OkObjectResult)actionLocalMikeScenarioUpdated.Result).Value;
            Assert.NotNull(localMikeScenarioUpdated);

            // Delete LocalMikeScenario
            var actionLocalMikeScenarioDeleted = await LocalMikeScenarioDBService.Delete(localMikeScenario.MikeScenarioID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMikeScenarioDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMikeScenarioDBService, LocalMikeScenarioDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMikeScenarioDBService = Provider.GetService<ILocalMikeScenarioDBService>();
            Assert.NotNull(LocalMikeScenarioDBService);

            return await Task.FromResult(true);
        }
        private LocalMikeScenario GetFilledRandomLocalMikeScenario(string OmitPropName)
        {
            LocalMikeScenario localMikeScenario = new LocalMikeScenario();

            if (OmitPropName != "LocalDBCommand") localMikeScenario.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MikeScenarioTVItemID") localMikeScenario.MikeScenarioTVItemID = 51;
            // Need to implement [LocalMikeScenario ParentMikeScenarioID MikeScenario MikeScenarioID]
            if (OmitPropName != "ScenarioStatus") localMikeScenario.ScenarioStatus = (ScenarioStatusEnum)GetRandomEnumType(typeof(ScenarioStatusEnum));
            if (OmitPropName != "ErrorInfo") localMikeScenario.ErrorInfo = GetRandomString("", 20);
            if (OmitPropName != "MikeScenarioStartDateTime_Local") localMikeScenario.MikeScenarioStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MikeScenarioEndDateTime_Local") localMikeScenario.MikeScenarioEndDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MikeScenarioStartExecutionDateTime_Local") localMikeScenario.MikeScenarioStartExecutionDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "MikeScenarioExecutionTime_min") localMikeScenario.MikeScenarioExecutionTime_min = GetRandomDouble(1.0D, 100000.0D);
            if (OmitPropName != "WindSpeed_km_h") localMikeScenario.WindSpeed_km_h = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WindDirection_deg") localMikeScenario.WindDirection_deg = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "DecayFactor_per_day") localMikeScenario.DecayFactor_per_day = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "DecayIsConstant") localMikeScenario.DecayIsConstant = true;
            if (OmitPropName != "DecayFactorAmplitude") localMikeScenario.DecayFactorAmplitude = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "ResultFrequency_min") localMikeScenario.ResultFrequency_min = GetRandomInt(0, 100);
            if (OmitPropName != "AmbientTemperature_C") localMikeScenario.AmbientTemperature_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "AmbientSalinity_PSU") localMikeScenario.AmbientSalinity_PSU = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "GenerateDecouplingFiles") localMikeScenario.GenerateDecouplingFiles = true;
            if (OmitPropName != "UseDecouplingFiles") localMikeScenario.UseDecouplingFiles = true;
            if (OmitPropName != "UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID") localMikeScenario.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID = 42;
            if (OmitPropName != "ForSimulatingMWQMRunTVItemID") localMikeScenario.ForSimulatingMWQMRunTVItemID = 50;
            if (OmitPropName != "ManningNumber") localMikeScenario.ManningNumber = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "NumberOfElements") localMikeScenario.NumberOfElements = GetRandomInt(1, 1000000);
            if (OmitPropName != "NumberOfTimeSteps") localMikeScenario.NumberOfTimeSteps = GetRandomInt(1, 1000000);
            if (OmitPropName != "NumberOfSigmaLayers") localMikeScenario.NumberOfSigmaLayers = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfZLayers") localMikeScenario.NumberOfZLayers = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfHydroOutputParameters") localMikeScenario.NumberOfHydroOutputParameters = GetRandomInt(0, 100);
            if (OmitPropName != "NumberOfTransOutputParameters") localMikeScenario.NumberOfTransOutputParameters = GetRandomInt(0, 100);
            if (OmitPropName != "EstimatedHydroFileSize") localMikeScenario.EstimatedHydroFileSize = GetRandomInt(0, 100000000);
            if (OmitPropName != "EstimatedTransFileSize") localMikeScenario.EstimatedTransFileSize = GetRandomInt(0, 100000000);
            if (OmitPropName != "LastUpdateDate_UTC") localMikeScenario.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMikeScenario.LastUpdateContactTVItemID = 2;



            return localMikeScenario;
        }
        private void CheckLocalMikeScenarioFields(List<LocalMikeScenario> localMikeScenarioList)
        {
            if (localMikeScenarioList[0].ParentMikeScenarioID != null)
            {
                Assert.NotNull(localMikeScenarioList[0].ParentMikeScenarioID);
            }
            if (!string.IsNullOrWhiteSpace(localMikeScenarioList[0].ErrorInfo))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMikeScenarioList[0].ErrorInfo));
            }
            if (localMikeScenarioList[0].MikeScenarioStartExecutionDateTime_Local != null)
            {
                Assert.NotNull(localMikeScenarioList[0].MikeScenarioStartExecutionDateTime_Local);
            }
            if (localMikeScenarioList[0].MikeScenarioExecutionTime_min != null)
            {
                Assert.NotNull(localMikeScenarioList[0].MikeScenarioExecutionTime_min);
            }
            if (localMikeScenarioList[0].GenerateDecouplingFiles != null)
            {
                Assert.NotNull(localMikeScenarioList[0].GenerateDecouplingFiles);
            }
            if (localMikeScenarioList[0].UseDecouplingFiles != null)
            {
                Assert.NotNull(localMikeScenarioList[0].UseDecouplingFiles);
            }
            if (localMikeScenarioList[0].UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID != null)
            {
                Assert.NotNull(localMikeScenarioList[0].UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID);
            }
            if (localMikeScenarioList[0].ForSimulatingMWQMRunTVItemID != null)
            {
                Assert.NotNull(localMikeScenarioList[0].ForSimulatingMWQMRunTVItemID);
            }
            if (localMikeScenarioList[0].NumberOfElements != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfElements);
            }
            if (localMikeScenarioList[0].NumberOfTimeSteps != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfTimeSteps);
            }
            if (localMikeScenarioList[0].NumberOfSigmaLayers != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfSigmaLayers);
            }
            if (localMikeScenarioList[0].NumberOfZLayers != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfZLayers);
            }
            if (localMikeScenarioList[0].NumberOfHydroOutputParameters != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfHydroOutputParameters);
            }
            if (localMikeScenarioList[0].NumberOfTransOutputParameters != null)
            {
                Assert.NotNull(localMikeScenarioList[0].NumberOfTransOutputParameters);
            }
            if (localMikeScenarioList[0].EstimatedHydroFileSize != null)
            {
                Assert.NotNull(localMikeScenarioList[0].EstimatedHydroFileSize);
            }
            if (localMikeScenarioList[0].EstimatedTransFileSize != null)
            {
                Assert.NotNull(localMikeScenarioList[0].EstimatedTransFileSize);
            }
        }

        #endregion Functions private
    }
}
