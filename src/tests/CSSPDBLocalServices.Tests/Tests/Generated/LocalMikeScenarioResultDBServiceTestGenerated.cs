/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMikeScenarioResultDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMikeScenarioResultDBService LocalMikeScenarioResultDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMikeScenarioResult localMikeScenarioResult { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeScenarioResultDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenarioResultDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenarioResultDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeScenarioResult_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMikeScenarioResultList = await LocalMikeScenarioResultDBService.GetLocalMikeScenarioResultList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultList.Result).Value);
            List<LocalMikeScenarioResult> localMikeScenarioResultList = (List<LocalMikeScenarioResult>)((OkObjectResult)actionLocalMikeScenarioResultList.Result).Value;

            count = localMikeScenarioResultList.Count();

            LocalMikeScenarioResult localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeScenarioResult.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMikeScenarioResult.MikeScenarioResultID   (Int32)
            // -----------------------------------

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.MikeScenarioResultID = 0;

            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Put(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.MikeScenarioResultID = 10000000;
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Put(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeScenario)]
            // localMikeScenarioResult.MikeScenarioTVItemID   (Int32)
            // -----------------------------------

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.MikeScenarioTVItemID = 0;
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.MikeScenarioTVItemID = 1;
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);


            // -----------------------------------
            // Is Nullable
            // localMikeScenarioResult.MikeResultsJSON   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeScenarioResult.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.LastUpdateDate_UTC = new DateTime();
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);
            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMikeScenarioResult.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.LastUpdateContactTVItemID = 0;
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);

            localMikeScenarioResult = null;
            localMikeScenarioResult = GetFilledRandomLocalMikeScenarioResult("");
            localMikeScenarioResult.LastUpdateContactTVItemID = 1;
            actionLocalMikeScenarioResult = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeScenarioResult.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMikeScenarioResult
            var actionLocalMikeScenarioResultAdded = await LocalMikeScenarioResultDBService.Post(localMikeScenarioResult);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultAdded.Result).Value);
            LocalMikeScenarioResult localMikeScenarioResultAdded = (LocalMikeScenarioResult)((OkObjectResult)actionLocalMikeScenarioResultAdded.Result).Value;
            Assert.NotNull(localMikeScenarioResultAdded);

            // List<LocalMikeScenarioResult>
            var actionLocalMikeScenarioResultList = await LocalMikeScenarioResultDBService.GetLocalMikeScenarioResultList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultList.Result).Value);
            List<LocalMikeScenarioResult> localMikeScenarioResultList = (List<LocalMikeScenarioResult>)((OkObjectResult)actionLocalMikeScenarioResultList.Result).Value;

            int count = ((List<LocalMikeScenarioResult>)((OkObjectResult)actionLocalMikeScenarioResultList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMikeScenarioResult> with skip and take
            var actionLocalMikeScenarioResultListSkipAndTake = await LocalMikeScenarioResultDBService.GetLocalMikeScenarioResultList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultListSkipAndTake.Result).Value);
            List<LocalMikeScenarioResult> localMikeScenarioResultListSkipAndTake = (List<LocalMikeScenarioResult>)((OkObjectResult)actionLocalMikeScenarioResultListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMikeScenarioResult>)((OkObjectResult)actionLocalMikeScenarioResultListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMikeScenarioResultList[0].MikeScenarioResultID == localMikeScenarioResultListSkipAndTake[0].MikeScenarioResultID);

            // Get LocalMikeScenarioResult With MikeScenarioResultID
            var actionLocalMikeScenarioResultGet = await LocalMikeScenarioResultDBService.GetLocalMikeScenarioResultWithMikeScenarioResultID(localMikeScenarioResultList[0].MikeScenarioResultID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultGet.Result).Value);
            LocalMikeScenarioResult localMikeScenarioResultGet = (LocalMikeScenarioResult)((OkObjectResult)actionLocalMikeScenarioResultGet.Result).Value;
            Assert.NotNull(localMikeScenarioResultGet);
            Assert.Equal(localMikeScenarioResultGet.MikeScenarioResultID, localMikeScenarioResultList[0].MikeScenarioResultID);

            // Put LocalMikeScenarioResult
            var actionLocalMikeScenarioResultUpdated = await LocalMikeScenarioResultDBService.Put(localMikeScenarioResult);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultUpdated.Result).Value);
            LocalMikeScenarioResult localMikeScenarioResultUpdated = (LocalMikeScenarioResult)((OkObjectResult)actionLocalMikeScenarioResultUpdated.Result).Value;
            Assert.NotNull(localMikeScenarioResultUpdated);

            // Delete LocalMikeScenarioResult
            var actionLocalMikeScenarioResultDeleted = await LocalMikeScenarioResultDBService.Delete(localMikeScenarioResult.MikeScenarioResultID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeScenarioResultDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeScenarioResultDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMikeScenarioResultDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMikeScenarioResultDBService, LocalMikeScenarioResultDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMikeScenarioResultDBService = Provider.GetService<ILocalMikeScenarioResultDBService>();
            Assert.NotNull(LocalMikeScenarioResultDBService);

            return await Task.FromResult(true);
        }
        private LocalMikeScenarioResult GetFilledRandomLocalMikeScenarioResult(string OmitPropName)
        {
            LocalMikeScenarioResult localMikeScenarioResult = new LocalMikeScenarioResult();

            if (OmitPropName != "LocalDBCommand") localMikeScenarioResult.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MikeScenarioTVItemID") localMikeScenarioResult.MikeScenarioTVItemID = 51;
            if (OmitPropName != "MikeResultsJSON") localMikeScenarioResult.MikeResultsJSON = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") localMikeScenarioResult.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMikeScenarioResult.LastUpdateContactTVItemID = 2;



            return localMikeScenarioResult;
        }
        private void CheckLocalMikeScenarioResultFields(List<LocalMikeScenarioResult> localMikeScenarioResultList)
        {
            if (!string.IsNullOrWhiteSpace(localMikeScenarioResultList[0].MikeResultsJSON))
            {
                Assert.False(string.IsNullOrWhiteSpace(localMikeScenarioResultList[0].MikeResultsJSON));
            }
        }

        #endregion Functions private
    }
}
