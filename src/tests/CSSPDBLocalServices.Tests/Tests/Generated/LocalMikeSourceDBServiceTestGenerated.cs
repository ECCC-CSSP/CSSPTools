/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalMikeSourceDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalMikeSourceDBService LocalMikeSourceDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalMikeSource localMikeSource { get; set; }
        #endregion Properties

        #region Constructors
        public LocalMikeSourceDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeSourceDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeSourceDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localMikeSource = GetFilledRandomLocalMikeSource("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalMikeSource_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalMikeSourceList = await LocalMikeSourceDBService.GetLocalMikeSourceList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceList.Result).Value);
            List<LocalMikeSource> localMikeSourceList = (List<LocalMikeSource>)((OkObjectResult)actionLocalMikeSourceList.Result).Value;

            count = localMikeSourceList.Count();

            LocalMikeSource localMikeSource = GetFilledRandomLocalMikeSource("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localMikeSource.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localMikeSource.MikeSourceID   (Int32)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.MikeSourceID = 0;

            actionLocalMikeSource = await LocalMikeSourceDBService.Put(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.MikeSourceID = 10000000;
            actionLocalMikeSource = await LocalMikeSourceDBService.Put(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MikeSource)]
            // localMikeSource.MikeSourceTVItemID   (Int32)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.MikeSourceTVItemID = 0;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.MikeSourceTVItemID = 1;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localMikeSource.IsContinuous   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localMikeSource.Include   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localMikeSource.IsRiver   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localMikeSource.UseHydrometric   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = HydrometricSite)]
            // localMikeSource.HydrometricTVItemID   (Int32)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.HydrometricTVItemID = 0;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.HydrometricTVItemID = 1;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // localMikeSource.DrainageArea_km2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DrainageArea_km2]

            //CSSPError: Type not implemented [DrainageArea_km2]

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.DrainageArea_km2 = -1.0D;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            //Assert.AreEqual(count, localMikeSourceService.GetLocalMikeSourceList().Count());
            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.DrainageArea_km2 = 1000001.0D;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            //Assert.AreEqual(count, localMikeSourceDBService.GetLocalMikeSourceList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000000)]
            // localMikeSource.Factor   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Factor]

            //CSSPError: Type not implemented [Factor]

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.Factor = -1.0D;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            //Assert.AreEqual(count, localMikeSourceService.GetLocalMikeSourceList().Count());
            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.Factor = 1000001.0D;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            //Assert.AreEqual(count, localMikeSourceDBService.GetLocalMikeSourceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // localMikeSource.SourceNumberString   (String)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("SourceNumberString");
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.SourceNumberString = GetRandomString("", 51);
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            //Assert.AreEqual(count, localMikeSourceDBService.GetLocalMikeSourceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localMikeSource.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.LastUpdateDate_UTC = new DateTime();
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);
            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localMikeSource.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.LastUpdateContactTVItemID = 0;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

            localMikeSource = null;
            localMikeSource = GetFilledRandomLocalMikeSource("");
            localMikeSource.LastUpdateContactTVItemID = 1;
            actionLocalMikeSource = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.IsType<BadRequestObjectResult>(actionLocalMikeSource.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalMikeSource
            var actionLocalMikeSourceAdded = await LocalMikeSourceDBService.Post(localMikeSource);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceAdded.Result).Value);
            LocalMikeSource localMikeSourceAdded = (LocalMikeSource)((OkObjectResult)actionLocalMikeSourceAdded.Result).Value;
            Assert.NotNull(localMikeSourceAdded);

            // List<LocalMikeSource>
            var actionLocalMikeSourceList = await LocalMikeSourceDBService.GetLocalMikeSourceList();
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceList.Result).Value);
            List<LocalMikeSource> localMikeSourceList = (List<LocalMikeSource>)((OkObjectResult)actionLocalMikeSourceList.Result).Value;

            int count = ((List<LocalMikeSource>)((OkObjectResult)actionLocalMikeSourceList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalMikeSource> with skip and take
            var actionLocalMikeSourceListSkipAndTake = await LocalMikeSourceDBService.GetLocalMikeSourceList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceListSkipAndTake.Result).Value);
            List<LocalMikeSource> localMikeSourceListSkipAndTake = (List<LocalMikeSource>)((OkObjectResult)actionLocalMikeSourceListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalMikeSource>)((OkObjectResult)actionLocalMikeSourceListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localMikeSourceList[0].MikeSourceID == localMikeSourceListSkipAndTake[0].MikeSourceID);

            // Get LocalMikeSource With MikeSourceID
            var actionLocalMikeSourceGet = await LocalMikeSourceDBService.GetLocalMikeSourceWithMikeSourceID(localMikeSourceList[0].MikeSourceID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceGet.Result).Value);
            LocalMikeSource localMikeSourceGet = (LocalMikeSource)((OkObjectResult)actionLocalMikeSourceGet.Result).Value;
            Assert.NotNull(localMikeSourceGet);
            Assert.Equal(localMikeSourceGet.MikeSourceID, localMikeSourceList[0].MikeSourceID);

            // Put LocalMikeSource
            var actionLocalMikeSourceUpdated = await LocalMikeSourceDBService.Put(localMikeSource);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceUpdated.Result).Value);
            LocalMikeSource localMikeSourceUpdated = (LocalMikeSource)((OkObjectResult)actionLocalMikeSourceUpdated.Result).Value;
            Assert.NotNull(localMikeSourceUpdated);

            // Delete LocalMikeSource
            var actionLocalMikeSourceDeleted = await LocalMikeSourceDBService.Delete(localMikeSource.MikeSourceID);
            Assert.Equal(200, ((ObjectResult)actionLocalMikeSourceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalMikeSourceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalMikeSourceDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalMikeSourceDBService, LocalMikeSourceDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalMikeSourceDBService = Provider.GetService<ILocalMikeSourceDBService>();
            Assert.NotNull(LocalMikeSourceDBService);

            return await Task.FromResult(true);
        }
        private LocalMikeSource GetFilledRandomLocalMikeSource(string OmitPropName)
        {
            LocalMikeSource localMikeSource = new LocalMikeSource();

            if (OmitPropName != "LocalDBCommand") localMikeSource.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "MikeSourceTVItemID") localMikeSource.MikeSourceTVItemID = 53;
            if (OmitPropName != "IsContinuous") localMikeSource.IsContinuous = true;
            if (OmitPropName != "Include") localMikeSource.Include = true;
            if (OmitPropName != "IsRiver") localMikeSource.IsRiver = true;
            if (OmitPropName != "UseHydrometric") localMikeSource.UseHydrometric = true;
            if (OmitPropName != "HydrometricTVItemID") localMikeSource.HydrometricTVItemID = 8;
            if (OmitPropName != "DrainageArea_km2") localMikeSource.DrainageArea_km2 = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "Factor") localMikeSource.Factor = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "SourceNumberString") localMikeSource.SourceNumberString = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localMikeSource.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localMikeSource.LastUpdateContactTVItemID = 2;



            return localMikeSource;
        }
        private void CheckLocalMikeSourceFields(List<LocalMikeSource> localMikeSourceList)
        {
            if (localMikeSourceList[0].HydrometricTVItemID != null)
            {
                Assert.NotNull(localMikeSourceList[0].HydrometricTVItemID);
            }
            if (localMikeSourceList[0].DrainageArea_km2 != null)
            {
                Assert.NotNull(localMikeSourceList[0].DrainageArea_km2);
            }
            if (localMikeSourceList[0].Factor != null)
            {
                Assert.NotNull(localMikeSourceList[0].Factor);
            }
            Assert.False(string.IsNullOrWhiteSpace(localMikeSourceList[0].SourceNumberString));
        }

        #endregion Functions private
    }
}
