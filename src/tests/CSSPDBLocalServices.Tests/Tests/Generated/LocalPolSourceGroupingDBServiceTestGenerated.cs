/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalPolSourceGroupingDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalPolSourceGroupingDBService LocalPolSourceGroupingDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalPolSourceGrouping localPolSourceGrouping { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceGroupingDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGroupingDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGroupingDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGrouping_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalPolSourceGroupingList = await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingList.Result).Value);
            List<LocalPolSourceGrouping> localPolSourceGroupingList = (List<LocalPolSourceGrouping>)((OkObjectResult)actionLocalPolSourceGroupingList.Result).Value;

            count = localPolSourceGroupingList.Count();

            LocalPolSourceGrouping localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGrouping.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localPolSourceGrouping.PolSourceGroupingID   (Int32)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.PolSourceGroupingID = 0;

            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Put(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.PolSourceGroupingID = 10000000;
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Put(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(10000, 100000)]
            // localPolSourceGrouping.CSSPID   (Int32)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.CSSPID = 9999;
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            //Assert.AreEqual(count, localPolSourceGroupingService.GetLocalPolSourceGroupingList().Count());
            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.CSSPID = 100001;
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            //Assert.AreEqual(count, localPolSourceGroupingDBService.GetLocalPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGrouping.GroupName   (String)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("GroupName");
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.GroupName = GetRandomString("", 501);
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            //Assert.AreEqual(count, localPolSourceGroupingDBService.GetLocalPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGrouping.Child   (String)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("Child");
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.Child = GetRandomString("", 501);
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            //Assert.AreEqual(count, localPolSourceGroupingDBService.GetLocalPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGrouping.Hide   (String)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("Hide");
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.Hide = GetRandomString("", 501);
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            //Assert.AreEqual(count, localPolSourceGroupingDBService.GetLocalPolSourceGroupingList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localPolSourceGrouping.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.LastUpdateDate_UTC = new DateTime();
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);
            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localPolSourceGrouping.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.LastUpdateContactTVItemID = 0;
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

            localPolSourceGrouping = null;
            localPolSourceGrouping = GetFilledRandomLocalPolSourceGrouping("");
            localPolSourceGrouping.LastUpdateContactTVItemID = 1;
            actionLocalPolSourceGrouping = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGrouping.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalPolSourceGrouping
            var actionLocalPolSourceGroupingAdded = await LocalPolSourceGroupingDBService.Post(localPolSourceGrouping);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingAdded.Result).Value);
            LocalPolSourceGrouping localPolSourceGroupingAdded = (LocalPolSourceGrouping)((OkObjectResult)actionLocalPolSourceGroupingAdded.Result).Value;
            Assert.NotNull(localPolSourceGroupingAdded);

            // List<LocalPolSourceGrouping>
            var actionLocalPolSourceGroupingList = await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingList.Result).Value);
            List<LocalPolSourceGrouping> localPolSourceGroupingList = (List<LocalPolSourceGrouping>)((OkObjectResult)actionLocalPolSourceGroupingList.Result).Value;

            int count = ((List<LocalPolSourceGrouping>)((OkObjectResult)actionLocalPolSourceGroupingList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalPolSourceGrouping> with skip and take
            var actionLocalPolSourceGroupingListSkipAndTake = await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingListSkipAndTake.Result).Value);
            List<LocalPolSourceGrouping> localPolSourceGroupingListSkipAndTake = (List<LocalPolSourceGrouping>)((OkObjectResult)actionLocalPolSourceGroupingListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalPolSourceGrouping>)((OkObjectResult)actionLocalPolSourceGroupingListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localPolSourceGroupingList[0].PolSourceGroupingID == localPolSourceGroupingListSkipAndTake[0].PolSourceGroupingID);

            // Get LocalPolSourceGrouping With PolSourceGroupingID
            var actionLocalPolSourceGroupingGet = await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingWithPolSourceGroupingID(localPolSourceGroupingList[0].PolSourceGroupingID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingGet.Result).Value);
            LocalPolSourceGrouping localPolSourceGroupingGet = (LocalPolSourceGrouping)((OkObjectResult)actionLocalPolSourceGroupingGet.Result).Value;
            Assert.NotNull(localPolSourceGroupingGet);
            Assert.Equal(localPolSourceGroupingGet.PolSourceGroupingID, localPolSourceGroupingList[0].PolSourceGroupingID);

            // Put LocalPolSourceGrouping
            var actionLocalPolSourceGroupingUpdated = await LocalPolSourceGroupingDBService.Put(localPolSourceGrouping);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingUpdated.Result).Value);
            LocalPolSourceGrouping localPolSourceGroupingUpdated = (LocalPolSourceGrouping)((OkObjectResult)actionLocalPolSourceGroupingUpdated.Result).Value;
            Assert.NotNull(localPolSourceGroupingUpdated);

            // Delete LocalPolSourceGrouping
            var actionLocalPolSourceGroupingDeleted = await LocalPolSourceGroupingDBService.Delete(localPolSourceGrouping.PolSourceGroupingID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalPolSourceGroupingDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalPolSourceGroupingDBService, LocalPolSourceGroupingDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalPolSourceGroupingDBService = Provider.GetService<ILocalPolSourceGroupingDBService>();
            Assert.NotNull(LocalPolSourceGroupingDBService);

            return await Task.FromResult(true);
        }
        private LocalPolSourceGrouping GetFilledRandomLocalPolSourceGrouping(string OmitPropName)
        {
            LocalPolSourceGrouping localPolSourceGrouping = new LocalPolSourceGrouping();

            if (OmitPropName != "LocalDBCommand") localPolSourceGrouping.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "CSSPID") localPolSourceGrouping.CSSPID = GetRandomInt(10000, 100000);
            if (OmitPropName != "GroupName") localPolSourceGrouping.GroupName = GetRandomString("", 5);
            if (OmitPropName != "Child") localPolSourceGrouping.Child = GetRandomString("", 5);
            if (OmitPropName != "Hide") localPolSourceGrouping.Hide = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localPolSourceGrouping.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localPolSourceGrouping.LastUpdateContactTVItemID = 2;



            return localPolSourceGrouping;
        }
        private void CheckLocalPolSourceGroupingFields(List<LocalPolSourceGrouping> localPolSourceGroupingList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingList[0].GroupName));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingList[0].Child));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingList[0].Hide));
        }

        #endregion Functions private
    }
}
