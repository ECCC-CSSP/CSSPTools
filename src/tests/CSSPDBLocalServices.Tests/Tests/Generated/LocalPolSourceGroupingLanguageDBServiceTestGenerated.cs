/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalPolSourceGroupingLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalPolSourceGroupingLanguageDBService LocalPolSourceGroupingLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceGroupingLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGroupingLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGroupingLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceGroupingLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalPolSourceGroupingLanguageList = await LocalPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageList.Result).Value);
            List<LocalPolSourceGroupingLanguage> localPolSourceGroupingLanguageList = (List<LocalPolSourceGroupingLanguage>)((OkObjectResult)actionLocalPolSourceGroupingLanguageList.Result).Value;

            count = localPolSourceGroupingLanguageList.Count();

            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localPolSourceGroupingLanguage.PolSourceGroupingLanguageID   (Int32)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.PolSourceGroupingLanguageID = 0;

            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Put(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.PolSourceGroupingLanguageID = 10000000;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Put(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "PolSourceGrouping", ExistPlurial = "s", ExistFieldID = "PolSourceGroupingID", AllowableTVtypeList = )]
            // localPolSourceGroupingLanguage.PolSourceGroupingID   (Int32)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.PolSourceGroupingID = 0;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.Language = (LanguageEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGroupingLanguage.SourceName   (String)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("SourceName");
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.SourceName = GetRandomString("", 501);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localPolSourceGroupingLanguage.SourceNameOrder   (Int32)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.SourceNameOrder = -1;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageService.GetLocalPolSourceGroupingLanguageList().Count());
            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.SourceNameOrder = 1001;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.TranslationStatusSourceName   (TranslationStatusEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // localPolSourceGroupingLanguage.Init   (String)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("Init");
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.Init = GetRandomString("", 51);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.TranslationStatusInit   (TranslationStatusEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGroupingLanguage.Description   (String)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("Description");
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.Description = GetRandomString("", 501);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.TranslationStatusDescription   (TranslationStatusEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGroupingLanguage.Report   (String)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("Report");
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.Report = GetRandomString("", 501);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.TranslationStatusReport   (TranslationStatusEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // localPolSourceGroupingLanguage.Text   (String)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("Text");
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.Text = GetRandomString("", 501);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, localPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceGroupingLanguage.TranslationStatusText   (TranslationStatusEnum)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)1000000;
             actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localPolSourceGroupingLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);
            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localPolSourceGroupingLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.LastUpdateContactTVItemID = 0;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

            localPolSourceGroupingLanguage = null;
            localPolSourceGroupingLanguage = GetFilledRandomLocalPolSourceGroupingLanguage("");
            localPolSourceGroupingLanguage.LastUpdateContactTVItemID = 1;
            actionLocalPolSourceGroupingLanguage = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceGroupingLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalPolSourceGroupingLanguage
            var actionLocalPolSourceGroupingLanguageAdded = await LocalPolSourceGroupingLanguageDBService.Post(localPolSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageAdded.Result).Value);
            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguageAdded = (LocalPolSourceGroupingLanguage)((OkObjectResult)actionLocalPolSourceGroupingLanguageAdded.Result).Value;
            Assert.NotNull(localPolSourceGroupingLanguageAdded);

            // List<LocalPolSourceGroupingLanguage>
            var actionLocalPolSourceGroupingLanguageList = await LocalPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageList.Result).Value);
            List<LocalPolSourceGroupingLanguage> localPolSourceGroupingLanguageList = (List<LocalPolSourceGroupingLanguage>)((OkObjectResult)actionLocalPolSourceGroupingLanguageList.Result).Value;

            int count = ((List<LocalPolSourceGroupingLanguage>)((OkObjectResult)actionLocalPolSourceGroupingLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalPolSourceGroupingLanguage> with skip and take
            var actionLocalPolSourceGroupingLanguageListSkipAndTake = await LocalPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageListSkipAndTake.Result).Value);
            List<LocalPolSourceGroupingLanguage> localPolSourceGroupingLanguageListSkipAndTake = (List<LocalPolSourceGroupingLanguage>)((OkObjectResult)actionLocalPolSourceGroupingLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalPolSourceGroupingLanguage>)((OkObjectResult)actionLocalPolSourceGroupingLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localPolSourceGroupingLanguageList[0].PolSourceGroupingLanguageID == localPolSourceGroupingLanguageListSkipAndTake[0].PolSourceGroupingLanguageID);

            // Get LocalPolSourceGroupingLanguage With PolSourceGroupingLanguageID
            var actionLocalPolSourceGroupingLanguageGet = await LocalPolSourceGroupingLanguageDBService.GetLocalPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(localPolSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageGet.Result).Value);
            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguageGet = (LocalPolSourceGroupingLanguage)((OkObjectResult)actionLocalPolSourceGroupingLanguageGet.Result).Value;
            Assert.NotNull(localPolSourceGroupingLanguageGet);
            Assert.Equal(localPolSourceGroupingLanguageGet.PolSourceGroupingLanguageID, localPolSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);

            // Put LocalPolSourceGroupingLanguage
            var actionLocalPolSourceGroupingLanguageUpdated = await LocalPolSourceGroupingLanguageDBService.Put(localPolSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageUpdated.Result).Value);
            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguageUpdated = (LocalPolSourceGroupingLanguage)((OkObjectResult)actionLocalPolSourceGroupingLanguageUpdated.Result).Value;
            Assert.NotNull(localPolSourceGroupingLanguageUpdated);

            // Delete LocalPolSourceGroupingLanguage
            var actionLocalPolSourceGroupingLanguageDeleted = await LocalPolSourceGroupingLanguageDBService.Delete(localPolSourceGroupingLanguage.PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceGroupingLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceGroupingLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalPolSourceGroupingLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalPolSourceGroupingLanguageDBService, LocalPolSourceGroupingLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalPolSourceGroupingLanguageDBService = Provider.GetService<ILocalPolSourceGroupingLanguageDBService>();
            Assert.NotNull(LocalPolSourceGroupingLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalPolSourceGroupingLanguage GetFilledRandomLocalPolSourceGroupingLanguage(string OmitPropName)
        {
            LocalPolSourceGroupingLanguage localPolSourceGroupingLanguage = new LocalPolSourceGroupingLanguage();

            if (OmitPropName != "LocalDBCommand") localPolSourceGroupingLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "PolSourceGroupingID") localPolSourceGroupingLanguage.PolSourceGroupingID = 0;
            if (OmitPropName != "Language") localPolSourceGroupingLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "SourceName") localPolSourceGroupingLanguage.SourceName = GetRandomString("", 5);
            if (OmitPropName != "SourceNameOrder") localPolSourceGroupingLanguage.SourceNameOrder = GetRandomInt(0, 1000);
            if (OmitPropName != "TranslationStatusSourceName") localPolSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Init") localPolSourceGroupingLanguage.Init = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusInit") localPolSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Description") localPolSourceGroupingLanguage.Description = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusDescription") localPolSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Report") localPolSourceGroupingLanguage.Report = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusReport") localPolSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Text") localPolSourceGroupingLanguage.Text = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusText") localPolSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localPolSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localPolSourceGroupingLanguage.LastUpdateContactTVItemID = 2;



            return localPolSourceGroupingLanguage;
        }
        private void CheckLocalPolSourceGroupingLanguageFields(List<LocalPolSourceGroupingLanguage> localPolSourceGroupingLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingLanguageList[0].SourceName));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingLanguageList[0].Init));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingLanguageList[0].Description));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingLanguageList[0].Report));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceGroupingLanguageList[0].Text));
        }

        #endregion Functions private
    }
}
