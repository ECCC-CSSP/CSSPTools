/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalPolSourceObservationIssueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalPolSourceObservationIssueDBService LocalPolSourceObservationIssueDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalPolSourceObservationIssue localPolSourceObservationIssue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceObservationIssueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceObservationIssueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceObservationIssueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceObservationIssue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalPolSourceObservationIssueList = await LocalPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueList.Result).Value);
            List<LocalPolSourceObservationIssue> localPolSourceObservationIssueList = (List<LocalPolSourceObservationIssue>)((OkObjectResult)actionLocalPolSourceObservationIssueList.Result).Value;

            count = localPolSourceObservationIssueList.Count();

            LocalPolSourceObservationIssue localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceObservationIssue.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localPolSourceObservationIssue.PolSourceObservationIssueID   (Int32)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.PolSourceObservationIssueID = 0;

            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Put(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.PolSourceObservationIssueID = 10000000;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Put(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "PolSourceObservation", ExistPlurial = "s", ExistFieldID = "PolSourceObservationID", AllowableTVtypeList = )]
            // localPolSourceObservationIssue.PolSourceObservationID   (Int32)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.PolSourceObservationID = 0;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // localPolSourceObservationIssue.ObservationInfo   (String)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("ObservationInfo");
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.ObservationInfo = GetRandomString("", 251);
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);
            //Assert.AreEqual(count, localPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localPolSourceObservationIssue.Ordinal   (Int32)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.Ordinal = -1;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);
            //Assert.AreEqual(count, localPolSourceObservationIssueService.GetLocalPolSourceObservationIssueList().Count());
            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.Ordinal = 1001;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);
            //Assert.AreEqual(count, localPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueList().Count());

            // -----------------------------------
            // Is Nullable
            // localPolSourceObservationIssue.ExtraComment   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localPolSourceObservationIssue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.LastUpdateDate_UTC = new DateTime();
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);
            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localPolSourceObservationIssue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.LastUpdateContactTVItemID = 0;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);

            localPolSourceObservationIssue = null;
            localPolSourceObservationIssue = GetFilledRandomLocalPolSourceObservationIssue("");
            localPolSourceObservationIssue.LastUpdateContactTVItemID = 1;
            actionLocalPolSourceObservationIssue = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceObservationIssue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalPolSourceObservationIssue
            var actionLocalPolSourceObservationIssueAdded = await LocalPolSourceObservationIssueDBService.Post(localPolSourceObservationIssue);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueAdded.Result).Value);
            LocalPolSourceObservationIssue localPolSourceObservationIssueAdded = (LocalPolSourceObservationIssue)((OkObjectResult)actionLocalPolSourceObservationIssueAdded.Result).Value;
            Assert.NotNull(localPolSourceObservationIssueAdded);

            // List<LocalPolSourceObservationIssue>
            var actionLocalPolSourceObservationIssueList = await LocalPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueList.Result).Value);
            List<LocalPolSourceObservationIssue> localPolSourceObservationIssueList = (List<LocalPolSourceObservationIssue>)((OkObjectResult)actionLocalPolSourceObservationIssueList.Result).Value;

            int count = ((List<LocalPolSourceObservationIssue>)((OkObjectResult)actionLocalPolSourceObservationIssueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalPolSourceObservationIssue> with skip and take
            var actionLocalPolSourceObservationIssueListSkipAndTake = await LocalPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueListSkipAndTake.Result).Value);
            List<LocalPolSourceObservationIssue> localPolSourceObservationIssueListSkipAndTake = (List<LocalPolSourceObservationIssue>)((OkObjectResult)actionLocalPolSourceObservationIssueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalPolSourceObservationIssue>)((OkObjectResult)actionLocalPolSourceObservationIssueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localPolSourceObservationIssueList[0].PolSourceObservationIssueID == localPolSourceObservationIssueListSkipAndTake[0].PolSourceObservationIssueID);

            // Get LocalPolSourceObservationIssue With PolSourceObservationIssueID
            var actionLocalPolSourceObservationIssueGet = await LocalPolSourceObservationIssueDBService.GetLocalPolSourceObservationIssueWithPolSourceObservationIssueID(localPolSourceObservationIssueList[0].PolSourceObservationIssueID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueGet.Result).Value);
            LocalPolSourceObservationIssue localPolSourceObservationIssueGet = (LocalPolSourceObservationIssue)((OkObjectResult)actionLocalPolSourceObservationIssueGet.Result).Value;
            Assert.NotNull(localPolSourceObservationIssueGet);
            Assert.Equal(localPolSourceObservationIssueGet.PolSourceObservationIssueID, localPolSourceObservationIssueList[0].PolSourceObservationIssueID);

            // Put LocalPolSourceObservationIssue
            var actionLocalPolSourceObservationIssueUpdated = await LocalPolSourceObservationIssueDBService.Put(localPolSourceObservationIssue);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueUpdated.Result).Value);
            LocalPolSourceObservationIssue localPolSourceObservationIssueUpdated = (LocalPolSourceObservationIssue)((OkObjectResult)actionLocalPolSourceObservationIssueUpdated.Result).Value;
            Assert.NotNull(localPolSourceObservationIssueUpdated);

            // Delete LocalPolSourceObservationIssue
            var actionLocalPolSourceObservationIssueDeleted = await LocalPolSourceObservationIssueDBService.Delete(localPolSourceObservationIssue.PolSourceObservationIssueID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceObservationIssueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceObservationIssueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalPolSourceObservationIssueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalPolSourceObservationIssueDBService, LocalPolSourceObservationIssueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalPolSourceObservationIssueDBService = Provider.GetService<ILocalPolSourceObservationIssueDBService>();
            Assert.NotNull(LocalPolSourceObservationIssueDBService);

            return await Task.FromResult(true);
        }
        private LocalPolSourceObservationIssue GetFilledRandomLocalPolSourceObservationIssue(string OmitPropName)
        {
            LocalPolSourceObservationIssue localPolSourceObservationIssue = new LocalPolSourceObservationIssue();

            if (OmitPropName != "LocalDBCommand") localPolSourceObservationIssue.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "PolSourceObservationID") localPolSourceObservationIssue.PolSourceObservationID = 0;
            if (OmitPropName != "ObservationInfo") localPolSourceObservationIssue.ObservationInfo = GetRandomString("", 5);
            if (OmitPropName != "Ordinal") localPolSourceObservationIssue.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "ExtraComment") localPolSourceObservationIssue.ExtraComment = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") localPolSourceObservationIssue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localPolSourceObservationIssue.LastUpdateContactTVItemID = 2;



            return localPolSourceObservationIssue;
        }
        private void CheckLocalPolSourceObservationIssueFields(List<LocalPolSourceObservationIssue> localPolSourceObservationIssueList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceObservationIssueList[0].ObservationInfo));
            if (!string.IsNullOrWhiteSpace(localPolSourceObservationIssueList[0].ExtraComment))
            {
                Assert.False(string.IsNullOrWhiteSpace(localPolSourceObservationIssueList[0].ExtraComment));
            }
        }

        #endregion Functions private
    }
}
