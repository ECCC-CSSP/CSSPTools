/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalPolSourceSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalPolSourceSiteDBService LocalPolSourceSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalPolSourceSite localPolSourceSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalPolSourceSiteList = await LocalPolSourceSiteDBService.GetLocalPolSourceSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteList.Result).Value);
            List<LocalPolSourceSite> localPolSourceSiteList = (List<LocalPolSourceSite>)((OkObjectResult)actionLocalPolSourceSiteList.Result).Value;

            count = localPolSourceSiteList.Count();

            LocalPolSourceSite localPolSourceSite = GetFilledRandomLocalPolSourceSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localPolSourceSite.PolSourceSiteID   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.PolSourceSiteID = 0;

            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Put(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.PolSourceSiteID = 10000000;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Put(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = PolSourceSite)]
            // localPolSourceSite.PolSourceSiteTVItemID   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.PolSourceSiteTVItemID = 0;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.PolSourceSiteTVItemID = 1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(50)]
            // localPolSourceSite.Temp_Locator_CanDelete   (String)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.Temp_Locator_CanDelete = GetRandomString("", 51);
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteDBService.GetLocalPolSourceSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000)]
            // localPolSourceSite.Oldsiteid   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.Oldsiteid = -1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteService.GetLocalPolSourceSiteList().Count());
            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.Oldsiteid = 1001;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteDBService.GetLocalPolSourceSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000)]
            // localPolSourceSite.Site   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.Site = -1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteService.GetLocalPolSourceSiteList().Count());
            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.Site = 1001;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteDBService.GetLocalPolSourceSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 1000)]
            // localPolSourceSite.SiteID   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.SiteID = -1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteService.GetLocalPolSourceSiteList().Count());
            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.SiteID = 1001;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            //Assert.AreEqual(count, localPolSourceSiteDBService.GetLocalPolSourceSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localPolSourceSite.IsPointSource   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localPolSourceSite.InactiveReason   (PolSourceInactiveReasonEnum)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.InactiveReason = (PolSourceInactiveReasonEnum)1000000;
             actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Address)]
            // localPolSourceSite.CivicAddressTVItemID   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.CivicAddressTVItemID = 0;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.CivicAddressTVItemID = 1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localPolSourceSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.LastUpdateDate_UTC = new DateTime();
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);
            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localPolSourceSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.LastUpdateContactTVItemID = 0;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

            localPolSourceSite = null;
            localPolSourceSite = GetFilledRandomLocalPolSourceSite("");
            localPolSourceSite.LastUpdateContactTVItemID = 1;
            actionLocalPolSourceSite = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalPolSourceSite
            var actionLocalPolSourceSiteAdded = await LocalPolSourceSiteDBService.Post(localPolSourceSite);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteAdded.Result).Value);
            LocalPolSourceSite localPolSourceSiteAdded = (LocalPolSourceSite)((OkObjectResult)actionLocalPolSourceSiteAdded.Result).Value;
            Assert.NotNull(localPolSourceSiteAdded);

            // List<LocalPolSourceSite>
            var actionLocalPolSourceSiteList = await LocalPolSourceSiteDBService.GetLocalPolSourceSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteList.Result).Value);
            List<LocalPolSourceSite> localPolSourceSiteList = (List<LocalPolSourceSite>)((OkObjectResult)actionLocalPolSourceSiteList.Result).Value;

            int count = ((List<LocalPolSourceSite>)((OkObjectResult)actionLocalPolSourceSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalPolSourceSite> with skip and take
            var actionLocalPolSourceSiteListSkipAndTake = await LocalPolSourceSiteDBService.GetLocalPolSourceSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteListSkipAndTake.Result).Value);
            List<LocalPolSourceSite> localPolSourceSiteListSkipAndTake = (List<LocalPolSourceSite>)((OkObjectResult)actionLocalPolSourceSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalPolSourceSite>)((OkObjectResult)actionLocalPolSourceSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localPolSourceSiteList[0].PolSourceSiteID == localPolSourceSiteListSkipAndTake[0].PolSourceSiteID);

            // Get LocalPolSourceSite With PolSourceSiteID
            var actionLocalPolSourceSiteGet = await LocalPolSourceSiteDBService.GetLocalPolSourceSiteWithPolSourceSiteID(localPolSourceSiteList[0].PolSourceSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteGet.Result).Value);
            LocalPolSourceSite localPolSourceSiteGet = (LocalPolSourceSite)((OkObjectResult)actionLocalPolSourceSiteGet.Result).Value;
            Assert.NotNull(localPolSourceSiteGet);
            Assert.Equal(localPolSourceSiteGet.PolSourceSiteID, localPolSourceSiteList[0].PolSourceSiteID);

            // Put LocalPolSourceSite
            var actionLocalPolSourceSiteUpdated = await LocalPolSourceSiteDBService.Put(localPolSourceSite);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteUpdated.Result).Value);
            LocalPolSourceSite localPolSourceSiteUpdated = (LocalPolSourceSite)((OkObjectResult)actionLocalPolSourceSiteUpdated.Result).Value;
            Assert.NotNull(localPolSourceSiteUpdated);

            // Delete LocalPolSourceSite
            var actionLocalPolSourceSiteDeleted = await LocalPolSourceSiteDBService.Delete(localPolSourceSite.PolSourceSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalPolSourceSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalPolSourceSiteDBService, LocalPolSourceSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalPolSourceSiteDBService = Provider.GetService<ILocalPolSourceSiteDBService>();
            Assert.NotNull(LocalPolSourceSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalPolSourceSite GetFilledRandomLocalPolSourceSite(string OmitPropName)
        {
            LocalPolSourceSite localPolSourceSite = new LocalPolSourceSite();

            if (OmitPropName != "LocalDBCommand") localPolSourceSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "PolSourceSiteTVItemID") localPolSourceSite.PolSourceSiteTVItemID = 47;
            if (OmitPropName != "Temp_Locator_CanDelete") localPolSourceSite.Temp_Locator_CanDelete = GetRandomString("", 5);
            if (OmitPropName != "Oldsiteid") localPolSourceSite.Oldsiteid = GetRandomInt(0, 1000);
            if (OmitPropName != "Site") localPolSourceSite.Site = GetRandomInt(0, 1000);
            if (OmitPropName != "SiteID") localPolSourceSite.SiteID = GetRandomInt(0, 1000);
            if (OmitPropName != "IsPointSource") localPolSourceSite.IsPointSource = true;
            if (OmitPropName != "InactiveReason") localPolSourceSite.InactiveReason = (PolSourceInactiveReasonEnum)GetRandomEnumType(typeof(PolSourceInactiveReasonEnum));
            if (OmitPropName != "CivicAddressTVItemID") localPolSourceSite.CivicAddressTVItemID = 46;
            if (OmitPropName != "LastUpdateDate_UTC") localPolSourceSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localPolSourceSite.LastUpdateContactTVItemID = 2;



            return localPolSourceSite;
        }
        private void CheckLocalPolSourceSiteFields(List<LocalPolSourceSite> localPolSourceSiteList)
        {
            if (!string.IsNullOrWhiteSpace(localPolSourceSiteList[0].Temp_Locator_CanDelete))
            {
                Assert.False(string.IsNullOrWhiteSpace(localPolSourceSiteList[0].Temp_Locator_CanDelete));
            }
            if (localPolSourceSiteList[0].Oldsiteid != null)
            {
                Assert.NotNull(localPolSourceSiteList[0].Oldsiteid);
            }
            if (localPolSourceSiteList[0].Site != null)
            {
                Assert.NotNull(localPolSourceSiteList[0].Site);
            }
            if (localPolSourceSiteList[0].SiteID != null)
            {
                Assert.NotNull(localPolSourceSiteList[0].SiteID);
            }
            if (localPolSourceSiteList[0].InactiveReason != null)
            {
                Assert.NotNull(localPolSourceSiteList[0].InactiveReason);
            }
            if (localPolSourceSiteList[0].CivicAddressTVItemID != null)
            {
                Assert.NotNull(localPolSourceSiteList[0].CivicAddressTVItemID);
            }
        }

        #endregion Functions private
    }
}
