/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalPolSourceSiteEffectTermDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalPolSourceSiteEffectTermDBService LocalPolSourceSiteEffectTermDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTerm { get; set; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceSiteEffectTermDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSiteEffectTermDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSiteEffectTermDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalPolSourceSiteEffectTerm_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalPolSourceSiteEffectTermList = await LocalPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermList.Result).Value);
            List<LocalPolSourceSiteEffectTerm> localPolSourceSiteEffectTermList = (List<LocalPolSourceSiteEffectTerm>)((OkObjectResult)actionLocalPolSourceSiteEffectTermList.Result).Value;

            count = localPolSourceSiteEffectTermList.Count();

            LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localPolSourceSiteEffectTerm.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localPolSourceSiteEffectTerm.PolSourceSiteEffectTermID   (Int32)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.PolSourceSiteEffectTermID = 0;

            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Put(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.PolSourceSiteEffectTermID = 10000000;
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Put(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localPolSourceSiteEffectTerm.IsGroup   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "PolSourceSiteEffectTerm", ExistPlurial = "s", ExistFieldID = "PolSourceSiteEffectTermID", AllowableTVtypeList = )]
            // localPolSourceSiteEffectTerm.UnderGroupID   (Int32)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.UnderGroupID = 0;
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localPolSourceSiteEffectTerm.EffectTermEN   (String)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("EffectTermEN");
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 101);
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);
            //Assert.AreEqual(count, localPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localPolSourceSiteEffectTerm.EffectTermFR   (String)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("EffectTermFR");
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 101);
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);
            //Assert.AreEqual(count, localPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localPolSourceSiteEffectTerm.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime();
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);
            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localPolSourceSiteEffectTerm.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.LastUpdateContactTVItemID = 0;
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

            localPolSourceSiteEffectTerm = null;
            localPolSourceSiteEffectTerm = GetFilledRandomLocalPolSourceSiteEffectTerm("");
            localPolSourceSiteEffectTerm.LastUpdateContactTVItemID = 1;
            actionLocalPolSourceSiteEffectTerm = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.IsType<BadRequestObjectResult>(actionLocalPolSourceSiteEffectTerm.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalPolSourceSiteEffectTerm
            var actionLocalPolSourceSiteEffectTermAdded = await LocalPolSourceSiteEffectTermDBService.Post(localPolSourceSiteEffectTerm);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermAdded.Result).Value);
            LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTermAdded = (LocalPolSourceSiteEffectTerm)((OkObjectResult)actionLocalPolSourceSiteEffectTermAdded.Result).Value;
            Assert.NotNull(localPolSourceSiteEffectTermAdded);

            // List<LocalPolSourceSiteEffectTerm>
            var actionLocalPolSourceSiteEffectTermList = await LocalPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermList();
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermList.Result).Value);
            List<LocalPolSourceSiteEffectTerm> localPolSourceSiteEffectTermList = (List<LocalPolSourceSiteEffectTerm>)((OkObjectResult)actionLocalPolSourceSiteEffectTermList.Result).Value;

            int count = ((List<LocalPolSourceSiteEffectTerm>)((OkObjectResult)actionLocalPolSourceSiteEffectTermList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalPolSourceSiteEffectTerm> with skip and take
            var actionLocalPolSourceSiteEffectTermListSkipAndTake = await LocalPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermListSkipAndTake.Result).Value);
            List<LocalPolSourceSiteEffectTerm> localPolSourceSiteEffectTermListSkipAndTake = (List<LocalPolSourceSiteEffectTerm>)((OkObjectResult)actionLocalPolSourceSiteEffectTermListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalPolSourceSiteEffectTerm>)((OkObjectResult)actionLocalPolSourceSiteEffectTermListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localPolSourceSiteEffectTermList[0].PolSourceSiteEffectTermID == localPolSourceSiteEffectTermListSkipAndTake[0].PolSourceSiteEffectTermID);

            // Get LocalPolSourceSiteEffectTerm With PolSourceSiteEffectTermID
            var actionLocalPolSourceSiteEffectTermGet = await LocalPolSourceSiteEffectTermDBService.GetLocalPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(localPolSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermGet.Result).Value);
            LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTermGet = (LocalPolSourceSiteEffectTerm)((OkObjectResult)actionLocalPolSourceSiteEffectTermGet.Result).Value;
            Assert.NotNull(localPolSourceSiteEffectTermGet);
            Assert.Equal(localPolSourceSiteEffectTermGet.PolSourceSiteEffectTermID, localPolSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);

            // Put LocalPolSourceSiteEffectTerm
            var actionLocalPolSourceSiteEffectTermUpdated = await LocalPolSourceSiteEffectTermDBService.Put(localPolSourceSiteEffectTerm);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermUpdated.Result).Value);
            LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTermUpdated = (LocalPolSourceSiteEffectTerm)((OkObjectResult)actionLocalPolSourceSiteEffectTermUpdated.Result).Value;
            Assert.NotNull(localPolSourceSiteEffectTermUpdated);

            // Delete LocalPolSourceSiteEffectTerm
            var actionLocalPolSourceSiteEffectTermDeleted = await LocalPolSourceSiteEffectTermDBService.Delete(localPolSourceSiteEffectTerm.PolSourceSiteEffectTermID);
            Assert.Equal(200, ((ObjectResult)actionLocalPolSourceSiteEffectTermDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalPolSourceSiteEffectTermDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalPolSourceSiteEffectTermDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalPolSourceSiteEffectTermDBService, LocalPolSourceSiteEffectTermDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalPolSourceSiteEffectTermDBService = Provider.GetService<ILocalPolSourceSiteEffectTermDBService>();
            Assert.NotNull(LocalPolSourceSiteEffectTermDBService);

            return await Task.FromResult(true);
        }
        private LocalPolSourceSiteEffectTerm GetFilledRandomLocalPolSourceSiteEffectTerm(string OmitPropName)
        {
            LocalPolSourceSiteEffectTerm localPolSourceSiteEffectTerm = new LocalPolSourceSiteEffectTerm();

            if (OmitPropName != "LocalDBCommand") localPolSourceSiteEffectTerm.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "IsGroup") localPolSourceSiteEffectTerm.IsGroup = true;
            // Need to implement [LocalPolSourceSiteEffectTerm UnderGroupID PolSourceSiteEffectTerm PolSourceSiteEffectTermID]
            if (OmitPropName != "EffectTermEN") localPolSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 5);
            if (OmitPropName != "EffectTermFR") localPolSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localPolSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localPolSourceSiteEffectTerm.LastUpdateContactTVItemID = 2;



            return localPolSourceSiteEffectTerm;
        }
        private void CheckLocalPolSourceSiteEffectTermFields(List<LocalPolSourceSiteEffectTerm> localPolSourceSiteEffectTermList)
        {
            if (localPolSourceSiteEffectTermList[0].UnderGroupID != null)
            {
                Assert.NotNull(localPolSourceSiteEffectTermList[0].UnderGroupID);
            }
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceSiteEffectTermList[0].EffectTermEN));
            Assert.False(string.IsNullOrWhiteSpace(localPolSourceSiteEffectTermList[0].EffectTermFR));
        }

        #endregion Functions private
    }
}
