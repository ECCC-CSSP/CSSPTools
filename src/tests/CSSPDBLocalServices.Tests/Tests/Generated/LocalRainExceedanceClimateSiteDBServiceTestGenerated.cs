/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalRainExceedanceClimateSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalRainExceedanceClimateSiteDBService LocalRainExceedanceClimateSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalRainExceedanceClimateSite localRainExceedanceClimateSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRainExceedanceClimateSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedanceClimateSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedanceClimateSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedanceClimateSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalRainExceedanceClimateSiteList = await LocalRainExceedanceClimateSiteDBService.GetLocalRainExceedanceClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteList.Result).Value);
            List<LocalRainExceedanceClimateSite> localRainExceedanceClimateSiteList = (List<LocalRainExceedanceClimateSite>)((OkObjectResult)actionLocalRainExceedanceClimateSiteList.Result).Value;

            count = localRainExceedanceClimateSiteList.Count();

            LocalRainExceedanceClimateSite localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localRainExceedanceClimateSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localRainExceedanceClimateSite.RainExceedanceClimateSiteID   (Int32)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.RainExceedanceClimateSiteID = 0;

            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Put(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.RainExceedanceClimateSiteID = 10000000;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Put(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
            // localRainExceedanceClimateSite.RainExceedanceTVItemID   (Int32)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.RainExceedanceTVItemID = 0;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.RainExceedanceTVItemID = 1;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite)]
            // localRainExceedanceClimateSite.ClimateSiteTVItemID   (Int32)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.ClimateSiteTVItemID = 0;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.ClimateSiteTVItemID = 1;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localRainExceedanceClimateSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime();
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);
            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localRainExceedanceClimateSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.LastUpdateContactTVItemID = 0;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

            localRainExceedanceClimateSite = null;
            localRainExceedanceClimateSite = GetFilledRandomLocalRainExceedanceClimateSite("");
            localRainExceedanceClimateSite.LastUpdateContactTVItemID = 1;
            actionLocalRainExceedanceClimateSite = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedanceClimateSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalRainExceedanceClimateSite
            var actionLocalRainExceedanceClimateSiteAdded = await LocalRainExceedanceClimateSiteDBService.Post(localRainExceedanceClimateSite);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteAdded.Result).Value);
            LocalRainExceedanceClimateSite localRainExceedanceClimateSiteAdded = (LocalRainExceedanceClimateSite)((OkObjectResult)actionLocalRainExceedanceClimateSiteAdded.Result).Value;
            Assert.NotNull(localRainExceedanceClimateSiteAdded);

            // List<LocalRainExceedanceClimateSite>
            var actionLocalRainExceedanceClimateSiteList = await LocalRainExceedanceClimateSiteDBService.GetLocalRainExceedanceClimateSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteList.Result).Value);
            List<LocalRainExceedanceClimateSite> localRainExceedanceClimateSiteList = (List<LocalRainExceedanceClimateSite>)((OkObjectResult)actionLocalRainExceedanceClimateSiteList.Result).Value;

            int count = ((List<LocalRainExceedanceClimateSite>)((OkObjectResult)actionLocalRainExceedanceClimateSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalRainExceedanceClimateSite> with skip and take
            var actionLocalRainExceedanceClimateSiteListSkipAndTake = await LocalRainExceedanceClimateSiteDBService.GetLocalRainExceedanceClimateSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteListSkipAndTake.Result).Value);
            List<LocalRainExceedanceClimateSite> localRainExceedanceClimateSiteListSkipAndTake = (List<LocalRainExceedanceClimateSite>)((OkObjectResult)actionLocalRainExceedanceClimateSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalRainExceedanceClimateSite>)((OkObjectResult)actionLocalRainExceedanceClimateSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localRainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID == localRainExceedanceClimateSiteListSkipAndTake[0].RainExceedanceClimateSiteID);

            // Get LocalRainExceedanceClimateSite With RainExceedanceClimateSiteID
            var actionLocalRainExceedanceClimateSiteGet = await LocalRainExceedanceClimateSiteDBService.GetLocalRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(localRainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteGet.Result).Value);
            LocalRainExceedanceClimateSite localRainExceedanceClimateSiteGet = (LocalRainExceedanceClimateSite)((OkObjectResult)actionLocalRainExceedanceClimateSiteGet.Result).Value;
            Assert.NotNull(localRainExceedanceClimateSiteGet);
            Assert.Equal(localRainExceedanceClimateSiteGet.RainExceedanceClimateSiteID, localRainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);

            // Put LocalRainExceedanceClimateSite
            var actionLocalRainExceedanceClimateSiteUpdated = await LocalRainExceedanceClimateSiteDBService.Put(localRainExceedanceClimateSite);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteUpdated.Result).Value);
            LocalRainExceedanceClimateSite localRainExceedanceClimateSiteUpdated = (LocalRainExceedanceClimateSite)((OkObjectResult)actionLocalRainExceedanceClimateSiteUpdated.Result).Value;
            Assert.NotNull(localRainExceedanceClimateSiteUpdated);

            // Delete LocalRainExceedanceClimateSite
            var actionLocalRainExceedanceClimateSiteDeleted = await LocalRainExceedanceClimateSiteDBService.Delete(localRainExceedanceClimateSite.RainExceedanceClimateSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceClimateSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceClimateSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalRainExceedanceClimateSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalRainExceedanceClimateSiteDBService, LocalRainExceedanceClimateSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalRainExceedanceClimateSiteDBService = Provider.GetService<ILocalRainExceedanceClimateSiteDBService>();
            Assert.NotNull(LocalRainExceedanceClimateSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalRainExceedanceClimateSite GetFilledRandomLocalRainExceedanceClimateSite(string OmitPropName)
        {
            LocalRainExceedanceClimateSite localRainExceedanceClimateSite = new LocalRainExceedanceClimateSite();

            if (OmitPropName != "LocalDBCommand") localRainExceedanceClimateSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "RainExceedanceTVItemID") localRainExceedanceClimateSite.RainExceedanceTVItemID = 56;
            if (OmitPropName != "ClimateSiteTVItemID") localRainExceedanceClimateSite.ClimateSiteTVItemID = 7;
            if (OmitPropName != "LastUpdateDate_UTC") localRainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localRainExceedanceClimateSite.LastUpdateContactTVItemID = 2;



            return localRainExceedanceClimateSite;
        }
        private void CheckLocalRainExceedanceClimateSiteFields(List<LocalRainExceedanceClimateSite> localRainExceedanceClimateSiteList)
        {
        }

        #endregion Functions private
    }
}
