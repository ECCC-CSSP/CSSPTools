/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalRainExceedanceDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalRainExceedanceDBService LocalRainExceedanceDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalRainExceedance localRainExceedance { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRainExceedanceDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedanceDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedanceDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localRainExceedance = GetFilledRandomLocalRainExceedance("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRainExceedance_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalRainExceedanceList = await LocalRainExceedanceDBService.GetLocalRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceList.Result).Value);
            List<LocalRainExceedance> localRainExceedanceList = (List<LocalRainExceedance>)((OkObjectResult)actionLocalRainExceedanceList.Result).Value;

            count = localRainExceedanceList.Count();

            LocalRainExceedance localRainExceedance = GetFilledRandomLocalRainExceedance("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localRainExceedance.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localRainExceedance.RainExceedanceID   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainExceedanceID = 0;

            actionLocalRainExceedance = await LocalRainExceedanceDBService.Put(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainExceedanceID = 10000000;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Put(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
            // localRainExceedance.RainExceedanceTVItemID   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainExceedanceTVItemID = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainExceedanceTVItemID = 1;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // localRainExceedance.StartMonth   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.StartMonth = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceService.GetLocalRainExceedanceList().Count());
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.StartMonth = 13;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceDBService.GetLocalRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // localRainExceedance.StartDay   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.StartDay = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceService.GetLocalRainExceedanceList().Count());
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.StartDay = 32;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceDBService.GetLocalRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // localRainExceedance.EndMonth   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.EndMonth = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceService.GetLocalRainExceedanceList().Count());
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.EndMonth = 13;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceDBService.GetLocalRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // localRainExceedance.EndDay   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.EndDay = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceService.GetLocalRainExceedanceList().Count());
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.EndDay = 32;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceDBService.GetLocalRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 300)]
            // localRainExceedance.RainMaximum_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainMaximum_mm]

            //CSSPError: Type not implemented [RainMaximum_mm]

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainMaximum_mm = -1.0D;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceService.GetLocalRainExceedanceList().Count());
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.RainMaximum_mm = 301.0D;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            //Assert.AreEqual(count, localRainExceedanceDBService.GetLocalRainExceedanceList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // localRainExceedance.StakeholdersEmailDistributionListID   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.StakeholdersEmailDistributionListID = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // localRainExceedance.OnlyStaffEmailDistributionListID   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.OnlyStaffEmailDistributionListID = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localRainExceedance.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localRainExceedance.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.LastUpdateDate_UTC = new DateTime();
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);
            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localRainExceedance.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.LastUpdateContactTVItemID = 0;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);

            localRainExceedance = null;
            localRainExceedance = GetFilledRandomLocalRainExceedance("");
            localRainExceedance.LastUpdateContactTVItemID = 1;
            actionLocalRainExceedance = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionLocalRainExceedance.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalRainExceedance
            var actionLocalRainExceedanceAdded = await LocalRainExceedanceDBService.Post(localRainExceedance);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceAdded.Result).Value);
            LocalRainExceedance localRainExceedanceAdded = (LocalRainExceedance)((OkObjectResult)actionLocalRainExceedanceAdded.Result).Value;
            Assert.NotNull(localRainExceedanceAdded);

            // List<LocalRainExceedance>
            var actionLocalRainExceedanceList = await LocalRainExceedanceDBService.GetLocalRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceList.Result).Value);
            List<LocalRainExceedance> localRainExceedanceList = (List<LocalRainExceedance>)((OkObjectResult)actionLocalRainExceedanceList.Result).Value;

            int count = ((List<LocalRainExceedance>)((OkObjectResult)actionLocalRainExceedanceList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalRainExceedance> with skip and take
            var actionLocalRainExceedanceListSkipAndTake = await LocalRainExceedanceDBService.GetLocalRainExceedanceList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceListSkipAndTake.Result).Value);
            List<LocalRainExceedance> localRainExceedanceListSkipAndTake = (List<LocalRainExceedance>)((OkObjectResult)actionLocalRainExceedanceListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalRainExceedance>)((OkObjectResult)actionLocalRainExceedanceListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localRainExceedanceList[0].RainExceedanceID == localRainExceedanceListSkipAndTake[0].RainExceedanceID);

            // Get LocalRainExceedance With RainExceedanceID
            var actionLocalRainExceedanceGet = await LocalRainExceedanceDBService.GetLocalRainExceedanceWithRainExceedanceID(localRainExceedanceList[0].RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceGet.Result).Value);
            LocalRainExceedance localRainExceedanceGet = (LocalRainExceedance)((OkObjectResult)actionLocalRainExceedanceGet.Result).Value;
            Assert.NotNull(localRainExceedanceGet);
            Assert.Equal(localRainExceedanceGet.RainExceedanceID, localRainExceedanceList[0].RainExceedanceID);

            // Put LocalRainExceedance
            var actionLocalRainExceedanceUpdated = await LocalRainExceedanceDBService.Put(localRainExceedance);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceUpdated.Result).Value);
            LocalRainExceedance localRainExceedanceUpdated = (LocalRainExceedance)((OkObjectResult)actionLocalRainExceedanceUpdated.Result).Value;
            Assert.NotNull(localRainExceedanceUpdated);

            // Delete LocalRainExceedance
            var actionLocalRainExceedanceDeleted = await LocalRainExceedanceDBService.Delete(localRainExceedance.RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionLocalRainExceedanceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRainExceedanceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalRainExceedanceDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalRainExceedanceDBService, LocalRainExceedanceDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalRainExceedanceDBService = Provider.GetService<ILocalRainExceedanceDBService>();
            Assert.NotNull(LocalRainExceedanceDBService);

            return await Task.FromResult(true);
        }
        private LocalRainExceedance GetFilledRandomLocalRainExceedance(string OmitPropName)
        {
            LocalRainExceedance localRainExceedance = new LocalRainExceedance();

            if (OmitPropName != "LocalDBCommand") localRainExceedance.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "RainExceedanceTVItemID") localRainExceedance.RainExceedanceTVItemID = 56;
            if (OmitPropName != "StartMonth") localRainExceedance.StartMonth = GetRandomInt(1, 12);
            if (OmitPropName != "StartDay") localRainExceedance.StartDay = GetRandomInt(1, 31);
            if (OmitPropName != "EndMonth") localRainExceedance.EndMonth = GetRandomInt(1, 12);
            if (OmitPropName != "EndDay") localRainExceedance.EndDay = GetRandomInt(1, 31);
            if (OmitPropName != "RainMaximum_mm") localRainExceedance.RainMaximum_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "StakeholdersEmailDistributionListID") localRainExceedance.StakeholdersEmailDistributionListID = 0;
            if (OmitPropName != "OnlyStaffEmailDistributionListID") localRainExceedance.OnlyStaffEmailDistributionListID = 0;
            if (OmitPropName != "IsActive") localRainExceedance.IsActive = true;
            if (OmitPropName != "LastUpdateDate_UTC") localRainExceedance.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localRainExceedance.LastUpdateContactTVItemID = 2;



            return localRainExceedance;
        }
        private void CheckLocalRainExceedanceFields(List<LocalRainExceedance> localRainExceedanceList)
        {
            if (localRainExceedanceList[0].StakeholdersEmailDistributionListID != null)
            {
                Assert.NotNull(localRainExceedanceList[0].StakeholdersEmailDistributionListID);
            }
            if (localRainExceedanceList[0].OnlyStaffEmailDistributionListID != null)
            {
                Assert.NotNull(localRainExceedanceList[0].OnlyStaffEmailDistributionListID);
            }
        }

        #endregion Functions private
    }
}
