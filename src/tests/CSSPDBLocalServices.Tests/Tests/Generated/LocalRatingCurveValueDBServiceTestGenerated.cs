/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalRatingCurveValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalRatingCurveValueDBService LocalRatingCurveValueDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalRatingCurveValue localRatingCurveValue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalRatingCurveValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRatingCurveValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRatingCurveValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalRatingCurveValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalRatingCurveValueList = await LocalRatingCurveValueDBService.GetLocalRatingCurveValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueList.Result).Value);
            List<LocalRatingCurveValue> localRatingCurveValueList = (List<LocalRatingCurveValue>)((OkObjectResult)actionLocalRatingCurveValueList.Result).Value;

            count = localRatingCurveValueList.Count();

            LocalRatingCurveValue localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localRatingCurveValue.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localRatingCurveValue.RatingCurveValueID   (Int32)
            // -----------------------------------

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.RatingCurveValueID = 0;

            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Put(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.RatingCurveValueID = 10000000;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Put(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "RatingCurve", ExistPlurial = "s", ExistFieldID = "RatingCurveID", AllowableTVtypeList = )]
            // localRatingCurveValue.RatingCurveID   (Int32)
            // -----------------------------------

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.RatingCurveID = 0;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localRatingCurveValue.StageValue_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [StageValue_m]

            //CSSPError: Type not implemented [StageValue_m]

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.StageValue_m = -1.0D;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);
            //Assert.AreEqual(count, localRatingCurveValueService.GetLocalRatingCurveValueList().Count());
            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.StageValue_m = 1001.0D;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);
            //Assert.AreEqual(count, localRatingCurveValueDBService.GetLocalRatingCurveValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000000)]
            // localRatingCurveValue.DischargeValue_m3_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DischargeValue_m3_s]

            //CSSPError: Type not implemented [DischargeValue_m3_s]

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.DischargeValue_m3_s = -1.0D;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);
            //Assert.AreEqual(count, localRatingCurveValueService.GetLocalRatingCurveValueList().Count());
            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.DischargeValue_m3_s = 1000001.0D;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);
            //Assert.AreEqual(count, localRatingCurveValueDBService.GetLocalRatingCurveValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localRatingCurveValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.LastUpdateDate_UTC = new DateTime();
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);
            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localRatingCurveValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.LastUpdateContactTVItemID = 0;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);

            localRatingCurveValue = null;
            localRatingCurveValue = GetFilledRandomLocalRatingCurveValue("");
            localRatingCurveValue.LastUpdateContactTVItemID = 1;
            actionLocalRatingCurveValue = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalRatingCurveValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalRatingCurveValue
            var actionLocalRatingCurveValueAdded = await LocalRatingCurveValueDBService.Post(localRatingCurveValue);
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueAdded.Result).Value);
            LocalRatingCurveValue localRatingCurveValueAdded = (LocalRatingCurveValue)((OkObjectResult)actionLocalRatingCurveValueAdded.Result).Value;
            Assert.NotNull(localRatingCurveValueAdded);

            // List<LocalRatingCurveValue>
            var actionLocalRatingCurveValueList = await LocalRatingCurveValueDBService.GetLocalRatingCurveValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueList.Result).Value);
            List<LocalRatingCurveValue> localRatingCurveValueList = (List<LocalRatingCurveValue>)((OkObjectResult)actionLocalRatingCurveValueList.Result).Value;

            int count = ((List<LocalRatingCurveValue>)((OkObjectResult)actionLocalRatingCurveValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalRatingCurveValue> with skip and take
            var actionLocalRatingCurveValueListSkipAndTake = await LocalRatingCurveValueDBService.GetLocalRatingCurveValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueListSkipAndTake.Result).Value);
            List<LocalRatingCurveValue> localRatingCurveValueListSkipAndTake = (List<LocalRatingCurveValue>)((OkObjectResult)actionLocalRatingCurveValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalRatingCurveValue>)((OkObjectResult)actionLocalRatingCurveValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localRatingCurveValueList[0].RatingCurveValueID == localRatingCurveValueListSkipAndTake[0].RatingCurveValueID);

            // Get LocalRatingCurveValue With RatingCurveValueID
            var actionLocalRatingCurveValueGet = await LocalRatingCurveValueDBService.GetLocalRatingCurveValueWithRatingCurveValueID(localRatingCurveValueList[0].RatingCurveValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueGet.Result).Value);
            LocalRatingCurveValue localRatingCurveValueGet = (LocalRatingCurveValue)((OkObjectResult)actionLocalRatingCurveValueGet.Result).Value;
            Assert.NotNull(localRatingCurveValueGet);
            Assert.Equal(localRatingCurveValueGet.RatingCurveValueID, localRatingCurveValueList[0].RatingCurveValueID);

            // Put LocalRatingCurveValue
            var actionLocalRatingCurveValueUpdated = await LocalRatingCurveValueDBService.Put(localRatingCurveValue);
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueUpdated.Result).Value);
            LocalRatingCurveValue localRatingCurveValueUpdated = (LocalRatingCurveValue)((OkObjectResult)actionLocalRatingCurveValueUpdated.Result).Value;
            Assert.NotNull(localRatingCurveValueUpdated);

            // Delete LocalRatingCurveValue
            var actionLocalRatingCurveValueDeleted = await LocalRatingCurveValueDBService.Delete(localRatingCurveValue.RatingCurveValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalRatingCurveValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalRatingCurveValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalRatingCurveValueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalRatingCurveValueDBService, LocalRatingCurveValueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalRatingCurveValueDBService = Provider.GetService<ILocalRatingCurveValueDBService>();
            Assert.NotNull(LocalRatingCurveValueDBService);

            return await Task.FromResult(true);
        }
        private LocalRatingCurveValue GetFilledRandomLocalRatingCurveValue(string OmitPropName)
        {
            LocalRatingCurveValue localRatingCurveValue = new LocalRatingCurveValue();

            if (OmitPropName != "LocalDBCommand") localRatingCurveValue.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "RatingCurveID") localRatingCurveValue.RatingCurveID = 0;
            if (OmitPropName != "StageValue_m") localRatingCurveValue.StageValue_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "DischargeValue_m3_s") localRatingCurveValue.DischargeValue_m3_s = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localRatingCurveValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localRatingCurveValue.LastUpdateContactTVItemID = 2;



            return localRatingCurveValue;
        }
        private void CheckLocalRatingCurveValueFields(List<LocalRatingCurveValue> localRatingCurveValueList)
        {
        }

        #endregion Functions private
    }
}
