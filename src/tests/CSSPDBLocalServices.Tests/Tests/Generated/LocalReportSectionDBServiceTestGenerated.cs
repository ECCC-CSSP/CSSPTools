/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalReportSectionDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalReportSectionDBService LocalReportSectionDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalReportSection localReportSection { get; set; }
        #endregion Properties

        #region Constructors
        public LocalReportSectionDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportSectionDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportSectionDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localReportSection = GetFilledRandomLocalReportSection("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportSection_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalReportSectionList = await LocalReportSectionDBService.GetLocalReportSectionList();
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionList.Result).Value);
            List<LocalReportSection> localReportSectionList = (List<LocalReportSection>)((OkObjectResult)actionLocalReportSectionList.Result).Value;

            count = localReportSectionList.Count();

            LocalReportSection localReportSection = GetFilledRandomLocalReportSection("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localReportSection.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localReportSection.ReportSectionID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ReportSectionID = 0;

            actionLocalReportSection = await LocalReportSectionDBService.Put(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ReportSectionID = 10000000;
            actionLocalReportSection = await LocalReportSectionDBService.Put(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "ReportType", ExistPlurial = "s", ExistFieldID = "ReportTypeID", AllowableTVtypeList = )]
            // localReportSection.ReportTypeID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ReportTypeID = 0;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = )]
            // localReportSection.TVItemID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.TVItemID = 0;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.TVItemID = 1;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localReportSection.Language   (LanguageEnum)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.Language = (LanguageEnum)1000000;
             actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localReportSection.Ordinal   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.Ordinal = -1;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionService.GetLocalReportSectionList().Count());
            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.Ordinal = 1001;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionDBService.GetLocalReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localReportSection.IsStatic   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "ReportSection", ExistPlurial = "s", ExistFieldID = "ReportSectionID", AllowableTVtypeList = )]
            // localReportSection.ParentReportSectionID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ParentReportSectionID = 0;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1979, 2050)]
            // localReportSection.Year   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.Year = 1978;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionService.GetLocalReportSectionList().Count());
            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.Year = 2051;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionDBService.GetLocalReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localReportSection.Locked   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "ReportSection", ExistPlurial = "s", ExistFieldID = "ReportSectionID", AllowableTVtypeList = )]
            // localReportSection.TemplateReportSectionID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.TemplateReportSectionID = 0;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // localReportSection.ReportSectionName   (String)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ReportSectionName = GetRandomString("", 101);
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionDBService.GetLocalReportSectionList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10000)]
            // localReportSection.ReportSectionText   (String)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.ReportSectionText = GetRandomString("", 10001);
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            //Assert.AreEqual(count, localReportSectionDBService.GetLocalReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localReportSection.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.LastUpdateDate_UTC = new DateTime();
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);
            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localReportSection.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.LastUpdateContactTVItemID = 0;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);

            localReportSection = null;
            localReportSection = GetFilledRandomLocalReportSection("");
            localReportSection.LastUpdateContactTVItemID = 1;
            actionLocalReportSection = await LocalReportSectionDBService.Post(localReportSection);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportSection.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalReportSection
            var actionLocalReportSectionAdded = await LocalReportSectionDBService.Post(localReportSection);
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionAdded.Result).Value);
            LocalReportSection localReportSectionAdded = (LocalReportSection)((OkObjectResult)actionLocalReportSectionAdded.Result).Value;
            Assert.NotNull(localReportSectionAdded);

            // List<LocalReportSection>
            var actionLocalReportSectionList = await LocalReportSectionDBService.GetLocalReportSectionList();
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionList.Result).Value);
            List<LocalReportSection> localReportSectionList = (List<LocalReportSection>)((OkObjectResult)actionLocalReportSectionList.Result).Value;

            int count = ((List<LocalReportSection>)((OkObjectResult)actionLocalReportSectionList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalReportSection> with skip and take
            var actionLocalReportSectionListSkipAndTake = await LocalReportSectionDBService.GetLocalReportSectionList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionListSkipAndTake.Result).Value);
            List<LocalReportSection> localReportSectionListSkipAndTake = (List<LocalReportSection>)((OkObjectResult)actionLocalReportSectionListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalReportSection>)((OkObjectResult)actionLocalReportSectionListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localReportSectionList[0].ReportSectionID == localReportSectionListSkipAndTake[0].ReportSectionID);

            // Get LocalReportSection With ReportSectionID
            var actionLocalReportSectionGet = await LocalReportSectionDBService.GetLocalReportSectionWithReportSectionID(localReportSectionList[0].ReportSectionID);
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionGet.Result).Value);
            LocalReportSection localReportSectionGet = (LocalReportSection)((OkObjectResult)actionLocalReportSectionGet.Result).Value;
            Assert.NotNull(localReportSectionGet);
            Assert.Equal(localReportSectionGet.ReportSectionID, localReportSectionList[0].ReportSectionID);

            // Put LocalReportSection
            var actionLocalReportSectionUpdated = await LocalReportSectionDBService.Put(localReportSection);
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionUpdated.Result).Value);
            LocalReportSection localReportSectionUpdated = (LocalReportSection)((OkObjectResult)actionLocalReportSectionUpdated.Result).Value;
            Assert.NotNull(localReportSectionUpdated);

            // Delete LocalReportSection
            var actionLocalReportSectionDeleted = await LocalReportSectionDBService.Delete(localReportSection.ReportSectionID);
            Assert.Equal(200, ((ObjectResult)actionLocalReportSectionDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportSectionDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalReportSectionDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalReportSectionDBService, LocalReportSectionDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalReportSectionDBService = Provider.GetService<ILocalReportSectionDBService>();
            Assert.NotNull(LocalReportSectionDBService);

            return await Task.FromResult(true);
        }
        private LocalReportSection GetFilledRandomLocalReportSection(string OmitPropName)
        {
            LocalReportSection localReportSection = new LocalReportSection();

            if (OmitPropName != "LocalDBCommand") localReportSection.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ReportTypeID") localReportSection.ReportTypeID = 0;
            // Need to implement (no items found, would need to add at least one in the TestDB) [LocalReportSection TVItemID TVItem TVItemID]
            if (OmitPropName != "Language") localReportSection.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "Ordinal") localReportSection.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "IsStatic") localReportSection.IsStatic = true;
            // Need to implement [LocalReportSection ParentReportSectionID ReportSection ReportSectionID]
            if (OmitPropName != "Year") localReportSection.Year = GetRandomInt(1979, 2050);
            if (OmitPropName != "Locked") localReportSection.Locked = true;
            // Need to implement [LocalReportSection TemplateReportSectionID ReportSection ReportSectionID]
            if (OmitPropName != "ReportSectionName") localReportSection.ReportSectionName = GetRandomString("", 5);
            if (OmitPropName != "ReportSectionText") localReportSection.ReportSectionText = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localReportSection.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localReportSection.LastUpdateContactTVItemID = 2;



            return localReportSection;
        }
        private void CheckLocalReportSectionFields(List<LocalReportSection> localReportSectionList)
        {
            if (localReportSectionList[0].TVItemID != null)
            {
                Assert.NotNull(localReportSectionList[0].TVItemID);
            }
            if (localReportSectionList[0].Language != null)
            {
                Assert.NotNull(localReportSectionList[0].Language);
            }
            if (localReportSectionList[0].ParentReportSectionID != null)
            {
                Assert.NotNull(localReportSectionList[0].ParentReportSectionID);
            }
            if (localReportSectionList[0].Year != null)
            {
                Assert.NotNull(localReportSectionList[0].Year);
            }
            if (localReportSectionList[0].TemplateReportSectionID != null)
            {
                Assert.NotNull(localReportSectionList[0].TemplateReportSectionID);
            }
            if (!string.IsNullOrWhiteSpace(localReportSectionList[0].ReportSectionName))
            {
                Assert.False(string.IsNullOrWhiteSpace(localReportSectionList[0].ReportSectionName));
            }
            if (!string.IsNullOrWhiteSpace(localReportSectionList[0].ReportSectionText))
            {
                Assert.False(string.IsNullOrWhiteSpace(localReportSectionList[0].ReportSectionText));
            }
        }

        #endregion Functions private
    }
}
