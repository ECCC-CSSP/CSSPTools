/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalReportTypeDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalReportTypeDBService LocalReportTypeDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalReportType localReportType { get; set; }
        #endregion Properties

        #region Constructors
        public LocalReportTypeDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportTypeDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportTypeDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localReportType = GetFilledRandomLocalReportType("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalReportType_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalReportTypeList = await LocalReportTypeDBService.GetLocalReportTypeList();
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeList.Result).Value);
            List<LocalReportType> localReportTypeList = (List<LocalReportType>)((OkObjectResult)actionLocalReportTypeList.Result).Value;

            count = localReportTypeList.Count();

            LocalReportType localReportType = GetFilledRandomLocalReportType("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localReportType.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localReportType.ReportTypeID   (Int32)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.ReportTypeID = 0;

            actionLocalReportType = await LocalReportTypeDBService.Put(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.ReportTypeID = 10000000;
            actionLocalReportType = await LocalReportTypeDBService.Put(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localReportType.TVType   (TVTypeEnum)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.TVType = (TVTypeEnum)1000000;
             actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localReportType.FileType   (FileTypeEnum)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.FileType = (FileTypeEnum)1000000;
             actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localReportType.UniqueCode   (String)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("UniqueCode");
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.UniqueCode = GetRandomString("", 101);
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);
            //Assert.AreEqual(count, localReportTypeDBService.GetLocalReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localReportType.Language   (LanguageEnum)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.Language = (LanguageEnum)1000000;
             actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // localReportType.Name   (String)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.Name = GetRandomString("", 101);
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);
            //Assert.AreEqual(count, localReportTypeDBService.GetLocalReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1000)]
            // localReportType.Description   (String)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.Description = GetRandomString("", 1001);
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);
            //Assert.AreEqual(count, localReportTypeDBService.GetLocalReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // localReportType.StartOfFileName   (String)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.StartOfFileName = GetRandomString("", 101);
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);
            //Assert.AreEqual(count, localReportTypeDBService.GetLocalReportTypeList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localReportType.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.LastUpdateDate_UTC = new DateTime();
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);
            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localReportType.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.LastUpdateContactTVItemID = 0;
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);

            localReportType = null;
            localReportType = GetFilledRandomLocalReportType("");
            localReportType.LastUpdateContactTVItemID = 1;
            actionLocalReportType = await LocalReportTypeDBService.Post(localReportType);
            Assert.IsType<BadRequestObjectResult>(actionLocalReportType.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalReportType
            var actionLocalReportTypeAdded = await LocalReportTypeDBService.Post(localReportType);
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeAdded.Result).Value);
            LocalReportType localReportTypeAdded = (LocalReportType)((OkObjectResult)actionLocalReportTypeAdded.Result).Value;
            Assert.NotNull(localReportTypeAdded);

            // List<LocalReportType>
            var actionLocalReportTypeList = await LocalReportTypeDBService.GetLocalReportTypeList();
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeList.Result).Value);
            List<LocalReportType> localReportTypeList = (List<LocalReportType>)((OkObjectResult)actionLocalReportTypeList.Result).Value;

            int count = ((List<LocalReportType>)((OkObjectResult)actionLocalReportTypeList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalReportType> with skip and take
            var actionLocalReportTypeListSkipAndTake = await LocalReportTypeDBService.GetLocalReportTypeList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeListSkipAndTake.Result).Value);
            List<LocalReportType> localReportTypeListSkipAndTake = (List<LocalReportType>)((OkObjectResult)actionLocalReportTypeListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalReportType>)((OkObjectResult)actionLocalReportTypeListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localReportTypeList[0].ReportTypeID == localReportTypeListSkipAndTake[0].ReportTypeID);

            // Get LocalReportType With ReportTypeID
            var actionLocalReportTypeGet = await LocalReportTypeDBService.GetLocalReportTypeWithReportTypeID(localReportTypeList[0].ReportTypeID);
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeGet.Result).Value);
            LocalReportType localReportTypeGet = (LocalReportType)((OkObjectResult)actionLocalReportTypeGet.Result).Value;
            Assert.NotNull(localReportTypeGet);
            Assert.Equal(localReportTypeGet.ReportTypeID, localReportTypeList[0].ReportTypeID);

            // Put LocalReportType
            var actionLocalReportTypeUpdated = await LocalReportTypeDBService.Put(localReportType);
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeUpdated.Result).Value);
            LocalReportType localReportTypeUpdated = (LocalReportType)((OkObjectResult)actionLocalReportTypeUpdated.Result).Value;
            Assert.NotNull(localReportTypeUpdated);

            // Delete LocalReportType
            var actionLocalReportTypeDeleted = await LocalReportTypeDBService.Delete(localReportType.ReportTypeID);
            Assert.Equal(200, ((ObjectResult)actionLocalReportTypeDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalReportTypeDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalReportTypeDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalReportTypeDBService, LocalReportTypeDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalReportTypeDBService = Provider.GetService<ILocalReportTypeDBService>();
            Assert.NotNull(LocalReportTypeDBService);

            return await Task.FromResult(true);
        }
        private LocalReportType GetFilledRandomLocalReportType(string OmitPropName)
        {
            LocalReportType localReportType = new LocalReportType();

            if (OmitPropName != "LocalDBCommand") localReportType.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TVType") localReportType.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "FileType") localReportType.FileType = (FileTypeEnum)GetRandomEnumType(typeof(FileTypeEnum));
            if (OmitPropName != "UniqueCode") localReportType.UniqueCode = GetRandomString("", 5);
            if (OmitPropName != "Language") localReportType.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "Name") localReportType.Name = GetRandomString("", 5);
            if (OmitPropName != "Description") localReportType.Description = GetRandomString("", 5);
            if (OmitPropName != "StartOfFileName") localReportType.StartOfFileName = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localReportType.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localReportType.LastUpdateContactTVItemID = 2;



            return localReportType;
        }
        private void CheckLocalReportTypeFields(List<LocalReportType> localReportTypeList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localReportTypeList[0].UniqueCode));
            if (localReportTypeList[0].Language != null)
            {
                Assert.NotNull(localReportTypeList[0].Language);
            }
            if (!string.IsNullOrWhiteSpace(localReportTypeList[0].Name))
            {
                Assert.False(string.IsNullOrWhiteSpace(localReportTypeList[0].Name));
            }
            if (!string.IsNullOrWhiteSpace(localReportTypeList[0].Description))
            {
                Assert.False(string.IsNullOrWhiteSpace(localReportTypeList[0].Description));
            }
            if (!string.IsNullOrWhiteSpace(localReportTypeList[0].StartOfFileName))
            {
                Assert.False(string.IsNullOrWhiteSpace(localReportTypeList[0].StartOfFileName));
            }
        }

        #endregion Functions private
    }
}
