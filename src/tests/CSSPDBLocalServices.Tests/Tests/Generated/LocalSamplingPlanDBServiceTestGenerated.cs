/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalSamplingPlanDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalSamplingPlanDBService LocalSamplingPlanDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalSamplingPlan localSamplingPlan { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlan_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalSamplingPlanList = await LocalSamplingPlanDBService.GetLocalSamplingPlanList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanList.Result).Value);
            List<LocalSamplingPlan> localSamplingPlanList = (List<LocalSamplingPlan>)((OkObjectResult)actionLocalSamplingPlanList.Result).Value;

            count = localSamplingPlanList.Count();

            LocalSamplingPlan localSamplingPlan = GetFilledRandomLocalSamplingPlan("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlan.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localSamplingPlan.SamplingPlanID   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanID = 0;

            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Put(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanID = 10000000;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Put(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlan.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(200)]
            // localSamplingPlan.SamplingPlanName   (String)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("SamplingPlanName");
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanName = GetRandomString("", 201);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localSamplingPlan.ForGroupName   (String)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("ForGroupName");
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.ForGroupName = GetRandomString("", 101);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlan.SampleType   (SampleTypeEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SampleType = (SampleTypeEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlan.SamplingPlanType   (SamplingPlanTypeEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanType = (SamplingPlanTypeEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlan.LabSheetType   (LabSheetTypeEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LabSheetType = (LabSheetTypeEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Province)]
            // localSamplingPlan.ProvinceTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.ProvinceTVItemID = 0;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.ProvinceTVItemID = 1;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localSamplingPlan.CreatorTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.CreatorTVItemID = 0;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.CreatorTVItemID = 1;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(2000, 2050)]
            // localSamplingPlan.Year   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.Year = 1999;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanService.GetLocalSamplingPlanList().Count());
            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.Year = 2051;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(15)]
            // localSamplingPlan.AccessCode   (String)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("AccessCode");
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.AccessCode = GetRandomString("", 16);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localSamplingPlan.DailyDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.DailyDuplicatePrecisionCriteria = -1.0D;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanService.GetLocalSamplingPlanList().Count());
            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.DailyDuplicatePrecisionCriteria = 101.0D;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localSamplingPlan.IntertechDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.IntertechDuplicatePrecisionCriteria = -1.0D;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanService.GetLocalSamplingPlanList().Count());
            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.IntertechDuplicatePrecisionCriteria = 101.0D;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlan.IncludeLaboratoryQAQC   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(15)]
            // localSamplingPlan.ApprovalCode   (String)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("ApprovalCode");
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.ApprovalCode = GetRandomString("", 16);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // localSamplingPlan.SamplingPlanFileTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanFileTVItemID = 0;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SamplingPlanFileTVItemID = 1;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localSamplingPlan.AnalyzeMethodDefault   (AnalyzeMethodEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.AnalyzeMethodDefault = (AnalyzeMethodEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localSamplingPlan.SampleMatrixDefault   (SampleMatrixEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.SampleMatrixDefault = (SampleMatrixEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localSamplingPlan.LaboratoryDefault   (LaboratoryEnum)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LaboratoryDefault = (LaboratoryEnum)1000000;
             actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // localSamplingPlan.BackupDirectory   (String)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("BackupDirectory");
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.BackupDirectory = GetRandomString("", 251);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            //Assert.AreEqual(count, localSamplingPlanDBService.GetLocalSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localSamplingPlan.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LastUpdateDate_UTC = new DateTime();
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);
            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localSamplingPlan.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LastUpdateContactTVItemID = 0;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

            localSamplingPlan = null;
            localSamplingPlan = GetFilledRandomLocalSamplingPlan("");
            localSamplingPlan.LastUpdateContactTVItemID = 1;
            actionLocalSamplingPlan = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlan.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalSamplingPlan
            var actionLocalSamplingPlanAdded = await LocalSamplingPlanDBService.Post(localSamplingPlan);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanAdded.Result).Value);
            LocalSamplingPlan localSamplingPlanAdded = (LocalSamplingPlan)((OkObjectResult)actionLocalSamplingPlanAdded.Result).Value;
            Assert.NotNull(localSamplingPlanAdded);

            // List<LocalSamplingPlan>
            var actionLocalSamplingPlanList = await LocalSamplingPlanDBService.GetLocalSamplingPlanList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanList.Result).Value);
            List<LocalSamplingPlan> localSamplingPlanList = (List<LocalSamplingPlan>)((OkObjectResult)actionLocalSamplingPlanList.Result).Value;

            int count = ((List<LocalSamplingPlan>)((OkObjectResult)actionLocalSamplingPlanList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalSamplingPlan> with skip and take
            var actionLocalSamplingPlanListSkipAndTake = await LocalSamplingPlanDBService.GetLocalSamplingPlanList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanListSkipAndTake.Result).Value);
            List<LocalSamplingPlan> localSamplingPlanListSkipAndTake = (List<LocalSamplingPlan>)((OkObjectResult)actionLocalSamplingPlanListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalSamplingPlan>)((OkObjectResult)actionLocalSamplingPlanListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localSamplingPlanList[0].SamplingPlanID == localSamplingPlanListSkipAndTake[0].SamplingPlanID);

            // Get LocalSamplingPlan With SamplingPlanID
            var actionLocalSamplingPlanGet = await LocalSamplingPlanDBService.GetLocalSamplingPlanWithSamplingPlanID(localSamplingPlanList[0].SamplingPlanID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanGet.Result).Value);
            LocalSamplingPlan localSamplingPlanGet = (LocalSamplingPlan)((OkObjectResult)actionLocalSamplingPlanGet.Result).Value;
            Assert.NotNull(localSamplingPlanGet);
            Assert.Equal(localSamplingPlanGet.SamplingPlanID, localSamplingPlanList[0].SamplingPlanID);

            // Put LocalSamplingPlan
            var actionLocalSamplingPlanUpdated = await LocalSamplingPlanDBService.Put(localSamplingPlan);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanUpdated.Result).Value);
            LocalSamplingPlan localSamplingPlanUpdated = (LocalSamplingPlan)((OkObjectResult)actionLocalSamplingPlanUpdated.Result).Value;
            Assert.NotNull(localSamplingPlanUpdated);

            // Delete LocalSamplingPlan
            var actionLocalSamplingPlanDeleted = await LocalSamplingPlanDBService.Delete(localSamplingPlan.SamplingPlanID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalSamplingPlanDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalSamplingPlanDBService, LocalSamplingPlanDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalSamplingPlanDBService = Provider.GetService<ILocalSamplingPlanDBService>();
            Assert.NotNull(LocalSamplingPlanDBService);

            return await Task.FromResult(true);
        }
        private LocalSamplingPlan GetFilledRandomLocalSamplingPlan(string OmitPropName)
        {
            LocalSamplingPlan localSamplingPlan = new LocalSamplingPlan();

            if (OmitPropName != "LocalDBCommand") localSamplingPlan.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "IsActive") localSamplingPlan.IsActive = true;
            if (OmitPropName != "SamplingPlanName") localSamplingPlan.SamplingPlanName = GetRandomString("", 5);
            if (OmitPropName != "ForGroupName") localSamplingPlan.ForGroupName = GetRandomString("", 5);
            if (OmitPropName != "SampleType") localSamplingPlan.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "SamplingPlanType") localSamplingPlan.SamplingPlanType = (SamplingPlanTypeEnum)GetRandomEnumType(typeof(SamplingPlanTypeEnum));
            if (OmitPropName != "LabSheetType") localSamplingPlan.LabSheetType = (LabSheetTypeEnum)GetRandomEnumType(typeof(LabSheetTypeEnum));
            if (OmitPropName != "ProvinceTVItemID") localSamplingPlan.ProvinceTVItemID = 6;
            if (OmitPropName != "CreatorTVItemID") localSamplingPlan.CreatorTVItemID = 2;
            if (OmitPropName != "Year") localSamplingPlan.Year = GetRandomInt(2000, 2050);
            if (OmitPropName != "AccessCode") localSamplingPlan.AccessCode = GetRandomString("", 5);
            if (OmitPropName != "DailyDuplicatePrecisionCriteria") localSamplingPlan.DailyDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IntertechDuplicatePrecisionCriteria") localSamplingPlan.IntertechDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IncludeLaboratoryQAQC") localSamplingPlan.IncludeLaboratoryQAQC = true;
            if (OmitPropName != "ApprovalCode") localSamplingPlan.ApprovalCode = GetRandomString("", 5);
            if (OmitPropName != "SamplingPlanFileTVItemID") localSamplingPlan.SamplingPlanFileTVItemID = 42;
            if (OmitPropName != "AnalyzeMethodDefault") localSamplingPlan.AnalyzeMethodDefault = (AnalyzeMethodEnum)GetRandomEnumType(typeof(AnalyzeMethodEnum));
            if (OmitPropName != "SampleMatrixDefault") localSamplingPlan.SampleMatrixDefault = (SampleMatrixEnum)GetRandomEnumType(typeof(SampleMatrixEnum));
            if (OmitPropName != "LaboratoryDefault") localSamplingPlan.LaboratoryDefault = (LaboratoryEnum)GetRandomEnumType(typeof(LaboratoryEnum));
            if (OmitPropName != "BackupDirectory") localSamplingPlan.BackupDirectory = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") localSamplingPlan.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localSamplingPlan.LastUpdateContactTVItemID = 2;



            return localSamplingPlan;
        }
        private void CheckLocalSamplingPlanFields(List<LocalSamplingPlan> localSamplingPlanList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanList[0].SamplingPlanName));
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanList[0].ForGroupName));
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanList[0].AccessCode));
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanList[0].ApprovalCode));
            if (localSamplingPlanList[0].SamplingPlanFileTVItemID != null)
            {
                Assert.NotNull(localSamplingPlanList[0].SamplingPlanFileTVItemID);
            }
            if (localSamplingPlanList[0].AnalyzeMethodDefault != null)
            {
                Assert.NotNull(localSamplingPlanList[0].AnalyzeMethodDefault);
            }
            if (localSamplingPlanList[0].SampleMatrixDefault != null)
            {
                Assert.NotNull(localSamplingPlanList[0].SampleMatrixDefault);
            }
            if (localSamplingPlanList[0].LaboratoryDefault != null)
            {
                Assert.NotNull(localSamplingPlanList[0].LaboratoryDefault);
            }
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanList[0].BackupDirectory));
        }

        #endregion Functions private
    }
}
