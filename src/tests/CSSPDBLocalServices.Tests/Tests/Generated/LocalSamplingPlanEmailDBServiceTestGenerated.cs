/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalSamplingPlanEmailDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalSamplingPlanEmailDBService LocalSamplingPlanEmailDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalSamplingPlanEmail localSamplingPlanEmail { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanEmailDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanEmailDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanEmailDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanEmail_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalSamplingPlanEmailList = await LocalSamplingPlanEmailDBService.GetLocalSamplingPlanEmailList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailList.Result).Value);
            List<LocalSamplingPlanEmail> localSamplingPlanEmailList = (List<LocalSamplingPlanEmail>)((OkObjectResult)actionLocalSamplingPlanEmailList.Result).Value;

            count = localSamplingPlanEmailList.Count();

            LocalSamplingPlanEmail localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlanEmail.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localSamplingPlanEmail.SamplingPlanEmailID   (Int32)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.SamplingPlanEmailID = 0;

            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Put(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.SamplingPlanEmailID = 10000000;
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Put(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlan", ExistPlurial = "s", ExistFieldID = "SamplingPlanID", AllowableTVtypeList = )]
            // localSamplingPlanEmail.SamplingPlanID   (Int32)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.SamplingPlanID = 0;
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(150)]
            // localSamplingPlanEmail.Email   (String)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("Email");
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.Email = GetRandomString("", 151);
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);
            //Assert.AreEqual(count, localSamplingPlanEmailDBService.GetLocalSamplingPlanEmailList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanEmail.IsContractor   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanEmail.LabSheetHasValueOver500   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanEmail.LabSheetReceived   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanEmail.LabSheetAccepted   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanEmail.LabSheetRejected   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localSamplingPlanEmail.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.LastUpdateDate_UTC = new DateTime();
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);
            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localSamplingPlanEmail.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.LastUpdateContactTVItemID = 0;
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);

            localSamplingPlanEmail = null;
            localSamplingPlanEmail = GetFilledRandomLocalSamplingPlanEmail("");
            localSamplingPlanEmail.LastUpdateContactTVItemID = 1;
            actionLocalSamplingPlanEmail = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanEmail.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalSamplingPlanEmail
            var actionLocalSamplingPlanEmailAdded = await LocalSamplingPlanEmailDBService.Post(localSamplingPlanEmail);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailAdded.Result).Value);
            LocalSamplingPlanEmail localSamplingPlanEmailAdded = (LocalSamplingPlanEmail)((OkObjectResult)actionLocalSamplingPlanEmailAdded.Result).Value;
            Assert.NotNull(localSamplingPlanEmailAdded);

            // List<LocalSamplingPlanEmail>
            var actionLocalSamplingPlanEmailList = await LocalSamplingPlanEmailDBService.GetLocalSamplingPlanEmailList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailList.Result).Value);
            List<LocalSamplingPlanEmail> localSamplingPlanEmailList = (List<LocalSamplingPlanEmail>)((OkObjectResult)actionLocalSamplingPlanEmailList.Result).Value;

            int count = ((List<LocalSamplingPlanEmail>)((OkObjectResult)actionLocalSamplingPlanEmailList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalSamplingPlanEmail> with skip and take
            var actionLocalSamplingPlanEmailListSkipAndTake = await LocalSamplingPlanEmailDBService.GetLocalSamplingPlanEmailList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailListSkipAndTake.Result).Value);
            List<LocalSamplingPlanEmail> localSamplingPlanEmailListSkipAndTake = (List<LocalSamplingPlanEmail>)((OkObjectResult)actionLocalSamplingPlanEmailListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalSamplingPlanEmail>)((OkObjectResult)actionLocalSamplingPlanEmailListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localSamplingPlanEmailList[0].SamplingPlanEmailID == localSamplingPlanEmailListSkipAndTake[0].SamplingPlanEmailID);

            // Get LocalSamplingPlanEmail With SamplingPlanEmailID
            var actionLocalSamplingPlanEmailGet = await LocalSamplingPlanEmailDBService.GetLocalSamplingPlanEmailWithSamplingPlanEmailID(localSamplingPlanEmailList[0].SamplingPlanEmailID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailGet.Result).Value);
            LocalSamplingPlanEmail localSamplingPlanEmailGet = (LocalSamplingPlanEmail)((OkObjectResult)actionLocalSamplingPlanEmailGet.Result).Value;
            Assert.NotNull(localSamplingPlanEmailGet);
            Assert.Equal(localSamplingPlanEmailGet.SamplingPlanEmailID, localSamplingPlanEmailList[0].SamplingPlanEmailID);

            // Put LocalSamplingPlanEmail
            var actionLocalSamplingPlanEmailUpdated = await LocalSamplingPlanEmailDBService.Put(localSamplingPlanEmail);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailUpdated.Result).Value);
            LocalSamplingPlanEmail localSamplingPlanEmailUpdated = (LocalSamplingPlanEmail)((OkObjectResult)actionLocalSamplingPlanEmailUpdated.Result).Value;
            Assert.NotNull(localSamplingPlanEmailUpdated);

            // Delete LocalSamplingPlanEmail
            var actionLocalSamplingPlanEmailDeleted = await LocalSamplingPlanEmailDBService.Delete(localSamplingPlanEmail.SamplingPlanEmailID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanEmailDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanEmailDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalSamplingPlanEmailDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalSamplingPlanEmailDBService, LocalSamplingPlanEmailDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalSamplingPlanEmailDBService = Provider.GetService<ILocalSamplingPlanEmailDBService>();
            Assert.NotNull(LocalSamplingPlanEmailDBService);

            return await Task.FromResult(true);
        }
        private LocalSamplingPlanEmail GetFilledRandomLocalSamplingPlanEmail(string OmitPropName)
        {
            LocalSamplingPlanEmail localSamplingPlanEmail = new LocalSamplingPlanEmail();

            if (OmitPropName != "LocalDBCommand") localSamplingPlanEmail.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SamplingPlanID") localSamplingPlanEmail.SamplingPlanID = 0;
            if (OmitPropName != "Email") localSamplingPlanEmail.Email = GetRandomEmail();
            if (OmitPropName != "IsContractor") localSamplingPlanEmail.IsContractor = true;
            if (OmitPropName != "LabSheetHasValueOver500") localSamplingPlanEmail.LabSheetHasValueOver500 = true;
            if (OmitPropName != "LabSheetReceived") localSamplingPlanEmail.LabSheetReceived = true;
            if (OmitPropName != "LabSheetAccepted") localSamplingPlanEmail.LabSheetAccepted = true;
            if (OmitPropName != "LabSheetRejected") localSamplingPlanEmail.LabSheetRejected = true;
            if (OmitPropName != "LastUpdateDate_UTC") localSamplingPlanEmail.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localSamplingPlanEmail.LastUpdateContactTVItemID = 2;



            return localSamplingPlanEmail;
        }
        private void CheckLocalSamplingPlanEmailFields(List<LocalSamplingPlanEmail> localSamplingPlanEmailList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localSamplingPlanEmailList[0].Email));
        }

        #endregion Functions private
    }
}
