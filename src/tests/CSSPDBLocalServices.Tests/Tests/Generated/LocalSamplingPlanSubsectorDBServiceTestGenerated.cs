/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalSamplingPlanSubsectorDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalSamplingPlanSubsectorDBService LocalSamplingPlanSubsectorDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalSamplingPlanSubsector localSamplingPlanSubsector { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanSubsectorDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsectorDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsectorDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsector_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalSamplingPlanSubsectorList = await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorList.Result).Value);
            List<LocalSamplingPlanSubsector> localSamplingPlanSubsectorList = (List<LocalSamplingPlanSubsector>)((OkObjectResult)actionLocalSamplingPlanSubsectorList.Result).Value;

            count = localSamplingPlanSubsectorList.Count();

            LocalSamplingPlanSubsector localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlanSubsector.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localSamplingPlanSubsector.SamplingPlanSubsectorID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.SamplingPlanSubsectorID = 0;

            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Put(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.SamplingPlanSubsectorID = 10000000;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Put(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlan", ExistPlurial = "s", ExistFieldID = "SamplingPlanID", AllowableTVtypeList = )]
            // localSamplingPlanSubsector.SamplingPlanID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.SamplingPlanID = 0;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localSamplingPlanSubsector.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.SubsectorTVItemID = 0;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.SubsectorTVItemID = 1;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localSamplingPlanSubsector.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.LastUpdateDate_UTC = new DateTime();
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);
            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localSamplingPlanSubsector.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.LastUpdateContactTVItemID = 0;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);

            localSamplingPlanSubsector = null;
            localSamplingPlanSubsector = GetFilledRandomLocalSamplingPlanSubsector("");
            localSamplingPlanSubsector.LastUpdateContactTVItemID = 1;
            actionLocalSamplingPlanSubsector = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsector.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalSamplingPlanSubsector
            var actionLocalSamplingPlanSubsectorAdded = await LocalSamplingPlanSubsectorDBService.Post(localSamplingPlanSubsector);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorAdded.Result).Value);
            LocalSamplingPlanSubsector localSamplingPlanSubsectorAdded = (LocalSamplingPlanSubsector)((OkObjectResult)actionLocalSamplingPlanSubsectorAdded.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorAdded);

            // List<LocalSamplingPlanSubsector>
            var actionLocalSamplingPlanSubsectorList = await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorList.Result).Value);
            List<LocalSamplingPlanSubsector> localSamplingPlanSubsectorList = (List<LocalSamplingPlanSubsector>)((OkObjectResult)actionLocalSamplingPlanSubsectorList.Result).Value;

            int count = ((List<LocalSamplingPlanSubsector>)((OkObjectResult)actionLocalSamplingPlanSubsectorList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalSamplingPlanSubsector> with skip and take
            var actionLocalSamplingPlanSubsectorListSkipAndTake = await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorListSkipAndTake.Result).Value);
            List<LocalSamplingPlanSubsector> localSamplingPlanSubsectorListSkipAndTake = (List<LocalSamplingPlanSubsector>)((OkObjectResult)actionLocalSamplingPlanSubsectorListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalSamplingPlanSubsector>)((OkObjectResult)actionLocalSamplingPlanSubsectorListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localSamplingPlanSubsectorList[0].SamplingPlanSubsectorID == localSamplingPlanSubsectorListSkipAndTake[0].SamplingPlanSubsectorID);

            // Get LocalSamplingPlanSubsector With SamplingPlanSubsectorID
            var actionLocalSamplingPlanSubsectorGet = await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorWithSamplingPlanSubsectorID(localSamplingPlanSubsectorList[0].SamplingPlanSubsectorID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorGet.Result).Value);
            LocalSamplingPlanSubsector localSamplingPlanSubsectorGet = (LocalSamplingPlanSubsector)((OkObjectResult)actionLocalSamplingPlanSubsectorGet.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorGet);
            Assert.Equal(localSamplingPlanSubsectorGet.SamplingPlanSubsectorID, localSamplingPlanSubsectorList[0].SamplingPlanSubsectorID);

            // Put LocalSamplingPlanSubsector
            var actionLocalSamplingPlanSubsectorUpdated = await LocalSamplingPlanSubsectorDBService.Put(localSamplingPlanSubsector);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorUpdated.Result).Value);
            LocalSamplingPlanSubsector localSamplingPlanSubsectorUpdated = (LocalSamplingPlanSubsector)((OkObjectResult)actionLocalSamplingPlanSubsectorUpdated.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorUpdated);

            // Delete LocalSamplingPlanSubsector
            var actionLocalSamplingPlanSubsectorDeleted = await LocalSamplingPlanSubsectorDBService.Delete(localSamplingPlanSubsector.SamplingPlanSubsectorID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalSamplingPlanSubsectorDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalSamplingPlanSubsectorDBService, LocalSamplingPlanSubsectorDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalSamplingPlanSubsectorDBService = Provider.GetService<ILocalSamplingPlanSubsectorDBService>();
            Assert.NotNull(LocalSamplingPlanSubsectorDBService);

            return await Task.FromResult(true);
        }
        private LocalSamplingPlanSubsector GetFilledRandomLocalSamplingPlanSubsector(string OmitPropName)
        {
            LocalSamplingPlanSubsector localSamplingPlanSubsector = new LocalSamplingPlanSubsector();

            if (OmitPropName != "LocalDBCommand") localSamplingPlanSubsector.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SamplingPlanID") localSamplingPlanSubsector.SamplingPlanID = 0;
            if (OmitPropName != "SubsectorTVItemID") localSamplingPlanSubsector.SubsectorTVItemID = 11;
            if (OmitPropName != "LastUpdateDate_UTC") localSamplingPlanSubsector.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localSamplingPlanSubsector.LastUpdateContactTVItemID = 2;



            return localSamplingPlanSubsector;
        }
        private void CheckLocalSamplingPlanSubsectorFields(List<LocalSamplingPlanSubsector> localSamplingPlanSubsectorList)
        {
        }

        #endregion Functions private
    }
}
