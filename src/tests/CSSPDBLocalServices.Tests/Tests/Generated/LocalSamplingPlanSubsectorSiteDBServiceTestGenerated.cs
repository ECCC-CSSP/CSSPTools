/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalSamplingPlanSubsectorSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalSamplingPlanSubsectorSiteDBService LocalSamplingPlanSubsectorSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanSubsectorSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsectorSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsectorSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalSamplingPlanSubsectorSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalSamplingPlanSubsectorSiteList = await LocalSamplingPlanSubsectorSiteDBService.GetLocalSamplingPlanSubsectorSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).Value);
            List<LocalSamplingPlanSubsectorSite> localSamplingPlanSubsectorSiteList = (List<LocalSamplingPlanSubsectorSite>)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).Value;

            count = localSamplingPlanSubsectorSiteList.Count();

            LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localSamplingPlanSubsectorSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localSamplingPlanSubsectorSite.SamplingPlanSubsectorSiteID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.SamplingPlanSubsectorSiteID = 0;

            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Put(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.SamplingPlanSubsectorSiteID = 10000000;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Put(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlanSubsector", ExistPlurial = "s", ExistFieldID = "SamplingPlanSubsectorID", AllowableTVtypeList = )]
            // localSamplingPlanSubsectorSite.SamplingPlanSubsectorID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.SamplingPlanSubsectorID = 0;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // localSamplingPlanSubsectorSite.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.MWQMSiteTVItemID = 0;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.MWQMSiteTVItemID = 1;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // localSamplingPlanSubsectorSite.IsDuplicate   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localSamplingPlanSubsectorSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime();
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);
            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localSamplingPlanSubsectorSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.LastUpdateContactTVItemID = 0;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);

            localSamplingPlanSubsectorSite = null;
            localSamplingPlanSubsectorSite = GetFilledRandomLocalSamplingPlanSubsectorSite("");
            localSamplingPlanSubsectorSite.LastUpdateContactTVItemID = 1;
            actionLocalSamplingPlanSubsectorSite = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalSamplingPlanSubsectorSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalSamplingPlanSubsectorSite
            var actionLocalSamplingPlanSubsectorSiteAdded = await LocalSamplingPlanSubsectorSiteDBService.Post(localSamplingPlanSubsectorSite);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteAdded.Result).Value);
            LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSiteAdded = (LocalSamplingPlanSubsectorSite)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteAdded.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorSiteAdded);

            // List<LocalSamplingPlanSubsectorSite>
            var actionLocalSamplingPlanSubsectorSiteList = await LocalSamplingPlanSubsectorSiteDBService.GetLocalSamplingPlanSubsectorSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).Value);
            List<LocalSamplingPlanSubsectorSite> localSamplingPlanSubsectorSiteList = (List<LocalSamplingPlanSubsectorSite>)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).Value;

            int count = ((List<LocalSamplingPlanSubsectorSite>)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalSamplingPlanSubsectorSite> with skip and take
            var actionLocalSamplingPlanSubsectorSiteListSkipAndTake = await LocalSamplingPlanSubsectorSiteDBService.GetLocalSamplingPlanSubsectorSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteListSkipAndTake.Result).Value);
            List<LocalSamplingPlanSubsectorSite> localSamplingPlanSubsectorSiteListSkipAndTake = (List<LocalSamplingPlanSubsectorSite>)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalSamplingPlanSubsectorSite>)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localSamplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID == localSamplingPlanSubsectorSiteListSkipAndTake[0].SamplingPlanSubsectorSiteID);

            // Get LocalSamplingPlanSubsectorSite With SamplingPlanSubsectorSiteID
            var actionLocalSamplingPlanSubsectorSiteGet = await LocalSamplingPlanSubsectorSiteDBService.GetLocalSamplingPlanSubsectorSiteWithSamplingPlanSubsectorSiteID(localSamplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteGet.Result).Value);
            LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSiteGet = (LocalSamplingPlanSubsectorSite)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteGet.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorSiteGet);
            Assert.Equal(localSamplingPlanSubsectorSiteGet.SamplingPlanSubsectorSiteID, localSamplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID);

            // Put LocalSamplingPlanSubsectorSite
            var actionLocalSamplingPlanSubsectorSiteUpdated = await LocalSamplingPlanSubsectorSiteDBService.Put(localSamplingPlanSubsectorSite);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteUpdated.Result).Value);
            LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSiteUpdated = (LocalSamplingPlanSubsectorSite)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteUpdated.Result).Value;
            Assert.NotNull(localSamplingPlanSubsectorSiteUpdated);

            // Delete LocalSamplingPlanSubsectorSite
            var actionLocalSamplingPlanSubsectorSiteDeleted = await LocalSamplingPlanSubsectorSiteDBService.Delete(localSamplingPlanSubsectorSite.SamplingPlanSubsectorSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalSamplingPlanSubsectorSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalSamplingPlanSubsectorSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalSamplingPlanSubsectorSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalSamplingPlanSubsectorSiteDBService, LocalSamplingPlanSubsectorSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalSamplingPlanSubsectorSiteDBService = Provider.GetService<ILocalSamplingPlanSubsectorSiteDBService>();
            Assert.NotNull(LocalSamplingPlanSubsectorSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalSamplingPlanSubsectorSite GetFilledRandomLocalSamplingPlanSubsectorSite(string OmitPropName)
        {
            LocalSamplingPlanSubsectorSite localSamplingPlanSubsectorSite = new LocalSamplingPlanSubsectorSite();

            if (OmitPropName != "LocalDBCommand") localSamplingPlanSubsectorSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SamplingPlanSubsectorID") localSamplingPlanSubsectorSite.SamplingPlanSubsectorID = 0;
            if (OmitPropName != "MWQMSiteTVItemID") localSamplingPlanSubsectorSite.MWQMSiteTVItemID = 44;
            if (OmitPropName != "IsDuplicate") localSamplingPlanSubsectorSite.IsDuplicate = true;
            if (OmitPropName != "LastUpdateDate_UTC") localSamplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localSamplingPlanSubsectorSite.LastUpdateContactTVItemID = 2;



            return localSamplingPlanSubsectorSite;
        }
        private void CheckLocalSamplingPlanSubsectorSiteFields(List<LocalSamplingPlanSubsectorSite> localSamplingPlanSubsectorSiteList)
        {
        }

        #endregion Functions private
    }
}
