/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTVFileLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTVFileLanguageDBService LocalTVFileLanguageDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTVFileLanguage localTVFileLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTVFileLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVFileLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVFileLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVFileLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTVFileLanguageList = await LocalTVFileLanguageDBService.GetLocalTVFileLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageList.Result).Value);
            List<LocalTVFileLanguage> localTVFileLanguageList = (List<LocalTVFileLanguage>)((OkObjectResult)actionLocalTVFileLanguageList.Result).Value;

            count = localTVFileLanguageList.Count();

            LocalTVFileLanguage localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVFileLanguage.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTVFileLanguage.TVFileLanguageID   (Int32)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.TVFileLanguageID = 0;

            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Put(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.TVFileLanguageID = 10000000;
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Put(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVFile", ExistPlurial = "s", ExistFieldID = "TVFileID", AllowableTVtypeList = )]
            // localTVFileLanguage.TVFileID   (Int32)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.TVFileID = 0;
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVFileLanguage.Language   (LanguageEnum)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.Language = (LanguageEnum)1000000;
             actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);


            // -----------------------------------
            // Is Nullable
            // localTVFileLanguage.FileDescription   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVFileLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
             actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVFileLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.LastUpdateDate_UTC = new DateTime();
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);
            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVFileLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.LastUpdateContactTVItemID = 0;
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);

            localTVFileLanguage = null;
            localTVFileLanguage = GetFilledRandomLocalTVFileLanguage("");
            localTVFileLanguage.LastUpdateContactTVItemID = 1;
            actionLocalTVFileLanguage = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVFileLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTVFileLanguage
            var actionLocalTVFileLanguageAdded = await LocalTVFileLanguageDBService.Post(localTVFileLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageAdded.Result).Value);
            LocalTVFileLanguage localTVFileLanguageAdded = (LocalTVFileLanguage)((OkObjectResult)actionLocalTVFileLanguageAdded.Result).Value;
            Assert.NotNull(localTVFileLanguageAdded);

            // List<LocalTVFileLanguage>
            var actionLocalTVFileLanguageList = await LocalTVFileLanguageDBService.GetLocalTVFileLanguageList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageList.Result).Value);
            List<LocalTVFileLanguage> localTVFileLanguageList = (List<LocalTVFileLanguage>)((OkObjectResult)actionLocalTVFileLanguageList.Result).Value;

            int count = ((List<LocalTVFileLanguage>)((OkObjectResult)actionLocalTVFileLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTVFileLanguage> with skip and take
            var actionLocalTVFileLanguageListSkipAndTake = await LocalTVFileLanguageDBService.GetLocalTVFileLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageListSkipAndTake.Result).Value);
            List<LocalTVFileLanguage> localTVFileLanguageListSkipAndTake = (List<LocalTVFileLanguage>)((OkObjectResult)actionLocalTVFileLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTVFileLanguage>)((OkObjectResult)actionLocalTVFileLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTVFileLanguageList[0].TVFileLanguageID == localTVFileLanguageListSkipAndTake[0].TVFileLanguageID);

            // Get LocalTVFileLanguage With TVFileLanguageID
            var actionLocalTVFileLanguageGet = await LocalTVFileLanguageDBService.GetLocalTVFileLanguageWithTVFileLanguageID(localTVFileLanguageList[0].TVFileLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageGet.Result).Value);
            LocalTVFileLanguage localTVFileLanguageGet = (LocalTVFileLanguage)((OkObjectResult)actionLocalTVFileLanguageGet.Result).Value;
            Assert.NotNull(localTVFileLanguageGet);
            Assert.Equal(localTVFileLanguageGet.TVFileLanguageID, localTVFileLanguageList[0].TVFileLanguageID);

            // Put LocalTVFileLanguage
            var actionLocalTVFileLanguageUpdated = await LocalTVFileLanguageDBService.Put(localTVFileLanguage);
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageUpdated.Result).Value);
            LocalTVFileLanguage localTVFileLanguageUpdated = (LocalTVFileLanguage)((OkObjectResult)actionLocalTVFileLanguageUpdated.Result).Value;
            Assert.NotNull(localTVFileLanguageUpdated);

            // Delete LocalTVFileLanguage
            var actionLocalTVFileLanguageDeleted = await LocalTVFileLanguageDBService.Delete(localTVFileLanguage.TVFileLanguageID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVFileLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVFileLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTVFileLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTVFileLanguageDBService, LocalTVFileLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTVFileLanguageDBService = Provider.GetService<ILocalTVFileLanguageDBService>();
            Assert.NotNull(LocalTVFileLanguageDBService);

            return await Task.FromResult(true);
        }
        private LocalTVFileLanguage GetFilledRandomLocalTVFileLanguage(string OmitPropName)
        {
            LocalTVFileLanguage localTVFileLanguage = new LocalTVFileLanguage();

            if (OmitPropName != "LocalDBCommand") localTVFileLanguage.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TVFileID") localTVFileLanguage.TVFileID = 0;
            if (OmitPropName != "Language") localTVFileLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "FileDescription") localTVFileLanguage.FileDescription = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatus") localTVFileLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localTVFileLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTVFileLanguage.LastUpdateContactTVItemID = 2;



            return localTVFileLanguage;
        }
        private void CheckLocalTVFileLanguageFields(List<LocalTVFileLanguage> localTVFileLanguageList)
        {
            if (!string.IsNullOrWhiteSpace(localTVFileLanguageList[0].FileDescription))
            {
                Assert.False(string.IsNullOrWhiteSpace(localTVFileLanguageList[0].FileDescription));
            }
        }

        #endregion Functions private
    }
}
