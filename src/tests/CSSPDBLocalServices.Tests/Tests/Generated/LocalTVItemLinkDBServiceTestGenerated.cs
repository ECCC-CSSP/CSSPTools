/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTVItemLinkDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTVItemLinkDBService LocalTVItemLinkDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTVItemLink localTVItemLink { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTVItemLinkDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemLinkDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemLinkDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTVItemLink = GetFilledRandomLocalTVItemLink("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemLink_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTVItemLinkList = await LocalTVItemLinkDBService.GetLocalTVItemLinkList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkList.Result).Value);
            List<LocalTVItemLink> localTVItemLinkList = (List<LocalTVItemLink>)((OkObjectResult)actionLocalTVItemLinkList.Result).Value;

            count = localTVItemLinkList.Count();

            LocalTVItemLink localTVItemLink = GetFilledRandomLocalTVItemLink("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemLink.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTVItemLink.TVItemLinkID   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.TVItemLinkID = 0;

            actionLocalTVItemLink = await LocalTVItemLinkDBService.Put(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.TVItemLinkID = 10000000;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Put(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemLink.FromTVItemID   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.FromTVItemID = 0;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.FromTVItemID = 13;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemLink.ToTVItemID   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.ToTVItemID = 0;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.ToTVItemID = 13;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemLink.FromTVType   (TVTypeEnum)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.FromTVType = (TVTypeEnum)1000000;
             actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemLink.ToTVType   (TVTypeEnum)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.ToTVType = (TVTypeEnum)1000000;
             actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVItemLink.StartDateTime_Local   (DateTime)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.StartDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPAfter(Year = 1980)]
            // [CSSPBigger(OtherField = StartDateTime_Local)]
            // localTVItemLink.EndDateTime_Local   (DateTime)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.EndDateTime_Local = new DateTime(1979, 1, 1);
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localTVItemLink.Ordinal   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.Ordinal = -1;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            //Assert.AreEqual(count, localTVItemLinkService.GetLocalTVItemLinkList().Count());
            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.Ordinal = 101;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            //Assert.AreEqual(count, localTVItemLinkDBService.GetLocalTVItemLinkList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localTVItemLink.TVLevel   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.TVLevel = -1;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            //Assert.AreEqual(count, localTVItemLinkService.GetLocalTVItemLinkList().Count());
            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.TVLevel = 101;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            //Assert.AreEqual(count, localTVItemLinkDBService.GetLocalTVItemLinkList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // localTVItemLink.TVPath   (String)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("TVPath");
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.TVPath = GetRandomString("", 251);
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            //Assert.AreEqual(count, localTVItemLinkDBService.GetLocalTVItemLinkList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItemLink", ExistPlurial = "s", ExistFieldID = "TVItemLinkID", AllowableTVtypeList = )]
            // localTVItemLink.ParentTVItemLinkID   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.ParentTVItemLinkID = 0;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVItemLink.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.LastUpdateDate_UTC = new DateTime();
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);
            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVItemLink.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.LastUpdateContactTVItemID = 0;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

            localTVItemLink = null;
            localTVItemLink = GetFilledRandomLocalTVItemLink("");
            localTVItemLink.LastUpdateContactTVItemID = 1;
            actionLocalTVItemLink = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemLink.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTVItemLink
            var actionLocalTVItemLinkAdded = await LocalTVItemLinkDBService.Post(localTVItemLink);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkAdded.Result).Value);
            LocalTVItemLink localTVItemLinkAdded = (LocalTVItemLink)((OkObjectResult)actionLocalTVItemLinkAdded.Result).Value;
            Assert.NotNull(localTVItemLinkAdded);

            // List<LocalTVItemLink>
            var actionLocalTVItemLinkList = await LocalTVItemLinkDBService.GetLocalTVItemLinkList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkList.Result).Value);
            List<LocalTVItemLink> localTVItemLinkList = (List<LocalTVItemLink>)((OkObjectResult)actionLocalTVItemLinkList.Result).Value;

            int count = ((List<LocalTVItemLink>)((OkObjectResult)actionLocalTVItemLinkList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTVItemLink> with skip and take
            var actionLocalTVItemLinkListSkipAndTake = await LocalTVItemLinkDBService.GetLocalTVItemLinkList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkListSkipAndTake.Result).Value);
            List<LocalTVItemLink> localTVItemLinkListSkipAndTake = (List<LocalTVItemLink>)((OkObjectResult)actionLocalTVItemLinkListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTVItemLink>)((OkObjectResult)actionLocalTVItemLinkListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTVItemLinkList[0].TVItemLinkID == localTVItemLinkListSkipAndTake[0].TVItemLinkID);

            // Get LocalTVItemLink With TVItemLinkID
            var actionLocalTVItemLinkGet = await LocalTVItemLinkDBService.GetLocalTVItemLinkWithTVItemLinkID(localTVItemLinkList[0].TVItemLinkID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkGet.Result).Value);
            LocalTVItemLink localTVItemLinkGet = (LocalTVItemLink)((OkObjectResult)actionLocalTVItemLinkGet.Result).Value;
            Assert.NotNull(localTVItemLinkGet);
            Assert.Equal(localTVItemLinkGet.TVItemLinkID, localTVItemLinkList[0].TVItemLinkID);

            // Put LocalTVItemLink
            var actionLocalTVItemLinkUpdated = await LocalTVItemLinkDBService.Put(localTVItemLink);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkUpdated.Result).Value);
            LocalTVItemLink localTVItemLinkUpdated = (LocalTVItemLink)((OkObjectResult)actionLocalTVItemLinkUpdated.Result).Value;
            Assert.NotNull(localTVItemLinkUpdated);

            // Delete LocalTVItemLink
            var actionLocalTVItemLinkDeleted = await LocalTVItemLinkDBService.Delete(localTVItemLink.TVItemLinkID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemLinkDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemLinkDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTVItemLinkDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTVItemLinkDBService, LocalTVItemLinkDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTVItemLinkDBService = Provider.GetService<ILocalTVItemLinkDBService>();
            Assert.NotNull(LocalTVItemLinkDBService);

            return await Task.FromResult(true);
        }
        private LocalTVItemLink GetFilledRandomLocalTVItemLink(string OmitPropName)
        {
            LocalTVItemLink localTVItemLink = new LocalTVItemLink();

            if (OmitPropName != "LocalDBCommand") localTVItemLink.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "FromTVItemID") localTVItemLink.FromTVItemID = 1;
            if (OmitPropName != "ToTVItemID") localTVItemLink.ToTVItemID = 1;
            if (OmitPropName != "FromTVType") localTVItemLink.FromTVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "ToTVType") localTVItemLink.ToTVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "StartDateTime_Local") localTVItemLink.StartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDateTime_Local") localTVItemLink.EndDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Ordinal") localTVItemLink.Ordinal = GetRandomInt(0, 100);
            if (OmitPropName != "TVLevel") localTVItemLink.TVLevel = GetRandomInt(0, 100);
            if (OmitPropName != "TVPath") localTVItemLink.TVPath = GetRandomString("", 5);
            // Need to implement [LocalTVItemLink ParentTVItemLinkID TVItemLink TVItemLinkID]
            if (OmitPropName != "LastUpdateDate_UTC") localTVItemLink.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTVItemLink.LastUpdateContactTVItemID = 2;



            return localTVItemLink;
        }
        private void CheckLocalTVItemLinkFields(List<LocalTVItemLink> localTVItemLinkList)
        {
            if (localTVItemLinkList[0].StartDateTime_Local != null)
            {
                Assert.NotNull(localTVItemLinkList[0].StartDateTime_Local);
            }
            if (localTVItemLinkList[0].EndDateTime_Local != null)
            {
                Assert.NotNull(localTVItemLinkList[0].EndDateTime_Local);
            }
            Assert.False(string.IsNullOrWhiteSpace(localTVItemLinkList[0].TVPath));
            if (localTVItemLinkList[0].ParentTVItemLinkID != null)
            {
                Assert.NotNull(localTVItemLinkList[0].ParentTVItemLinkID);
            }
        }

        #endregion Functions private
    }
}
