/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTVItemStatDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTVItemStatDBService LocalTVItemStatDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTVItemStat localTVItemStat { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTVItemStatDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemStatDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemStatDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTVItemStat = GetFilledRandomLocalTVItemStat("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemStat_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTVItemStatList = await LocalTVItemStatDBService.GetLocalTVItemStatList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatList.Result).Value);
            List<LocalTVItemStat> localTVItemStatList = (List<LocalTVItemStat>)((OkObjectResult)actionLocalTVItemStatList.Result).Value;

            count = localTVItemStatList.Count();

            LocalTVItemStat localTVItemStat = GetFilledRandomLocalTVItemStat("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemStat.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTVItemStat.TVItemStatID   (Int32)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.TVItemStatID = 0;

            actionLocalTVItemStat = await LocalTVItemStatDBService.Put(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.TVItemStatID = 10000000;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Put(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemStat.TVItemID   (Int32)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.TVItemID = 0;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.TVItemID = 13;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemStat.TVType   (TVTypeEnum)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.TVType = (TVTypeEnum)1000000;
             actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localTVItemStat.ChildCount   (Int32)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.ChildCount = -1;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);
            //Assert.AreEqual(count, localTVItemStatService.GetLocalTVItemStatList().Count());
            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.ChildCount = 10000001;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);
            //Assert.AreEqual(count, localTVItemStatDBService.GetLocalTVItemStatList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVItemStat.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.LastUpdateDate_UTC = new DateTime();
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);
            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVItemStat.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.LastUpdateContactTVItemID = 0;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);

            localTVItemStat = null;
            localTVItemStat = GetFilledRandomLocalTVItemStat("");
            localTVItemStat.LastUpdateContactTVItemID = 1;
            actionLocalTVItemStat = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemStat.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTVItemStat
            var actionLocalTVItemStatAdded = await LocalTVItemStatDBService.Post(localTVItemStat);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatAdded.Result).Value);
            LocalTVItemStat localTVItemStatAdded = (LocalTVItemStat)((OkObjectResult)actionLocalTVItemStatAdded.Result).Value;
            Assert.NotNull(localTVItemStatAdded);

            // List<LocalTVItemStat>
            var actionLocalTVItemStatList = await LocalTVItemStatDBService.GetLocalTVItemStatList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatList.Result).Value);
            List<LocalTVItemStat> localTVItemStatList = (List<LocalTVItemStat>)((OkObjectResult)actionLocalTVItemStatList.Result).Value;

            int count = ((List<LocalTVItemStat>)((OkObjectResult)actionLocalTVItemStatList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTVItemStat> with skip and take
            var actionLocalTVItemStatListSkipAndTake = await LocalTVItemStatDBService.GetLocalTVItemStatList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatListSkipAndTake.Result).Value);
            List<LocalTVItemStat> localTVItemStatListSkipAndTake = (List<LocalTVItemStat>)((OkObjectResult)actionLocalTVItemStatListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTVItemStat>)((OkObjectResult)actionLocalTVItemStatListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTVItemStatList[0].TVItemStatID == localTVItemStatListSkipAndTake[0].TVItemStatID);

            // Get LocalTVItemStat With TVItemStatID
            var actionLocalTVItemStatGet = await LocalTVItemStatDBService.GetLocalTVItemStatWithTVItemStatID(localTVItemStatList[0].TVItemStatID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatGet.Result).Value);
            LocalTVItemStat localTVItemStatGet = (LocalTVItemStat)((OkObjectResult)actionLocalTVItemStatGet.Result).Value;
            Assert.NotNull(localTVItemStatGet);
            Assert.Equal(localTVItemStatGet.TVItemStatID, localTVItemStatList[0].TVItemStatID);

            // Put LocalTVItemStat
            var actionLocalTVItemStatUpdated = await LocalTVItemStatDBService.Put(localTVItemStat);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatUpdated.Result).Value);
            LocalTVItemStat localTVItemStatUpdated = (LocalTVItemStat)((OkObjectResult)actionLocalTVItemStatUpdated.Result).Value;
            Assert.NotNull(localTVItemStatUpdated);

            // Delete LocalTVItemStat
            var actionLocalTVItemStatDeleted = await LocalTVItemStatDBService.Delete(localTVItemStat.TVItemStatID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemStatDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemStatDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTVItemStatDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTVItemStatDBService, LocalTVItemStatDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTVItemStatDBService = Provider.GetService<ILocalTVItemStatDBService>();
            Assert.NotNull(LocalTVItemStatDBService);

            return await Task.FromResult(true);
        }
        private LocalTVItemStat GetFilledRandomLocalTVItemStat(string OmitPropName)
        {
            LocalTVItemStat localTVItemStat = new LocalTVItemStat();

            if (OmitPropName != "LocalDBCommand") localTVItemStat.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TVItemID") localTVItemStat.TVItemID = 1;
            if (OmitPropName != "TVType") localTVItemStat.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "ChildCount") localTVItemStat.ChildCount = GetRandomInt(0, 10000000);
            if (OmitPropName != "LastUpdateDate_UTC") localTVItemStat.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTVItemStat.LastUpdateContactTVItemID = 2;



            return localTVItemStat;
        }
        private void CheckLocalTVItemStatFields(List<LocalTVItemStat> localTVItemStatList)
        {
        }

        #endregion Functions private
    }
}
