/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTVItemUserAuthorizationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTVItemUserAuthorizationDBService LocalTVItemUserAuthorizationDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTVItemUserAuthorization localTVItemUserAuthorization { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTVItemUserAuthorizationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemUserAuthorizationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemUserAuthorizationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVItemUserAuthorization_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTVItemUserAuthorizationList = await LocalTVItemUserAuthorizationDBService.GetLocalTVItemUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationList.Result).Value);
            List<LocalTVItemUserAuthorization> localTVItemUserAuthorizationList = (List<LocalTVItemUserAuthorization>)((OkObjectResult)actionLocalTVItemUserAuthorizationList.Result).Value;

            count = localTVItemUserAuthorizationList.Count();

            LocalTVItemUserAuthorization localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemUserAuthorization.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTVItemUserAuthorization.TVItemUserAuthorizationID   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemUserAuthorizationID = 0;

            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Put(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemUserAuthorizationID = 10000000;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Put(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVItemUserAuthorization.ContactTVItemID   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.ContactTVItemID = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.ContactTVItemID = 1;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemUserAuthorization.TVItemID1   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID1 = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID1 = 13;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemUserAuthorization.TVItemID2   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID2 = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID2 = 13;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemUserAuthorization.TVItemID3   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID3 = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID3 = 13;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Root,Address,Area,ClimateSite,Contact,Country,Email,File,HydrometricSite,Infrastructure,MikeScenario,MikeSource,Municipality,MWQMSite,PolSourceSite,Province,Sector,Subsector,Tel,TideSite,WasteWaterTreatmentPlant,LiftStation,Spill,BoxModel,VisualPlumesScenario,OtherInfrastructure,MWQMRun,MeshNode,WebTideNode,SamplingPlan,SeeOtherMunicipality,LineOverflow,MapInfo,MapInfoPoint)]
            // localTVItemUserAuthorization.TVItemID4   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID4 = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVItemID4 = 13;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVItemUserAuthorization.TVAuth   (TVAuthEnum)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.TVAuth = (TVAuthEnum)1000000;
             actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVItemUserAuthorization.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.LastUpdateDate_UTC = new DateTime();
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);
            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVItemUserAuthorization.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.LastUpdateContactTVItemID = 0;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

            localTVItemUserAuthorization = null;
            localTVItemUserAuthorization = GetFilledRandomLocalTVItemUserAuthorization("");
            localTVItemUserAuthorization.LastUpdateContactTVItemID = 1;
            actionLocalTVItemUserAuthorization = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVItemUserAuthorization.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTVItemUserAuthorization
            var actionLocalTVItemUserAuthorizationAdded = await LocalTVItemUserAuthorizationDBService.Post(localTVItemUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationAdded.Result).Value);
            LocalTVItemUserAuthorization localTVItemUserAuthorizationAdded = (LocalTVItemUserAuthorization)((OkObjectResult)actionLocalTVItemUserAuthorizationAdded.Result).Value;
            Assert.NotNull(localTVItemUserAuthorizationAdded);

            // List<LocalTVItemUserAuthorization>
            var actionLocalTVItemUserAuthorizationList = await LocalTVItemUserAuthorizationDBService.GetLocalTVItemUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationList.Result).Value);
            List<LocalTVItemUserAuthorization> localTVItemUserAuthorizationList = (List<LocalTVItemUserAuthorization>)((OkObjectResult)actionLocalTVItemUserAuthorizationList.Result).Value;

            int count = ((List<LocalTVItemUserAuthorization>)((OkObjectResult)actionLocalTVItemUserAuthorizationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTVItemUserAuthorization> with skip and take
            var actionLocalTVItemUserAuthorizationListSkipAndTake = await LocalTVItemUserAuthorizationDBService.GetLocalTVItemUserAuthorizationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationListSkipAndTake.Result).Value);
            List<LocalTVItemUserAuthorization> localTVItemUserAuthorizationListSkipAndTake = (List<LocalTVItemUserAuthorization>)((OkObjectResult)actionLocalTVItemUserAuthorizationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTVItemUserAuthorization>)((OkObjectResult)actionLocalTVItemUserAuthorizationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTVItemUserAuthorizationList[0].TVItemUserAuthorizationID == localTVItemUserAuthorizationListSkipAndTake[0].TVItemUserAuthorizationID);

            // Get LocalTVItemUserAuthorization With TVItemUserAuthorizationID
            var actionLocalTVItemUserAuthorizationGet = await LocalTVItemUserAuthorizationDBService.GetLocalTVItemUserAuthorizationWithTVItemUserAuthorizationID(localTVItemUserAuthorizationList[0].TVItemUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationGet.Result).Value);
            LocalTVItemUserAuthorization localTVItemUserAuthorizationGet = (LocalTVItemUserAuthorization)((OkObjectResult)actionLocalTVItemUserAuthorizationGet.Result).Value;
            Assert.NotNull(localTVItemUserAuthorizationGet);
            Assert.Equal(localTVItemUserAuthorizationGet.TVItemUserAuthorizationID, localTVItemUserAuthorizationList[0].TVItemUserAuthorizationID);

            // Put LocalTVItemUserAuthorization
            var actionLocalTVItemUserAuthorizationUpdated = await LocalTVItemUserAuthorizationDBService.Put(localTVItemUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationUpdated.Result).Value);
            LocalTVItemUserAuthorization localTVItemUserAuthorizationUpdated = (LocalTVItemUserAuthorization)((OkObjectResult)actionLocalTVItemUserAuthorizationUpdated.Result).Value;
            Assert.NotNull(localTVItemUserAuthorizationUpdated);

            // Delete LocalTVItemUserAuthorization
            var actionLocalTVItemUserAuthorizationDeleted = await LocalTVItemUserAuthorizationDBService.Delete(localTVItemUserAuthorization.TVItemUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVItemUserAuthorizationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVItemUserAuthorizationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTVItemUserAuthorizationDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTVItemUserAuthorizationDBService, LocalTVItemUserAuthorizationDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTVItemUserAuthorizationDBService = Provider.GetService<ILocalTVItemUserAuthorizationDBService>();
            Assert.NotNull(LocalTVItemUserAuthorizationDBService);

            return await Task.FromResult(true);
        }
        private LocalTVItemUserAuthorization GetFilledRandomLocalTVItemUserAuthorization(string OmitPropName)
        {
            LocalTVItemUserAuthorization localTVItemUserAuthorization = new LocalTVItemUserAuthorization();

            if (OmitPropName != "LocalDBCommand") localTVItemUserAuthorization.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ContactTVItemID") localTVItemUserAuthorization.ContactTVItemID = 2;
            if (OmitPropName != "TVItemID1") localTVItemUserAuthorization.TVItemID1 = 1;
            if (OmitPropName != "TVItemID2") localTVItemUserAuthorization.TVItemID2 = 1;
            if (OmitPropName != "TVItemID3") localTVItemUserAuthorization.TVItemID3 = 1;
            if (OmitPropName != "TVItemID4") localTVItemUserAuthorization.TVItemID4 = 1;
            if (OmitPropName != "TVAuth") localTVItemUserAuthorization.TVAuth = (TVAuthEnum)GetRandomEnumType(typeof(TVAuthEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localTVItemUserAuthorization.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTVItemUserAuthorization.LastUpdateContactTVItemID = 2;



            return localTVItemUserAuthorization;
        }
        private void CheckLocalTVItemUserAuthorizationFields(List<LocalTVItemUserAuthorization> localTVItemUserAuthorizationList)
        {
            if (localTVItemUserAuthorizationList[0].TVItemID2 != null)
            {
                Assert.NotNull(localTVItemUserAuthorizationList[0].TVItemID2);
            }
            if (localTVItemUserAuthorizationList[0].TVItemID3 != null)
            {
                Assert.NotNull(localTVItemUserAuthorizationList[0].TVItemID3);
            }
            if (localTVItemUserAuthorizationList[0].TVItemID4 != null)
            {
                Assert.NotNull(localTVItemUserAuthorizationList[0].TVItemID4);
            }
        }

        #endregion Functions private
    }
}
