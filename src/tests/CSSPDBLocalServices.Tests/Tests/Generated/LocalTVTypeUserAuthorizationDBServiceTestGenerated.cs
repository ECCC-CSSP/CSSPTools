/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTVTypeUserAuthorizationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTVTypeUserAuthorizationDBService LocalTVTypeUserAuthorizationDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTVTypeUserAuthorization localTVTypeUserAuthorization { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTVTypeUserAuthorizationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVTypeUserAuthorizationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVTypeUserAuthorizationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTVTypeUserAuthorization_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTVTypeUserAuthorizationList = await LocalTVTypeUserAuthorizationDBService.GetLocalTVTypeUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationList.Result).Value);
            List<LocalTVTypeUserAuthorization> localTVTypeUserAuthorizationList = (List<LocalTVTypeUserAuthorization>)((OkObjectResult)actionLocalTVTypeUserAuthorizationList.Result).Value;

            count = localTVTypeUserAuthorizationList.Count();

            LocalTVTypeUserAuthorization localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVTypeUserAuthorization.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTVTypeUserAuthorization.TVTypeUserAuthorizationID   (Int32)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.TVTypeUserAuthorizationID = 0;

            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Put(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.TVTypeUserAuthorizationID = 10000000;
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Put(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVTypeUserAuthorization.ContactTVItemID   (Int32)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.ContactTVItemID = 0;
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.ContactTVItemID = 1;
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVTypeUserAuthorization.TVType   (TVTypeEnum)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.TVType = (TVTypeEnum)1000000;
             actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTVTypeUserAuthorization.TVAuth   (TVAuthEnum)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.TVAuth = (TVAuthEnum)1000000;
             actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTVTypeUserAuthorization.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.LastUpdateDate_UTC = new DateTime();
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);
            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTVTypeUserAuthorization.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.LastUpdateContactTVItemID = 0;
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);

            localTVTypeUserAuthorization = null;
            localTVTypeUserAuthorization = GetFilledRandomLocalTVTypeUserAuthorization("");
            localTVTypeUserAuthorization.LastUpdateContactTVItemID = 1;
            actionLocalTVTypeUserAuthorization = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionLocalTVTypeUserAuthorization.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTVTypeUserAuthorization
            var actionLocalTVTypeUserAuthorizationAdded = await LocalTVTypeUserAuthorizationDBService.Post(localTVTypeUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationAdded.Result).Value);
            LocalTVTypeUserAuthorization localTVTypeUserAuthorizationAdded = (LocalTVTypeUserAuthorization)((OkObjectResult)actionLocalTVTypeUserAuthorizationAdded.Result).Value;
            Assert.NotNull(localTVTypeUserAuthorizationAdded);

            // List<LocalTVTypeUserAuthorization>
            var actionLocalTVTypeUserAuthorizationList = await LocalTVTypeUserAuthorizationDBService.GetLocalTVTypeUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationList.Result).Value);
            List<LocalTVTypeUserAuthorization> localTVTypeUserAuthorizationList = (List<LocalTVTypeUserAuthorization>)((OkObjectResult)actionLocalTVTypeUserAuthorizationList.Result).Value;

            int count = ((List<LocalTVTypeUserAuthorization>)((OkObjectResult)actionLocalTVTypeUserAuthorizationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTVTypeUserAuthorization> with skip and take
            var actionLocalTVTypeUserAuthorizationListSkipAndTake = await LocalTVTypeUserAuthorizationDBService.GetLocalTVTypeUserAuthorizationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationListSkipAndTake.Result).Value);
            List<LocalTVTypeUserAuthorization> localTVTypeUserAuthorizationListSkipAndTake = (List<LocalTVTypeUserAuthorization>)((OkObjectResult)actionLocalTVTypeUserAuthorizationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTVTypeUserAuthorization>)((OkObjectResult)actionLocalTVTypeUserAuthorizationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTVTypeUserAuthorizationList[0].TVTypeUserAuthorizationID == localTVTypeUserAuthorizationListSkipAndTake[0].TVTypeUserAuthorizationID);

            // Get LocalTVTypeUserAuthorization With TVTypeUserAuthorizationID
            var actionLocalTVTypeUserAuthorizationGet = await LocalTVTypeUserAuthorizationDBService.GetLocalTVTypeUserAuthorizationWithTVTypeUserAuthorizationID(localTVTypeUserAuthorizationList[0].TVTypeUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationGet.Result).Value);
            LocalTVTypeUserAuthorization localTVTypeUserAuthorizationGet = (LocalTVTypeUserAuthorization)((OkObjectResult)actionLocalTVTypeUserAuthorizationGet.Result).Value;
            Assert.NotNull(localTVTypeUserAuthorizationGet);
            Assert.Equal(localTVTypeUserAuthorizationGet.TVTypeUserAuthorizationID, localTVTypeUserAuthorizationList[0].TVTypeUserAuthorizationID);

            // Put LocalTVTypeUserAuthorization
            var actionLocalTVTypeUserAuthorizationUpdated = await LocalTVTypeUserAuthorizationDBService.Put(localTVTypeUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationUpdated.Result).Value);
            LocalTVTypeUserAuthorization localTVTypeUserAuthorizationUpdated = (LocalTVTypeUserAuthorization)((OkObjectResult)actionLocalTVTypeUserAuthorizationUpdated.Result).Value;
            Assert.NotNull(localTVTypeUserAuthorizationUpdated);

            // Delete LocalTVTypeUserAuthorization
            var actionLocalTVTypeUserAuthorizationDeleted = await LocalTVTypeUserAuthorizationDBService.Delete(localTVTypeUserAuthorization.TVTypeUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTVTypeUserAuthorizationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTVTypeUserAuthorizationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTVTypeUserAuthorizationDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTVTypeUserAuthorizationDBService, LocalTVTypeUserAuthorizationDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTVTypeUserAuthorizationDBService = Provider.GetService<ILocalTVTypeUserAuthorizationDBService>();
            Assert.NotNull(LocalTVTypeUserAuthorizationDBService);

            return await Task.FromResult(true);
        }
        private LocalTVTypeUserAuthorization GetFilledRandomLocalTVTypeUserAuthorization(string OmitPropName)
        {
            LocalTVTypeUserAuthorization localTVTypeUserAuthorization = new LocalTVTypeUserAuthorization();

            if (OmitPropName != "LocalDBCommand") localTVTypeUserAuthorization.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "ContactTVItemID") localTVTypeUserAuthorization.ContactTVItemID = 2;
            if (OmitPropName != "TVType") localTVTypeUserAuthorization.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "TVAuth") localTVTypeUserAuthorization.TVAuth = (TVAuthEnum)GetRandomEnumType(typeof(TVAuthEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localTVTypeUserAuthorization.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTVTypeUserAuthorization.LastUpdateContactTVItemID = 2;



            return localTVTypeUserAuthorization;
        }
        private void CheckLocalTVTypeUserAuthorizationFields(List<LocalTVTypeUserAuthorization> localTVTypeUserAuthorizationList)
        {
        }

        #endregion Functions private
    }
}
