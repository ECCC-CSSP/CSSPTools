/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTelDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTelDBService LocalTelDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTel localTel { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTelDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTelDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTelDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTel = GetFilledRandomLocalTel("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTel_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTelList = await LocalTelDBService.GetLocalTelList();
            Assert.Equal(200, ((ObjectResult)actionLocalTelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelList.Result).Value);
            List<LocalTel> localTelList = (List<LocalTel>)((OkObjectResult)actionLocalTelList.Result).Value;

            count = localTelList.Count();

            LocalTel localTel = GetFilledRandomLocalTel("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTel.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTel.TelID   (Int32)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelID = 0;

            actionLocalTel = await LocalTelDBService.Put(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelID = 10000000;
            actionLocalTel = await LocalTelDBService.Put(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Tel)]
            // localTel.TelTVItemID   (Int32)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelTVItemID = 0;
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelTVItemID = 1;
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // localTel.TelNumber   (String)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("TelNumber");
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelNumber = GetRandomString("", 51);
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);
            //Assert.AreEqual(count, localTelDBService.GetLocalTelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTel.TelType   (TelTypeEnum)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.TelType = (TelTypeEnum)1000000;
             actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTel.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.LastUpdateDate_UTC = new DateTime();
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);
            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTel.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.LastUpdateContactTVItemID = 0;
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

            localTel = null;
            localTel = GetFilledRandomLocalTel("");
            localTel.LastUpdateContactTVItemID = 1;
            actionLocalTel = await LocalTelDBService.Post(localTel);
            Assert.IsType<BadRequestObjectResult>(actionLocalTel.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTel
            var actionLocalTelAdded = await LocalTelDBService.Post(localTel);
            Assert.Equal(200, ((ObjectResult)actionLocalTelAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelAdded.Result).Value);
            LocalTel localTelAdded = (LocalTel)((OkObjectResult)actionLocalTelAdded.Result).Value;
            Assert.NotNull(localTelAdded);

            // List<LocalTel>
            var actionLocalTelList = await LocalTelDBService.GetLocalTelList();
            Assert.Equal(200, ((ObjectResult)actionLocalTelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelList.Result).Value);
            List<LocalTel> localTelList = (List<LocalTel>)((OkObjectResult)actionLocalTelList.Result).Value;

            int count = ((List<LocalTel>)((OkObjectResult)actionLocalTelList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTel> with skip and take
            var actionLocalTelListSkipAndTake = await LocalTelDBService.GetLocalTelList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTelListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelListSkipAndTake.Result).Value);
            List<LocalTel> localTelListSkipAndTake = (List<LocalTel>)((OkObjectResult)actionLocalTelListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTel>)((OkObjectResult)actionLocalTelListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTelList[0].TelID == localTelListSkipAndTake[0].TelID);

            // Get LocalTel With TelID
            var actionLocalTelGet = await LocalTelDBService.GetLocalTelWithTelID(localTelList[0].TelID);
            Assert.Equal(200, ((ObjectResult)actionLocalTelGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelGet.Result).Value);
            LocalTel localTelGet = (LocalTel)((OkObjectResult)actionLocalTelGet.Result).Value;
            Assert.NotNull(localTelGet);
            Assert.Equal(localTelGet.TelID, localTelList[0].TelID);

            // Put LocalTel
            var actionLocalTelUpdated = await LocalTelDBService.Put(localTel);
            Assert.Equal(200, ((ObjectResult)actionLocalTelUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelUpdated.Result).Value);
            LocalTel localTelUpdated = (LocalTel)((OkObjectResult)actionLocalTelUpdated.Result).Value;
            Assert.NotNull(localTelUpdated);

            // Delete LocalTel
            var actionLocalTelDeleted = await LocalTelDBService.Delete(localTel.TelID);
            Assert.Equal(200, ((ObjectResult)actionLocalTelDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTelDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTelDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTelDBService, LocalTelDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTelDBService = Provider.GetService<ILocalTelDBService>();
            Assert.NotNull(LocalTelDBService);

            return await Task.FromResult(true);
        }
        private LocalTel GetFilledRandomLocalTel(string OmitPropName)
        {
            LocalTel localTel = new LocalTel();

            if (OmitPropName != "LocalDBCommand") localTel.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TelTVItemID") localTel.TelTVItemID = 55;
            if (OmitPropName != "TelNumber") localTel.TelNumber = GetRandomString("", 5);
            if (OmitPropName != "TelType") localTel.TelType = (TelTypeEnum)GetRandomEnumType(typeof(TelTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localTel.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTel.LastUpdateContactTVItemID = 2;



            return localTel;
        }
        private void CheckLocalTelFields(List<LocalTel> localTelList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localTelList[0].TelNumber));
        }

        #endregion Functions private
    }
}
