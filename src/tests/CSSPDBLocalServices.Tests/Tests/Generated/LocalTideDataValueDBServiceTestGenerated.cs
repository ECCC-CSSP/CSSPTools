/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTideDataValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTideDataValueDBService LocalTideDataValueDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTideDataValue localTideDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideDataValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideDataValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideDataValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTideDataValue = GetFilledRandomLocalTideDataValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideDataValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTideDataValueList = await LocalTideDataValueDBService.GetLocalTideDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueList.Result).Value);
            List<LocalTideDataValue> localTideDataValueList = (List<LocalTideDataValue>)((OkObjectResult)actionLocalTideDataValueList.Result).Value;

            count = localTideDataValueList.Count();

            LocalTideDataValue localTideDataValue = GetFilledRandomLocalTideDataValue("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTideDataValue.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTideDataValue.TideDataValueID   (Int32)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideDataValueID = 0;

            actionLocalTideDataValue = await LocalTideDataValueDBService.Put(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideDataValueID = 10000000;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Put(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = TideSite)]
            // localTideDataValue.TideSiteTVItemID   (Int32)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideSiteTVItemID = 0;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideSiteTVItemID = 1;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTideDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.DateTime_Local = new DateTime();
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // localTideDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTideDataValue.TideDataType   (TideDataTypeEnum)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideDataType = (TideDataTypeEnum)1000000;
             actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTideDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
             actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localTideDataValue.Depth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Depth_m]

            //CSSPError: Type not implemented [Depth_m]

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.Depth_m = -1.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueService.GetLocalTideDataValueList().Count());
            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.Depth_m = 10001.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueDBService.GetLocalTideDataValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10)]
            // localTideDataValue.UVelocity_m_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [UVelocity_m_s]

            //CSSPError: Type not implemented [UVelocity_m_s]

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.UVelocity_m_s = -1.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueService.GetLocalTideDataValueList().Count());
            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.UVelocity_m_s = 11.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueDBService.GetLocalTideDataValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10)]
            // localTideDataValue.VVelocity_m_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [VVelocity_m_s]

            //CSSPError: Type not implemented [VVelocity_m_s]

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.VVelocity_m_s = -1.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueService.GetLocalTideDataValueList().Count());
            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.VVelocity_m_s = 11.0D;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            //Assert.AreEqual(count, localTideDataValueDBService.GetLocalTideDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localTideDataValue.TideStart   (TideTextEnum)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideStart = (TideTextEnum)1000000;
             actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // localTideDataValue.TideEnd   (TideTextEnum)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.TideEnd = (TideTextEnum)1000000;
             actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTideDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.LastUpdateDate_UTC = new DateTime();
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);
            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTideDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.LastUpdateContactTVItemID = 0;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

            localTideDataValue = null;
            localTideDataValue = GetFilledRandomLocalTideDataValue("");
            localTideDataValue.LastUpdateContactTVItemID = 1;
            actionLocalTideDataValue = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTideDataValue
            var actionLocalTideDataValueAdded = await LocalTideDataValueDBService.Post(localTideDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueAdded.Result).Value);
            LocalTideDataValue localTideDataValueAdded = (LocalTideDataValue)((OkObjectResult)actionLocalTideDataValueAdded.Result).Value;
            Assert.NotNull(localTideDataValueAdded);

            // List<LocalTideDataValue>
            var actionLocalTideDataValueList = await LocalTideDataValueDBService.GetLocalTideDataValueList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueList.Result).Value);
            List<LocalTideDataValue> localTideDataValueList = (List<LocalTideDataValue>)((OkObjectResult)actionLocalTideDataValueList.Result).Value;

            int count = ((List<LocalTideDataValue>)((OkObjectResult)actionLocalTideDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTideDataValue> with skip and take
            var actionLocalTideDataValueListSkipAndTake = await LocalTideDataValueDBService.GetLocalTideDataValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueListSkipAndTake.Result).Value);
            List<LocalTideDataValue> localTideDataValueListSkipAndTake = (List<LocalTideDataValue>)((OkObjectResult)actionLocalTideDataValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTideDataValue>)((OkObjectResult)actionLocalTideDataValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTideDataValueList[0].TideDataValueID == localTideDataValueListSkipAndTake[0].TideDataValueID);

            // Get LocalTideDataValue With TideDataValueID
            var actionLocalTideDataValueGet = await LocalTideDataValueDBService.GetLocalTideDataValueWithTideDataValueID(localTideDataValueList[0].TideDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueGet.Result).Value);
            LocalTideDataValue localTideDataValueGet = (LocalTideDataValue)((OkObjectResult)actionLocalTideDataValueGet.Result).Value;
            Assert.NotNull(localTideDataValueGet);
            Assert.Equal(localTideDataValueGet.TideDataValueID, localTideDataValueList[0].TideDataValueID);

            // Put LocalTideDataValue
            var actionLocalTideDataValueUpdated = await LocalTideDataValueDBService.Put(localTideDataValue);
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueUpdated.Result).Value);
            LocalTideDataValue localTideDataValueUpdated = (LocalTideDataValue)((OkObjectResult)actionLocalTideDataValueUpdated.Result).Value;
            Assert.NotNull(localTideDataValueUpdated);

            // Delete LocalTideDataValue
            var actionLocalTideDataValueDeleted = await LocalTideDataValueDBService.Delete(localTideDataValue.TideDataValueID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTideDataValueDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTideDataValueDBService, LocalTideDataValueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTideDataValueDBService = Provider.GetService<ILocalTideDataValueDBService>();
            Assert.NotNull(LocalTideDataValueDBService);

            return await Task.FromResult(true);
        }
        private LocalTideDataValue GetFilledRandomLocalTideDataValue(string OmitPropName)
        {
            LocalTideDataValue localTideDataValue = new LocalTideDataValue();

            if (OmitPropName != "LocalDBCommand") localTideDataValue.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TideSiteTVItemID") localTideDataValue.TideSiteTVItemID = 38;
            if (OmitPropName != "DateTime_Local") localTideDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") localTideDataValue.Keep = true;
            if (OmitPropName != "TideDataType") localTideDataValue.TideDataType = (TideDataTypeEnum)GetRandomEnumType(typeof(TideDataTypeEnum));
            if (OmitPropName != "StorageDataType") localTideDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "Depth_m") localTideDataValue.Depth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "UVelocity_m_s") localTideDataValue.UVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "VVelocity_m_s") localTideDataValue.VVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "TideStart") localTideDataValue.TideStart = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "TideEnd") localTideDataValue.TideEnd = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "LastUpdateDate_UTC") localTideDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTideDataValue.LastUpdateContactTVItemID = 2;



            return localTideDataValue;
        }
        private void CheckLocalTideDataValueFields(List<LocalTideDataValue> localTideDataValueList)
        {
            if (localTideDataValueList[0].TideStart != null)
            {
                Assert.NotNull(localTideDataValueList[0].TideStart);
            }
            if (localTideDataValueList[0].TideEnd != null)
            {
                Assert.NotNull(localTideDataValueList[0].TideEnd);
            }
        }

        #endregion Functions private
    }
}
