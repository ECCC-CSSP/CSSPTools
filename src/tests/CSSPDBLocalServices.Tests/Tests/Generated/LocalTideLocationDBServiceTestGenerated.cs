/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTideLocationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTideLocationDBService LocalTideLocationDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTideLocation localTideLocation { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideLocationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideLocationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideLocationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTideLocation = GetFilledRandomLocalTideLocation("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideLocation_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTideLocationList = await LocalTideLocationDBService.GetLocalTideLocationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationList.Result).Value);
            List<LocalTideLocation> localTideLocationList = (List<LocalTideLocation>)((OkObjectResult)actionLocalTideLocationList.Result).Value;

            count = localTideLocationList.Count();

            LocalTideLocation localTideLocation = GetFilledRandomLocalTideLocation("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTideLocation.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTideLocation.TideLocationID   (Int32)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.TideLocationID = 0;

            actionLocalTideLocation = await LocalTideLocationDBService.Put(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.TideLocationID = 10000000;
            actionLocalTideLocation = await LocalTideLocationDBService.Put(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localTideLocation.Zone   (Int32)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Zone = -1;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationService.GetLocalTideLocationList().Count());
            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Zone = 10001;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localTideLocation.Name   (String)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("Name");
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Name = GetRandomString("", 101);
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localTideLocation.Prov   (String)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("Prov");
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Prov = GetRandomString("", 101);
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000)]
            // localTideLocation.sid   (Int32)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.sid = -1;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationService.GetLocalTideLocationList().Count());
            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.sid = 100001;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // localTideLocation.Lat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lat]

            //CSSPError: Type not implemented [Lat]

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Lat = -91.0D;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationService.GetLocalTideLocationList().Count());
            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Lat = 91.0D;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // localTideLocation.Lng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lng]

            //CSSPError: Type not implemented [Lng]

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Lng = -181.0D;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationService.GetLocalTideLocationList().Count());
            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.Lng = 181.0D;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            //Assert.AreEqual(count, localTideLocationDBService.GetLocalTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTideLocation.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.LastUpdateDate_UTC = new DateTime();
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);
            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTideLocation.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.LastUpdateContactTVItemID = 0;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

            localTideLocation = null;
            localTideLocation = GetFilledRandomLocalTideLocation("");
            localTideLocation.LastUpdateContactTVItemID = 1;
            actionLocalTideLocation = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideLocation.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTideLocation
            var actionLocalTideLocationAdded = await LocalTideLocationDBService.Post(localTideLocation);
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationAdded.Result).Value);
            LocalTideLocation localTideLocationAdded = (LocalTideLocation)((OkObjectResult)actionLocalTideLocationAdded.Result).Value;
            Assert.NotNull(localTideLocationAdded);

            // List<LocalTideLocation>
            var actionLocalTideLocationList = await LocalTideLocationDBService.GetLocalTideLocationList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationList.Result).Value);
            List<LocalTideLocation> localTideLocationList = (List<LocalTideLocation>)((OkObjectResult)actionLocalTideLocationList.Result).Value;

            int count = ((List<LocalTideLocation>)((OkObjectResult)actionLocalTideLocationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTideLocation> with skip and take
            var actionLocalTideLocationListSkipAndTake = await LocalTideLocationDBService.GetLocalTideLocationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationListSkipAndTake.Result).Value);
            List<LocalTideLocation> localTideLocationListSkipAndTake = (List<LocalTideLocation>)((OkObjectResult)actionLocalTideLocationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTideLocation>)((OkObjectResult)actionLocalTideLocationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTideLocationList[0].TideLocationID == localTideLocationListSkipAndTake[0].TideLocationID);

            // Get LocalTideLocation With TideLocationID
            var actionLocalTideLocationGet = await LocalTideLocationDBService.GetLocalTideLocationWithTideLocationID(localTideLocationList[0].TideLocationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationGet.Result).Value);
            LocalTideLocation localTideLocationGet = (LocalTideLocation)((OkObjectResult)actionLocalTideLocationGet.Result).Value;
            Assert.NotNull(localTideLocationGet);
            Assert.Equal(localTideLocationGet.TideLocationID, localTideLocationList[0].TideLocationID);

            // Put LocalTideLocation
            var actionLocalTideLocationUpdated = await LocalTideLocationDBService.Put(localTideLocation);
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationUpdated.Result).Value);
            LocalTideLocation localTideLocationUpdated = (LocalTideLocation)((OkObjectResult)actionLocalTideLocationUpdated.Result).Value;
            Assert.NotNull(localTideLocationUpdated);

            // Delete LocalTideLocation
            var actionLocalTideLocationDeleted = await LocalTideLocationDBService.Delete(localTideLocation.TideLocationID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideLocationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideLocationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTideLocationDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTideLocationDBService, LocalTideLocationDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTideLocationDBService = Provider.GetService<ILocalTideLocationDBService>();
            Assert.NotNull(LocalTideLocationDBService);

            return await Task.FromResult(true);
        }
        private LocalTideLocation GetFilledRandomLocalTideLocation(string OmitPropName)
        {
            LocalTideLocation localTideLocation = new LocalTideLocation();

            if (OmitPropName != "LocalDBCommand") localTideLocation.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "Zone") localTideLocation.Zone = GetRandomInt(0, 10000);
            if (OmitPropName != "Name") localTideLocation.Name = GetRandomString("", 5);
            if (OmitPropName != "Prov") localTideLocation.Prov = GetRandomString("", 5);
            if (OmitPropName != "sid") localTideLocation.sid = GetRandomInt(0, 100000);
            if (OmitPropName != "Lat") localTideLocation.Lat = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Lng") localTideLocation.Lng = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localTideLocation.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTideLocation.LastUpdateContactTVItemID = 2;



            return localTideLocation;
        }
        private void CheckLocalTideLocationFields(List<LocalTideLocation> localTideLocationList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localTideLocationList[0].Name));
            Assert.False(string.IsNullOrWhiteSpace(localTideLocationList[0].Prov));
        }

        #endregion Functions private
    }
}
