/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalTideSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalTideSiteDBService LocalTideSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalTideSite localTideSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalTideSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localTideSite = GetFilledRandomLocalTideSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalTideSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalTideSiteList = await LocalTideSiteDBService.GetLocalTideSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteList.Result).Value);
            List<LocalTideSite> localTideSiteList = (List<LocalTideSite>)((OkObjectResult)actionLocalTideSiteList.Result).Value;

            count = localTideSiteList.Count();

            LocalTideSite localTideSite = GetFilledRandomLocalTideSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localTideSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localTideSite.TideSiteID   (Int32)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.TideSiteID = 0;

            actionLocalTideSite = await LocalTideSiteDBService.Put(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.TideSiteID = 10000000;
            actionLocalTideSite = await LocalTideSiteDBService.Put(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = TideSite)]
            // localTideSite.TideSiteTVItemID   (Int32)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.TideSiteTVItemID = 0;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.TideSiteTVItemID = 1;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // localTideSite.TideSiteName   (String)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("TideSiteName");
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.TideSiteName = GetRandomString("", 101);
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteDBService.GetLocalTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(2)]
            // [CSSPMinLength(2)]
            // localTideSite.Province   (String)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("Province");
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.Province = GetRandomString("", 1);
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteDBService.GetLocalTideSiteList().Count());
            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.Province = GetRandomString("", 3);
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteDBService.GetLocalTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localTideSite.sid   (Int32)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.sid = -1;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteService.GetLocalTideSiteList().Count());
            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.sid = 10001;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteDBService.GetLocalTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localTideSite.Zone   (Int32)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.Zone = -1;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteService.GetLocalTideSiteList().Count());
            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.Zone = 10001;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            //Assert.AreEqual(count, localTideSiteDBService.GetLocalTideSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localTideSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.LastUpdateDate_UTC = new DateTime();
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);
            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localTideSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.LastUpdateContactTVItemID = 0;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

            localTideSite = null;
            localTideSite = GetFilledRandomLocalTideSite("");
            localTideSite.LastUpdateContactTVItemID = 1;
            actionLocalTideSite = await LocalTideSiteDBService.Post(localTideSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalTideSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalTideSite
            var actionLocalTideSiteAdded = await LocalTideSiteDBService.Post(localTideSite);
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteAdded.Result).Value);
            LocalTideSite localTideSiteAdded = (LocalTideSite)((OkObjectResult)actionLocalTideSiteAdded.Result).Value;
            Assert.NotNull(localTideSiteAdded);

            // List<LocalTideSite>
            var actionLocalTideSiteList = await LocalTideSiteDBService.GetLocalTideSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteList.Result).Value);
            List<LocalTideSite> localTideSiteList = (List<LocalTideSite>)((OkObjectResult)actionLocalTideSiteList.Result).Value;

            int count = ((List<LocalTideSite>)((OkObjectResult)actionLocalTideSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalTideSite> with skip and take
            var actionLocalTideSiteListSkipAndTake = await LocalTideSiteDBService.GetLocalTideSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteListSkipAndTake.Result).Value);
            List<LocalTideSite> localTideSiteListSkipAndTake = (List<LocalTideSite>)((OkObjectResult)actionLocalTideSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalTideSite>)((OkObjectResult)actionLocalTideSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localTideSiteList[0].TideSiteID == localTideSiteListSkipAndTake[0].TideSiteID);

            // Get LocalTideSite With TideSiteID
            var actionLocalTideSiteGet = await LocalTideSiteDBService.GetLocalTideSiteWithTideSiteID(localTideSiteList[0].TideSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteGet.Result).Value);
            LocalTideSite localTideSiteGet = (LocalTideSite)((OkObjectResult)actionLocalTideSiteGet.Result).Value;
            Assert.NotNull(localTideSiteGet);
            Assert.Equal(localTideSiteGet.TideSiteID, localTideSiteList[0].TideSiteID);

            // Put LocalTideSite
            var actionLocalTideSiteUpdated = await LocalTideSiteDBService.Put(localTideSite);
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteUpdated.Result).Value);
            LocalTideSite localTideSiteUpdated = (LocalTideSite)((OkObjectResult)actionLocalTideSiteUpdated.Result).Value;
            Assert.NotNull(localTideSiteUpdated);

            // Delete LocalTideSite
            var actionLocalTideSiteDeleted = await LocalTideSiteDBService.Delete(localTideSite.TideSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalTideSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalTideSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalTideSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalTideSiteDBService, LocalTideSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalTideSiteDBService = Provider.GetService<ILocalTideSiteDBService>();
            Assert.NotNull(LocalTideSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalTideSite GetFilledRandomLocalTideSite(string OmitPropName)
        {
            LocalTideSite localTideSite = new LocalTideSite();

            if (OmitPropName != "LocalDBCommand") localTideSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "TideSiteTVItemID") localTideSite.TideSiteTVItemID = 38;
            if (OmitPropName != "TideSiteName") localTideSite.TideSiteName = GetRandomString("", 5);
            if (OmitPropName != "Province") localTideSite.Province = GetRandomString("", 2);
            if (OmitPropName != "sid") localTideSite.sid = GetRandomInt(0, 10000);
            if (OmitPropName != "Zone") localTideSite.Zone = GetRandomInt(0, 10000);
            if (OmitPropName != "LastUpdateDate_UTC") localTideSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localTideSite.LastUpdateContactTVItemID = 2;



            return localTideSite;
        }
        private void CheckLocalTideSiteFields(List<LocalTideSite> localTideSiteList)
        {
            Assert.False(string.IsNullOrWhiteSpace(localTideSiteList[0].TideSiteName));
            Assert.False(string.IsNullOrWhiteSpace(localTideSiteList[0].Province));
        }

        #endregion Functions private
    }
}
