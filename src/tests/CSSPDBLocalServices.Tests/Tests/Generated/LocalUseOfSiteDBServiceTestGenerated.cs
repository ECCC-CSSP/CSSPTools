/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalUseOfSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalUseOfSiteDBService LocalUseOfSiteDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalUseOfSite localUseOfSite { get; set; }
        #endregion Properties

        #region Constructors
        public LocalUseOfSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalUseOfSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalUseOfSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localUseOfSite = GetFilledRandomLocalUseOfSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalUseOfSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalUseOfSiteList = await LocalUseOfSiteDBService.GetLocalUseOfSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteList.Result).Value);
            List<LocalUseOfSite> localUseOfSiteList = (List<LocalUseOfSite>)((OkObjectResult)actionLocalUseOfSiteList.Result).Value;

            count = localUseOfSiteList.Count();

            LocalUseOfSite localUseOfSite = GetFilledRandomLocalUseOfSite("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localUseOfSite.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localUseOfSite.UseOfSiteID   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.UseOfSiteID = 0;

            actionLocalUseOfSite = await LocalUseOfSiteDBService.Put(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.UseOfSiteID = 10000000;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Put(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite,HydrometricSite,TideSite)]
            // localUseOfSite.SiteTVItemID   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.SiteTVItemID = 0;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.SiteTVItemID = 1;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // localUseOfSite.SubsectorTVItemID   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.SubsectorTVItemID = 0;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.SubsectorTVItemID = 1;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localUseOfSite.TVType   (TVTypeEnum)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.TVType = (TVTypeEnum)1000000;
             actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localUseOfSite.Ordinal   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Ordinal = -1;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Ordinal = 1001;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1980, 2050)]
            // localUseOfSite.StartYear   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.StartYear = 1979;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.StartYear = 2051;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1980, 2050)]
            // localUseOfSite.EndYear   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.EndYear = 1979;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.EndYear = 2051;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // localUseOfSite.UseWeight   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localUseOfSite.Weight_perc   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Weight_perc]

            //CSSPError: Type not implemented [Weight_perc]

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Weight_perc = -1.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Weight_perc = 101.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // localUseOfSite.UseEquation   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localUseOfSite.Param1   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param1]

            //CSSPError: Type not implemented [Param1]

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param1 = -1.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param1 = 101.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localUseOfSite.Param2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param2]

            //CSSPError: Type not implemented [Param2]

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param2 = -1.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param2 = 101.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localUseOfSite.Param3   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param3]

            //CSSPError: Type not implemented [Param3]

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param3 = -1.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param3 = 101.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // localUseOfSite.Param4   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param4]

            //CSSPError: Type not implemented [Param4]

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param4 = -1.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteService.GetLocalUseOfSiteList().Count());
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.Param4 = 101.0D;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            //Assert.AreEqual(count, localUseOfSiteDBService.GetLocalUseOfSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localUseOfSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.LastUpdateDate_UTC = new DateTime();
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);
            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localUseOfSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.LastUpdateContactTVItemID = 0;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

            localUseOfSite = null;
            localUseOfSite = GetFilledRandomLocalUseOfSite("");
            localUseOfSite.LastUpdateContactTVItemID = 1;
            actionLocalUseOfSite = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.IsType<BadRequestObjectResult>(actionLocalUseOfSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalUseOfSite
            var actionLocalUseOfSiteAdded = await LocalUseOfSiteDBService.Post(localUseOfSite);
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteAdded.Result).Value);
            LocalUseOfSite localUseOfSiteAdded = (LocalUseOfSite)((OkObjectResult)actionLocalUseOfSiteAdded.Result).Value;
            Assert.NotNull(localUseOfSiteAdded);

            // List<LocalUseOfSite>
            var actionLocalUseOfSiteList = await LocalUseOfSiteDBService.GetLocalUseOfSiteList();
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteList.Result).Value);
            List<LocalUseOfSite> localUseOfSiteList = (List<LocalUseOfSite>)((OkObjectResult)actionLocalUseOfSiteList.Result).Value;

            int count = ((List<LocalUseOfSite>)((OkObjectResult)actionLocalUseOfSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalUseOfSite> with skip and take
            var actionLocalUseOfSiteListSkipAndTake = await LocalUseOfSiteDBService.GetLocalUseOfSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteListSkipAndTake.Result).Value);
            List<LocalUseOfSite> localUseOfSiteListSkipAndTake = (List<LocalUseOfSite>)((OkObjectResult)actionLocalUseOfSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalUseOfSite>)((OkObjectResult)actionLocalUseOfSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localUseOfSiteList[0].UseOfSiteID == localUseOfSiteListSkipAndTake[0].UseOfSiteID);

            // Get LocalUseOfSite With UseOfSiteID
            var actionLocalUseOfSiteGet = await LocalUseOfSiteDBService.GetLocalUseOfSiteWithUseOfSiteID(localUseOfSiteList[0].UseOfSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteGet.Result).Value);
            LocalUseOfSite localUseOfSiteGet = (LocalUseOfSite)((OkObjectResult)actionLocalUseOfSiteGet.Result).Value;
            Assert.NotNull(localUseOfSiteGet);
            Assert.Equal(localUseOfSiteGet.UseOfSiteID, localUseOfSiteList[0].UseOfSiteID);

            // Put LocalUseOfSite
            var actionLocalUseOfSiteUpdated = await LocalUseOfSiteDBService.Put(localUseOfSite);
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteUpdated.Result).Value);
            LocalUseOfSite localUseOfSiteUpdated = (LocalUseOfSite)((OkObjectResult)actionLocalUseOfSiteUpdated.Result).Value;
            Assert.NotNull(localUseOfSiteUpdated);

            // Delete LocalUseOfSite
            var actionLocalUseOfSiteDeleted = await LocalUseOfSiteDBService.Delete(localUseOfSite.UseOfSiteID);
            Assert.Equal(200, ((ObjectResult)actionLocalUseOfSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalUseOfSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalUseOfSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalUseOfSiteDBService, LocalUseOfSiteDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalUseOfSiteDBService = Provider.GetService<ILocalUseOfSiteDBService>();
            Assert.NotNull(LocalUseOfSiteDBService);

            return await Task.FromResult(true);
        }
        private LocalUseOfSite GetFilledRandomLocalUseOfSite(string OmitPropName)
        {
            LocalUseOfSite localUseOfSite = new LocalUseOfSite();

            if (OmitPropName != "LocalDBCommand") localUseOfSite.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "SiteTVItemID") localUseOfSite.SiteTVItemID = 7;
            if (OmitPropName != "SubsectorTVItemID") localUseOfSite.SubsectorTVItemID = 11;
            if (OmitPropName != "TVType") localUseOfSite.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "Ordinal") localUseOfSite.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "StartYear") localUseOfSite.StartYear = GetRandomInt(1980, 2050);
            if (OmitPropName != "EndYear") localUseOfSite.EndYear = GetRandomInt(1980, 2050);
            if (OmitPropName != "UseWeight") localUseOfSite.UseWeight = true;
            if (OmitPropName != "Weight_perc") localUseOfSite.Weight_perc = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "UseEquation") localUseOfSite.UseEquation = true;
            if (OmitPropName != "Param1") localUseOfSite.Param1 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param2") localUseOfSite.Param2 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param3") localUseOfSite.Param3 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param4") localUseOfSite.Param4 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localUseOfSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localUseOfSite.LastUpdateContactTVItemID = 2;



            return localUseOfSite;
        }
        private void CheckLocalUseOfSiteFields(List<LocalUseOfSite> localUseOfSiteList)
        {
            if (localUseOfSiteList[0].EndYear != null)
            {
                Assert.NotNull(localUseOfSiteList[0].EndYear);
            }
            if (localUseOfSiteList[0].UseWeight != null)
            {
                Assert.NotNull(localUseOfSiteList[0].UseWeight);
            }
            if (localUseOfSiteList[0].Weight_perc != null)
            {
                Assert.NotNull(localUseOfSiteList[0].Weight_perc);
            }
            if (localUseOfSiteList[0].UseEquation != null)
            {
                Assert.NotNull(localUseOfSiteList[0].UseEquation);
            }
            if (localUseOfSiteList[0].Param1 != null)
            {
                Assert.NotNull(localUseOfSiteList[0].Param1);
            }
            if (localUseOfSiteList[0].Param2 != null)
            {
                Assert.NotNull(localUseOfSiteList[0].Param2);
            }
            if (localUseOfSiteList[0].Param3 != null)
            {
                Assert.NotNull(localUseOfSiteList[0].Param3);
            }
            if (localUseOfSiteList[0].Param4 != null)
            {
                Assert.NotNull(localUseOfSiteList[0].Param4);
            }
        }

        #endregion Functions private
    }
}
