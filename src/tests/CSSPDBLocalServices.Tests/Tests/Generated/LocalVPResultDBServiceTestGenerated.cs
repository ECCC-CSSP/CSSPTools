/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBLocalServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBLocalModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using CSSPDBModels;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class LocalVPResultDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ILocalVPResultDBService LocalVPResultDBService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private LocalVPResult localVPResult { get; set; }
        #endregion Properties

        #region Constructors
        public LocalVPResultDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalVPResultDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalVPResultDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            localVPResult = GetFilledRandomLocalVPResult("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task LocalVPResult_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionLocalVPResultList = await LocalVPResultDBService.GetLocalVPResultList();
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultList.Result).Value);
            List<LocalVPResult> localVPResultList = (List<LocalVPResult>)((OkObjectResult)actionLocalVPResultList.Result).Value;

            count = localVPResultList.Count();

            LocalVPResult localVPResult = GetFilledRandomLocalVPResult("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // localVPResult.LocalDBCommand   (LocalDBCommandEnum)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.LocalDBCommand = (LocalDBCommandEnum)1000000;
            var actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // localVPResult.VPResultID   (Int32)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.VPResultID = 0;

            actionLocalVPResult = await LocalVPResultDBService.Put(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.VPResultID = 10000000;
            actionLocalVPResult = await LocalVPResultDBService.Put(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "VPScenario", ExistPlurial = "s", ExistFieldID = "VPScenarioID", AllowableTVtypeList = )]
            // localVPResult.VPScenarioID   (Int32)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.VPScenarioID = 0;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // localVPResult.Ordinal   (Int32)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Ordinal = -1;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Ordinal = 1001;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // localVPResult.Concentration_MPN_100ml   (Int32)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Concentration_MPN_100ml = -1;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Concentration_MPN_100ml = 10000001;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000000)]
            // localVPResult.Dilution   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Dilution]

            //CSSPError: Type not implemented [Dilution]

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Dilution = -1.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.Dilution = 1000001.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // localVPResult.FarFieldWidth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [FarFieldWidth_m]

            //CSSPError: Type not implemented [FarFieldWidth_m]

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.FarFieldWidth_m = -1.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.FarFieldWidth_m = 10001.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000)]
            // localVPResult.DispersionDistance_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DispersionDistance_m]

            //CSSPError: Type not implemented [DispersionDistance_m]

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.DispersionDistance_m = -1.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.DispersionDistance_m = 100001.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // localVPResult.TravelTime_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TravelTime_hour]

            //CSSPError: Type not implemented [TravelTime_hour]

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.TravelTime_hour = -1.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultService.GetLocalVPResultList().Count());
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.TravelTime_hour = 101.0D;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            //Assert.AreEqual(count, localVPResultDBService.GetLocalVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // localVPResult.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.LastUpdateDate_UTC = new DateTime();
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);
            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // localVPResult.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.LastUpdateContactTVItemID = 0;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);

            localVPResult = null;
            localVPResult = GetFilledRandomLocalVPResult("");
            localVPResult.LastUpdateContactTVItemID = 1;
            actionLocalVPResult = await LocalVPResultDBService.Post(localVPResult);
            Assert.IsType<BadRequestObjectResult>(actionLocalVPResult.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post LocalVPResult
            var actionLocalVPResultAdded = await LocalVPResultDBService.Post(localVPResult);
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultAdded.Result).Value);
            LocalVPResult localVPResultAdded = (LocalVPResult)((OkObjectResult)actionLocalVPResultAdded.Result).Value;
            Assert.NotNull(localVPResultAdded);

            // List<LocalVPResult>
            var actionLocalVPResultList = await LocalVPResultDBService.GetLocalVPResultList();
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultList.Result).Value);
            List<LocalVPResult> localVPResultList = (List<LocalVPResult>)((OkObjectResult)actionLocalVPResultList.Result).Value;

            int count = ((List<LocalVPResult>)((OkObjectResult)actionLocalVPResultList.Result).Value).Count();
            Assert.True(count > 0);

            // List<LocalVPResult> with skip and take
            var actionLocalVPResultListSkipAndTake = await LocalVPResultDBService.GetLocalVPResultList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultListSkipAndTake.Result).Value);
            List<LocalVPResult> localVPResultListSkipAndTake = (List<LocalVPResult>)((OkObjectResult)actionLocalVPResultListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<LocalVPResult>)((OkObjectResult)actionLocalVPResultListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(localVPResultList[0].VPResultID == localVPResultListSkipAndTake[0].VPResultID);

            // Get LocalVPResult With VPResultID
            var actionLocalVPResultGet = await LocalVPResultDBService.GetLocalVPResultWithVPResultID(localVPResultList[0].VPResultID);
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultGet.Result).Value);
            LocalVPResult localVPResultGet = (LocalVPResult)((OkObjectResult)actionLocalVPResultGet.Result).Value;
            Assert.NotNull(localVPResultGet);
            Assert.Equal(localVPResultGet.VPResultID, localVPResultList[0].VPResultID);

            // Put LocalVPResult
            var actionLocalVPResultUpdated = await LocalVPResultDBService.Put(localVPResult);
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultUpdated.Result).Value);
            LocalVPResult localVPResultUpdated = (LocalVPResult)((OkObjectResult)actionLocalVPResultUpdated.Result).Value;
            Assert.NotNull(localVPResultUpdated);

            // Delete LocalVPResult
            var actionLocalVPResultDeleted = await LocalVPResultDBService.Delete(localVPResult.VPResultID);
            Assert.Equal(200, ((ObjectResult)actionLocalVPResultDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionLocalVPResultDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionLocalVPResultDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();
            /* ---------------------------------------------------------------------------------
             * using CSSPDBLocalContext
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBLocal = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocal);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocal);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILocalVPResultDBService, LocalVPResultDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            LocalVPResultDBService = Provider.GetService<ILocalVPResultDBService>();
            Assert.NotNull(LocalVPResultDBService);

            return await Task.FromResult(true);
        }
        private LocalVPResult GetFilledRandomLocalVPResult(string OmitPropName)
        {
            LocalVPResult localVPResult = new LocalVPResult();

            if (OmitPropName != "LocalDBCommand") localVPResult.LocalDBCommand = (LocalDBCommandEnum)GetRandomEnumType(typeof(LocalDBCommandEnum));
            if (OmitPropName != "VPScenarioID") localVPResult.VPScenarioID = 0;
            if (OmitPropName != "Ordinal") localVPResult.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "Concentration_MPN_100ml") localVPResult.Concentration_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "Dilution") localVPResult.Dilution = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "FarFieldWidth_m") localVPResult.FarFieldWidth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "DispersionDistance_m") localVPResult.DispersionDistance_m = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "TravelTime_hour") localVPResult.TravelTime_hour = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "LastUpdateDate_UTC") localVPResult.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") localVPResult.LastUpdateContactTVItemID = 2;



            return localVPResult;
        }
        private void CheckLocalVPResultFields(List<LocalVPResult> localVPResultList)
        {
        }

        #endregion Functions private
    }
}
