/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class MWQMAnalysisReportParameterDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IMWQMAnalysisReportParameterDBLocalService MWQMAnalysisReportParameterDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private MWQMAnalysisReportParameter mwqmAnalysisReportParameter { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMAnalysisReportParameterDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMAnalysisReportParameterDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMAnalysisReportParameter_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMWQMAnalysisReportParameterList = await MWQMAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList();
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterList.Result).Value);
            List<MWQMAnalysisReportParameter> mwqmAnalysisReportParameterList = (List<MWQMAnalysisReportParameter>)((OkObjectResult)actionMWQMAnalysisReportParameterList.Result).Value;

            count = mwqmAnalysisReportParameterList.Count();

            MWQMAnalysisReportParameter mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mwqmAnalysisReportParameter.MWQMAnalysisReportParameterID   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.MWQMAnalysisReportParameterID = 0;

            var actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Put(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.MWQMAnalysisReportParameterID = 10000000;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Put(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // mwqmAnalysisReportParameter.SubsectorTVItemID   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.SubsectorTVItemID = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.SubsectorTVItemID = 1;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // [CSSPMinLength(5)]
            // mwqmAnalysisReportParameter.AnalysisName   (String)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("AnalysisName");
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.AnalysisName = GetRandomString("", 4);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.AnalysisName = GetRandomString("", 251);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1980, 2050)]
            // mwqmAnalysisReportParameter.AnalysisReportYear   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.AnalysisReportYear = 1979;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.AnalysisReportYear = 2051;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mwqmAnalysisReportParameter.StartDate   (DateTime)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.StartDate = new DateTime();
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.StartDate = new DateTime(1979, 1, 1);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // [CSSPBigger(OtherField = StartDate)]
            // mwqmAnalysisReportParameter.EndDate   (DateTime)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.EndDate = new DateTime();
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.EndDate = new DateTime(1979, 1, 1);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmAnalysisReportParameter.AnalysisCalculationType   (AnalysisCalculationTypeEnum)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.AnalysisCalculationType = (AnalysisCalculationTypeEnum)1000000;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 1000)]
            // mwqmAnalysisReportParameter.NumberOfRuns   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.NumberOfRuns = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.NumberOfRuns = 1001;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // mwqmAnalysisReportParameter.FullYear   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 20)]
            // mwqmAnalysisReportParameter.SalinityHighlightDeviationFromAverage   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [SalinityHighlightDeviationFromAverage]

            //CSSPError: Type not implemented [SalinityHighlightDeviationFromAverage]

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.SalinityHighlightDeviationFromAverage = 0.0D;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.SalinityHighlightDeviationFromAverage = 21.0D;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 5)]
            // mwqmAnalysisReportParameter.ShortRangeNumberOfDays   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.ShortRangeNumberOfDays = -1;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.ShortRangeNumberOfDays = 6;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(2, 7)]
            // mwqmAnalysisReportParameter.MidRangeNumberOfDays   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.MidRangeNumberOfDays = 1;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.MidRangeNumberOfDays = 8;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.DryLimit24h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit24h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit24h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.DryLimit48h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit48h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit48h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.DryLimit72h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit72h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit72h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.DryLimit96h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit96h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.DryLimit96h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.WetLimit24h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit24h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit24h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.WetLimit48h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit48h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit48h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.WetLimit72h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit72h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit72h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 100)]
            // mwqmAnalysisReportParameter.WetLimit96h   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit96h = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterService.GetMWQMAnalysisReportParameterList().Count());
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.WetLimit96h = 101;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // mwqmAnalysisReportParameter.RunsToOmit   (String)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("RunsToOmit");
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.RunsToOmit = GetRandomString("", 251);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(20)]
            // mwqmAnalysisReportParameter.ShowDataTypes   (String)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.ShowDataTypes = GetRandomString("", 21);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            //Assert.AreEqual(count, mwqmAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // mwqmAnalysisReportParameter.ExcelTVFileTVItemID   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.ExcelTVFileTVItemID = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.ExcelTVFileTVItemID = 1;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmAnalysisReportParameter.Command   (AnalysisReportExportCommandEnum)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.Command = (AnalysisReportExportCommandEnum)1000000;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mwqmAnalysisReportParameter.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.LastUpdateDate_UTC = new DateTime();
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);
            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mwqmAnalysisReportParameter.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.LastUpdateContactTVItemID = 0;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

            mwqmAnalysisReportParameter = null;
            mwqmAnalysisReportParameter = GetFilledRandomMWQMAnalysisReportParameter("");
            mwqmAnalysisReportParameter.LastUpdateContactTVItemID = 1;
            actionMWQMAnalysisReportParameter = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.IsType<BadRequestObjectResult>(actionMWQMAnalysisReportParameter.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post MWQMAnalysisReportParameter
            var actionMWQMAnalysisReportParameterAdded = await MWQMAnalysisReportParameterDBLocalService.Post(mwqmAnalysisReportParameter);
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterAdded.Result).Value);
            MWQMAnalysisReportParameter mwqmAnalysisReportParameterAdded = (MWQMAnalysisReportParameter)((OkObjectResult)actionMWQMAnalysisReportParameterAdded.Result).Value;
            Assert.NotNull(mwqmAnalysisReportParameterAdded);

            // List<MWQMAnalysisReportParameter>
            var actionMWQMAnalysisReportParameterList = await MWQMAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList();
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterList.Result).Value);
            List<MWQMAnalysisReportParameter> mwqmAnalysisReportParameterList = (List<MWQMAnalysisReportParameter>)((OkObjectResult)actionMWQMAnalysisReportParameterList.Result).Value;

            int count = ((List<MWQMAnalysisReportParameter>)((OkObjectResult)actionMWQMAnalysisReportParameterList.Result).Value).Count();
            Assert.True(count > 0);

            // List<MWQMAnalysisReportParameter> with skip and take
            var actionMWQMAnalysisReportParameterListSkipAndTake = await MWQMAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterListSkipAndTake.Result).Value);
            List<MWQMAnalysisReportParameter> mwqmAnalysisReportParameterListSkipAndTake = (List<MWQMAnalysisReportParameter>)((OkObjectResult)actionMWQMAnalysisReportParameterListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<MWQMAnalysisReportParameter>)((OkObjectResult)actionMWQMAnalysisReportParameterListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(mwqmAnalysisReportParameterList[0].MWQMAnalysisReportParameterID == mwqmAnalysisReportParameterListSkipAndTake[0].MWQMAnalysisReportParameterID);

            // Get MWQMAnalysisReportParameter With MWQMAnalysisReportParameterID
            var actionMWQMAnalysisReportParameterGet = await MWQMAnalysisReportParameterDBLocalService.GetMWQMAnalysisReportParameterWithMWQMAnalysisReportParameterID(mwqmAnalysisReportParameterList[0].MWQMAnalysisReportParameterID);
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterGet.Result).Value);
            MWQMAnalysisReportParameter mwqmAnalysisReportParameterGet = (MWQMAnalysisReportParameter)((OkObjectResult)actionMWQMAnalysisReportParameterGet.Result).Value;
            Assert.NotNull(mwqmAnalysisReportParameterGet);
            Assert.Equal(mwqmAnalysisReportParameterGet.MWQMAnalysisReportParameterID, mwqmAnalysisReportParameterList[0].MWQMAnalysisReportParameterID);

            // Put MWQMAnalysisReportParameter
            var actionMWQMAnalysisReportParameterUpdated = await MWQMAnalysisReportParameterDBLocalService.Put(mwqmAnalysisReportParameter);
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterUpdated.Result).Value);
            MWQMAnalysisReportParameter mwqmAnalysisReportParameterUpdated = (MWQMAnalysisReportParameter)((OkObjectResult)actionMWQMAnalysisReportParameterUpdated.Result).Value;
            Assert.NotNull(mwqmAnalysisReportParameterUpdated);

            // Delete MWQMAnalysisReportParameter
            var actionMWQMAnalysisReportParameterDeleted = await MWQMAnalysisReportParameterDBLocalService.Delete(mwqmAnalysisReportParameter.MWQMAnalysisReportParameterID);
            Assert.Equal(200, ((ObjectResult)actionMWQMAnalysisReportParameterDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMAnalysisReportParameterDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMWQMAnalysisReportParameterDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMWQMAnalysisReportParameterDBLocalService, MWQMAnalysisReportParameterDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            MWQMAnalysisReportParameterDBLocalService = Provider.GetService<IMWQMAnalysisReportParameterDBLocalService>();
            Assert.NotNull(MWQMAnalysisReportParameterDBLocalService);

            return await Task.FromResult(true);
        }
        private MWQMAnalysisReportParameter GetFilledRandomMWQMAnalysisReportParameter(string OmitPropName)
        {
            MWQMAnalysisReportParameter mwqmAnalysisReportParameter = new MWQMAnalysisReportParameter();

            if (OmitPropName != "SubsectorTVItemID") mwqmAnalysisReportParameter.SubsectorTVItemID = 11;
            if (OmitPropName != "AnalysisName") mwqmAnalysisReportParameter.AnalysisName = GetRandomString("", 10);
            if (OmitPropName != "AnalysisReportYear") mwqmAnalysisReportParameter.AnalysisReportYear = GetRandomInt(1980, 2050);
            if (OmitPropName != "StartDate") mwqmAnalysisReportParameter.StartDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDate") mwqmAnalysisReportParameter.EndDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "AnalysisCalculationType") mwqmAnalysisReportParameter.AnalysisCalculationType = (AnalysisCalculationTypeEnum)GetRandomEnumType(typeof(AnalysisCalculationTypeEnum));
            if (OmitPropName != "NumberOfRuns") mwqmAnalysisReportParameter.NumberOfRuns = GetRandomInt(1, 1000);
            if (OmitPropName != "FullYear") mwqmAnalysisReportParameter.FullYear = true;
            if (OmitPropName != "SalinityHighlightDeviationFromAverage") mwqmAnalysisReportParameter.SalinityHighlightDeviationFromAverage = GetRandomDouble(1.0D, 20.0D);
            if (OmitPropName != "ShortRangeNumberOfDays") mwqmAnalysisReportParameter.ShortRangeNumberOfDays = GetRandomInt(0, 5);
            if (OmitPropName != "MidRangeNumberOfDays") mwqmAnalysisReportParameter.MidRangeNumberOfDays = GetRandomInt(2, 7);
            if (OmitPropName != "DryLimit24h") mwqmAnalysisReportParameter.DryLimit24h = GetRandomInt(1, 100);
            if (OmitPropName != "DryLimit48h") mwqmAnalysisReportParameter.DryLimit48h = GetRandomInt(1, 100);
            if (OmitPropName != "DryLimit72h") mwqmAnalysisReportParameter.DryLimit72h = GetRandomInt(1, 100);
            if (OmitPropName != "DryLimit96h") mwqmAnalysisReportParameter.DryLimit96h = GetRandomInt(1, 100);
            if (OmitPropName != "WetLimit24h") mwqmAnalysisReportParameter.WetLimit24h = GetRandomInt(1, 100);
            if (OmitPropName != "WetLimit48h") mwqmAnalysisReportParameter.WetLimit48h = GetRandomInt(1, 100);
            if (OmitPropName != "WetLimit72h") mwqmAnalysisReportParameter.WetLimit72h = GetRandomInt(1, 100);
            if (OmitPropName != "WetLimit96h") mwqmAnalysisReportParameter.WetLimit96h = GetRandomInt(1, 100);
            if (OmitPropName != "RunsToOmit") mwqmAnalysisReportParameter.RunsToOmit = GetRandomString("", 5);
            if (OmitPropName != "ShowDataTypes") mwqmAnalysisReportParameter.ShowDataTypes = GetRandomString("", 5);
            if (OmitPropName != "ExcelTVFileTVItemID") mwqmAnalysisReportParameter.ExcelTVFileTVItemID = 42;
            if (OmitPropName != "Command") mwqmAnalysisReportParameter.Command = (AnalysisReportExportCommandEnum)GetRandomEnumType(typeof(AnalysisReportExportCommandEnum));
            if (OmitPropName != "LastUpdateDate_UTC") mwqmAnalysisReportParameter.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mwqmAnalysisReportParameter.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 11, TVLevel = 5, TVPath = "p1p5p6p9p10p11", TVType = (TVTypeEnum)20, ParentID = 10, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 18, 53, 40), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 42, TVLevel = 5, TVPath = "p1p5p6p39p41p42", TVType = (TVTypeEnum)8, ParentID = 41, IsActive = true, LastUpdateDate_UTC = new DateTime(2016, 5, 5, 17, 18, 26), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return mwqmAnalysisReportParameter;
        }
        private void CheckMWQMAnalysisReportParameterFields(List<MWQMAnalysisReportParameter> mwqmAnalysisReportParameterList)
        {
            Assert.False(string.IsNullOrWhiteSpace(mwqmAnalysisReportParameterList[0].AnalysisName));
            if (mwqmAnalysisReportParameterList[0].AnalysisReportYear != null)
            {
                Assert.NotNull(mwqmAnalysisReportParameterList[0].AnalysisReportYear);
            }
            Assert.False(string.IsNullOrWhiteSpace(mwqmAnalysisReportParameterList[0].RunsToOmit));
            if (!string.IsNullOrWhiteSpace(mwqmAnalysisReportParameterList[0].ShowDataTypes))
            {
                Assert.False(string.IsNullOrWhiteSpace(mwqmAnalysisReportParameterList[0].ShowDataTypes));
            }
            if (mwqmAnalysisReportParameterList[0].ExcelTVFileTVItemID != null)
            {
                Assert.NotNull(mwqmAnalysisReportParameterList[0].ExcelTVFileTVItemID);
            }
        }

        #endregion Functions private
    }
}
