/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class MWQMSampleLanguageDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IMWQMSampleLanguageDBLocalService MWQMSampleLanguageDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private MWQMSampleLanguage mwqmSampleLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSampleLanguageDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSampleLanguageDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSampleLanguageDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSampleLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMWQMSampleLanguageList = await MWQMSampleLanguageDBLocalService.GetMWQMSampleLanguageList();
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageList.Result).Value);
            List<MWQMSampleLanguage> mwqmSampleLanguageList = (List<MWQMSampleLanguage>)((OkObjectResult)actionMWQMSampleLanguageList.Result).Value;

            count = mwqmSampleLanguageList.Count();

            MWQMSampleLanguage mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mwqmSampleLanguage.MWQMSampleLanguageID   (Int32)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.MWQMSampleLanguageID = 0;

            var actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Put(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.MWQMSampleLanguageID = 10000000;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Put(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MWQMSample", ExistPlurial = "s", ExistFieldID = "MWQMSampleID", AllowableTVtypeList = )]
            // mwqmSampleLanguage.MWQMSampleID   (Int32)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.MWQMSampleID = 0;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmSampleLanguage.Language   (LanguageEnum)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.Language = (LanguageEnum)1000000;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // mwqmSampleLanguage.MWQMSampleNote   (String)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("MWQMSampleNote");
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmSampleLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mwqmSampleLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.LastUpdateDate_UTC = new DateTime();
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);
            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mwqmSampleLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.LastUpdateContactTVItemID = 0;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);

            mwqmSampleLanguage = null;
            mwqmSampleLanguage = GetFilledRandomMWQMSampleLanguage("");
            mwqmSampleLanguage.LastUpdateContactTVItemID = 1;
            actionMWQMSampleLanguage = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSampleLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post MWQMSampleLanguage
            var actionMWQMSampleLanguageAdded = await MWQMSampleLanguageDBLocalService.Post(mwqmSampleLanguage);
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageAdded.Result).Value);
            MWQMSampleLanguage mwqmSampleLanguageAdded = (MWQMSampleLanguage)((OkObjectResult)actionMWQMSampleLanguageAdded.Result).Value;
            Assert.NotNull(mwqmSampleLanguageAdded);

            // List<MWQMSampleLanguage>
            var actionMWQMSampleLanguageList = await MWQMSampleLanguageDBLocalService.GetMWQMSampleLanguageList();
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageList.Result).Value);
            List<MWQMSampleLanguage> mwqmSampleLanguageList = (List<MWQMSampleLanguage>)((OkObjectResult)actionMWQMSampleLanguageList.Result).Value;

            int count = ((List<MWQMSampleLanguage>)((OkObjectResult)actionMWQMSampleLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // Get MWQMSampleLanguage With MWQMSampleLanguageID
            var actionMWQMSampleLanguageGet = await MWQMSampleLanguageDBLocalService.GetMWQMSampleLanguageWithMWQMSampleLanguageID(mwqmSampleLanguageList[0].MWQMSampleLanguageID);
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageGet.Result).Value);
            MWQMSampleLanguage mwqmSampleLanguageGet = (MWQMSampleLanguage)((OkObjectResult)actionMWQMSampleLanguageGet.Result).Value;
            Assert.NotNull(mwqmSampleLanguageGet);
            Assert.Equal(mwqmSampleLanguageGet.MWQMSampleLanguageID, mwqmSampleLanguageList[0].MWQMSampleLanguageID);

            // Put MWQMSampleLanguage
            var actionMWQMSampleLanguageUpdated = await MWQMSampleLanguageDBLocalService.Put(mwqmSampleLanguage);
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageUpdated.Result).Value);
            MWQMSampleLanguage mwqmSampleLanguageUpdated = (MWQMSampleLanguage)((OkObjectResult)actionMWQMSampleLanguageUpdated.Result).Value;
            Assert.NotNull(mwqmSampleLanguageUpdated);

            // Delete MWQMSampleLanguage
            var actionMWQMSampleLanguageDeleted = await MWQMSampleLanguageDBLocalService.Delete(mwqmSampleLanguage.MWQMSampleLanguageID);
            Assert.Equal(200, ((ObjectResult)actionMWQMSampleLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSampleLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMWQMSampleLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMWQMSampleLanguageDBLocalService, MWQMSampleLanguageDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            MWQMSampleLanguageDBLocalService = Provider.GetService<IMWQMSampleLanguageDBLocalService>();
            Assert.NotNull(MWQMSampleLanguageDBLocalService);

            return await Task.FromResult(true);
        }
        private MWQMSampleLanguage GetFilledRandomMWQMSampleLanguage(string OmitPropName)
        {
            MWQMSampleLanguage mwqmSampleLanguage = new MWQMSampleLanguage();

            if (OmitPropName != "MWQMSampleID") mwqmSampleLanguage.MWQMSampleID = 1;
            if (OmitPropName != "Language") mwqmSampleLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "MWQMSampleNote") mwqmSampleLanguage.MWQMSampleNote = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatus") mwqmSampleLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") mwqmSampleLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mwqmSampleLanguage.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.MWQMSamples.Add(new MWQMSample() { MWQMSampleID = 1, MWQMSiteTVItemID = 44, MWQMRunTVItemID = 50, SampleDateTime_Local = new DateTime(2017, 6, 21, 7, 59, 0), TimeText = null, Depth_m = null, FecCol_MPN_100ml = 49, Salinity_PPT = 12, WaterTemp_C = 19, PH = null, SampleTypesText = "109,", SampleType_old = null, Tube_10 = 5, Tube_1_0 = 1, Tube_0_1 = 0, ProcessedBy = null, UseForOpenData = true, LastUpdateDate_UTC = new DateTime(2017, 6, 28, 12, 41, 37), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return mwqmSampleLanguage;
        }
        private void CheckMWQMSampleLanguageFields(List<MWQMSampleLanguage> mwqmSampleLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(mwqmSampleLanguageList[0].MWQMSampleNote));
        }

        #endregion Functions private
    }
}
