/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;
using System.Threading;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class PolSourceGroupingLanguageDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IPolSourceGroupingLanguageDBLocalService PolSourceGroupingLanguageDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbLocalIM { get; set; }
        private PolSourceGroupingLanguage polSourceGroupingLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceGroupingLanguageDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DBLocal]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguageDBLocal_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DBLocal]

        #region Tests Generated [DBLocal] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguageDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated [DBLocal] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionPolSourceGroupingLanguageList = await PolSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value);
            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = (List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value;

            count = polSourceGroupingLanguageList.Count();

            PolSourceGroupingLanguage polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // polSourceGroupingLanguage.PolSourceGroupingLanguageID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingLanguageID = 0;

            var actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Put(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingLanguageID = 10000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Put(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "PolSourceGrouping", ExistPlurial = "s", ExistFieldID = "PolSourceGroupingID", AllowableTVtypeList = )]
            // polSourceGroupingLanguage.PolSourceGroupingID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingID = 0;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.Language   (LanguageEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Language = (LanguageEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.SourceName   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("SourceName");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceName = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // polSourceGroupingLanguage.SourceNameOrder   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceNameOrder = -1;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());
            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceNameOrder = 1001;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusSourceName   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // polSourceGroupingLanguage.Init   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Init");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Init = GetRandomString("", 51);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusInit   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Description   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Description");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Description = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusDescription   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Report   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Report");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Report = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusReport   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Text   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Text");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Text = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusText   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceGroupingLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime();
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceGroupingLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateContactTVItemID = 0;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateContactTVItemID = 1;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageAdded = await PolSourceGroupingLanguageDBLocalService.Post(polSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageAdded.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageAdded = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageAdded.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageAdded);

            // List<PolSourceGroupingLanguage>
            var actionPolSourceGroupingLanguageList = await PolSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value);
            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = (List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value;

            int count = ((List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // Get PolSourceGroupingLanguage With PolSourceGroupingLanguageID
            var actionPolSourceGroupingLanguageGet = await PolSourceGroupingLanguageDBLocalService.GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageGet.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageGet = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageGet.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageGet);
            Assert.Equal(polSourceGroupingLanguageGet.PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);

            // Put PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageUpdated = await PolSourceGroupingLanguageDBLocalService.Put(polSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageUpdated.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageUpdated = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageUpdated.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageUpdated);

            // Delete PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageDeleted = await PolSourceGroupingLanguageDBLocalService.Delete(polSourceGroupingLanguage.PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionPolSourceGroupingLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IPolSourceGroupingLanguageDBLocalService, PolSourceGroupingLanguageDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            dbLocalIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbLocalIM);

            PolSourceGroupingLanguageDBLocalService = Provider.GetService<IPolSourceGroupingLanguageDBLocalService>();
            Assert.NotNull(PolSourceGroupingLanguageDBLocalService);

            return await Task.FromResult(true);
        }
        private PolSourceGroupingLanguage GetFilledRandomPolSourceGroupingLanguage(string OmitPropName)
        {
            PolSourceGroupingLanguage polSourceGroupingLanguage = new PolSourceGroupingLanguage();

            if (OmitPropName != "PolSourceGroupingID") polSourceGroupingLanguage.PolSourceGroupingID = 1;
            if (OmitPropName != "Language") polSourceGroupingLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "SourceName") polSourceGroupingLanguage.SourceName = GetRandomString("", 5);
            if (OmitPropName != "SourceNameOrder") polSourceGroupingLanguage.SourceNameOrder = GetRandomInt(0, 1000);
            if (OmitPropName != "TranslationStatusSourceName") polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Init") polSourceGroupingLanguage.Init = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusInit") polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Description") polSourceGroupingLanguage.Description = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusDescription") polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Report") polSourceGroupingLanguage.Report = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusReport") polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Text") polSourceGroupingLanguage.Text = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusText") polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceGroupingLanguage.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocalIM.PolSourceGroupings.Add(new PolSourceGrouping() { PolSourceGroupingID = 1, CSSPID = 10003, GroupName = "FirstGroupName", Child = "FirstChild", Hide = "FirstHide", LastUpdateDate_UTC = new DateTime(2020, 9, 3, 9, 17, 8), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocalIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocalIM.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return polSourceGroupingLanguage;
        }
        private void CheckPolSourceGroupingLanguageFields(List<PolSourceGroupingLanguage> polSourceGroupingLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].SourceName));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Init));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Description));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Report));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Text));
        }

        #endregion Functions private
    }
}
