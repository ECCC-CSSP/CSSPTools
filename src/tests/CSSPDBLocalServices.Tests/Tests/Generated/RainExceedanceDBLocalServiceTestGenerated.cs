/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class RainExceedanceDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IRainExceedanceDBLocalService RainExceedanceDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private RainExceedance rainExceedance { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedanceDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            rainExceedance = GetFilledRandomRainExceedance("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedance_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionRainExceedanceList = await RainExceedanceDBLocalService.GetRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceList.Result).Value);
            List<RainExceedance> rainExceedanceList = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value;

            count = rainExceedanceList.Count();

            RainExceedance rainExceedance = GetFilledRandomRainExceedance("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // rainExceedance.RainExceedanceID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceID = 0;

            var actionRainExceedance = await RainExceedanceDBLocalService.Put(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceID = 10000000;
            actionRainExceedance = await RainExceedanceDBLocalService.Put(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
            // rainExceedance.RainExceedanceTVItemID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceTVItemID = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceTVItemID = 1;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // rainExceedance.StartMonth   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartMonth = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartMonth = 13;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBLocalService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // rainExceedance.StartDay   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartDay = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartDay = 32;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBLocalService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // rainExceedance.EndMonth   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndMonth = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndMonth = 13;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBLocalService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // rainExceedance.EndDay   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndDay = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndDay = 32;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBLocalService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 300)]
            // rainExceedance.RainMaximum_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainMaximum_mm]

            //CSSPError: Type not implemented [RainMaximum_mm]

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainMaximum_mm = -1.0D;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainMaximum_mm = 301.0D;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBLocalService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // rainExceedance.StakeholdersEmailDistributionListID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StakeholdersEmailDistributionListID = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // rainExceedance.OnlyStaffEmailDistributionListID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.OnlyStaffEmailDistributionListID = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // rainExceedance.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // rainExceedance.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateDate_UTC = new DateTime();
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // rainExceedance.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateContactTVItemID = 0;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateContactTVItemID = 1;
            actionRainExceedance = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post RainExceedance
            var actionRainExceedanceAdded = await RainExceedanceDBLocalService.Post(rainExceedance);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceAdded.Result).Value);
            RainExceedance rainExceedanceAdded = (RainExceedance)((OkObjectResult)actionRainExceedanceAdded.Result).Value;
            Assert.NotNull(rainExceedanceAdded);

            // List<RainExceedance>
            var actionRainExceedanceList = await RainExceedanceDBLocalService.GetRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceList.Result).Value);
            List<RainExceedance> rainExceedanceList = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value;

            int count = ((List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value).Count();
            Assert.True(count > 0);

            // List<RainExceedance> with skip and take
            var actionRainExceedanceListSkipAndTake = await RainExceedanceDBLocalService.GetRainExceedanceList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value);
            List<RainExceedance> rainExceedanceListSkipAndTake = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<RainExceedance>)((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(rainExceedanceList[0].RainExceedanceID == rainExceedanceListSkipAndTake[0].RainExceedanceID);

            // Get RainExceedance With RainExceedanceID
            var actionRainExceedanceGet = await RainExceedanceDBLocalService.GetRainExceedanceWithRainExceedanceID(rainExceedanceList[0].RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceGet.Result).Value);
            RainExceedance rainExceedanceGet = (RainExceedance)((OkObjectResult)actionRainExceedanceGet.Result).Value;
            Assert.NotNull(rainExceedanceGet);
            Assert.Equal(rainExceedanceGet.RainExceedanceID, rainExceedanceList[0].RainExceedanceID);

            // Put RainExceedance
            var actionRainExceedanceUpdated = await RainExceedanceDBLocalService.Put(rainExceedance);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceUpdated.Result).Value);
            RainExceedance rainExceedanceUpdated = (RainExceedance)((OkObjectResult)actionRainExceedanceUpdated.Result).Value;
            Assert.NotNull(rainExceedanceUpdated);

            // Delete RainExceedance
            var actionRainExceedanceDeleted = await RainExceedanceDBLocalService.Delete(rainExceedance.RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionRainExceedanceDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IRainExceedanceDBLocalService, RainExceedanceDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            RainExceedanceDBLocalService = Provider.GetService<IRainExceedanceDBLocalService>();
            Assert.NotNull(RainExceedanceDBLocalService);

            return await Task.FromResult(true);
        }
        private RainExceedance GetFilledRandomRainExceedance(string OmitPropName)
        {
            RainExceedance rainExceedance = new RainExceedance();

            if (OmitPropName != "RainExceedanceTVItemID") rainExceedance.RainExceedanceTVItemID = 56;
            if (OmitPropName != "StartMonth") rainExceedance.StartMonth = GetRandomInt(1, 12);
            if (OmitPropName != "StartDay") rainExceedance.StartDay = GetRandomInt(1, 31);
            if (OmitPropName != "EndMonth") rainExceedance.EndMonth = GetRandomInt(1, 12);
            if (OmitPropName != "EndDay") rainExceedance.EndDay = GetRandomInt(1, 31);
            if (OmitPropName != "RainMaximum_mm") rainExceedance.RainMaximum_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "StakeholdersEmailDistributionListID") rainExceedance.StakeholdersEmailDistributionListID = 1;
            if (OmitPropName != "OnlyStaffEmailDistributionListID") rainExceedance.OnlyStaffEmailDistributionListID = 1;
            if (OmitPropName != "IsActive") rainExceedance.IsActive = true;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedance.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedance.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 56, TVLevel = 2, TVPath = "p1p5p56", TVType = (TVTypeEnum)75, ParentID = 5, IsActive = true, LastUpdateDate_UTC = new DateTime(2019, 8, 16, 14, 13, 49), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.EmailDistributionLists.Add(new EmailDistributionList() { EmailDistributionListID = 1, ParentTVItemID = 5, Ordinal = 1, LastUpdateDate_UTC = new DateTime(2017, 6, 14, 18, 7, 57), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return rainExceedance;
        }
        private void CheckRainExceedanceFields(List<RainExceedance> rainExceedanceList)
        {
            if (rainExceedanceList[0].StakeholdersEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].StakeholdersEmailDistributionListID);
            }
            if (rainExceedanceList[0].OnlyStaffEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].OnlyStaffEmailDistributionListID);
            }
        }

        #endregion Functions private
    }
}
