/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class ReportTypeDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private IReportTypeDBLocalService ReportTypeDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private ReportType reportType { get; set; }
        #endregion Properties

        #region Constructors
        public ReportTypeDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ReportTypeDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            reportType = GetFilledRandomReportType("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ReportType_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionReportTypeList = await ReportTypeDBLocalService.GetReportTypeList();
            Assert.Equal(200, ((ObjectResult)actionReportTypeList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeList.Result).Value);
            List<ReportType> reportTypeList = (List<ReportType>)((OkObjectResult)actionReportTypeList.Result).Value;

            count = reportTypeList.Count();

            ReportType reportType = GetFilledRandomReportType("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // reportType.ReportTypeID   (Int32)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.ReportTypeID = 0;

            var actionReportType = await ReportTypeDBLocalService.Put(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.ReportTypeID = 10000000;
            actionReportType = await ReportTypeDBLocalService.Put(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // reportType.TVType   (TVTypeEnum)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.TVType = (TVTypeEnum)1000000;
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // reportType.FileType   (FileTypeEnum)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.FileType = (FileTypeEnum)1000000;
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // reportType.UniqueCode   (String)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("UniqueCode");
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.UniqueCode = GetRandomString("", 101);
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);
            //Assert.AreEqual(count, reportTypeDBLocalService.GetReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // reportType.Language   (LanguageEnum)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.Language = (LanguageEnum)1000000;
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // reportType.Name   (String)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.Name = GetRandomString("", 101);
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);
            //Assert.AreEqual(count, reportTypeDBLocalService.GetReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(1000)]
            // reportType.Description   (String)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.Description = GetRandomString("", 1001);
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);
            //Assert.AreEqual(count, reportTypeDBLocalService.GetReportTypeList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // reportType.StartOfFileName   (String)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.StartOfFileName = GetRandomString("", 101);
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);
            //Assert.AreEqual(count, reportTypeDBLocalService.GetReportTypeList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // reportType.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.LastUpdateDate_UTC = new DateTime();
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);
            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // reportType.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.LastUpdateContactTVItemID = 0;
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);

            reportType = null;
            reportType = GetFilledRandomReportType("");
            reportType.LastUpdateContactTVItemID = 1;
            actionReportType = await ReportTypeDBLocalService.Post(reportType);
            Assert.IsType<BadRequestObjectResult>(actionReportType.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post ReportType
            var actionReportTypeAdded = await ReportTypeDBLocalService.Post(reportType);
            Assert.Equal(200, ((ObjectResult)actionReportTypeAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeAdded.Result).Value);
            ReportType reportTypeAdded = (ReportType)((OkObjectResult)actionReportTypeAdded.Result).Value;
            Assert.NotNull(reportTypeAdded);

            // List<ReportType>
            var actionReportTypeList = await ReportTypeDBLocalService.GetReportTypeList();
            Assert.Equal(200, ((ObjectResult)actionReportTypeList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeList.Result).Value);
            List<ReportType> reportTypeList = (List<ReportType>)((OkObjectResult)actionReportTypeList.Result).Value;

            int count = ((List<ReportType>)((OkObjectResult)actionReportTypeList.Result).Value).Count();
            Assert.True(count > 0);

            // List<ReportType> with skip and take
            var actionReportTypeListSkipAndTake = await ReportTypeDBLocalService.GetReportTypeList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionReportTypeListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeListSkipAndTake.Result).Value);
            List<ReportType> reportTypeListSkipAndTake = (List<ReportType>)((OkObjectResult)actionReportTypeListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<ReportType>)((OkObjectResult)actionReportTypeListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(reportTypeList[0].ReportTypeID == reportTypeListSkipAndTake[0].ReportTypeID);

            // Get ReportType With ReportTypeID
            var actionReportTypeGet = await ReportTypeDBLocalService.GetReportTypeWithReportTypeID(reportTypeList[0].ReportTypeID);
            Assert.Equal(200, ((ObjectResult)actionReportTypeGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeGet.Result).Value);
            ReportType reportTypeGet = (ReportType)((OkObjectResult)actionReportTypeGet.Result).Value;
            Assert.NotNull(reportTypeGet);
            Assert.Equal(reportTypeGet.ReportTypeID, reportTypeList[0].ReportTypeID);

            // Put ReportType
            var actionReportTypeUpdated = await ReportTypeDBLocalService.Put(reportType);
            Assert.Equal(200, ((ObjectResult)actionReportTypeUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeUpdated.Result).Value);
            ReportType reportTypeUpdated = (ReportType)((OkObjectResult)actionReportTypeUpdated.Result).Value;
            Assert.NotNull(reportTypeUpdated);

            // Delete ReportType
            var actionReportTypeDeleted = await ReportTypeDBLocalService.Delete(reportType.ReportTypeID);
            Assert.Equal(200, ((ObjectResult)actionReportTypeDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionReportTypeDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IReportTypeDBLocalService, ReportTypeDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            ReportTypeDBLocalService = Provider.GetService<IReportTypeDBLocalService>();
            Assert.NotNull(ReportTypeDBLocalService);

            return await Task.FromResult(true);
        }
        private ReportType GetFilledRandomReportType(string OmitPropName)
        {
            ReportType reportType = new ReportType();

            if (OmitPropName != "TVType") reportType.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "FileType") reportType.FileType = (FileTypeEnum)GetRandomEnumType(typeof(FileTypeEnum));
            if (OmitPropName != "UniqueCode") reportType.UniqueCode = GetRandomString("", 5);
            if (OmitPropName != "Language") reportType.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "Name") reportType.Name = GetRandomString("", 5);
            if (OmitPropName != "Description") reportType.Description = GetRandomString("", 5);
            if (OmitPropName != "StartOfFileName") reportType.StartOfFileName = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") reportType.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") reportType.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return reportType;
        }
        private void CheckReportTypeFields(List<ReportType> reportTypeList)
        {
            Assert.False(string.IsNullOrWhiteSpace(reportTypeList[0].UniqueCode));
            if (reportTypeList[0].Language != null)
            {
                Assert.NotNull(reportTypeList[0].Language);
            }
            if (!string.IsNullOrWhiteSpace(reportTypeList[0].Name))
            {
                Assert.False(string.IsNullOrWhiteSpace(reportTypeList[0].Name));
            }
            if (!string.IsNullOrWhiteSpace(reportTypeList[0].Description))
            {
                Assert.False(string.IsNullOrWhiteSpace(reportTypeList[0].Description));
            }
            if (!string.IsNullOrWhiteSpace(reportTypeList[0].StartOfFileName))
            {
                Assert.False(string.IsNullOrWhiteSpace(reportTypeList[0].StartOfFileName));
            }
        }

        #endregion Functions private
    }
}
