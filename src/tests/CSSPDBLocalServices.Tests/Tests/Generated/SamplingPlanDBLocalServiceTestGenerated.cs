/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class SamplingPlanDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ISamplingPlanDBLocalService SamplingPlanDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private SamplingPlan samplingPlan { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SamplingPlanDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            samplingPlan = GetFilledRandomSamplingPlan("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SamplingPlan_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionSamplingPlanList = await SamplingPlanDBLocalService.GetSamplingPlanList();
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanList.Result).Value);
            List<SamplingPlan> samplingPlanList = (List<SamplingPlan>)((OkObjectResult)actionSamplingPlanList.Result).Value;

            count = samplingPlanList.Count();

            SamplingPlan samplingPlan = GetFilledRandomSamplingPlan("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // samplingPlan.SamplingPlanID   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanID = 0;

            var actionSamplingPlan = await SamplingPlanDBLocalService.Put(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanID = 10000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Put(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // samplingPlan.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(200)]
            // samplingPlan.SamplingPlanName   (String)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("SamplingPlanName");
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanName = GetRandomString("", 201);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // samplingPlan.ForGroupName   (String)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("ForGroupName");
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.ForGroupName = GetRandomString("", 101);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // samplingPlan.SampleType   (SampleTypeEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SampleType = (SampleTypeEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // samplingPlan.SamplingPlanType   (SamplingPlanTypeEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanType = (SamplingPlanTypeEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // samplingPlan.LabSheetType   (LabSheetTypeEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LabSheetType = (LabSheetTypeEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Province)]
            // samplingPlan.ProvinceTVItemID   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.ProvinceTVItemID = 0;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.ProvinceTVItemID = 1;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // samplingPlan.CreatorTVItemID   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.CreatorTVItemID = 0;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.CreatorTVItemID = 1;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(2000, 2050)]
            // samplingPlan.Year   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.Year = 1999;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanService.GetSamplingPlanList().Count());
            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.Year = 2051;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(15)]
            // samplingPlan.AccessCode   (String)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("AccessCode");
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.AccessCode = GetRandomString("", 16);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // samplingPlan.DailyDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [DailyDuplicatePrecisionCriteria]

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.DailyDuplicatePrecisionCriteria = -1.0D;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanService.GetSamplingPlanList().Count());
            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.DailyDuplicatePrecisionCriteria = 101.0D;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // samplingPlan.IntertechDuplicatePrecisionCriteria   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            //CSSPError: Type not implemented [IntertechDuplicatePrecisionCriteria]

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.IntertechDuplicatePrecisionCriteria = -1.0D;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanService.GetSamplingPlanList().Count());
            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.IntertechDuplicatePrecisionCriteria = 101.0D;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // samplingPlan.IncludeLaboratoryQAQC   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(15)]
            // samplingPlan.ApprovalCode   (String)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("ApprovalCode");
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.ApprovalCode = GetRandomString("", 16);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // samplingPlan.SamplingPlanFileTVItemID   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanFileTVItemID = 0;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SamplingPlanFileTVItemID = 1;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // samplingPlan.AnalyzeMethodDefault   (AnalyzeMethodEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.AnalyzeMethodDefault = (AnalyzeMethodEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // samplingPlan.SampleMatrixDefault   (SampleMatrixEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.SampleMatrixDefault = (SampleMatrixEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // samplingPlan.LaboratoryDefault   (LaboratoryEnum)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LaboratoryDefault = (LaboratoryEnum)1000000;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // samplingPlan.BackupDirectory   (String)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("BackupDirectory");
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.BackupDirectory = GetRandomString("", 251);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            //Assert.AreEqual(count, samplingPlanDBLocalService.GetSamplingPlanList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // samplingPlan.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LastUpdateDate_UTC = new DateTime();
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);
            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // samplingPlan.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LastUpdateContactTVItemID = 0;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

            samplingPlan = null;
            samplingPlan = GetFilledRandomSamplingPlan("");
            samplingPlan.LastUpdateContactTVItemID = 1;
            actionSamplingPlan = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlan.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post SamplingPlan
            var actionSamplingPlanAdded = await SamplingPlanDBLocalService.Post(samplingPlan);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanAdded.Result).Value);
            SamplingPlan samplingPlanAdded = (SamplingPlan)((OkObjectResult)actionSamplingPlanAdded.Result).Value;
            Assert.NotNull(samplingPlanAdded);

            // List<SamplingPlan>
            var actionSamplingPlanList = await SamplingPlanDBLocalService.GetSamplingPlanList();
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanList.Result).Value);
            List<SamplingPlan> samplingPlanList = (List<SamplingPlan>)((OkObjectResult)actionSamplingPlanList.Result).Value;

            int count = ((List<SamplingPlan>)((OkObjectResult)actionSamplingPlanList.Result).Value).Count();
            Assert.True(count > 0);

            // List<SamplingPlan> with skip and take
            var actionSamplingPlanListSkipAndTake = await SamplingPlanDBLocalService.GetSamplingPlanList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanListSkipAndTake.Result).Value);
            List<SamplingPlan> samplingPlanListSkipAndTake = (List<SamplingPlan>)((OkObjectResult)actionSamplingPlanListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<SamplingPlan>)((OkObjectResult)actionSamplingPlanListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(samplingPlanList[0].SamplingPlanID == samplingPlanListSkipAndTake[0].SamplingPlanID);

            // Get SamplingPlan With SamplingPlanID
            var actionSamplingPlanGet = await SamplingPlanDBLocalService.GetSamplingPlanWithSamplingPlanID(samplingPlanList[0].SamplingPlanID);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanGet.Result).Value);
            SamplingPlan samplingPlanGet = (SamplingPlan)((OkObjectResult)actionSamplingPlanGet.Result).Value;
            Assert.NotNull(samplingPlanGet);
            Assert.Equal(samplingPlanGet.SamplingPlanID, samplingPlanList[0].SamplingPlanID);

            // Put SamplingPlan
            var actionSamplingPlanUpdated = await SamplingPlanDBLocalService.Put(samplingPlan);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanUpdated.Result).Value);
            SamplingPlan samplingPlanUpdated = (SamplingPlan)((OkObjectResult)actionSamplingPlanUpdated.Result).Value;
            Assert.NotNull(samplingPlanUpdated);

            // Delete SamplingPlan
            var actionSamplingPlanDeleted = await SamplingPlanDBLocalService.Delete(samplingPlan.SamplingPlanID);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionSamplingPlanDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ISamplingPlanDBLocalService, SamplingPlanDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            SamplingPlanDBLocalService = Provider.GetService<ISamplingPlanDBLocalService>();
            Assert.NotNull(SamplingPlanDBLocalService);

            return await Task.FromResult(true);
        }
        private SamplingPlan GetFilledRandomSamplingPlan(string OmitPropName)
        {
            SamplingPlan samplingPlan = new SamplingPlan();

            if (OmitPropName != "IsActive") samplingPlan.IsActive = true;
            if (OmitPropName != "SamplingPlanName") samplingPlan.SamplingPlanName = GetRandomString("", 5);
            if (OmitPropName != "ForGroupName") samplingPlan.ForGroupName = GetRandomString("", 5);
            if (OmitPropName != "SampleType") samplingPlan.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "SamplingPlanType") samplingPlan.SamplingPlanType = (SamplingPlanTypeEnum)GetRandomEnumType(typeof(SamplingPlanTypeEnum));
            if (OmitPropName != "LabSheetType") samplingPlan.LabSheetType = (LabSheetTypeEnum)GetRandomEnumType(typeof(LabSheetTypeEnum));
            if (OmitPropName != "ProvinceTVItemID") samplingPlan.ProvinceTVItemID = 6;
            if (OmitPropName != "CreatorTVItemID") samplingPlan.CreatorTVItemID = 2;
            if (OmitPropName != "Year") samplingPlan.Year = GetRandomInt(2000, 2050);
            if (OmitPropName != "AccessCode") samplingPlan.AccessCode = GetRandomString("", 5);
            if (OmitPropName != "DailyDuplicatePrecisionCriteria") samplingPlan.DailyDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IntertechDuplicatePrecisionCriteria") samplingPlan.IntertechDuplicatePrecisionCriteria = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "IncludeLaboratoryQAQC") samplingPlan.IncludeLaboratoryQAQC = true;
            if (OmitPropName != "ApprovalCode") samplingPlan.ApprovalCode = GetRandomString("", 5);
            if (OmitPropName != "SamplingPlanFileTVItemID") samplingPlan.SamplingPlanFileTVItemID = 42;
            if (OmitPropName != "AnalyzeMethodDefault") samplingPlan.AnalyzeMethodDefault = (AnalyzeMethodEnum)GetRandomEnumType(typeof(AnalyzeMethodEnum));
            if (OmitPropName != "SampleMatrixDefault") samplingPlan.SampleMatrixDefault = (SampleMatrixEnum)GetRandomEnumType(typeof(SampleMatrixEnum));
            if (OmitPropName != "LaboratoryDefault") samplingPlan.LaboratoryDefault = (LaboratoryEnum)GetRandomEnumType(typeof(LaboratoryEnum));
            if (OmitPropName != "BackupDirectory") samplingPlan.BackupDirectory = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") samplingPlan.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") samplingPlan.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 6, TVLevel = 2, TVPath = "p1p5p6", TVType = (TVTypeEnum)18, ParentID = 5, IsActive = true, LastUpdateDate_UTC = new DateTime(2015, 2, 17, 14, 14, 24), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 42, TVLevel = 5, TVPath = "p1p5p6p39p41p42", TVType = (TVTypeEnum)8, ParentID = 41, IsActive = true, LastUpdateDate_UTC = new DateTime(2016, 5, 5, 17, 18, 26), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return samplingPlan;
        }
        private void CheckSamplingPlanFields(List<SamplingPlan> samplingPlanList)
        {
            Assert.False(string.IsNullOrWhiteSpace(samplingPlanList[0].SamplingPlanName));
            Assert.False(string.IsNullOrWhiteSpace(samplingPlanList[0].ForGroupName));
            Assert.False(string.IsNullOrWhiteSpace(samplingPlanList[0].AccessCode));
            Assert.False(string.IsNullOrWhiteSpace(samplingPlanList[0].ApprovalCode));
            if (samplingPlanList[0].SamplingPlanFileTVItemID != null)
            {
                Assert.NotNull(samplingPlanList[0].SamplingPlanFileTVItemID);
            }
            if (samplingPlanList[0].AnalyzeMethodDefault != null)
            {
                Assert.NotNull(samplingPlanList[0].AnalyzeMethodDefault);
            }
            if (samplingPlanList[0].SampleMatrixDefault != null)
            {
                Assert.NotNull(samplingPlanList[0].SampleMatrixDefault);
            }
            if (samplingPlanList[0].LaboratoryDefault != null)
            {
                Assert.NotNull(samplingPlanList[0].LaboratoryDefault);
            }
            Assert.False(string.IsNullOrWhiteSpace(samplingPlanList[0].BackupDirectory));
        }

        #endregion Functions private
    }
}
