/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class SamplingPlanSubsectorSiteDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ISamplingPlanSubsectorSiteDBLocalService SamplingPlanSubsectorSiteDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private SamplingPlanSubsectorSite samplingPlanSubsectorSite { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanSubsectorSiteDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SamplingPlanSubsectorSiteDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SamplingPlanSubsectorSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionSamplingPlanSubsectorSiteList = await SamplingPlanSubsectorSiteDBLocalService.GetSamplingPlanSubsectorSiteList();
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteList.Result).Value);
            List<SamplingPlanSubsectorSite> samplingPlanSubsectorSiteList = (List<SamplingPlanSubsectorSite>)((OkObjectResult)actionSamplingPlanSubsectorSiteList.Result).Value;

            count = samplingPlanSubsectorSiteList.Count();

            SamplingPlanSubsectorSite samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // samplingPlanSubsectorSite.SamplingPlanSubsectorSiteID   (Int32)
            // -----------------------------------

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.SamplingPlanSubsectorSiteID = 0;

            var actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Put(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.SamplingPlanSubsectorSiteID = 10000000;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Put(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "SamplingPlanSubsector", ExistPlurial = "s", ExistFieldID = "SamplingPlanSubsectorID", AllowableTVtypeList = )]
            // samplingPlanSubsectorSite.SamplingPlanSubsectorID   (Int32)
            // -----------------------------------

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.SamplingPlanSubsectorID = 0;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
            // samplingPlanSubsectorSite.MWQMSiteTVItemID   (Int32)
            // -----------------------------------

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.MWQMSiteTVItemID = 0;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.MWQMSiteTVItemID = 1;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // samplingPlanSubsectorSite.IsDuplicate   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // samplingPlanSubsectorSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime();
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);
            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // samplingPlanSubsectorSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.LastUpdateContactTVItemID = 0;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);

            samplingPlanSubsectorSite = null;
            samplingPlanSubsectorSite = GetFilledRandomSamplingPlanSubsectorSite("");
            samplingPlanSubsectorSite.LastUpdateContactTVItemID = 1;
            actionSamplingPlanSubsectorSite = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.IsType<BadRequestObjectResult>(actionSamplingPlanSubsectorSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post SamplingPlanSubsectorSite
            var actionSamplingPlanSubsectorSiteAdded = await SamplingPlanSubsectorSiteDBLocalService.Post(samplingPlanSubsectorSite);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteAdded.Result).Value);
            SamplingPlanSubsectorSite samplingPlanSubsectorSiteAdded = (SamplingPlanSubsectorSite)((OkObjectResult)actionSamplingPlanSubsectorSiteAdded.Result).Value;
            Assert.NotNull(samplingPlanSubsectorSiteAdded);

            // List<SamplingPlanSubsectorSite>
            var actionSamplingPlanSubsectorSiteList = await SamplingPlanSubsectorSiteDBLocalService.GetSamplingPlanSubsectorSiteList();
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteList.Result).Value);
            List<SamplingPlanSubsectorSite> samplingPlanSubsectorSiteList = (List<SamplingPlanSubsectorSite>)((OkObjectResult)actionSamplingPlanSubsectorSiteList.Result).Value;

            int count = ((List<SamplingPlanSubsectorSite>)((OkObjectResult)actionSamplingPlanSubsectorSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<SamplingPlanSubsectorSite> with skip and take
            var actionSamplingPlanSubsectorSiteListSkipAndTake = await SamplingPlanSubsectorSiteDBLocalService.GetSamplingPlanSubsectorSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteListSkipAndTake.Result).Value);
            List<SamplingPlanSubsectorSite> samplingPlanSubsectorSiteListSkipAndTake = (List<SamplingPlanSubsectorSite>)((OkObjectResult)actionSamplingPlanSubsectorSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<SamplingPlanSubsectorSite>)((OkObjectResult)actionSamplingPlanSubsectorSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(samplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID == samplingPlanSubsectorSiteListSkipAndTake[0].SamplingPlanSubsectorSiteID);

            // Get SamplingPlanSubsectorSite With SamplingPlanSubsectorSiteID
            var actionSamplingPlanSubsectorSiteGet = await SamplingPlanSubsectorSiteDBLocalService.GetSamplingPlanSubsectorSiteWithSamplingPlanSubsectorSiteID(samplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteGet.Result).Value);
            SamplingPlanSubsectorSite samplingPlanSubsectorSiteGet = (SamplingPlanSubsectorSite)((OkObjectResult)actionSamplingPlanSubsectorSiteGet.Result).Value;
            Assert.NotNull(samplingPlanSubsectorSiteGet);
            Assert.Equal(samplingPlanSubsectorSiteGet.SamplingPlanSubsectorSiteID, samplingPlanSubsectorSiteList[0].SamplingPlanSubsectorSiteID);

            // Put SamplingPlanSubsectorSite
            var actionSamplingPlanSubsectorSiteUpdated = await SamplingPlanSubsectorSiteDBLocalService.Put(samplingPlanSubsectorSite);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteUpdated.Result).Value);
            SamplingPlanSubsectorSite samplingPlanSubsectorSiteUpdated = (SamplingPlanSubsectorSite)((OkObjectResult)actionSamplingPlanSubsectorSiteUpdated.Result).Value;
            Assert.NotNull(samplingPlanSubsectorSiteUpdated);

            // Delete SamplingPlanSubsectorSite
            var actionSamplingPlanSubsectorSiteDeleted = await SamplingPlanSubsectorSiteDBLocalService.Delete(samplingPlanSubsectorSite.SamplingPlanSubsectorSiteID);
            Assert.Equal(200, ((ObjectResult)actionSamplingPlanSubsectorSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSamplingPlanSubsectorSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionSamplingPlanSubsectorSiteDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ISamplingPlanSubsectorSiteDBLocalService, SamplingPlanSubsectorSiteDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            SamplingPlanSubsectorSiteDBLocalService = Provider.GetService<ISamplingPlanSubsectorSiteDBLocalService>();
            Assert.NotNull(SamplingPlanSubsectorSiteDBLocalService);

            return await Task.FromResult(true);
        }
        private SamplingPlanSubsectorSite GetFilledRandomSamplingPlanSubsectorSite(string OmitPropName)
        {
            SamplingPlanSubsectorSite samplingPlanSubsectorSite = new SamplingPlanSubsectorSite();

            if (OmitPropName != "SamplingPlanSubsectorID") samplingPlanSubsectorSite.SamplingPlanSubsectorID = 1;
            if (OmitPropName != "MWQMSiteTVItemID") samplingPlanSubsectorSite.MWQMSiteTVItemID = 44;
            if (OmitPropName != "IsDuplicate") samplingPlanSubsectorSite.IsDuplicate = true;
            if (OmitPropName != "LastUpdateDate_UTC") samplingPlanSubsectorSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") samplingPlanSubsectorSite.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.SamplingPlanSubsectors.Add(new SamplingPlanSubsector() { SamplingPlanSubsectorID = 1, SamplingPlanID = 1, SubsectorTVItemID = 12, LastUpdateDate_UTC = new DateTime(2019, 1, 15, 14, 24, 39), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 44, TVLevel = 6, TVPath = "p1p5p6p9p10p12p44", TVType = (TVTypeEnum)16, ParentID = 12, IsActive = true, LastUpdateDate_UTC = new DateTime(2017, 10, 12, 17, 39, 34), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return samplingPlanSubsectorSite;
        }
        private void CheckSamplingPlanSubsectorSiteFields(List<SamplingPlanSubsectorSite> samplingPlanSubsectorSiteList)
        {
        }

        #endregion Functions private
    }
}
