/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LocalServices;

namespace CSSPDBLocalServices.Tests
{
    [Collection("Sequential")]
    public partial class SpillLanguageDBLocalServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILocalService LocalService { get; set; }
        private ISpillLanguageDBLocalService SpillLanguageDBLocalService { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private SpillLanguage spillLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public SpillLanguageDBLocalServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DBLocal]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SpillLanguageDBLocal_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            spillLanguage = GetFilledRandomSpillLanguage("");

            await DoCRUDDBLocalTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task SpillLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionSpillLanguageList = await SpillLanguageDBLocalService.GetSpillLanguageList();
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageList.Result).Value);
            List<SpillLanguage> spillLanguageList = (List<SpillLanguage>)((OkObjectResult)actionSpillLanguageList.Result).Value;

            count = spillLanguageList.Count();

            SpillLanguage spillLanguage = GetFilledRandomSpillLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // spillLanguage.SpillLanguageID   (Int32)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.SpillLanguageID = 0;

            var actionSpillLanguage = await SpillLanguageDBLocalService.Put(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.SpillLanguageID = 10000000;
            actionSpillLanguage = await SpillLanguageDBLocalService.Put(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "Spill", ExistPlurial = "s", ExistFieldID = "SpillID", AllowableTVtypeList = )]
            // spillLanguage.SpillID   (Int32)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.SpillID = 0;
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // spillLanguage.Language   (LanguageEnum)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.Language = (LanguageEnum)1000000;
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // spillLanguage.SpillComment   (String)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("SpillComment");
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // spillLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // spillLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.LastUpdateDate_UTC = new DateTime();
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);
            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // spillLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.LastUpdateContactTVItemID = 0;
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);

            spillLanguage = null;
            spillLanguage = GetFilledRandomSpillLanguage("");
            spillLanguage.LastUpdateContactTVItemID = 1;
            actionSpillLanguage = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.IsType<BadRequestObjectResult>(actionSpillLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBLocalTest()
        {
            dbLocal.Database.BeginTransaction();
            // Post SpillLanguage
            var actionSpillLanguageAdded = await SpillLanguageDBLocalService.Post(spillLanguage);
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageAdded.Result).Value);
            SpillLanguage spillLanguageAdded = (SpillLanguage)((OkObjectResult)actionSpillLanguageAdded.Result).Value;
            Assert.NotNull(spillLanguageAdded);

            // List<SpillLanguage>
            var actionSpillLanguageList = await SpillLanguageDBLocalService.GetSpillLanguageList();
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageList.Result).Value);
            List<SpillLanguage> spillLanguageList = (List<SpillLanguage>)((OkObjectResult)actionSpillLanguageList.Result).Value;

            int count = ((List<SpillLanguage>)((OkObjectResult)actionSpillLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<SpillLanguage> with skip and take
            var actionSpillLanguageListSkipAndTake = await SpillLanguageDBLocalService.GetSpillLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageListSkipAndTake.Result).Value);
            List<SpillLanguage> spillLanguageListSkipAndTake = (List<SpillLanguage>)((OkObjectResult)actionSpillLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<SpillLanguage>)((OkObjectResult)actionSpillLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(spillLanguageList[0].SpillLanguageID == spillLanguageListSkipAndTake[0].SpillLanguageID);

            // Get SpillLanguage With SpillLanguageID
            var actionSpillLanguageGet = await SpillLanguageDBLocalService.GetSpillLanguageWithSpillLanguageID(spillLanguageList[0].SpillLanguageID);
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageGet.Result).Value);
            SpillLanguage spillLanguageGet = (SpillLanguage)((OkObjectResult)actionSpillLanguageGet.Result).Value;
            Assert.NotNull(spillLanguageGet);
            Assert.Equal(spillLanguageGet.SpillLanguageID, spillLanguageList[0].SpillLanguageID);

            // Put SpillLanguage
            var actionSpillLanguageUpdated = await SpillLanguageDBLocalService.Put(spillLanguage);
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageUpdated.Result).Value);
            SpillLanguage spillLanguageUpdated = (SpillLanguage)((OkObjectResult)actionSpillLanguageUpdated.Result).Value;
            Assert.NotNull(spillLanguageUpdated);

            // Delete SpillLanguage
            var actionSpillLanguageDeleted = await SpillLanguageDBLocalService.Delete(spillLanguage.SpillLanguageID);
            Assert.Equal(200, ((ObjectResult)actionSpillLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionSpillLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionSpillLanguageDeleted.Result).Value;
            Assert.True(retBool);

            dbLocal.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdblocalservicestests.json")
               .AddUserSecrets("91a273aa-0169-4298-82eb-86ff2429a2f8")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLoginFileName = Config.GetValue<string>("CSSPDBLogin");
            Assert.NotNull(CSSPDBLoginFileName);

            FileInfo fiCSSPDBLogin = new FileInfo(CSSPDBLoginFileName);

            Services.AddDbContext<CSSPDBLoginContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            Services.AddDbContext<CSSPDBLoginInMemoryContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLogin.FullName }");
            });

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            FileInfo fiCSSPDBLocal = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBLocal.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILocalService, LocalService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ISpillLanguageDBLocalService, SpillLanguageDBLocalService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LocalService = Provider.GetService<ILocalService>();
            Assert.NotNull(LocalService);

            Assert.True(await LocalService.SetLoggedInContactInfo());

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            SpillLanguageDBLocalService = Provider.GetService<ISpillLanguageDBLocalService>();
            Assert.NotNull(SpillLanguageDBLocalService);

            return await Task.FromResult(true);
        }
        private SpillLanguage GetFilledRandomSpillLanguage(string OmitPropName)
        {
            SpillLanguage spillLanguage = new SpillLanguage();

            if (OmitPropName != "SpillID") spillLanguage.SpillID = 1;
            if (OmitPropName != "Language") spillLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "SpillComment") spillLanguage.SpillComment = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatus") spillLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") spillLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") spillLanguage.LastUpdateContactTVItemID = 2;

            try
            {
                dbLocal.Spills.Add(new Spill() { SpillID = 1, MunicipalityTVItemID = 39, InfrastructureTVItemID = 41, StartDateTime_Local = new DateTime(2015, 9, 3, 9, 17, 7), EndDateTime_Local = new DateTime(2015, 9, 3, 15, 17, 7), AverageFlow_m3_day = 34.5, LastUpdateDate_UTC = new DateTime(2020, 9, 3, 9, 17, 7), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }
            try
            {
                dbLocal.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2 });
                dbLocal.SaveChanges();
            }
            catch (Exception)
            {
                // Assert.True(false, ex.Message);
            }


            return spillLanguage;
        }
        private void CheckSpillLanguageFields(List<SpillLanguage> spillLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(spillLanguageList[0].SpillComment));
        }

        #endregion Functions private
    }
}
