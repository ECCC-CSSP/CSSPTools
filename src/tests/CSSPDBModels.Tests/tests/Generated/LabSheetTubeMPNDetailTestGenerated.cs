/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPDBModels.Tests
{
    public partial class LabSheetTubeMPNDetailTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LabSheetTubeMPNDetail labSheetTubeMPNDetail { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetTubeMPNDetailTest()
        {
            labSheetTubeMPNDetail = new LabSheetTubeMPNDetail();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void LabSheetTubeMPNDetail_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LabSheetTubeMPNDetailID", "DBCommand", "LabSheetDetailID", "Ordinal", "MWQMSiteTVItemID", "SampleDateTime", "MPN", "Tube10", "Tube1_0", "Tube0_1", "Salinity", "Temperature", "ProcessedBy", "SampleType", "SiteComment", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LabSheetTubeMPNDetail).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LabSheetTubeMPNDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void LabSheetTubeMPNDetail_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LabSheetTubeMPNDetail).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LabSheetTubeMPNDetail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void LabSheetTubeMPNDetail_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               labSheetTubeMPNDetail.LabSheetTubeMPNDetailID = val1;
               Assert.Equal(val1, labSheetTubeMPNDetail.LabSheetTubeMPNDetailID);
               DBCommandEnum val2 = (DBCommandEnum)3;
               labSheetTubeMPNDetail.DBCommand = val2;
               Assert.Equal(val2, labSheetTubeMPNDetail.DBCommand);
               int val3 = 45;
               labSheetTubeMPNDetail.LabSheetDetailID = val3;
               Assert.Equal(val3, labSheetTubeMPNDetail.LabSheetDetailID);
               int val4 = 45;
               labSheetTubeMPNDetail.Ordinal = val4;
               Assert.Equal(val4, labSheetTubeMPNDetail.Ordinal);
               int val5 = 45;
               labSheetTubeMPNDetail.MWQMSiteTVItemID = val5;
               Assert.Equal(val5, labSheetTubeMPNDetail.MWQMSiteTVItemID);
               DateTime val6 = new DateTime(2010, 3, 4);
               labSheetTubeMPNDetail.SampleDateTime = val6;
               Assert.Equal(val6, labSheetTubeMPNDetail.SampleDateTime);
               int val7 = 45;
               labSheetTubeMPNDetail.MPN = val7;
               Assert.Equal(val7, labSheetTubeMPNDetail.MPN);
               int val8 = 45;
               labSheetTubeMPNDetail.Tube10 = val8;
               Assert.Equal(val8, labSheetTubeMPNDetail.Tube10);
               int val9 = 45;
               labSheetTubeMPNDetail.Tube1_0 = val9;
               Assert.Equal(val9, labSheetTubeMPNDetail.Tube1_0);
               int val10 = 45;
               labSheetTubeMPNDetail.Tube0_1 = val10;
               Assert.Equal(val10, labSheetTubeMPNDetail.Tube0_1);
               double val11 = 87.9D;
               labSheetTubeMPNDetail.Salinity = val11;
               Assert.Equal(val11, labSheetTubeMPNDetail.Salinity);
               double val12 = 87.9D;
               labSheetTubeMPNDetail.Temperature = val12;
               Assert.Equal(val12, labSheetTubeMPNDetail.Temperature);
               string val13 = "Some text";
               labSheetTubeMPNDetail.ProcessedBy = val13;
               Assert.Equal(val13, labSheetTubeMPNDetail.ProcessedBy);
               SampleTypeEnum val14 = (SampleTypeEnum)3;
               labSheetTubeMPNDetail.SampleType = val14;
               Assert.Equal(val14, labSheetTubeMPNDetail.SampleType);
               string val15 = "Some text";
               labSheetTubeMPNDetail.SiteComment = val15;
               Assert.Equal(val15, labSheetTubeMPNDetail.SiteComment);
               DateTime val16 = new DateTime(2010, 3, 4);
               labSheetTubeMPNDetail.LastUpdateDate_UTC = val16;
               Assert.Equal(val16, labSheetTubeMPNDetail.LastUpdateDate_UTC);
               int val17 = 45;
               labSheetTubeMPNDetail.LastUpdateContactTVItemID = val17;
               Assert.Equal(val17, labSheetTubeMPNDetail.LastUpdateContactTVItemID);
        }
        #endregion Tests Functions public
    }
}
