/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Threading.Tasks;
using Xunit;

namespace CSSPDBPreferenceModels.Tests
{
    public partial class CSSPDBPreferenceContextTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPDBPreferenceContextTest() : base()
        {

        }
        #endregion Constructors

        #region Tests
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBPreferenceContext_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBPreference_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            CSSPDBPreferenceContext CSSPDBPreferenceContext = new CSSPDBPreferenceContext();
            Assert.NotNull(CSSPDBPreferenceContext);

            CSSPDBPreferenceContext CSSPDBPreferenceContext2 = Provider.GetService<CSSPDBPreferenceContext>();
            Assert.NotNull(CSSPDBPreferenceContext2);

            //var preferences = CSSPDBPreferenceContext2.Preferences;
            //Assert.NotNull(preferences);

            var contacts = CSSPDBPreferenceContext2.Contacts;
            Assert.NotNull(contacts);

            var tvItemUserAuthorizations = CSSPDBPreferenceContext2.TVItemUserAuthorizations;
            Assert.NotNull(tvItemUserAuthorizations);

            var tvTypeUserAuthorizations = CSSPDBPreferenceContext2.TVTypeUserAuthorizations;
            Assert.NotNull(tvTypeUserAuthorizations);
        }
        #endregion Tests

        #region private
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbpreferencemodelstests.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference");
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);
            Assert.True(fiCSSPDBPreference.Exists);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            return await Task.FromResult(true);
        }
        #endregion private
    }
}
