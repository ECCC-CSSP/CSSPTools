/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBModels_TestsGenerated.exe
 *
 * Do not edit this file.
 *
 */
using CSSPDBModels;
using CSSPEnums;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.IO;
using System.Threading.Tasks;
using Xunit;

namespace CSSPDBSearchModels.Tests
{
    public partial class CSSPDBSearchContextTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPDBSearchContextTest() : base()
        {

        }
        #endregion Constructors

        #region Tests
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBSearchContext_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBSearch_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            CSSPDBSearchContext CSSPDBSearchContext = new CSSPDBSearchContext();
            Assert.NotNull(CSSPDBSearchContext);

            CSSPDBSearchContext CSSPDBSearchContext2 = Provider.GetService<CSSPDBSearchContext>();
            Assert.NotNull(CSSPDBSearchContext2);

            var TVItems = CSSPDBSearchContext2.TVItems;
            Assert.NotNull(TVItems);

            var TVItemLanguages = CSSPDBSearchContext2.TVItemLanguages;
            Assert.NotNull(TVItemLanguages);
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBSearch_TVItems_Properties_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            TVItem tvItem = new TVItem();
            Assert.NotNull(tvItem);

            tvItem.TVItemID = 3;
            Assert.Equal(3, tvItem.TVItemID);

            tvItem.DBCommand = DBCommandEnum.Created;
            Assert.Equal(DBCommandEnum.Created, tvItem.DBCommand);

            tvItem.IsActive = true;
            Assert.True(tvItem.IsActive);

            tvItem.LastUpdateContactTVItemID = 3;
            Assert.Equal(3, tvItem.LastUpdateContactTVItemID);

            DateTime dateTime = DateTime.UtcNow;
            tvItem.LastUpdateDate_UTC = dateTime;
            Assert.Equal(dateTime, tvItem.LastUpdateDate_UTC);

            tvItem.ParentID = 3;
            Assert.Equal(3, tvItem.ParentID);

            tvItem.TVLevel = 3;
            Assert.Equal(3, tvItem.TVLevel);

            tvItem.TVPath = "TVPath";
            Assert.Equal("TVPath", tvItem.TVPath);

            tvItem.TVType = TVTypeEnum.Address;
            Assert.Equal(TVTypeEnum.Address, tvItem.TVType);
        }
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CSSPDBSearch_TVItemLanguages_Properties_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            TVItemLanguage tvItemLanguage = new TVItemLanguage();
            Assert.NotNull(tvItemLanguage);

            tvItemLanguage.TVItemLanguageID = 23;
            Assert.Equal(23, tvItemLanguage.TVItemLanguageID);

            tvItemLanguage.TVItemID = 3;
            Assert.Equal(3, tvItemLanguage.TVItemID);

            tvItemLanguage.DBCommand = DBCommandEnum.Created;
            Assert.Equal(DBCommandEnum.Created, tvItemLanguage.DBCommand);

            tvItemLanguage.Language = LanguageEnum.en;
            Assert.Equal(LanguageEnum.en, tvItemLanguage.Language);

            tvItemLanguage.LastUpdateContactTVItemID = 3;
            Assert.Equal(3, tvItemLanguage.LastUpdateContactTVItemID);

            DateTime dateTime = DateTime.UtcNow;
            tvItemLanguage.LastUpdateDate_UTC = dateTime;
            Assert.Equal(dateTime, tvItemLanguage.LastUpdateDate_UTC);

            tvItemLanguage.TranslationStatus = TranslationStatusEnum.ElectronicallyTranslated;
            Assert.Equal(TranslationStatusEnum.ElectronicallyTranslated, tvItemLanguage.TranslationStatus);

            tvItemLanguage.TVText = "allo";
            Assert.Equal("allo", tvItemLanguage.TVText);
        }
        #endregion Tests

        #region private
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbSearchmodelstests.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            /* ---------------------------------------------------------------------------------
             * using CSSPDBSearch
             * ---------------------------------------------------------------------------------      
             */
            string CSSPDBSearch = Configuration.GetValue<string>("CSSPDBSearch");
            Assert.NotNull(CSSPDBSearch);

            FileInfo fiCSSPDBSearch = new FileInfo(CSSPDBSearch);
            Assert.True(fiCSSPDBSearch.Exists);

            Services.AddDbContext<CSSPDBSearchContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBSearch.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            return await Task.FromResult(true);
        }
        #endregion private
    }
}
