/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class BoxModelDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IBoxModelDBService BoxModelDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private BoxModel boxModel { get; set; }
        #endregion Properties

        #region Constructors
        public BoxModelDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModelDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModelDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            boxModel = GetFilledRandomBoxModel("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModel_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionBoxModelList = await BoxModelDBService.GetBoxModelList();
            Assert.Equal(200, ((ObjectResult)actionBoxModelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelList.Result).Value);
            List<BoxModel> boxModelList = (List<BoxModel>)((OkObjectResult)actionBoxModelList.Result).Value;

            count = boxModelList.Count();

            BoxModel boxModel = GetFilledRandomBoxModel("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // boxModel.BoxModelID   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.BoxModelID = 0;

            var actionBoxModel = await BoxModelDBService.Put(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.BoxModelID = 10000000;
            actionBoxModel = await BoxModelDBService.Put(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // boxModel.DBCommand   (DBCommandEnum)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.DBCommand = (DBCommandEnum)1000000;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Infrastructure)]
            // boxModel.InfrastructureTVItemID   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.InfrastructureTVItemID = 0;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.InfrastructureTVItemID = 1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // boxModel.Discharge_m3_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Discharge_m3_day]

            //CSSPError: Type not implemented [Discharge_m3_day]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Discharge_m3_day = -1.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Discharge_m3_day = 10001.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // boxModel.Depth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Depth_m]

            //CSSPError: Type not implemented [Depth_m]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Depth_m = -1.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Depth_m = 1001.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-15, 40)]
            // boxModel.Temperature_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Temperature_C]

            //CSSPError: Type not implemented [Temperature_C]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Temperature_C = -16.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Temperature_C = 41.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // boxModel.Dilution   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Dilution = -1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Dilution = 10000001;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // boxModel.DecayRate_per_day   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DecayRate_per_day]

            //CSSPError: Type not implemented [DecayRate_per_day]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.DecayRate_per_day = -1.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.DecayRate_per_day = 101.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // boxModel.FCUntreated_MPN_100ml   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.FCUntreated_MPN_100ml = -1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.FCUntreated_MPN_100ml = 10000001;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // boxModel.FCPreDisinfection_MPN_100ml   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.FCPreDisinfection_MPN_100ml = -1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.FCPreDisinfection_MPN_100ml = 10000001;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // boxModel.Concentration_MPN_100ml   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Concentration_MPN_100ml = -1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.Concentration_MPN_100ml = 10000001;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, -1)]
            // boxModel.T90_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [T90_hour]

            //CSSPError: Type not implemented [T90_hour]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.T90_hour = -1.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 24)]
            // boxModel.DischargeDuration_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DischargeDuration_hour]

            //CSSPError: Type not implemented [DischargeDuration_hour]

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.DischargeDuration_hour = -1.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelService.GetBoxModelList().Count());
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.DischargeDuration_hour = 25.0D;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            //Assert.AreEqual(count, boxModelDBService.GetBoxModelList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // boxModel.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.LastUpdateDate_UTC = new DateTime();
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);
            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // boxModel.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.LastUpdateContactTVItemID = 0;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);

            boxModel = null;
            boxModel = GetFilledRandomBoxModel("");
            boxModel.LastUpdateContactTVItemID = 1;
            actionBoxModel = await BoxModelDBService.Post(boxModel);
            Assert.IsType<BadRequestObjectResult>(actionBoxModel.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post BoxModel
            var actionBoxModelAdded = await BoxModelDBService.Post(boxModel);
            Assert.Equal(200, ((ObjectResult)actionBoxModelAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelAdded.Result).Value);
            BoxModel boxModelAdded = (BoxModel)((OkObjectResult)actionBoxModelAdded.Result).Value;
            Assert.NotNull(boxModelAdded);

            // List<BoxModel>
            var actionBoxModelList = await BoxModelDBService.GetBoxModelList();
            Assert.Equal(200, ((ObjectResult)actionBoxModelList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelList.Result).Value);
            List<BoxModel> boxModelList = (List<BoxModel>)((OkObjectResult)actionBoxModelList.Result).Value;

            int count = ((List<BoxModel>)((OkObjectResult)actionBoxModelList.Result).Value).Count();
            Assert.True(count > 0);

            // List<BoxModel> with skip and take
            var actionBoxModelListSkipAndTake = await BoxModelDBService.GetBoxModelList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionBoxModelListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelListSkipAndTake.Result).Value);
            List<BoxModel> boxModelListSkipAndTake = (List<BoxModel>)((OkObjectResult)actionBoxModelListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<BoxModel>)((OkObjectResult)actionBoxModelListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(boxModelList[0].BoxModelID == boxModelListSkipAndTake[0].BoxModelID);

            // Get BoxModel With BoxModelID
            var actionBoxModelGet = await BoxModelDBService.GetBoxModelWithBoxModelID(boxModelList[0].BoxModelID);
            Assert.Equal(200, ((ObjectResult)actionBoxModelGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelGet.Result).Value);
            BoxModel boxModelGet = (BoxModel)((OkObjectResult)actionBoxModelGet.Result).Value;
            Assert.NotNull(boxModelGet);
            Assert.Equal(boxModelGet.BoxModelID, boxModelList[0].BoxModelID);

            // Put BoxModel
            var actionBoxModelUpdated = await BoxModelDBService.Put(boxModel);
            Assert.Equal(200, ((ObjectResult)actionBoxModelUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelUpdated.Result).Value);
            BoxModel boxModelUpdated = (BoxModel)((OkObjectResult)actionBoxModelUpdated.Result).Value;
            Assert.NotNull(boxModelUpdated);

            // Delete BoxModel
            var actionBoxModelDeleted = await BoxModelDBService.Delete(boxModel.BoxModelID);
            Assert.Equal(200, ((ObjectResult)actionBoxModelDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionBoxModelDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IBoxModelDBService, BoxModelDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            BoxModelDBService = Provider.GetService<IBoxModelDBService>();
            Assert.NotNull(BoxModelDBService);

            return await Task.FromResult(true);
        }
        private BoxModel GetFilledRandomBoxModel(string OmitPropName)
        {
            BoxModel boxModel = new BoxModel();

            if (OmitPropName != "DBCommand") boxModel.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "InfrastructureTVItemID") boxModel.InfrastructureTVItemID = 41;
            if (OmitPropName != "Discharge_m3_day") boxModel.Discharge_m3_day = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "Depth_m") boxModel.Depth_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "Temperature_C") boxModel.Temperature_C = GetRandomDouble(-15.0D, 40.0D);
            if (OmitPropName != "Dilution") boxModel.Dilution = GetRandomInt(0, 10000000);
            if (OmitPropName != "DecayRate_per_day") boxModel.DecayRate_per_day = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "FCUntreated_MPN_100ml") boxModel.FCUntreated_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "FCPreDisinfection_MPN_100ml") boxModel.FCPreDisinfection_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "Concentration_MPN_100ml") boxModel.Concentration_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "T90_hour") boxModel.T90_hour = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "DischargeDuration_hour") boxModel.DischargeDuration_hour = GetRandomDouble(0.0D, 24.0D);
            if (OmitPropName != "LastUpdateDate_UTC") boxModel.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") boxModel.LastUpdateContactTVItemID = 2;

            return boxModel;
        }
        private void CheckBoxModelFields(List<BoxModel> boxModelList)
        {
        }

        #endregion Functions private
    }
}
