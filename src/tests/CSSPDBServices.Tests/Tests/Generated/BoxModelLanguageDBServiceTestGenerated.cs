/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class BoxModelLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IBoxModelLanguageDBService BoxModelLanguageDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private BoxModelLanguage boxModelLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public BoxModelLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModelLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModelLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            boxModelLanguage = GetFilledRandomBoxModelLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task BoxModelLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionBoxModelLanguageList = await BoxModelLanguageDBService.GetBoxModelLanguageList();
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageList.Result).Value);
            List<BoxModelLanguage> boxModelLanguageList = (List<BoxModelLanguage>)((OkObjectResult)actionBoxModelLanguageList.Result).Value;

            count = boxModelLanguageList.Count();

            BoxModelLanguage boxModelLanguage = GetFilledRandomBoxModelLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // boxModelLanguage.BoxModelLanguageID   (Int32)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.BoxModelLanguageID = 0;

            var actionBoxModelLanguage = await BoxModelLanguageDBService.Put(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.BoxModelLanguageID = 10000000;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Put(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // boxModelLanguage.DBCommand   (DBCommandEnum)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.DBCommand = (DBCommandEnum)1000000;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "BoxModel", ExistPlurial = "s", ExistFieldID = "BoxModelID", AllowableTVtypeList = )]
            // boxModelLanguage.BoxModelID   (Int32)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.BoxModelID = 0;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // boxModelLanguage.Language   (LanguageEnum)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.Language = (LanguageEnum)1000000;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // boxModelLanguage.ScenarioName   (String)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("ScenarioName");
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.ScenarioName = GetRandomString("", 251);
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);
            //Assert.AreEqual(count, boxModelLanguageDBService.GetBoxModelLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // boxModelLanguage.TranslationStatus   (TranslationStatusEnum)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // boxModelLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.LastUpdateDate_UTC = new DateTime();
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);
            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // boxModelLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.LastUpdateContactTVItemID = 0;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);

            boxModelLanguage = null;
            boxModelLanguage = GetFilledRandomBoxModelLanguage("");
            boxModelLanguage.LastUpdateContactTVItemID = 1;
            actionBoxModelLanguage = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.IsType<BadRequestObjectResult>(actionBoxModelLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post BoxModelLanguage
            var actionBoxModelLanguageAdded = await BoxModelLanguageDBService.Post(boxModelLanguage);
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageAdded.Result).Value);
            BoxModelLanguage boxModelLanguageAdded = (BoxModelLanguage)((OkObjectResult)actionBoxModelLanguageAdded.Result).Value;
            Assert.NotNull(boxModelLanguageAdded);

            // List<BoxModelLanguage>
            var actionBoxModelLanguageList = await BoxModelLanguageDBService.GetBoxModelLanguageList();
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageList.Result).Value);
            List<BoxModelLanguage> boxModelLanguageList = (List<BoxModelLanguage>)((OkObjectResult)actionBoxModelLanguageList.Result).Value;

            int count = ((List<BoxModelLanguage>)((OkObjectResult)actionBoxModelLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<BoxModelLanguage> with skip and take
            var actionBoxModelLanguageListSkipAndTake = await BoxModelLanguageDBService.GetBoxModelLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageListSkipAndTake.Result).Value);
            List<BoxModelLanguage> boxModelLanguageListSkipAndTake = (List<BoxModelLanguage>)((OkObjectResult)actionBoxModelLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<BoxModelLanguage>)((OkObjectResult)actionBoxModelLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(boxModelLanguageList[0].BoxModelLanguageID == boxModelLanguageListSkipAndTake[0].BoxModelLanguageID);

            // Get BoxModelLanguage With BoxModelLanguageID
            var actionBoxModelLanguageGet = await BoxModelLanguageDBService.GetBoxModelLanguageWithBoxModelLanguageID(boxModelLanguageList[0].BoxModelLanguageID);
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageGet.Result).Value);
            BoxModelLanguage boxModelLanguageGet = (BoxModelLanguage)((OkObjectResult)actionBoxModelLanguageGet.Result).Value;
            Assert.NotNull(boxModelLanguageGet);
            Assert.Equal(boxModelLanguageGet.BoxModelLanguageID, boxModelLanguageList[0].BoxModelLanguageID);

            // Put BoxModelLanguage
            var actionBoxModelLanguageUpdated = await BoxModelLanguageDBService.Put(boxModelLanguage);
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageUpdated.Result).Value);
            BoxModelLanguage boxModelLanguageUpdated = (BoxModelLanguage)((OkObjectResult)actionBoxModelLanguageUpdated.Result).Value;
            Assert.NotNull(boxModelLanguageUpdated);

            // Delete BoxModelLanguage
            var actionBoxModelLanguageDeleted = await BoxModelLanguageDBService.Delete(boxModelLanguage.BoxModelLanguageID);
            Assert.Equal(200, ((ObjectResult)actionBoxModelLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionBoxModelLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionBoxModelLanguageDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IBoxModelLanguageDBService, BoxModelLanguageDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Config.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Config.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            BoxModelLanguageDBService = Provider.GetService<IBoxModelLanguageDBService>();
            Assert.NotNull(BoxModelLanguageDBService);

            return await Task.FromResult(true);
        }
        private BoxModelLanguage GetFilledRandomBoxModelLanguage(string OmitPropName)
        {
            BoxModelLanguage boxModelLanguage = new BoxModelLanguage();

            if (OmitPropName != "DBCommand") boxModelLanguage.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "BoxModelID") boxModelLanguage.BoxModelID = 1;
            if (OmitPropName != "Language") boxModelLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "ScenarioName") boxModelLanguage.ScenarioName = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatus") boxModelLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") boxModelLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") boxModelLanguage.LastUpdateContactTVItemID = 2;

            return boxModelLanguage;
        }
        private void CheckBoxModelLanguageFields(List<BoxModelLanguage> boxModelLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(boxModelLanguageList[0].ScenarioName));
        }

        #endregion Functions private
    }
}
