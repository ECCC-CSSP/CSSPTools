/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class ClimateDataValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IClimateDataValueDBService ClimateDataValueDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private ClimateDataValue climateDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public ClimateDataValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ClimateDataValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ClimateDataValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            climateDataValue = GetFilledRandomClimateDataValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ClimateDataValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionClimateDataValueList = await ClimateDataValueDBService.GetClimateDataValueList();
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueList.Result).Value);
            List<ClimateDataValue> climateDataValueList = (List<ClimateDataValue>)((OkObjectResult)actionClimateDataValueList.Result).Value;

            count = climateDataValueList.Count();

            ClimateDataValue climateDataValue = GetFilledRandomClimateDataValue("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // climateDataValue.ClimateDataValueID   (Int32)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.ClimateDataValueID = 0;

            var actionClimateDataValue = await ClimateDataValueDBService.Put(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.ClimateDataValueID = 10000000;
            actionClimateDataValue = await ClimateDataValueDBService.Put(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // climateDataValue.DBCommand   (DBCommandEnum)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.DBCommand = (DBCommandEnum)1000000;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "ClimateSite", ExistPlurial = "s", ExistFieldID = "ClimateSiteID", AllowableTVtypeList = )]
            // climateDataValue.ClimateSiteID   (Int32)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.ClimateSiteID = 0;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // climateDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.DateTime_Local = new DateTime();
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // climateDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // climateDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // climateDataValue.HasBeenRead   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // climateDataValue.Snow_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Snow_cm]

            //CSSPError: Type not implemented [Snow_cm]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.Snow_cm = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.Snow_cm = 10001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // climateDataValue.Rainfall_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Rainfall_mm]

            //CSSPError: Type not implemented [Rainfall_mm]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.Rainfall_mm = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.Rainfall_mm = 10001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // climateDataValue.RainfallEntered_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainfallEntered_mm]

            //CSSPError: Type not implemented [RainfallEntered_mm]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.RainfallEntered_mm = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.RainfallEntered_mm = 10001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // climateDataValue.TotalPrecip_mm_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TotalPrecip_mm_cm]

            //CSSPError: Type not implemented [TotalPrecip_mm_cm]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.TotalPrecip_mm_cm = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.TotalPrecip_mm_cm = 10001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-50, 50)]
            // climateDataValue.MaxTemp_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MaxTemp_C]

            //CSSPError: Type not implemented [MaxTemp_C]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.MaxTemp_C = -51.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.MaxTemp_C = 51.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-50, 50)]
            // climateDataValue.MinTemp_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [MinTemp_C]

            //CSSPError: Type not implemented [MinTemp_C]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.MinTemp_C = -51.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.MinTemp_C = 51.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-1000, 100)]
            // climateDataValue.HeatDegDays_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [HeatDegDays_C]

            //CSSPError: Type not implemented [HeatDegDays_C]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.HeatDegDays_C = -1001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.HeatDegDays_C = 101.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(-1000, 100)]
            // climateDataValue.CoolDegDays_C   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [CoolDegDays_C]

            //CSSPError: Type not implemented [CoolDegDays_C]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.CoolDegDays_C = -1001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.CoolDegDays_C = 101.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // climateDataValue.SnowOnGround_cm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [SnowOnGround_cm]

            //CSSPError: Type not implemented [SnowOnGround_cm]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.SnowOnGround_cm = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.SnowOnGround_cm = 10001.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 360)]
            // climateDataValue.DirMaxGust_0North   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DirMaxGust_0North]

            //CSSPError: Type not implemented [DirMaxGust_0North]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.DirMaxGust_0North = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.DirMaxGust_0North = 361.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 300)]
            // climateDataValue.SpdMaxGust_kmh   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [SpdMaxGust_kmh]

            //CSSPError: Type not implemented [SpdMaxGust_kmh]

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.SpdMaxGust_kmh = -1.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueService.GetClimateDataValueList().Count());
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.SpdMaxGust_kmh = 301.0D;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            //Assert.AreEqual(count, climateDataValueDBService.GetClimateDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // climateDataValue.HourlyValues   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // climateDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.LastUpdateDate_UTC = new DateTime();
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);
            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // climateDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.LastUpdateContactTVItemID = 0;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);

            climateDataValue = null;
            climateDataValue = GetFilledRandomClimateDataValue("");
            climateDataValue.LastUpdateContactTVItemID = 1;
            actionClimateDataValue = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.IsType<BadRequestObjectResult>(actionClimateDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post ClimateDataValue
            var actionClimateDataValueAdded = await ClimateDataValueDBService.Post(climateDataValue);
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueAdded.Result).Value);
            ClimateDataValue climateDataValueAdded = (ClimateDataValue)((OkObjectResult)actionClimateDataValueAdded.Result).Value;
            Assert.NotNull(climateDataValueAdded);

            // List<ClimateDataValue>
            var actionClimateDataValueList = await ClimateDataValueDBService.GetClimateDataValueList();
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueList.Result).Value);
            List<ClimateDataValue> climateDataValueList = (List<ClimateDataValue>)((OkObjectResult)actionClimateDataValueList.Result).Value;

            int count = ((List<ClimateDataValue>)((OkObjectResult)actionClimateDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<ClimateDataValue> with skip and take
            var actionClimateDataValueListSkipAndTake = await ClimateDataValueDBService.GetClimateDataValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueListSkipAndTake.Result).Value);
            List<ClimateDataValue> climateDataValueListSkipAndTake = (List<ClimateDataValue>)((OkObjectResult)actionClimateDataValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<ClimateDataValue>)((OkObjectResult)actionClimateDataValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(climateDataValueList[0].ClimateDataValueID == climateDataValueListSkipAndTake[0].ClimateDataValueID);

            // Get ClimateDataValue With ClimateDataValueID
            var actionClimateDataValueGet = await ClimateDataValueDBService.GetClimateDataValueWithClimateDataValueID(climateDataValueList[0].ClimateDataValueID);
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueGet.Result).Value);
            ClimateDataValue climateDataValueGet = (ClimateDataValue)((OkObjectResult)actionClimateDataValueGet.Result).Value;
            Assert.NotNull(climateDataValueGet);
            Assert.Equal(climateDataValueGet.ClimateDataValueID, climateDataValueList[0].ClimateDataValueID);

            // Put ClimateDataValue
            var actionClimateDataValueUpdated = await ClimateDataValueDBService.Put(climateDataValue);
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueUpdated.Result).Value);
            ClimateDataValue climateDataValueUpdated = (ClimateDataValue)((OkObjectResult)actionClimateDataValueUpdated.Result).Value;
            Assert.NotNull(climateDataValueUpdated);

            // Delete ClimateDataValue
            var actionClimateDataValueDeleted = await ClimateDataValueDBService.Delete(climateDataValue.ClimateDataValueID);
            Assert.Equal(200, ((ObjectResult)actionClimateDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionClimateDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionClimateDataValueDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("70c662c1-a1a8-4b2c-b594-d7834bb5e6db")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IClimateDataValueDBService, ClimateDataValueDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            ClimateDataValueDBService = Provider.GetService<IClimateDataValueDBService>();
            Assert.NotNull(ClimateDataValueDBService);

            return await Task.FromResult(true);
        }
        private ClimateDataValue GetFilledRandomClimateDataValue(string OmitPropName)
        {
            ClimateDataValue climateDataValue = new ClimateDataValue();

            if (OmitPropName != "DBCommand") climateDataValue.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "ClimateSiteID") climateDataValue.ClimateSiteID = 1;
            if (OmitPropName != "DateTime_Local") climateDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") climateDataValue.Keep = true;
            if (OmitPropName != "StorageDataType") climateDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "HasBeenRead") climateDataValue.HasBeenRead = true;
            if (OmitPropName != "Snow_cm") climateDataValue.Snow_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "Rainfall_mm") climateDataValue.Rainfall_mm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "RainfallEntered_mm") climateDataValue.RainfallEntered_mm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "TotalPrecip_mm_cm") climateDataValue.TotalPrecip_mm_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "MaxTemp_C") climateDataValue.MaxTemp_C = GetRandomDouble(-50.0D, 50.0D);
            if (OmitPropName != "MinTemp_C") climateDataValue.MinTemp_C = GetRandomDouble(-50.0D, 50.0D);
            if (OmitPropName != "HeatDegDays_C") climateDataValue.HeatDegDays_C = GetRandomDouble(-1000.0D, 100.0D);
            if (OmitPropName != "CoolDegDays_C") climateDataValue.CoolDegDays_C = GetRandomDouble(-1000.0D, 100.0D);
            if (OmitPropName != "SnowOnGround_cm") climateDataValue.SnowOnGround_cm = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "DirMaxGust_0North") climateDataValue.DirMaxGust_0North = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "SpdMaxGust_kmh") climateDataValue.SpdMaxGust_kmh = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "HourlyValues") climateDataValue.HourlyValues = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") climateDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") climateDataValue.LastUpdateContactTVItemID = 2;



            return climateDataValue;
        }
        private void CheckClimateDataValueFields(List<ClimateDataValue> climateDataValueList)
        {
            if (climateDataValueList[0].Snow_cm != null)
            {
                Assert.NotNull(climateDataValueList[0].Snow_cm);
            }
            if (climateDataValueList[0].Rainfall_mm != null)
            {
                Assert.NotNull(climateDataValueList[0].Rainfall_mm);
            }
            if (climateDataValueList[0].RainfallEntered_mm != null)
            {
                Assert.NotNull(climateDataValueList[0].RainfallEntered_mm);
            }
            if (climateDataValueList[0].TotalPrecip_mm_cm != null)
            {
                Assert.NotNull(climateDataValueList[0].TotalPrecip_mm_cm);
            }
            if (climateDataValueList[0].MaxTemp_C != null)
            {
                Assert.NotNull(climateDataValueList[0].MaxTemp_C);
            }
            if (climateDataValueList[0].MinTemp_C != null)
            {
                Assert.NotNull(climateDataValueList[0].MinTemp_C);
            }
            if (climateDataValueList[0].HeatDegDays_C != null)
            {
                Assert.NotNull(climateDataValueList[0].HeatDegDays_C);
            }
            if (climateDataValueList[0].CoolDegDays_C != null)
            {
                Assert.NotNull(climateDataValueList[0].CoolDegDays_C);
            }
            if (climateDataValueList[0].SnowOnGround_cm != null)
            {
                Assert.NotNull(climateDataValueList[0].SnowOnGround_cm);
            }
            if (climateDataValueList[0].DirMaxGust_0North != null)
            {
                Assert.NotNull(climateDataValueList[0].DirMaxGust_0North);
            }
            if (climateDataValueList[0].SpdMaxGust_kmh != null)
            {
                Assert.NotNull(climateDataValueList[0].SpdMaxGust_kmh);
            }
            if (!string.IsNullOrWhiteSpace(climateDataValueList[0].HourlyValues))
            {
                Assert.False(string.IsNullOrWhiteSpace(climateDataValueList[0].HourlyValues));
            }
        }

        #endregion Functions private
    }
}
