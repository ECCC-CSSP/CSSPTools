/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class CoCoRaHSSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ICoCoRaHSSiteDBService CoCoRaHSSiteDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private CoCoRaHSSite coCoRaHSSite { get; set; }
        #endregion Properties

        #region Constructors
        public CoCoRaHSSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionCoCoRaHSSiteList = await CoCoRaHSSiteDBService.GetCoCoRaHSSiteList();
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteList.Result).Value);
            List<CoCoRaHSSite> coCoRaHSSiteList = (List<CoCoRaHSSite>)((OkObjectResult)actionCoCoRaHSSiteList.Result).Value;

            count = coCoRaHSSiteList.Count();

            CoCoRaHSSite coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // coCoRaHSSite.CoCoRaHSSiteID   (Int32)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.CoCoRaHSSiteID = 0;

            var actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Put(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.CoCoRaHSSiteID = 10000000;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Put(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // coCoRaHSSite.DBCommand   (DBCommandEnum)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.DBCommand = (DBCommandEnum)1000000;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // coCoRaHSSite.StationNumber   (String)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("StationNumber");
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.StationNumber = GetRandomString("", 101);
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteDBService.GetCoCoRaHSSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // coCoRaHSSite.StationName   (String)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("StationName");
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.StationName = GetRandomString("", 101);
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteDBService.GetCoCoRaHSSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSSite.Latitude   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Latitude]

            //CSSPError: Type not implemented [Latitude]

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.Latitude = -1.0D;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteService.GetCoCoRaHSSiteList().Count());
            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.Latitude = 10001.0D;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteDBService.GetCoCoRaHSSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSSite.Longitude   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Longitude]

            //CSSPError: Type not implemented [Longitude]

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.Longitude = -1.0D;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteService.GetCoCoRaHSSiteList().Count());
            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.Longitude = 10001.0D;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            //Assert.AreEqual(count, coCoRaHSSiteDBService.GetCoCoRaHSSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // coCoRaHSSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.LastUpdateDate_UTC = new DateTime();
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);
            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // coCoRaHSSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.LastUpdateContactTVItemID = 0;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

            coCoRaHSSite = null;
            coCoRaHSSite = GetFilledRandomCoCoRaHSSite("");
            coCoRaHSSite.LastUpdateContactTVItemID = 1;
            actionCoCoRaHSSite = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post CoCoRaHSSite
            var actionCoCoRaHSSiteAdded = await CoCoRaHSSiteDBService.Post(coCoRaHSSite);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteAdded.Result).Value);
            CoCoRaHSSite coCoRaHSSiteAdded = (CoCoRaHSSite)((OkObjectResult)actionCoCoRaHSSiteAdded.Result).Value;
            Assert.NotNull(coCoRaHSSiteAdded);

            // List<CoCoRaHSSite>
            var actionCoCoRaHSSiteList = await CoCoRaHSSiteDBService.GetCoCoRaHSSiteList();
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteList.Result).Value);
            List<CoCoRaHSSite> coCoRaHSSiteList = (List<CoCoRaHSSite>)((OkObjectResult)actionCoCoRaHSSiteList.Result).Value;

            int count = ((List<CoCoRaHSSite>)((OkObjectResult)actionCoCoRaHSSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<CoCoRaHSSite> with skip and take
            var actionCoCoRaHSSiteListSkipAndTake = await CoCoRaHSSiteDBService.GetCoCoRaHSSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteListSkipAndTake.Result).Value);
            List<CoCoRaHSSite> coCoRaHSSiteListSkipAndTake = (List<CoCoRaHSSite>)((OkObjectResult)actionCoCoRaHSSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<CoCoRaHSSite>)((OkObjectResult)actionCoCoRaHSSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(coCoRaHSSiteList[0].CoCoRaHSSiteID == coCoRaHSSiteListSkipAndTake[0].CoCoRaHSSiteID);

            // Get CoCoRaHSSite With CoCoRaHSSiteID
            var actionCoCoRaHSSiteGet = await CoCoRaHSSiteDBService.GetCoCoRaHSSiteWithCoCoRaHSSiteID(coCoRaHSSiteList[0].CoCoRaHSSiteID);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteGet.Result).Value);
            CoCoRaHSSite coCoRaHSSiteGet = (CoCoRaHSSite)((OkObjectResult)actionCoCoRaHSSiteGet.Result).Value;
            Assert.NotNull(coCoRaHSSiteGet);
            Assert.Equal(coCoRaHSSiteGet.CoCoRaHSSiteID, coCoRaHSSiteList[0].CoCoRaHSSiteID);

            // Put CoCoRaHSSite
            var actionCoCoRaHSSiteUpdated = await CoCoRaHSSiteDBService.Put(coCoRaHSSite);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteUpdated.Result).Value);
            CoCoRaHSSite coCoRaHSSiteUpdated = (CoCoRaHSSite)((OkObjectResult)actionCoCoRaHSSiteUpdated.Result).Value;
            Assert.NotNull(coCoRaHSSiteUpdated);

            // Delete CoCoRaHSSite
            var actionCoCoRaHSSiteDeleted = await CoCoRaHSSiteDBService.Delete(coCoRaHSSite.CoCoRaHSSiteID);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionCoCoRaHSSiteDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ICoCoRaHSSiteDBService, CoCoRaHSSiteDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            CoCoRaHSSiteDBService = Provider.GetService<ICoCoRaHSSiteDBService>();
            Assert.NotNull(CoCoRaHSSiteDBService);

            return await Task.FromResult(true);
        }
        private CoCoRaHSSite GetFilledRandomCoCoRaHSSite(string OmitPropName)
        {
            CoCoRaHSSite coCoRaHSSite = new CoCoRaHSSite();

            if (OmitPropName != "DBCommand") coCoRaHSSite.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "StationNumber") coCoRaHSSite.StationNumber = GetRandomString("", 5);
            if (OmitPropName != "StationName") coCoRaHSSite.StationName = GetRandomString("", 5);
            if (OmitPropName != "Latitude") coCoRaHSSite.Latitude = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "Longitude") coCoRaHSSite.Longitude = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "LastUpdateDate_UTC") coCoRaHSSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") coCoRaHSSite.LastUpdateContactTVItemID = 2;

            return coCoRaHSSite;
        }
        private void CheckCoCoRaHSSiteFields(List<CoCoRaHSSite> coCoRaHSSiteList)
        {
            Assert.False(string.IsNullOrWhiteSpace(coCoRaHSSiteList[0].StationNumber));
            Assert.False(string.IsNullOrWhiteSpace(coCoRaHSSiteList[0].StationName));
        }

        #endregion Functions private
    }
}
