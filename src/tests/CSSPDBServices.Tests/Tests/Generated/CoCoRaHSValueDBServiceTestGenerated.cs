/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class CoCoRaHSValueDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ICoCoRaHSValueDBService CoCoRaHSValueDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private CoCoRaHSValue coCoRaHSValue { get; set; }
        #endregion Properties

        #region Constructors
        public CoCoRaHSValueDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSValueDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSValueDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task CoCoRaHSValue_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionCoCoRaHSValueList = await CoCoRaHSValueDBService.GetCoCoRaHSValueList();
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueList.Result).Value);
            List<CoCoRaHSValue> coCoRaHSValueList = (List<CoCoRaHSValue>)((OkObjectResult)actionCoCoRaHSValueList.Result).Value;

            count = coCoRaHSValueList.Count();

            CoCoRaHSValue coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // coCoRaHSValue.CoCoRaHSValueID   (Int32)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.CoCoRaHSValueID = 0;

            var actionCoCoRaHSValue = await CoCoRaHSValueDBService.Put(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.CoCoRaHSValueID = 10000000;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Put(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // coCoRaHSValue.DBCommand   (DBCommandEnum)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.DBCommand = (DBCommandEnum)1000000;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "CoCoRaHSSite", ExistPlurial = "s", ExistFieldID = "CoCoRaHSSiteID", AllowableTVtypeList = )]
            // coCoRaHSValue.CoCoRaHSSiteID   (Int32)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.CoCoRaHSSiteID = 0;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // coCoRaHSValue.ObservationDateAndTime   (DateTime)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.ObservationDateAndTime = new DateTime();
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.ObservationDateAndTime = new DateTime(1979, 1, 1);
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSValue.TotalPrecipAmt   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TotalPrecipAmt]

            //CSSPError: Type not implemented [TotalPrecipAmt]

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalPrecipAmt = -1.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueService.GetCoCoRaHSValueList().Count());
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalPrecipAmt = 10001.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueDBService.GetCoCoRaHSValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSValue.NewSnowDepth   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [NewSnowDepth]

            //CSSPError: Type not implemented [NewSnowDepth]

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.NewSnowDepth = -1.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueService.GetCoCoRaHSValueList().Count());
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.NewSnowDepth = 10001.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueDBService.GetCoCoRaHSValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSValue.NewSnowSWE   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [NewSnowSWE]

            //CSSPError: Type not implemented [NewSnowSWE]

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.NewSnowSWE = -1.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueService.GetCoCoRaHSValueList().Count());
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.NewSnowSWE = 10001.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueDBService.GetCoCoRaHSValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSValue.TotalSnowDepth   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TotalSnowDepth]

            //CSSPError: Type not implemented [TotalSnowDepth]

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalSnowDepth = -1.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueService.GetCoCoRaHSValueList().Count());
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalSnowDepth = 10001.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueDBService.GetCoCoRaHSValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 10000)]
            // coCoRaHSValue.TotalSnowSWE   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TotalSnowSWE]

            //CSSPError: Type not implemented [TotalSnowSWE]

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalSnowSWE = -1.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueService.GetCoCoRaHSValueList().Count());
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.TotalSnowSWE = 10001.0D;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            //Assert.AreEqual(count, coCoRaHSValueDBService.GetCoCoRaHSValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // coCoRaHSValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.LastUpdateDate_UTC = new DateTime();
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);
            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // coCoRaHSValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.LastUpdateContactTVItemID = 0;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);

            coCoRaHSValue = null;
            coCoRaHSValue = GetFilledRandomCoCoRaHSValue("");
            coCoRaHSValue.LastUpdateContactTVItemID = 1;
            actionCoCoRaHSValue = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.IsType<BadRequestObjectResult>(actionCoCoRaHSValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post CoCoRaHSValue
            var actionCoCoRaHSValueAdded = await CoCoRaHSValueDBService.Post(coCoRaHSValue);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueAdded.Result).Value);
            CoCoRaHSValue coCoRaHSValueAdded = (CoCoRaHSValue)((OkObjectResult)actionCoCoRaHSValueAdded.Result).Value;
            Assert.NotNull(coCoRaHSValueAdded);

            // List<CoCoRaHSValue>
            var actionCoCoRaHSValueList = await CoCoRaHSValueDBService.GetCoCoRaHSValueList();
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueList.Result).Value);
            List<CoCoRaHSValue> coCoRaHSValueList = (List<CoCoRaHSValue>)((OkObjectResult)actionCoCoRaHSValueList.Result).Value;

            int count = ((List<CoCoRaHSValue>)((OkObjectResult)actionCoCoRaHSValueList.Result).Value).Count();
            Assert.True(count > 0);

            // List<CoCoRaHSValue> with skip and take
            var actionCoCoRaHSValueListSkipAndTake = await CoCoRaHSValueDBService.GetCoCoRaHSValueList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueListSkipAndTake.Result).Value);
            List<CoCoRaHSValue> coCoRaHSValueListSkipAndTake = (List<CoCoRaHSValue>)((OkObjectResult)actionCoCoRaHSValueListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<CoCoRaHSValue>)((OkObjectResult)actionCoCoRaHSValueListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(coCoRaHSValueList[0].CoCoRaHSValueID == coCoRaHSValueListSkipAndTake[0].CoCoRaHSValueID);

            // Get CoCoRaHSValue With CoCoRaHSValueID
            var actionCoCoRaHSValueGet = await CoCoRaHSValueDBService.GetCoCoRaHSValueWithCoCoRaHSValueID(coCoRaHSValueList[0].CoCoRaHSValueID);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueGet.Result).Value);
            CoCoRaHSValue coCoRaHSValueGet = (CoCoRaHSValue)((OkObjectResult)actionCoCoRaHSValueGet.Result).Value;
            Assert.NotNull(coCoRaHSValueGet);
            Assert.Equal(coCoRaHSValueGet.CoCoRaHSValueID, coCoRaHSValueList[0].CoCoRaHSValueID);

            // Put CoCoRaHSValue
            var actionCoCoRaHSValueUpdated = await CoCoRaHSValueDBService.Put(coCoRaHSValue);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueUpdated.Result).Value);
            CoCoRaHSValue coCoRaHSValueUpdated = (CoCoRaHSValue)((OkObjectResult)actionCoCoRaHSValueUpdated.Result).Value;
            Assert.NotNull(coCoRaHSValueUpdated);

            // Delete CoCoRaHSValue
            var actionCoCoRaHSValueDeleted = await CoCoRaHSValueDBService.Delete(coCoRaHSValue.CoCoRaHSValueID);
            Assert.Equal(200, ((ObjectResult)actionCoCoRaHSValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionCoCoRaHSValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionCoCoRaHSValueDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ICoCoRaHSValueDBService, CoCoRaHSValueDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            CoCoRaHSValueDBService = Provider.GetService<ICoCoRaHSValueDBService>();
            Assert.NotNull(CoCoRaHSValueDBService);

            return await Task.FromResult(true);
        }
        private CoCoRaHSValue GetFilledRandomCoCoRaHSValue(string OmitPropName)
        {
            CoCoRaHSValue coCoRaHSValue = new CoCoRaHSValue();

            if (OmitPropName != "DBCommand") coCoRaHSValue.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "CoCoRaHSSiteID") coCoRaHSValue.CoCoRaHSSiteID = 1;
            if (OmitPropName != "ObservationDateAndTime") coCoRaHSValue.ObservationDateAndTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "TotalPrecipAmt") coCoRaHSValue.TotalPrecipAmt = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "NewSnowDepth") coCoRaHSValue.NewSnowDepth = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "NewSnowSWE") coCoRaHSValue.NewSnowSWE = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "TotalSnowDepth") coCoRaHSValue.TotalSnowDepth = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "TotalSnowSWE") coCoRaHSValue.TotalSnowSWE = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "LastUpdateDate_UTC") coCoRaHSValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") coCoRaHSValue.LastUpdateContactTVItemID = 2;

            return coCoRaHSValue;
        }
        private void CheckCoCoRaHSValueFields(List<CoCoRaHSValue> coCoRaHSValueList)
        {
            if (coCoRaHSValueList[0].TotalPrecipAmt != null)
            {
                Assert.NotNull(coCoRaHSValueList[0].TotalPrecipAmt);
            }
            if (coCoRaHSValueList[0].NewSnowDepth != null)
            {
                Assert.NotNull(coCoRaHSValueList[0].NewSnowDepth);
            }
            if (coCoRaHSValueList[0].NewSnowSWE != null)
            {
                Assert.NotNull(coCoRaHSValueList[0].NewSnowSWE);
            }
            if (coCoRaHSValueList[0].TotalSnowDepth != null)
            {
                Assert.NotNull(coCoRaHSValueList[0].TotalSnowDepth);
            }
            if (coCoRaHSValueList[0].TotalSnowSWE != null)
            {
                Assert.NotNull(coCoRaHSValueList[0].TotalSnowSWE);
            }
        }

        #endregion Functions private
    }
}
