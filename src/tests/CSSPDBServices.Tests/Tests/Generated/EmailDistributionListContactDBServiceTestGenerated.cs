/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class EmailDistributionListContactDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IEmailDistributionListContactDBService EmailDistributionListContactDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private EmailDistributionListContact emailDistributionListContact { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListContactDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContactDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContactDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task EmailDistributionListContact_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionEmailDistributionListContactList = await EmailDistributionListContactDBService.GetEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactList.Result).Value);
            List<EmailDistributionListContact> emailDistributionListContactList = (List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value;

            count = emailDistributionListContactList.Count();

            EmailDistributionListContact emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // emailDistributionListContact.EmailDistributionListContactID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListContactID = 0;

            var actionEmailDistributionListContact = await EmailDistributionListContactDBService.Put(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListContactID = 10000000;
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Put(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // emailDistributionListContact.DBCommand   (DBCommandEnum)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.DBCommand = (DBCommandEnum)1000000;
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // emailDistributionListContact.EmailDistributionListID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.EmailDistributionListID = 0;
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.IsCC   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // emailDistributionListContact.Name   (String)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("Name");
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.Name = GetRandomString("", 101);
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            //Assert.AreEqual(count, emailDistributionListContactDBService.GetEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(200)]
            // emailDistributionListContact.Email   (String)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("Email");
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.Email = GetRandomString("", 201);
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            //Assert.AreEqual(count, emailDistributionListContactDBService.GetEmailDistributionListContactList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.CMPRainfallSeasonal   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.CMPWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.EmergencyWeather   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.EmergencyWastewater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // emailDistributionListContact.ReopeningAllTypes   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // emailDistributionListContact.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateDate_UTC = new DateTime();
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);
            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // emailDistributionListContact.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateContactTVItemID = 0;
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

            emailDistributionListContact = null;
            emailDistributionListContact = GetFilledRandomEmailDistributionListContact("");
            emailDistributionListContact.LastUpdateContactTVItemID = 1;
            actionEmailDistributionListContact = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.IsType<BadRequestObjectResult>(actionEmailDistributionListContact.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post EmailDistributionListContact
            var actionEmailDistributionListContactAdded = await EmailDistributionListContactDBService.Post(emailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactAdded.Result).Value);
            EmailDistributionListContact emailDistributionListContactAdded = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactAdded.Result).Value;
            Assert.NotNull(emailDistributionListContactAdded);

            // List<EmailDistributionListContact>
            var actionEmailDistributionListContactList = await EmailDistributionListContactDBService.GetEmailDistributionListContactList();
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactList.Result).Value);
            List<EmailDistributionListContact> emailDistributionListContactList = (List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value;

            int count = ((List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactList.Result).Value).Count();
            Assert.True(count > 0);

            // List<EmailDistributionListContact> with skip and take
            var actionEmailDistributionListContactListSkipAndTake = await EmailDistributionListContactDBService.GetEmailDistributionListContactList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactListSkipAndTake.Result).Value);
            List<EmailDistributionListContact> emailDistributionListContactListSkipAndTake = (List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<EmailDistributionListContact>)((OkObjectResult)actionEmailDistributionListContactListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(emailDistributionListContactList[0].EmailDistributionListContactID == emailDistributionListContactListSkipAndTake[0].EmailDistributionListContactID);

            // Get EmailDistributionListContact With EmailDistributionListContactID
            var actionEmailDistributionListContactGet = await EmailDistributionListContactDBService.GetEmailDistributionListContactWithEmailDistributionListContactID(emailDistributionListContactList[0].EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactGet.Result).Value);
            EmailDistributionListContact emailDistributionListContactGet = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactGet.Result).Value;
            Assert.NotNull(emailDistributionListContactGet);
            Assert.Equal(emailDistributionListContactGet.EmailDistributionListContactID, emailDistributionListContactList[0].EmailDistributionListContactID);

            // Put EmailDistributionListContact
            var actionEmailDistributionListContactUpdated = await EmailDistributionListContactDBService.Put(emailDistributionListContact);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactUpdated.Result).Value);
            EmailDistributionListContact emailDistributionListContactUpdated = (EmailDistributionListContact)((OkObjectResult)actionEmailDistributionListContactUpdated.Result).Value;
            Assert.NotNull(emailDistributionListContactUpdated);

            // Delete EmailDistributionListContact
            var actionEmailDistributionListContactDeleted = await EmailDistributionListContactDBService.Delete(emailDistributionListContact.EmailDistributionListContactID);
            Assert.Equal(200, ((ObjectResult)actionEmailDistributionListContactDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionEmailDistributionListContactDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionEmailDistributionListContactDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailDistributionListContactDBService, EmailDistributionListContactDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            EmailDistributionListContactDBService = Provider.GetService<IEmailDistributionListContactDBService>();
            Assert.NotNull(EmailDistributionListContactDBService);

            return await Task.FromResult(true);
        }
        private EmailDistributionListContact GetFilledRandomEmailDistributionListContact(string OmitPropName)
        {
            EmailDistributionListContact emailDistributionListContact = new EmailDistributionListContact();

            if (OmitPropName != "DBCommand") emailDistributionListContact.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "EmailDistributionListID") emailDistributionListContact.EmailDistributionListID = 1;
            if (OmitPropName != "IsCC") emailDistributionListContact.IsCC = true;
            if (OmitPropName != "Name") emailDistributionListContact.Name = GetRandomString("", 5);
            if (OmitPropName != "Email") emailDistributionListContact.Email = GetRandomEmail();
            if (OmitPropName != "CMPRainfallSeasonal") emailDistributionListContact.CMPRainfallSeasonal = true;
            if (OmitPropName != "CMPWastewater") emailDistributionListContact.CMPWastewater = true;
            if (OmitPropName != "EmergencyWeather") emailDistributionListContact.EmergencyWeather = true;
            if (OmitPropName != "EmergencyWastewater") emailDistributionListContact.EmergencyWastewater = true;
            if (OmitPropName != "ReopeningAllTypes") emailDistributionListContact.ReopeningAllTypes = true;
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionListContact.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionListContact.LastUpdateContactTVItemID = 2;

            return emailDistributionListContact;
        }
        private void CheckEmailDistributionListContactFields(List<EmailDistributionListContact> emailDistributionListContactList)
        {
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListContactList[0].Name));
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListContactList[0].Email));
        }

        #endregion Functions private
    }
}
