/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class MWQMSubsectorLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IMWQMSubsectorLanguageDBService MWQMSubsectorLanguageDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private MWQMSubsectorLanguage mwqmSubsectorLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSubsectorLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSubsectorLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSubsectorLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task MWQMSubsectorLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMWQMSubsectorLanguageList = await MWQMSubsectorLanguageDBService.GetMWQMSubsectorLanguageList();
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageList.Result).Value);
            List<MWQMSubsectorLanguage> mwqmSubsectorLanguageList = (List<MWQMSubsectorLanguage>)((OkObjectResult)actionMWQMSubsectorLanguageList.Result).Value;

            count = mwqmSubsectorLanguageList.Count();

            MWQMSubsectorLanguage mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mwqmSubsectorLanguage.MWQMSubsectorLanguageID   (Int32)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.MWQMSubsectorLanguageID = 0;

            var actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Put(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.MWQMSubsectorLanguageID = 10000000;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Put(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmSubsectorLanguage.DBCommand   (DBCommandEnum)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.DBCommand = (DBCommandEnum)1000000;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MWQMSubsector", ExistPlurial = "s", ExistFieldID = "MWQMSubsectorID", AllowableTVtypeList = )]
            // mwqmSubsectorLanguage.MWQMSubsectorID   (Int32)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.MWQMSubsectorID = 0;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmSubsectorLanguage.Language   (LanguageEnum)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.Language = (LanguageEnum)1000000;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // mwqmSubsectorLanguage.SubsectorDesc   (String)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("SubsectorDesc");
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.SubsectorDesc = GetRandomString("", 251);
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);
            //Assert.AreEqual(count, mwqmSubsectorLanguageDBService.GetMWQMSubsectorLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // mwqmSubsectorLanguage.TranslationStatusSubsectorDesc   (TranslationStatusEnum)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.TranslationStatusSubsectorDesc = (TranslationStatusEnum)1000000;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is Nullable
            // mwqmSubsectorLanguage.LogBook   (String)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // mwqmSubsectorLanguage.TranslationStatusLogBook   (TranslationStatusEnum)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.TranslationStatusLogBook = (TranslationStatusEnum)1000000;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mwqmSubsectorLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.LastUpdateDate_UTC = new DateTime();
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);
            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mwqmSubsectorLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.LastUpdateContactTVItemID = 0;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);

            mwqmSubsectorLanguage = null;
            mwqmSubsectorLanguage = GetFilledRandomMWQMSubsectorLanguage("");
            mwqmSubsectorLanguage.LastUpdateContactTVItemID = 1;
            actionMWQMSubsectorLanguage = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.IsType<BadRequestObjectResult>(actionMWQMSubsectorLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post MWQMSubsectorLanguage
            var actionMWQMSubsectorLanguageAdded = await MWQMSubsectorLanguageDBService.Post(mwqmSubsectorLanguage);
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageAdded.Result).Value);
            MWQMSubsectorLanguage mwqmSubsectorLanguageAdded = (MWQMSubsectorLanguage)((OkObjectResult)actionMWQMSubsectorLanguageAdded.Result).Value;
            Assert.NotNull(mwqmSubsectorLanguageAdded);

            // List<MWQMSubsectorLanguage>
            var actionMWQMSubsectorLanguageList = await MWQMSubsectorLanguageDBService.GetMWQMSubsectorLanguageList();
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageList.Result).Value);
            List<MWQMSubsectorLanguage> mwqmSubsectorLanguageList = (List<MWQMSubsectorLanguage>)((OkObjectResult)actionMWQMSubsectorLanguageList.Result).Value;

            int count = ((List<MWQMSubsectorLanguage>)((OkObjectResult)actionMWQMSubsectorLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<MWQMSubsectorLanguage> with skip and take
            var actionMWQMSubsectorLanguageListSkipAndTake = await MWQMSubsectorLanguageDBService.GetMWQMSubsectorLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageListSkipAndTake.Result).Value);
            List<MWQMSubsectorLanguage> mwqmSubsectorLanguageListSkipAndTake = (List<MWQMSubsectorLanguage>)((OkObjectResult)actionMWQMSubsectorLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<MWQMSubsectorLanguage>)((OkObjectResult)actionMWQMSubsectorLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(mwqmSubsectorLanguageList[0].MWQMSubsectorLanguageID == mwqmSubsectorLanguageListSkipAndTake[0].MWQMSubsectorLanguageID);

            // Get MWQMSubsectorLanguage With MWQMSubsectorLanguageID
            var actionMWQMSubsectorLanguageGet = await MWQMSubsectorLanguageDBService.GetMWQMSubsectorLanguageWithMWQMSubsectorLanguageID(mwqmSubsectorLanguageList[0].MWQMSubsectorLanguageID);
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageGet.Result).Value);
            MWQMSubsectorLanguage mwqmSubsectorLanguageGet = (MWQMSubsectorLanguage)((OkObjectResult)actionMWQMSubsectorLanguageGet.Result).Value;
            Assert.NotNull(mwqmSubsectorLanguageGet);
            Assert.Equal(mwqmSubsectorLanguageGet.MWQMSubsectorLanguageID, mwqmSubsectorLanguageList[0].MWQMSubsectorLanguageID);

            // Put MWQMSubsectorLanguage
            var actionMWQMSubsectorLanguageUpdated = await MWQMSubsectorLanguageDBService.Put(mwqmSubsectorLanguage);
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageUpdated.Result).Value);
            MWQMSubsectorLanguage mwqmSubsectorLanguageUpdated = (MWQMSubsectorLanguage)((OkObjectResult)actionMWQMSubsectorLanguageUpdated.Result).Value;
            Assert.NotNull(mwqmSubsectorLanguageUpdated);

            // Delete MWQMSubsectorLanguage
            var actionMWQMSubsectorLanguageDeleted = await MWQMSubsectorLanguageDBService.Delete(mwqmSubsectorLanguage.MWQMSubsectorLanguageID);
            Assert.Equal(200, ((ObjectResult)actionMWQMSubsectorLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMWQMSubsectorLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMWQMSubsectorLanguageDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMWQMSubsectorLanguageDBService, MWQMSubsectorLanguageDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Config.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Config.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            MWQMSubsectorLanguageDBService = Provider.GetService<IMWQMSubsectorLanguageDBService>();
            Assert.NotNull(MWQMSubsectorLanguageDBService);

            return await Task.FromResult(true);
        }
        private MWQMSubsectorLanguage GetFilledRandomMWQMSubsectorLanguage(string OmitPropName)
        {
            MWQMSubsectorLanguage mwqmSubsectorLanguage = new MWQMSubsectorLanguage();

            if (OmitPropName != "DBCommand") mwqmSubsectorLanguage.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "MWQMSubsectorID") mwqmSubsectorLanguage.MWQMSubsectorID = 1;
            if (OmitPropName != "Language") mwqmSubsectorLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "SubsectorDesc") mwqmSubsectorLanguage.SubsectorDesc = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusSubsectorDesc") mwqmSubsectorLanguage.TranslationStatusSubsectorDesc = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LogBook") mwqmSubsectorLanguage.LogBook = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusLogBook") mwqmSubsectorLanguage.TranslationStatusLogBook = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") mwqmSubsectorLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mwqmSubsectorLanguage.LastUpdateContactTVItemID = 2;

            return mwqmSubsectorLanguage;
        }
        private void CheckMWQMSubsectorLanguageFields(List<MWQMSubsectorLanguage> mwqmSubsectorLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(mwqmSubsectorLanguageList[0].SubsectorDesc));
            if (!string.IsNullOrWhiteSpace(mwqmSubsectorLanguageList[0].LogBook))
            {
                Assert.False(string.IsNullOrWhiteSpace(mwqmSubsectorLanguageList[0].LogBook));
            }
            if (mwqmSubsectorLanguageList[0].TranslationStatusLogBook != null)
            {
                Assert.NotNull(mwqmSubsectorLanguageList[0].TranslationStatusLogBook);
            }
        }

        #endregion Functions private
    }
}
