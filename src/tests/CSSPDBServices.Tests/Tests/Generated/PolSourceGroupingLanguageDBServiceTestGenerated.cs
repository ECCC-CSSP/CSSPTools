/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class PolSourceGroupingLanguageDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IPolSourceGroupingLanguageDBService PolSourceGroupingLanguageDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private PolSourceGroupingLanguage polSourceGroupingLanguage { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceGroupingLanguageDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguageDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguageDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceGroupingLanguage_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionPolSourceGroupingLanguageList = await PolSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value);
            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = (List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value;

            count = polSourceGroupingLanguageList.Count();

            PolSourceGroupingLanguage polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // polSourceGroupingLanguage.PolSourceGroupingLanguageID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingLanguageID = 0;

            var actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Put(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingLanguageID = 10000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Put(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "PolSourceGrouping", ExistPlurial = "s", ExistFieldID = "PolSourceGroupingID", AllowableTVtypeList = )]
            // polSourceGroupingLanguage.PolSourceGroupingID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.PolSourceGroupingID = 0;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.Language   (LanguageEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Language = (LanguageEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.SourceName   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("SourceName");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceName = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // polSourceGroupingLanguage.SourceNameOrder   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceNameOrder = -1;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());
            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.SourceNameOrder = 1001;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusSourceName   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(50)]
            // polSourceGroupingLanguage.Init   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Init");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Init = GetRandomString("", 51);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusInit   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Description   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Description");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Description = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusDescription   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Report   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Report");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Report = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusReport   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(500)]
            // polSourceGroupingLanguage.Text   (String)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Text");
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.Text = GetRandomString("", 501);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            //Assert.AreEqual(count, polSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceGroupingLanguage.TranslationStatusText   (TranslationStatusEnum)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)1000000;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceGroupingLanguage.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime();
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);
            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceGroupingLanguage.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateContactTVItemID = 0;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

            polSourceGroupingLanguage = null;
            polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
            polSourceGroupingLanguage.LastUpdateContactTVItemID = 1;
            actionPolSourceGroupingLanguage = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceGroupingLanguage.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageAdded = await PolSourceGroupingLanguageDBService.Post(polSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageAdded.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageAdded = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageAdded.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageAdded);

            // List<PolSourceGroupingLanguage>
            var actionPolSourceGroupingLanguageList = await PolSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value);
            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = (List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value;

            int count = ((List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageList.Result).Value).Count();
            Assert.True(count > 0);

            // List<PolSourceGroupingLanguage> with skip and take
            var actionPolSourceGroupingLanguageListSkipAndTake = await PolSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageListSkipAndTake.Result).Value);
            List<PolSourceGroupingLanguage> polSourceGroupingLanguageListSkipAndTake = (List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<PolSourceGroupingLanguage>)((OkObjectResult)actionPolSourceGroupingLanguageListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID == polSourceGroupingLanguageListSkipAndTake[0].PolSourceGroupingLanguageID);

            // Get PolSourceGroupingLanguage With PolSourceGroupingLanguageID
            var actionPolSourceGroupingLanguageGet = await PolSourceGroupingLanguageDBService.GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageGet.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageGet = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageGet.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageGet);
            Assert.Equal(polSourceGroupingLanguageGet.PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);

            // Put PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageUpdated = await PolSourceGroupingLanguageDBService.Put(polSourceGroupingLanguage);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageUpdated.Result).Value);
            PolSourceGroupingLanguage polSourceGroupingLanguageUpdated = (PolSourceGroupingLanguage)((OkObjectResult)actionPolSourceGroupingLanguageUpdated.Result).Value;
            Assert.NotNull(polSourceGroupingLanguageUpdated);

            // Delete PolSourceGroupingLanguage
            var actionPolSourceGroupingLanguageDeleted = await PolSourceGroupingLanguageDBService.Delete(polSourceGroupingLanguage.PolSourceGroupingLanguageID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceGroupingLanguageDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceGroupingLanguageDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionPolSourceGroupingLanguageDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("70c662c1-a1a8-4b2c-b594-d7834bb5e6db")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IPolSourceGroupingLanguageDBService, PolSourceGroupingLanguageDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            PolSourceGroupingLanguageDBService = Provider.GetService<IPolSourceGroupingLanguageDBService>();
            Assert.NotNull(PolSourceGroupingLanguageDBService);

            return await Task.FromResult(true);
        }
        private PolSourceGroupingLanguage GetFilledRandomPolSourceGroupingLanguage(string OmitPropName)
        {
            PolSourceGroupingLanguage polSourceGroupingLanguage = new PolSourceGroupingLanguage();

            if (OmitPropName != "PolSourceGroupingID") polSourceGroupingLanguage.PolSourceGroupingID = 0;
            if (OmitPropName != "Language") polSourceGroupingLanguage.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "SourceName") polSourceGroupingLanguage.SourceName = GetRandomString("", 5);
            if (OmitPropName != "SourceNameOrder") polSourceGroupingLanguage.SourceNameOrder = GetRandomInt(0, 1000);
            if (OmitPropName != "TranslationStatusSourceName") polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Init") polSourceGroupingLanguage.Init = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusInit") polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Description") polSourceGroupingLanguage.Description = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusDescription") polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Report") polSourceGroupingLanguage.Report = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusReport") polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Text") polSourceGroupingLanguage.Text = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusText") polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceGroupingLanguage.LastUpdateContactTVItemID = 2;



            return polSourceGroupingLanguage;
        }
        private void CheckPolSourceGroupingLanguageFields(List<PolSourceGroupingLanguage> polSourceGroupingLanguageList)
        {
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].SourceName));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Init));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Description));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Report));
            Assert.False(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Text));
        }

        #endregion Functions private
    }
}
