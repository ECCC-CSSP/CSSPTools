/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class PolSourceObservationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IPolSourceObservationDBService PolSourceObservationDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private PolSourceObservation polSourceObservation { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceObservationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceObservationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceObservationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            polSourceObservation = GetFilledRandomPolSourceObservation("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task PolSourceObservation_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionPolSourceObservationList = await PolSourceObservationDBService.GetPolSourceObservationList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationList.Result).Value);
            List<PolSourceObservation> polSourceObservationList = (List<PolSourceObservation>)((OkObjectResult)actionPolSourceObservationList.Result).Value;

            count = polSourceObservationList.Count();

            PolSourceObservation polSourceObservation = GetFilledRandomPolSourceObservation("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // polSourceObservation.PolSourceObservationID   (Int32)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.PolSourceObservationID = 0;

            var actionPolSourceObservation = await PolSourceObservationDBService.Put(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.PolSourceObservationID = 10000000;
            actionPolSourceObservation = await PolSourceObservationDBService.Put(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // polSourceObservation.DBCommand   (DBCommandEnum)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.DBCommand = (DBCommandEnum)1000000;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "PolSourceSite", ExistPlurial = "s", ExistFieldID = "PolSourceSiteID", AllowableTVtypeList = )]
            // polSourceObservation.PolSourceSiteID   (Int32)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.PolSourceSiteID = 0;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceObservation.ObservationDate_Local   (DateTime)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.ObservationDate_Local = new DateTime();
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);
            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.ObservationDate_Local = new DateTime(1979, 1, 1);
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceObservation.ContactTVItemID   (Int32)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.ContactTVItemID = 0;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.ContactTVItemID = 1;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // polSourceObservation.DesktopReviewed   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // polSourceObservation.Observation_ToBeDeleted   (String)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("Observation_ToBeDeleted");
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // polSourceObservation.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.LastUpdateDate_UTC = new DateTime();
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);
            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // polSourceObservation.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.LastUpdateContactTVItemID = 0;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

            polSourceObservation = null;
            polSourceObservation = GetFilledRandomPolSourceObservation("");
            polSourceObservation.LastUpdateContactTVItemID = 1;
            actionPolSourceObservation = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.IsType<BadRequestObjectResult>(actionPolSourceObservation.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post PolSourceObservation
            var actionPolSourceObservationAdded = await PolSourceObservationDBService.Post(polSourceObservation);
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationAdded.Result).Value);
            PolSourceObservation polSourceObservationAdded = (PolSourceObservation)((OkObjectResult)actionPolSourceObservationAdded.Result).Value;
            Assert.NotNull(polSourceObservationAdded);

            // List<PolSourceObservation>
            var actionPolSourceObservationList = await PolSourceObservationDBService.GetPolSourceObservationList();
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationList.Result).Value);
            List<PolSourceObservation> polSourceObservationList = (List<PolSourceObservation>)((OkObjectResult)actionPolSourceObservationList.Result).Value;

            int count = ((List<PolSourceObservation>)((OkObjectResult)actionPolSourceObservationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<PolSourceObservation> with skip and take
            var actionPolSourceObservationListSkipAndTake = await PolSourceObservationDBService.GetPolSourceObservationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationListSkipAndTake.Result).Value);
            List<PolSourceObservation> polSourceObservationListSkipAndTake = (List<PolSourceObservation>)((OkObjectResult)actionPolSourceObservationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<PolSourceObservation>)((OkObjectResult)actionPolSourceObservationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(polSourceObservationList[0].PolSourceObservationID == polSourceObservationListSkipAndTake[0].PolSourceObservationID);

            // Get PolSourceObservation With PolSourceObservationID
            var actionPolSourceObservationGet = await PolSourceObservationDBService.GetPolSourceObservationWithPolSourceObservationID(polSourceObservationList[0].PolSourceObservationID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationGet.Result).Value);
            PolSourceObservation polSourceObservationGet = (PolSourceObservation)((OkObjectResult)actionPolSourceObservationGet.Result).Value;
            Assert.NotNull(polSourceObservationGet);
            Assert.Equal(polSourceObservationGet.PolSourceObservationID, polSourceObservationList[0].PolSourceObservationID);

            // Put PolSourceObservation
            var actionPolSourceObservationUpdated = await PolSourceObservationDBService.Put(polSourceObservation);
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationUpdated.Result).Value);
            PolSourceObservation polSourceObservationUpdated = (PolSourceObservation)((OkObjectResult)actionPolSourceObservationUpdated.Result).Value;
            Assert.NotNull(polSourceObservationUpdated);

            // Delete PolSourceObservation
            var actionPolSourceObservationDeleted = await PolSourceObservationDBService.Delete(polSourceObservation.PolSourceObservationID);
            Assert.Equal(200, ((ObjectResult)actionPolSourceObservationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionPolSourceObservationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionPolSourceObservationDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IPolSourceObservationDBService, PolSourceObservationDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            PolSourceObservationDBService = Provider.GetService<IPolSourceObservationDBService>();
            Assert.NotNull(PolSourceObservationDBService);

            return await Task.FromResult(true);
        }
        private PolSourceObservation GetFilledRandomPolSourceObservation(string OmitPropName)
        {
            PolSourceObservation polSourceObservation = new PolSourceObservation();

            if (OmitPropName != "DBCommand") polSourceObservation.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "PolSourceSiteID") polSourceObservation.PolSourceSiteID = 1;
            if (OmitPropName != "ObservationDate_Local") polSourceObservation.ObservationDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "ContactTVItemID") polSourceObservation.ContactTVItemID = 2;
            if (OmitPropName != "DesktopReviewed") polSourceObservation.DesktopReviewed = true;
            if (OmitPropName != "Observation_ToBeDeleted") polSourceObservation.Observation_ToBeDeleted = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") polSourceObservation.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceObservation.LastUpdateContactTVItemID = 2;

            return polSourceObservation;
        }
        private void CheckPolSourceObservationFields(List<PolSourceObservation> polSourceObservationList)
        {
            Assert.False(string.IsNullOrWhiteSpace(polSourceObservationList[0].Observation_ToBeDeleted));
        }

        #endregion Functions private
    }
}
