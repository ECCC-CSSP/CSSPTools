/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class RainExceedanceDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IRainExceedanceDBService RainExceedanceDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private RainExceedance rainExceedance { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedanceDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedanceDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            rainExceedance = GetFilledRandomRainExceedance("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task RainExceedance_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionRainExceedanceList = await RainExceedanceDBService.GetRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceList.Result).Value);
            List<RainExceedance> rainExceedanceList = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value;

            count = rainExceedanceList.Count();

            RainExceedance rainExceedance = GetFilledRandomRainExceedance("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // rainExceedance.RainExceedanceID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceID = 0;

            var actionRainExceedance = await RainExceedanceDBService.Put(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceID = 10000000;
            actionRainExceedance = await RainExceedanceDBService.Put(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // rainExceedance.DBCommand   (DBCommandEnum)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.DBCommand = (DBCommandEnum)1000000;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
            // rainExceedance.RainExceedanceTVItemID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceTVItemID = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainExceedanceTVItemID = 1;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // rainExceedance.StartMonth   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartMonth = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartMonth = 13;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // rainExceedance.StartDay   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartDay = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StartDay = 32;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 12)]
            // rainExceedance.EndMonth   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndMonth = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndMonth = 13;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 31)]
            // rainExceedance.EndDay   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndDay = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.EndDay = 32;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 300)]
            // rainExceedance.RainMaximum_mm   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [RainMaximum_mm]

            //CSSPError: Type not implemented [RainMaximum_mm]

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainMaximum_mm = -1.0D;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceService.GetRainExceedanceList().Count());
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.RainMaximum_mm = 301.0D;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            //Assert.AreEqual(count, rainExceedanceDBService.GetRainExceedanceList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // rainExceedance.StakeholdersEmailDistributionListID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.StakeholdersEmailDistributionListID = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
            // rainExceedance.OnlyStaffEmailDistributionListID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.OnlyStaffEmailDistributionListID = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);


            // -----------------------------------
            // Is NOT Nullable
            // rainExceedance.IsActive   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // rainExceedance.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateDate_UTC = new DateTime();
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);
            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // rainExceedance.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateContactTVItemID = 0;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

            rainExceedance = null;
            rainExceedance = GetFilledRandomRainExceedance("");
            rainExceedance.LastUpdateContactTVItemID = 1;
            actionRainExceedance = await RainExceedanceDBService.Post(rainExceedance);
            Assert.IsType<BadRequestObjectResult>(actionRainExceedance.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post RainExceedance
            var actionRainExceedanceAdded = await RainExceedanceDBService.Post(rainExceedance);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceAdded.Result).Value);
            RainExceedance rainExceedanceAdded = (RainExceedance)((OkObjectResult)actionRainExceedanceAdded.Result).Value;
            Assert.NotNull(rainExceedanceAdded);

            // List<RainExceedance>
            var actionRainExceedanceList = await RainExceedanceDBService.GetRainExceedanceList();
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceList.Result).Value);
            List<RainExceedance> rainExceedanceList = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value;

            int count = ((List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value).Count();
            Assert.True(count > 0);

            // List<RainExceedance> with skip and take
            var actionRainExceedanceListSkipAndTake = await RainExceedanceDBService.GetRainExceedanceList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value);
            List<RainExceedance> rainExceedanceListSkipAndTake = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<RainExceedance>)((OkObjectResult)actionRainExceedanceListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(rainExceedanceList[0].RainExceedanceID == rainExceedanceListSkipAndTake[0].RainExceedanceID);

            // Get RainExceedance With RainExceedanceID
            var actionRainExceedanceGet = await RainExceedanceDBService.GetRainExceedanceWithRainExceedanceID(rainExceedanceList[0].RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceGet.Result).Value);
            RainExceedance rainExceedanceGet = (RainExceedance)((OkObjectResult)actionRainExceedanceGet.Result).Value;
            Assert.NotNull(rainExceedanceGet);
            Assert.Equal(rainExceedanceGet.RainExceedanceID, rainExceedanceList[0].RainExceedanceID);

            // Put RainExceedance
            var actionRainExceedanceUpdated = await RainExceedanceDBService.Put(rainExceedance);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceUpdated.Result).Value);
            RainExceedance rainExceedanceUpdated = (RainExceedance)((OkObjectResult)actionRainExceedanceUpdated.Result).Value;
            Assert.NotNull(rainExceedanceUpdated);

            // Delete RainExceedance
            var actionRainExceedanceDeleted = await RainExceedanceDBService.Delete(rainExceedance.RainExceedanceID);
            Assert.Equal(200, ((ObjectResult)actionRainExceedanceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionRainExceedanceDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionRainExceedanceDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IRainExceedanceDBService, RainExceedanceDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            RainExceedanceDBService = Provider.GetService<IRainExceedanceDBService>();
            Assert.NotNull(RainExceedanceDBService);

            return await Task.FromResult(true);
        }
        private RainExceedance GetFilledRandomRainExceedance(string OmitPropName)
        {
            RainExceedance rainExceedance = new RainExceedance();

            if (OmitPropName != "DBCommand") rainExceedance.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "RainExceedanceTVItemID") rainExceedance.RainExceedanceTVItemID = 56;
            if (OmitPropName != "StartMonth") rainExceedance.StartMonth = GetRandomInt(1, 12);
            if (OmitPropName != "StartDay") rainExceedance.StartDay = GetRandomInt(1, 31);
            if (OmitPropName != "EndMonth") rainExceedance.EndMonth = GetRandomInt(1, 12);
            if (OmitPropName != "EndDay") rainExceedance.EndDay = GetRandomInt(1, 31);
            if (OmitPropName != "RainMaximum_mm") rainExceedance.RainMaximum_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "StakeholdersEmailDistributionListID") rainExceedance.StakeholdersEmailDistributionListID = 1;
            if (OmitPropName != "OnlyStaffEmailDistributionListID") rainExceedance.OnlyStaffEmailDistributionListID = 1;
            if (OmitPropName != "IsActive") rainExceedance.IsActive = true;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedance.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedance.LastUpdateContactTVItemID = 2;

            return rainExceedance;
        }
        private void CheckRainExceedanceFields(List<RainExceedance> rainExceedanceList)
        {
            if (rainExceedanceList[0].StakeholdersEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].StakeholdersEmailDistributionListID);
            }
            if (rainExceedanceList[0].OnlyStaffEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].OnlyStaffEmailDistributionListID);
            }
        }

        #endregion Functions private
    }
}
