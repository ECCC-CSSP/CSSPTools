/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class ReportSectionDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IReportSectionDBService ReportSectionDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private ReportSection reportSection { get; set; }
        #endregion Properties

        #region Constructors
        public ReportSectionDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ReportSectionDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ReportSectionDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            reportSection = GetFilledRandomReportSection("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ReportSection_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionReportSectionList = await ReportSectionDBService.GetReportSectionList();
            Assert.Equal(200, ((ObjectResult)actionReportSectionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionList.Result).Value);
            List<ReportSection> reportSectionList = (List<ReportSection>)((OkObjectResult)actionReportSectionList.Result).Value;

            count = reportSectionList.Count();

            ReportSection reportSection = GetFilledRandomReportSection("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // reportSection.ReportSectionID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ReportSectionID = 0;

            var actionReportSection = await ReportSectionDBService.Put(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ReportSectionID = 10000000;
            actionReportSection = await ReportSectionDBService.Put(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // reportSection.DBCommand   (DBCommandEnum)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.DBCommand = (DBCommandEnum)1000000;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "ReportType", ExistPlurial = "s", ExistFieldID = "ReportTypeID", AllowableTVtypeList = )]
            // reportSection.ReportTypeID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ReportTypeID = 0;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = )]
            // reportSection.TVItemID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.TVItemID = 0;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.TVItemID = 1;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // reportSection.Language   (LanguageEnum)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.Language = (LanguageEnum)1000000;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // reportSection.Ordinal   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.Ordinal = -1;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionService.GetReportSectionList().Count());
            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.Ordinal = 1001;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionDBService.GetReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // reportSection.IsStatic   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "ReportSection", ExistPlurial = "s", ExistFieldID = "ReportSectionID", AllowableTVtypeList = )]
            // reportSection.ParentReportSectionID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ParentReportSectionID = 0;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1979, 2050)]
            // reportSection.Year   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.Year = 1978;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionService.GetReportSectionList().Count());
            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.Year = 2051;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionDBService.GetReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // reportSection.Locked   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "ReportSection", ExistPlurial = "s", ExistFieldID = "ReportSectionID", AllowableTVtypeList = )]
            // reportSection.TemplateReportSectionID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.TemplateReportSectionID = 0;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(100)]
            // reportSection.ReportSectionName   (String)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ReportSectionName = GetRandomString("", 101);
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionDBService.GetReportSectionList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(10000)]
            // reportSection.ReportSectionText   (String)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.ReportSectionText = GetRandomString("", 10001);
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            //Assert.AreEqual(count, reportSectionDBService.GetReportSectionList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // reportSection.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.LastUpdateDate_UTC = new DateTime();
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);
            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // reportSection.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.LastUpdateContactTVItemID = 0;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);

            reportSection = null;
            reportSection = GetFilledRandomReportSection("");
            reportSection.LastUpdateContactTVItemID = 1;
            actionReportSection = await ReportSectionDBService.Post(reportSection);
            Assert.IsType<BadRequestObjectResult>(actionReportSection.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post ReportSection
            var actionReportSectionAdded = await ReportSectionDBService.Post(reportSection);
            Assert.Equal(200, ((ObjectResult)actionReportSectionAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionAdded.Result).Value);
            ReportSection reportSectionAdded = (ReportSection)((OkObjectResult)actionReportSectionAdded.Result).Value;
            Assert.NotNull(reportSectionAdded);

            // List<ReportSection>
            var actionReportSectionList = await ReportSectionDBService.GetReportSectionList();
            Assert.Equal(200, ((ObjectResult)actionReportSectionList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionList.Result).Value);
            List<ReportSection> reportSectionList = (List<ReportSection>)((OkObjectResult)actionReportSectionList.Result).Value;

            int count = ((List<ReportSection>)((OkObjectResult)actionReportSectionList.Result).Value).Count();
            Assert.True(count > 0);

            // List<ReportSection> with skip and take
            var actionReportSectionListSkipAndTake = await ReportSectionDBService.GetReportSectionList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionReportSectionListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionListSkipAndTake.Result).Value);
            List<ReportSection> reportSectionListSkipAndTake = (List<ReportSection>)((OkObjectResult)actionReportSectionListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<ReportSection>)((OkObjectResult)actionReportSectionListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(reportSectionList[0].ReportSectionID == reportSectionListSkipAndTake[0].ReportSectionID);

            // Get ReportSection With ReportSectionID
            var actionReportSectionGet = await ReportSectionDBService.GetReportSectionWithReportSectionID(reportSectionList[0].ReportSectionID);
            Assert.Equal(200, ((ObjectResult)actionReportSectionGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionGet.Result).Value);
            ReportSection reportSectionGet = (ReportSection)((OkObjectResult)actionReportSectionGet.Result).Value;
            Assert.NotNull(reportSectionGet);
            Assert.Equal(reportSectionGet.ReportSectionID, reportSectionList[0].ReportSectionID);

            // Put ReportSection
            var actionReportSectionUpdated = await ReportSectionDBService.Put(reportSection);
            Assert.Equal(200, ((ObjectResult)actionReportSectionUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionUpdated.Result).Value);
            ReportSection reportSectionUpdated = (ReportSection)((OkObjectResult)actionReportSectionUpdated.Result).Value;
            Assert.NotNull(reportSectionUpdated);

            // Delete ReportSection
            var actionReportSectionDeleted = await ReportSectionDBService.Delete(reportSection.ReportSectionID);
            Assert.Equal(200, ((ObjectResult)actionReportSectionDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportSectionDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionReportSectionDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IReportSectionDBService, ReportSectionDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            ReportSectionDBService = Provider.GetService<IReportSectionDBService>();
            Assert.NotNull(ReportSectionDBService);

            return await Task.FromResult(true);
        }
        private ReportSection GetFilledRandomReportSection(string OmitPropName)
        {
            ReportSection reportSection = new ReportSection();

            if (OmitPropName != "DBCommand") reportSection.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "ReportTypeID") reportSection.ReportTypeID = 1;
            // Need to implement (no items found, would need to add at least one in the TestDB) [ReportSection TVItemID TVItem TVItemID]
            if (OmitPropName != "Language") reportSection.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "Ordinal") reportSection.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "IsStatic") reportSection.IsStatic = true;
            // Need to implement [ReportSection ParentReportSectionID ReportSection ReportSectionID]
            if (OmitPropName != "Year") reportSection.Year = GetRandomInt(1979, 2050);
            if (OmitPropName != "Locked") reportSection.Locked = true;
            // Need to implement [ReportSection TemplateReportSectionID ReportSection ReportSectionID]
            if (OmitPropName != "ReportSectionName") reportSection.ReportSectionName = GetRandomString("", 5);
            if (OmitPropName != "ReportSectionText") reportSection.ReportSectionText = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") reportSection.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") reportSection.LastUpdateContactTVItemID = 2;

            return reportSection;
        }
        private void CheckReportSectionFields(List<ReportSection> reportSectionList)
        {
            if (reportSectionList[0].TVItemID != null)
            {
                Assert.NotNull(reportSectionList[0].TVItemID);
            }
            if (reportSectionList[0].Language != null)
            {
                Assert.NotNull(reportSectionList[0].Language);
            }
            if (reportSectionList[0].ParentReportSectionID != null)
            {
                Assert.NotNull(reportSectionList[0].ParentReportSectionID);
            }
            if (reportSectionList[0].Year != null)
            {
                Assert.NotNull(reportSectionList[0].Year);
            }
            if (reportSectionList[0].TemplateReportSectionID != null)
            {
                Assert.NotNull(reportSectionList[0].TemplateReportSectionID);
            }
            if (!string.IsNullOrWhiteSpace(reportSectionList[0].ReportSectionName))
            {
                Assert.False(string.IsNullOrWhiteSpace(reportSectionList[0].ReportSectionName));
            }
            if (!string.IsNullOrWhiteSpace(reportSectionList[0].ReportSectionText))
            {
                Assert.False(string.IsNullOrWhiteSpace(reportSectionList[0].ReportSectionText));
            }
        }

        #endregion Functions private
    }
}
