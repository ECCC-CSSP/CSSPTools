/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class ResetPasswordDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IResetPasswordDBService ResetPasswordDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private ResetPassword resetPassword { get; set; }
        #endregion Properties

        #region Constructors
        public ResetPasswordDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated [DB]CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ResetPasswordDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            resetPassword = GetFilledRandomResetPassword("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task ResetPassword_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionResetPasswordList = await ResetPasswordDBService.GetResetPasswordList();
            Assert.Equal(200, ((ObjectResult)actionResetPasswordList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordList.Result).Value);
            List<ResetPassword> resetPasswordList = (List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value;

            count = resetPasswordList.Count();

            ResetPassword resetPassword = GetFilledRandomResetPassword("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // resetPassword.ResetPasswordID   (Int32)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ResetPasswordID = 0;

            var actionResetPassword = await ResetPasswordDBService.Put(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ResetPasswordID = 10000000;
            actionResetPassword = await ResetPasswordDBService.Put(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(256)]
            // resetPassword.Email   (String)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("Email");
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.Email = GetRandomString("", 257);
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            //Assert.AreEqual(count, resetPasswordDBService.GetResetPasswordList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // resetPassword.ExpireDate_Local   (DateTime)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ExpireDate_Local = new DateTime();
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ExpireDate_Local = new DateTime(1979, 1, 1);
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(8)]
            // resetPassword.Code   (String)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("Code");
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.Code = GetRandomString("", 9);
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            //Assert.AreEqual(count, resetPasswordDBService.GetResetPasswordList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // resetPassword.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateDate_UTC = new DateTime();
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // resetPassword.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateContactTVItemID = 0;
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateContactTVItemID = 1;
            actionResetPassword = await ResetPasswordDBService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post ResetPassword
            var actionResetPasswordAdded = await ResetPasswordDBService.Post(resetPassword);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordAdded.Result).Value);
            ResetPassword resetPasswordAdded = (ResetPassword)((OkObjectResult)actionResetPasswordAdded.Result).Value;
            Assert.NotNull(resetPasswordAdded);

            // List<ResetPassword>
            var actionResetPasswordList = await ResetPasswordDBService.GetResetPasswordList();
            Assert.Equal(200, ((ObjectResult)actionResetPasswordList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordList.Result).Value);
            List<ResetPassword> resetPasswordList = (List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value;

            int count = ((List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value).Count();
            Assert.True(count > 0);

            // List<ResetPassword> with skip and take
            var actionResetPasswordListSkipAndTake = await ResetPasswordDBService.GetResetPasswordList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordListSkipAndTake.Result).Value);
            List<ResetPassword> resetPasswordListSkipAndTake = (List<ResetPassword>)((OkObjectResult)actionResetPasswordListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<ResetPassword>)((OkObjectResult)actionResetPasswordListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(resetPasswordList[0].ResetPasswordID == resetPasswordListSkipAndTake[0].ResetPasswordID);

            // Get ResetPassword With ResetPasswordID
            var actionResetPasswordGet = await ResetPasswordDBService.GetResetPasswordWithResetPasswordID(resetPasswordList[0].ResetPasswordID);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordGet.Result).Value);
            ResetPassword resetPasswordGet = (ResetPassword)((OkObjectResult)actionResetPasswordGet.Result).Value;
            Assert.NotNull(resetPasswordGet);
            Assert.Equal(resetPasswordGet.ResetPasswordID, resetPasswordList[0].ResetPasswordID);

            // Put ResetPassword
            var actionResetPasswordUpdated = await ResetPasswordDBService.Put(resetPassword);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordUpdated.Result).Value);
            ResetPassword resetPasswordUpdated = (ResetPassword)((OkObjectResult)actionResetPasswordUpdated.Result).Value;
            Assert.NotNull(resetPasswordUpdated);

            // Delete ResetPassword
            var actionResetPasswordDeleted = await ResetPasswordDBService.Delete(resetPassword.ResetPasswordID);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionResetPasswordDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("70c662c1-a1a8-4b2c-b594-d7834bb5e6db")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IResetPasswordDBService, ResetPasswordDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            ResetPasswordDBService = Provider.GetService<IResetPasswordDBService>();
            Assert.NotNull(ResetPasswordDBService);

            return await Task.FromResult(true);
        }
        private ResetPassword GetFilledRandomResetPassword(string OmitPropName)
        {
            ResetPassword resetPassword = new ResetPassword();

            if (OmitPropName != "Email") resetPassword.Email = GetRandomEmail();
            if (OmitPropName != "ExpireDate_Local") resetPassword.ExpireDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Code") resetPassword.Code = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") resetPassword.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") resetPassword.LastUpdateContactTVItemID = 2;



            return resetPassword;
        }
        private void CheckResetPasswordFields(List<ResetPassword> resetPasswordList)
        {
            Assert.False(string.IsNullOrWhiteSpace(resetPasswordList[0].Email));
            Assert.False(string.IsNullOrWhiteSpace(resetPasswordList[0].Code));
        }

        #endregion Functions private
    }
}
