/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class TVFileDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ITVFileDBService TVFileDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private TVFile tvFile { get; set; }
        #endregion Properties

        #region Constructors
        public TVFileDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVFileDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVFileDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            tvFile = GetFilledRandomTVFile("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVFile_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionTVFileList = await TVFileDBService.GetTVFileList();
            Assert.Equal(200, ((ObjectResult)actionTVFileList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileList.Result).Value);
            List<TVFile> tvFileList = (List<TVFile>)((OkObjectResult)actionTVFileList.Result).Value;

            count = tvFileList.Count();

            TVFile tvFile = GetFilledRandomTVFile("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // tvFile.TVFileID   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.TVFileID = 0;

            var actionTVFile = await TVFileDBService.Put(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.TVFileID = 10000000;
            actionTVFile = await TVFileDBService.Put(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
            // tvFile.TVFileTVItemID   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.TVFileTVItemID = 0;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.TVFileTVItemID = 1;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // tvFile.TemplateTVType   (TVTypeEnum)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.TemplateTVType = (TVTypeEnum)1000000;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPExist(ExistTypeName = "ReportType", ExistPlurial = "s", ExistFieldID = "ReportTypeID", AllowableTVtypeList = )]
            // tvFile.ReportTypeID   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.ReportTypeID = 0;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is Nullable
            // tvFile.Parameters   (String)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1980, 2050)]
            // tvFile.Year   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.Year = 1979;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileService.GetTVFileList().Count());
            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.Year = 2051;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileDBService.GetTVFileList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvFile.Language   (LanguageEnum)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.Language = (LanguageEnum)1000000;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvFile.FilePurpose   (FilePurposeEnum)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FilePurpose = (FilePurposeEnum)1000000;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvFile.FileType   (FileTypeEnum)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FileType = (FileTypeEnum)1000000;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000000)]
            // tvFile.FileSize_kb   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FileSize_kb = -1;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileService.GetTVFileList().Count());
            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FileSize_kb = 100000001;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileDBService.GetTVFileList().Count());

            // -----------------------------------
            // Is Nullable
            // tvFile.FileInfo   (String)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tvFile.FileCreatedDate_UTC   (DateTime)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FileCreatedDate_UTC = new DateTime();
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.FileCreatedDate_UTC = new DateTime(1979, 1, 1);
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            // -----------------------------------
            // Is Nullable
            // tvFile.FromWater   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPMaxLength(250)]
            // tvFile.ClientFilePath   (String)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.ClientFilePath = GetRandomString("", 251);
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileDBService.GetTVFileList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // tvFile.ServerFileName   (String)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("ServerFileName");
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.ServerFileName = GetRandomString("", 251);
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileDBService.GetTVFileList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(250)]
            // tvFile.ServerFilePath   (String)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("ServerFilePath");
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.ServerFilePath = GetRandomString("", 251);
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            //Assert.AreEqual(count, tvFileDBService.GetTVFileList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tvFile.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.LastUpdateDate_UTC = new DateTime();
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);
            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tvFile.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.LastUpdateContactTVItemID = 0;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

            tvFile = null;
            tvFile = GetFilledRandomTVFile("");
            tvFile.LastUpdateContactTVItemID = 1;
            actionTVFile = await TVFileDBService.Post(tvFile);
            Assert.IsType<BadRequestObjectResult>(actionTVFile.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post TVFile
            var actionTVFileAdded = await TVFileDBService.Post(tvFile);
            Assert.Equal(200, ((ObjectResult)actionTVFileAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileAdded.Result).Value);
            TVFile tvFileAdded = (TVFile)((OkObjectResult)actionTVFileAdded.Result).Value;
            Assert.NotNull(tvFileAdded);

            // List<TVFile>
            var actionTVFileList = await TVFileDBService.GetTVFileList();
            Assert.Equal(200, ((ObjectResult)actionTVFileList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileList.Result).Value);
            List<TVFile> tvFileList = (List<TVFile>)((OkObjectResult)actionTVFileList.Result).Value;

            int count = ((List<TVFile>)((OkObjectResult)actionTVFileList.Result).Value).Count();
            Assert.True(count > 0);

            // List<TVFile> with skip and take
            var actionTVFileListSkipAndTake = await TVFileDBService.GetTVFileList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionTVFileListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileListSkipAndTake.Result).Value);
            List<TVFile> tvFileListSkipAndTake = (List<TVFile>)((OkObjectResult)actionTVFileListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<TVFile>)((OkObjectResult)actionTVFileListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(tvFileList[0].TVFileID == tvFileListSkipAndTake[0].TVFileID);

            // Get TVFile With TVFileID
            var actionTVFileGet = await TVFileDBService.GetTVFileWithTVFileID(tvFileList[0].TVFileID);
            Assert.Equal(200, ((ObjectResult)actionTVFileGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileGet.Result).Value);
            TVFile tvFileGet = (TVFile)((OkObjectResult)actionTVFileGet.Result).Value;
            Assert.NotNull(tvFileGet);
            Assert.Equal(tvFileGet.TVFileID, tvFileList[0].TVFileID);

            // Put TVFile
            var actionTVFileUpdated = await TVFileDBService.Put(tvFile);
            Assert.Equal(200, ((ObjectResult)actionTVFileUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileUpdated.Result).Value);
            TVFile tvFileUpdated = (TVFile)((OkObjectResult)actionTVFileUpdated.Result).Value;
            Assert.NotNull(tvFileUpdated);

            // Delete TVFile
            var actionTVFileDeleted = await TVFileDBService.Delete(tvFile.TVFileID);
            Assert.Equal(200, ((ObjectResult)actionTVFileDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVFileDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionTVFileDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("70c662c1-a1a8-4b2c-b594-d7834bb5e6db")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(CSSPDBConnString);
            });

            Services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddIdentityCore<ApplicationUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITVFileDBService, TVFileDBService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            TVFileDBService = Provider.GetService<ITVFileDBService>();
            Assert.NotNull(TVFileDBService);

            return await Task.FromResult(true);
        }
        private TVFile GetFilledRandomTVFile(string OmitPropName)
        {
            TVFile tvFile = new TVFile();

            if (OmitPropName != "TVFileTVItemID") tvFile.TVFileTVItemID = 42;
            if (OmitPropName != "TemplateTVType") tvFile.TemplateTVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "ReportTypeID") tvFile.ReportTypeID = 1;
            if (OmitPropName != "Parameters") tvFile.Parameters = GetRandomString("", 20);
            if (OmitPropName != "Year") tvFile.Year = GetRandomInt(1980, 2050);
            if (OmitPropName != "Language") tvFile.Language = CSSPCultureServicesRes.Culture.TwoLetterISOLanguageName == "fr" ? LanguageEnum.fr : LanguageEnum.en;
            if (OmitPropName != "FilePurpose") tvFile.FilePurpose = (FilePurposeEnum)GetRandomEnumType(typeof(FilePurposeEnum));
            if (OmitPropName != "FileType") tvFile.FileType = (FileTypeEnum)GetRandomEnumType(typeof(FileTypeEnum));
            if (OmitPropName != "FileSize_kb") tvFile.FileSize_kb = GetRandomInt(0, 100000000);
            if (OmitPropName != "FileInfo") tvFile.FileInfo = GetRandomString("", 20);
            if (OmitPropName != "FileCreatedDate_UTC") tvFile.FileCreatedDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "FromWater") tvFile.FromWater = true;
            if (OmitPropName != "ClientFilePath") tvFile.ClientFilePath = GetRandomString("", 5);
            if (OmitPropName != "ServerFileName") tvFile.ServerFileName = GetRandomString("", 5);
            if (OmitPropName != "ServerFilePath") tvFile.ServerFilePath = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") tvFile.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tvFile.LastUpdateContactTVItemID = 2;



            return tvFile;
        }
        private void CheckTVFileFields(List<TVFile> tvFileList)
        {
            if (tvFileList[0].TemplateTVType != null)
            {
                Assert.NotNull(tvFileList[0].TemplateTVType);
            }
            if (tvFileList[0].ReportTypeID != null)
            {
                Assert.NotNull(tvFileList[0].ReportTypeID);
            }
            if (!string.IsNullOrWhiteSpace(tvFileList[0].Parameters))
            {
                Assert.False(string.IsNullOrWhiteSpace(tvFileList[0].Parameters));
            }
            if (tvFileList[0].Year != null)
            {
                Assert.NotNull(tvFileList[0].Year);
            }
            if (!string.IsNullOrWhiteSpace(tvFileList[0].FileInfo))
            {
                Assert.False(string.IsNullOrWhiteSpace(tvFileList[0].FileInfo));
            }
            if (tvFileList[0].FromWater != null)
            {
                Assert.NotNull(tvFileList[0].FromWater);
            }
            if (!string.IsNullOrWhiteSpace(tvFileList[0].ClientFilePath))
            {
                Assert.False(string.IsNullOrWhiteSpace(tvFileList[0].ClientFilePath));
            }
            Assert.False(string.IsNullOrWhiteSpace(tvFileList[0].ServerFileName));
            Assert.False(string.IsNullOrWhiteSpace(tvFileList[0].ServerFilePath));
        }

        #endregion Functions private
    }
}
