/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;
using CSSPScrambleServices;
using CSSPHelperServices;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class TVTypeUserAuthorizationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ITVTypeUserAuthorizationDBService TVTypeUserAuthorizationDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private TVTypeUserAuthorization tvTypeUserAuthorization { get; set; }
        #endregion Properties

        #region Constructors
        public TVTypeUserAuthorizationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVTypeUserAuthorizationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVTypeUserAuthorizationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TVTypeUserAuthorization_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionTVTypeUserAuthorizationList = await TVTypeUserAuthorizationDBService.GetTVTypeUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationList.Result).Value);
            List<TVTypeUserAuthorization> tvTypeUserAuthorizationList = (List<TVTypeUserAuthorization>)((OkObjectResult)actionTVTypeUserAuthorizationList.Result).Value;

            count = tvTypeUserAuthorizationList.Count();

            TVTypeUserAuthorization tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // tvTypeUserAuthorization.TVTypeUserAuthorizationID   (Int32)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.TVTypeUserAuthorizationID = 0;

            var actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Put(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.TVTypeUserAuthorizationID = 10000000;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Put(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvTypeUserAuthorization.DBCommand   (DBCommandEnum)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.DBCommand = (DBCommandEnum)1000000;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tvTypeUserAuthorization.ContactTVItemID   (Int32)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.ContactTVItemID = 0;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.ContactTVItemID = 1;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvTypeUserAuthorization.TVType   (TVTypeEnum)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.TVType = (TVTypeEnum)1000000;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tvTypeUserAuthorization.TVAuth   (TVAuthEnum)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.TVAuth = (TVAuthEnum)1000000;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tvTypeUserAuthorization.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.LastUpdateDate_UTC = new DateTime();
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);
            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tvTypeUserAuthorization.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.LastUpdateContactTVItemID = 0;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);

            tvTypeUserAuthorization = null;
            tvTypeUserAuthorization = GetFilledRandomTVTypeUserAuthorization("");
            tvTypeUserAuthorization.LastUpdateContactTVItemID = 1;
            actionTVTypeUserAuthorization = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.IsType<BadRequestObjectResult>(actionTVTypeUserAuthorization.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post TVTypeUserAuthorization
            var actionTVTypeUserAuthorizationAdded = await TVTypeUserAuthorizationDBService.Post(tvTypeUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationAdded.Result).Value);
            TVTypeUserAuthorization tvTypeUserAuthorizationAdded = (TVTypeUserAuthorization)((OkObjectResult)actionTVTypeUserAuthorizationAdded.Result).Value;
            Assert.NotNull(tvTypeUserAuthorizationAdded);

            // List<TVTypeUserAuthorization>
            var actionTVTypeUserAuthorizationList = await TVTypeUserAuthorizationDBService.GetTVTypeUserAuthorizationList();
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationList.Result).Value);
            List<TVTypeUserAuthorization> tvTypeUserAuthorizationList = (List<TVTypeUserAuthorization>)((OkObjectResult)actionTVTypeUserAuthorizationList.Result).Value;

            int count = ((List<TVTypeUserAuthorization>)((OkObjectResult)actionTVTypeUserAuthorizationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<TVTypeUserAuthorization> with skip and take
            var actionTVTypeUserAuthorizationListSkipAndTake = await TVTypeUserAuthorizationDBService.GetTVTypeUserAuthorizationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationListSkipAndTake.Result).Value);
            List<TVTypeUserAuthorization> tvTypeUserAuthorizationListSkipAndTake = (List<TVTypeUserAuthorization>)((OkObjectResult)actionTVTypeUserAuthorizationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<TVTypeUserAuthorization>)((OkObjectResult)actionTVTypeUserAuthorizationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(tvTypeUserAuthorizationList[0].TVTypeUserAuthorizationID == tvTypeUserAuthorizationListSkipAndTake[0].TVTypeUserAuthorizationID);

            // Get TVTypeUserAuthorization With TVTypeUserAuthorizationID
            var actionTVTypeUserAuthorizationGet = await TVTypeUserAuthorizationDBService.GetTVTypeUserAuthorizationWithTVTypeUserAuthorizationID(tvTypeUserAuthorizationList[0].TVTypeUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationGet.Result).Value);
            TVTypeUserAuthorization tvTypeUserAuthorizationGet = (TVTypeUserAuthorization)((OkObjectResult)actionTVTypeUserAuthorizationGet.Result).Value;
            Assert.NotNull(tvTypeUserAuthorizationGet);
            Assert.Equal(tvTypeUserAuthorizationGet.TVTypeUserAuthorizationID, tvTypeUserAuthorizationList[0].TVTypeUserAuthorizationID);

            // Put TVTypeUserAuthorization
            var actionTVTypeUserAuthorizationUpdated = await TVTypeUserAuthorizationDBService.Put(tvTypeUserAuthorization);
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationUpdated.Result).Value);
            TVTypeUserAuthorization tvTypeUserAuthorizationUpdated = (TVTypeUserAuthorization)((OkObjectResult)actionTVTypeUserAuthorizationUpdated.Result).Value;
            Assert.NotNull(tvTypeUserAuthorizationUpdated);

            // Delete TVTypeUserAuthorization
            var actionTVTypeUserAuthorizationDeleted = await TVTypeUserAuthorizationDBService.Delete(tvTypeUserAuthorization.TVTypeUserAuthorizationID);
            Assert.Equal(200, ((ObjectResult)actionTVTypeUserAuthorizationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTVTypeUserAuthorizationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionTVTypeUserAuthorizationDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            string CSSPDBConnString = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IScrambleService, ScrambleService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITVTypeUserAuthorizationDBService, TVTypeUserAuthorizationDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Configuration.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Configuration.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Configuration.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            TVTypeUserAuthorizationDBService = Provider.GetService<ITVTypeUserAuthorizationDBService>();
            Assert.NotNull(TVTypeUserAuthorizationDBService);

            return await Task.FromResult(true);
        }
        private TVTypeUserAuthorization GetFilledRandomTVTypeUserAuthorization(string OmitPropName)
        {
            TVTypeUserAuthorization tvTypeUserAuthorization = new TVTypeUserAuthorization();

            if (OmitPropName != "DBCommand") tvTypeUserAuthorization.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "ContactTVItemID") tvTypeUserAuthorization.ContactTVItemID = 2;
            if (OmitPropName != "TVType") tvTypeUserAuthorization.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "TVAuth") tvTypeUserAuthorization.TVAuth = (TVAuthEnum)GetRandomEnumType(typeof(TVAuthEnum));
            if (OmitPropName != "LastUpdateDate_UTC") tvTypeUserAuthorization.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tvTypeUserAuthorization.LastUpdateContactTVItemID = 2;

            return tvTypeUserAuthorization;
        }
        private void CheckTVTypeUserAuthorizationFields(List<TVTypeUserAuthorization> tvTypeUserAuthorizationList)
        {
        }

        #endregion Functions private
    }
}
