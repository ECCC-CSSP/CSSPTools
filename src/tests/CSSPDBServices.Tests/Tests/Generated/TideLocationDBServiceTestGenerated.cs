/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class TideLocationDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ITideLocationDBService TideLocationDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private TideLocation tideLocation { get; set; }
        #endregion Properties

        #region Constructors
        public TideLocationDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideLocationDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideLocationDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            tideLocation = GetFilledRandomTideLocation("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task TideLocation_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionTideLocationList = await TideLocationDBService.GetTideLocationList();
            Assert.Equal(200, ((ObjectResult)actionTideLocationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationList.Result).Value);
            List<TideLocation> tideLocationList = (List<TideLocation>)((OkObjectResult)actionTideLocationList.Result).Value;

            count = tideLocationList.Count();

            TideLocation tideLocation = GetFilledRandomTideLocation("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // tideLocation.TideLocationID   (Int32)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.TideLocationID = 0;

            var actionTideLocation = await TideLocationDBService.Put(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.TideLocationID = 10000000;
            actionTideLocation = await TideLocationDBService.Put(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tideLocation.DBCommand   (DBCommandEnum)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.DBCommand = (DBCommandEnum)1000000;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // tideLocation.Zone   (Int32)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Zone = -1;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationService.GetTideLocationList().Count());
            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Zone = 10001;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // tideLocation.Name   (String)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("Name");
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Name = GetRandomString("", 101);
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(100)]
            // tideLocation.Prov   (String)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("Prov");
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Prov = GetRandomString("", 101);
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000)]
            // tideLocation.sid   (Int32)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.sid = -1;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationService.GetTideLocationList().Count());
            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.sid = 100001;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // tideLocation.Lat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lat]

            //CSSPError: Type not implemented [Lat]

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Lat = -91.0D;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationService.GetTideLocationList().Count());
            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Lat = 91.0D;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // tideLocation.Lng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lng]

            //CSSPError: Type not implemented [Lng]

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Lng = -181.0D;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationService.GetTideLocationList().Count());
            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.Lng = 181.0D;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            //Assert.AreEqual(count, tideLocationDBService.GetTideLocationList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tideLocation.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.LastUpdateDate_UTC = new DateTime();
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);
            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tideLocation.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.LastUpdateContactTVItemID = 0;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

            tideLocation = null;
            tideLocation = GetFilledRandomTideLocation("");
            tideLocation.LastUpdateContactTVItemID = 1;
            actionTideLocation = await TideLocationDBService.Post(tideLocation);
            Assert.IsType<BadRequestObjectResult>(actionTideLocation.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post TideLocation
            var actionTideLocationAdded = await TideLocationDBService.Post(tideLocation);
            Assert.Equal(200, ((ObjectResult)actionTideLocationAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationAdded.Result).Value);
            TideLocation tideLocationAdded = (TideLocation)((OkObjectResult)actionTideLocationAdded.Result).Value;
            Assert.NotNull(tideLocationAdded);

            // List<TideLocation>
            var actionTideLocationList = await TideLocationDBService.GetTideLocationList();
            Assert.Equal(200, ((ObjectResult)actionTideLocationList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationList.Result).Value);
            List<TideLocation> tideLocationList = (List<TideLocation>)((OkObjectResult)actionTideLocationList.Result).Value;

            int count = ((List<TideLocation>)((OkObjectResult)actionTideLocationList.Result).Value).Count();
            Assert.True(count > 0);

            // List<TideLocation> with skip and take
            var actionTideLocationListSkipAndTake = await TideLocationDBService.GetTideLocationList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionTideLocationListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationListSkipAndTake.Result).Value);
            List<TideLocation> tideLocationListSkipAndTake = (List<TideLocation>)((OkObjectResult)actionTideLocationListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<TideLocation>)((OkObjectResult)actionTideLocationListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(tideLocationList[0].TideLocationID == tideLocationListSkipAndTake[0].TideLocationID);

            // Get TideLocation With TideLocationID
            var actionTideLocationGet = await TideLocationDBService.GetTideLocationWithTideLocationID(tideLocationList[0].TideLocationID);
            Assert.Equal(200, ((ObjectResult)actionTideLocationGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationGet.Result).Value);
            TideLocation tideLocationGet = (TideLocation)((OkObjectResult)actionTideLocationGet.Result).Value;
            Assert.NotNull(tideLocationGet);
            Assert.Equal(tideLocationGet.TideLocationID, tideLocationList[0].TideLocationID);

            // Put TideLocation
            var actionTideLocationUpdated = await TideLocationDBService.Put(tideLocation);
            Assert.Equal(200, ((ObjectResult)actionTideLocationUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationUpdated.Result).Value);
            TideLocation tideLocationUpdated = (TideLocation)((OkObjectResult)actionTideLocationUpdated.Result).Value;
            Assert.NotNull(tideLocationUpdated);

            // Delete TideLocation
            var actionTideLocationDeleted = await TideLocationDBService.Delete(tideLocation.TideLocationID);
            Assert.Equal(200, ((ObjectResult)actionTideLocationDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideLocationDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionTideLocationDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITideLocationDBService, TideLocationDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Config.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Config.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            TideLocationDBService = Provider.GetService<ITideLocationDBService>();
            Assert.NotNull(TideLocationDBService);

            return await Task.FromResult(true);
        }
        private TideLocation GetFilledRandomTideLocation(string OmitPropName)
        {
            TideLocation tideLocation = new TideLocation();

            if (OmitPropName != "DBCommand") tideLocation.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "Zone") tideLocation.Zone = GetRandomInt(0, 10000);
            if (OmitPropName != "Name") tideLocation.Name = GetRandomString("", 5);
            if (OmitPropName != "Prov") tideLocation.Prov = GetRandomString("", 5);
            if (OmitPropName != "sid") tideLocation.sid = GetRandomInt(0, 100000);
            if (OmitPropName != "Lat") tideLocation.Lat = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Lng") tideLocation.Lng = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LastUpdateDate_UTC") tideLocation.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tideLocation.LastUpdateContactTVItemID = 2;

            return tideLocation;
        }
        private void CheckTideLocationFields(List<TideLocation> tideLocationList)
        {
            Assert.False(string.IsNullOrWhiteSpace(tideLocationList[0].Name));
            Assert.False(string.IsNullOrWhiteSpace(tideLocationList[0].Prov));
        }

        #endregion Functions private
    }
}
