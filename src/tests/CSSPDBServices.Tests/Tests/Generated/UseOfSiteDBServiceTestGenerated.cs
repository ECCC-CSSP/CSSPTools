/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class UseOfSiteDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IUseOfSiteDBService UseOfSiteDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private UseOfSite useOfSite { get; set; }
        #endregion Properties

        #region Constructors
        public UseOfSiteDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task UseOfSiteDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task UseOfSiteDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            useOfSite = GetFilledRandomUseOfSite("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task UseOfSite_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionUseOfSiteList = await UseOfSiteDBService.GetUseOfSiteList();
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteList.Result).Value);
            List<UseOfSite> useOfSiteList = (List<UseOfSite>)((OkObjectResult)actionUseOfSiteList.Result).Value;

            count = useOfSiteList.Count();

            UseOfSite useOfSite = GetFilledRandomUseOfSite("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // useOfSite.UseOfSiteID   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.UseOfSiteID = 0;

            var actionUseOfSite = await UseOfSiteDBService.Put(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.UseOfSiteID = 10000000;
            actionUseOfSite = await UseOfSiteDBService.Put(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // useOfSite.DBCommand   (DBCommandEnum)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.DBCommand = (DBCommandEnum)1000000;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite,HydrometricSite,TideSite)]
            // useOfSite.SiteTVItemID   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.SiteTVItemID = 0;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.SiteTVItemID = 1;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
            // useOfSite.SubsectorTVItemID   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.SubsectorTVItemID = 0;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.SubsectorTVItemID = 1;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // useOfSite.TVType   (TVTypeEnum)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.TVType = (TVTypeEnum)1000000;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // useOfSite.Ordinal   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Ordinal = -1;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Ordinal = 1001;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1980, 2050)]
            // useOfSite.StartYear   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.StartYear = 1979;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.StartYear = 2051;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(1980, 2050)]
            // useOfSite.EndYear   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.EndYear = 1979;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.EndYear = 2051;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // useOfSite.UseWeight   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // useOfSite.Weight_perc   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Weight_perc]

            //CSSPError: Type not implemented [Weight_perc]

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Weight_perc = -1.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Weight_perc = 101.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // useOfSite.UseEquation   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // useOfSite.Param1   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param1]

            //CSSPError: Type not implemented [Param1]

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param1 = -1.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param1 = 101.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // useOfSite.Param2   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param2]

            //CSSPError: Type not implemented [Param2]

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param2 = -1.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param2 = 101.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // useOfSite.Param3   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param3]

            //CSSPError: Type not implemented [Param3]

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param3 = -1.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param3 = 101.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPRange(0, 100)]
            // useOfSite.Param4   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Param4]

            //CSSPError: Type not implemented [Param4]

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param4 = -1.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteService.GetUseOfSiteList().Count());
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.Param4 = 101.0D;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            //Assert.AreEqual(count, useOfSiteDBService.GetUseOfSiteList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // useOfSite.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.LastUpdateDate_UTC = new DateTime();
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);
            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // useOfSite.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.LastUpdateContactTVItemID = 0;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

            useOfSite = null;
            useOfSite = GetFilledRandomUseOfSite("");
            useOfSite.LastUpdateContactTVItemID = 1;
            actionUseOfSite = await UseOfSiteDBService.Post(useOfSite);
            Assert.IsType<BadRequestObjectResult>(actionUseOfSite.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post UseOfSite
            var actionUseOfSiteAdded = await UseOfSiteDBService.Post(useOfSite);
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteAdded.Result).Value);
            UseOfSite useOfSiteAdded = (UseOfSite)((OkObjectResult)actionUseOfSiteAdded.Result).Value;
            Assert.NotNull(useOfSiteAdded);

            // List<UseOfSite>
            var actionUseOfSiteList = await UseOfSiteDBService.GetUseOfSiteList();
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteList.Result).Value);
            List<UseOfSite> useOfSiteList = (List<UseOfSite>)((OkObjectResult)actionUseOfSiteList.Result).Value;

            int count = ((List<UseOfSite>)((OkObjectResult)actionUseOfSiteList.Result).Value).Count();
            Assert.True(count > 0);

            // List<UseOfSite> with skip and take
            var actionUseOfSiteListSkipAndTake = await UseOfSiteDBService.GetUseOfSiteList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteListSkipAndTake.Result).Value);
            List<UseOfSite> useOfSiteListSkipAndTake = (List<UseOfSite>)((OkObjectResult)actionUseOfSiteListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<UseOfSite>)((OkObjectResult)actionUseOfSiteListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(useOfSiteList[0].UseOfSiteID == useOfSiteListSkipAndTake[0].UseOfSiteID);

            // Get UseOfSite With UseOfSiteID
            var actionUseOfSiteGet = await UseOfSiteDBService.GetUseOfSiteWithUseOfSiteID(useOfSiteList[0].UseOfSiteID);
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteGet.Result).Value);
            UseOfSite useOfSiteGet = (UseOfSite)((OkObjectResult)actionUseOfSiteGet.Result).Value;
            Assert.NotNull(useOfSiteGet);
            Assert.Equal(useOfSiteGet.UseOfSiteID, useOfSiteList[0].UseOfSiteID);

            // Put UseOfSite
            var actionUseOfSiteUpdated = await UseOfSiteDBService.Put(useOfSite);
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteUpdated.Result).Value);
            UseOfSite useOfSiteUpdated = (UseOfSite)((OkObjectResult)actionUseOfSiteUpdated.Result).Value;
            Assert.NotNull(useOfSiteUpdated);

            // Delete UseOfSite
            var actionUseOfSiteDeleted = await UseOfSiteDBService.Delete(useOfSite.UseOfSiteID);
            Assert.Equal(200, ((ObjectResult)actionUseOfSiteDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionUseOfSiteDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionUseOfSiteDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IUseOfSiteDBService, UseOfSiteDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Config.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Config.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            UseOfSiteDBService = Provider.GetService<IUseOfSiteDBService>();
            Assert.NotNull(UseOfSiteDBService);

            return await Task.FromResult(true);
        }
        private UseOfSite GetFilledRandomUseOfSite(string OmitPropName)
        {
            UseOfSite useOfSite = new UseOfSite();

            if (OmitPropName != "DBCommand") useOfSite.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "SiteTVItemID") useOfSite.SiteTVItemID = 7;
            if (OmitPropName != "SubsectorTVItemID") useOfSite.SubsectorTVItemID = 11;
            if (OmitPropName != "TVType") useOfSite.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "Ordinal") useOfSite.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "StartYear") useOfSite.StartYear = GetRandomInt(1980, 2050);
            if (OmitPropName != "EndYear") useOfSite.EndYear = GetRandomInt(1980, 2050);
            if (OmitPropName != "UseWeight") useOfSite.UseWeight = true;
            if (OmitPropName != "Weight_perc") useOfSite.Weight_perc = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "UseEquation") useOfSite.UseEquation = true;
            if (OmitPropName != "Param1") useOfSite.Param1 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param2") useOfSite.Param2 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param3") useOfSite.Param3 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "Param4") useOfSite.Param4 = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "LastUpdateDate_UTC") useOfSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") useOfSite.LastUpdateContactTVItemID = 2;

            return useOfSite;
        }
        private void CheckUseOfSiteFields(List<UseOfSite> useOfSiteList)
        {
            if (useOfSiteList[0].EndYear != null)
            {
                Assert.NotNull(useOfSiteList[0].EndYear);
            }
            if (useOfSiteList[0].UseWeight != null)
            {
                Assert.NotNull(useOfSiteList[0].UseWeight);
            }
            if (useOfSiteList[0].Weight_perc != null)
            {
                Assert.NotNull(useOfSiteList[0].Weight_perc);
            }
            if (useOfSiteList[0].UseEquation != null)
            {
                Assert.NotNull(useOfSiteList[0].UseEquation);
            }
            if (useOfSiteList[0].Param1 != null)
            {
                Assert.NotNull(useOfSiteList[0].Param1);
            }
            if (useOfSiteList[0].Param2 != null)
            {
                Assert.NotNull(useOfSiteList[0].Param2);
            }
            if (useOfSiteList[0].Param3 != null)
            {
                Assert.NotNull(useOfSiteList[0].Param3);
            }
            if (useOfSiteList[0].Param4 != null)
            {
                Assert.NotNull(useOfSiteList[0].Param4);
            }
        }

        #endregion Functions private
    }
}
