/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPDBServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using LoggedInServices;
using CSSPDBPreferenceModels;

namespace CSSPDBServices.Tests
{
    [Collection("Sequential")]
    public partial class VPResultDBServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IVPResultDBService VPResultDBService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBContext dbIM { get; set; }
        private VPResult vpResult { get; set; }
        #endregion Properties

        #region Constructors
        public VPResultDBServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructor [DB]
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task VPResultDB_Constructor_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));
        }
        #endregion Tests Generated Constructor [DB]

        #region Tests Generated [DB] CRUD
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task VPResultDB_CRUD_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            vpResult = GetFilledRandomVPResult("");

            await DoCRUDDBTest();
        }
        #endregion Tests Generated [DB] CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task VPResult_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionVPResultList = await VPResultDBService.GetVPResultList();
            Assert.Equal(200, ((ObjectResult)actionVPResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultList.Result).Value);
            List<VPResult> vpResultList = (List<VPResult>)((OkObjectResult)actionVPResultList.Result).Value;

            count = vpResultList.Count();

            VPResult vpResult = GetFilledRandomVPResult("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // vpResult.VPResultID   (Int32)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.VPResultID = 0;

            var actionVPResult = await VPResultDBService.Put(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.VPResultID = 10000000;
            actionVPResult = await VPResultDBService.Put(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // vpResult.DBCommand   (DBCommandEnum)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.DBCommand = (DBCommandEnum)1000000;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "VPScenario", ExistPlurial = "s", ExistFieldID = "VPScenarioID", AllowableTVtypeList = )]
            // vpResult.VPScenarioID   (Int32)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.VPScenarioID = 0;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000)]
            // vpResult.Ordinal   (Int32)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Ordinal = -1;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Ordinal = 1001;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000000)]
            // vpResult.Concentration_MPN_100ml   (Int32)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Concentration_MPN_100ml = -1;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Concentration_MPN_100ml = 10000001;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 1000000)]
            // vpResult.Dilution   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Dilution]

            //CSSPError: Type not implemented [Dilution]

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Dilution = -1.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.Dilution = 1000001.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // vpResult.FarFieldWidth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [FarFieldWidth_m]

            //CSSPError: Type not implemented [FarFieldWidth_m]

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.FarFieldWidth_m = -1.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.FarFieldWidth_m = 10001.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100000)]
            // vpResult.DispersionDistance_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [DispersionDistance_m]

            //CSSPError: Type not implemented [DispersionDistance_m]

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.DispersionDistance_m = -1.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.DispersionDistance_m = 100001.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 100)]
            // vpResult.TravelTime_hour   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [TravelTime_hour]

            //CSSPError: Type not implemented [TravelTime_hour]

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.TravelTime_hour = -1.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultService.GetVPResultList().Count());
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.TravelTime_hour = 101.0D;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            //Assert.AreEqual(count, vpResultDBService.GetVPResultList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // vpResult.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.LastUpdateDate_UTC = new DateTime();
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);
            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // vpResult.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.LastUpdateContactTVItemID = 0;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);

            vpResult = null;
            vpResult = GetFilledRandomVPResult("");
            vpResult.LastUpdateContactTVItemID = 1;
            actionVPResult = await VPResultDBService.Post(vpResult);
            Assert.IsType<BadRequestObjectResult>(actionVPResult.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDDBTest()
        {
            db.Database.BeginTransaction();
            // Post VPResult
            var actionVPResultAdded = await VPResultDBService.Post(vpResult);
            Assert.Equal(200, ((ObjectResult)actionVPResultAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultAdded.Result).Value);
            VPResult vpResultAdded = (VPResult)((OkObjectResult)actionVPResultAdded.Result).Value;
            Assert.NotNull(vpResultAdded);

            // List<VPResult>
            var actionVPResultList = await VPResultDBService.GetVPResultList();
            Assert.Equal(200, ((ObjectResult)actionVPResultList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultList.Result).Value);
            List<VPResult> vpResultList = (List<VPResult>)((OkObjectResult)actionVPResultList.Result).Value;

            int count = ((List<VPResult>)((OkObjectResult)actionVPResultList.Result).Value).Count();
            Assert.True(count > 0);

            // List<VPResult> with skip and take
            var actionVPResultListSkipAndTake = await VPResultDBService.GetVPResultList(1, 1);
            Assert.Equal(200, ((ObjectResult)actionVPResultListSkipAndTake.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultListSkipAndTake.Result).Value);
            List<VPResult> vpResultListSkipAndTake = (List<VPResult>)((OkObjectResult)actionVPResultListSkipAndTake.Result).Value;

            int countSkipAndTake = ((List<VPResult>)((OkObjectResult)actionVPResultListSkipAndTake.Result).Value).Count();
            Assert.True(countSkipAndTake == 1);

            Assert.False(vpResultList[0].VPResultID == vpResultListSkipAndTake[0].VPResultID);

            // Get VPResult With VPResultID
            var actionVPResultGet = await VPResultDBService.GetVPResultWithVPResultID(vpResultList[0].VPResultID);
            Assert.Equal(200, ((ObjectResult)actionVPResultGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultGet.Result).Value);
            VPResult vpResultGet = (VPResult)((OkObjectResult)actionVPResultGet.Result).Value;
            Assert.NotNull(vpResultGet);
            Assert.Equal(vpResultGet.VPResultID, vpResultList[0].VPResultID);

            // Put VPResult
            var actionVPResultUpdated = await VPResultDBService.Put(vpResult);
            Assert.Equal(200, ((ObjectResult)actionVPResultUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultUpdated.Result).Value);
            VPResult vpResultUpdated = (VPResult)((OkObjectResult)actionVPResultUpdated.Result).Value;
            Assert.NotNull(vpResultUpdated);

            // Delete VPResult
            var actionVPResultDeleted = await VPResultDBService.Delete(vpResult.VPResultID);
            Assert.Equal(200, ((ObjectResult)actionVPResultDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionVPResultDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionVPResultDeleted.Result).Value;
            Assert.True(retBool);

            db.Database.RollbackTransaction();
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspdbservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(CSSPDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(CSSPDBConnString);
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IVPResultDBService, VPResultDBService>();

            /* ---------------------------------------------------------------------------------
             * using TestDB
             * ---------------------------------------------------------------------------------      
             */
            string TestDB = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDB);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDB);
            });

            /* ---------------------------------------------------------------------------------
             * using CSSPDBPreference
             * ---------------------------------------------------------------------------------
             */
            string CSSPDBPreference = Config.GetValue<string>("CSSPDBPreference"); 
            Assert.NotNull(CSSPDBPreference);

            FileInfo fiCSSPDBPreference = new FileInfo(CSSPDBPreference);

            Services.AddDbContext<CSSPDBPreferenceContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiCSSPDBPreference.FullName }");
            });

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string LoginEmail = Config.GetValue<string>("LoginEmail");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(LoginEmail));

            db = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(db);

            dbIM = Provider.GetService<CSSPDBContext>();
            Assert.NotNull(dbIM);

            VPResultDBService = Provider.GetService<IVPResultDBService>();
            Assert.NotNull(VPResultDBService);

            return await Task.FromResult(true);
        }
        private VPResult GetFilledRandomVPResult(string OmitPropName)
        {
            VPResult vpResult = new VPResult();

            if (OmitPropName != "DBCommand") vpResult.DBCommand = (DBCommandEnum)GetRandomEnumType(typeof(DBCommandEnum));
            if (OmitPropName != "VPScenarioID") vpResult.VPScenarioID = 1;
            if (OmitPropName != "Ordinal") vpResult.Ordinal = GetRandomInt(0, 1000);
            if (OmitPropName != "Concentration_MPN_100ml") vpResult.Concentration_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "Dilution") vpResult.Dilution = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "FarFieldWidth_m") vpResult.FarFieldWidth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "DispersionDistance_m") vpResult.DispersionDistance_m = GetRandomDouble(0.0D, 100000.0D);
            if (OmitPropName != "TravelTime_hour") vpResult.TravelTime_hour = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "LastUpdateDate_UTC") vpResult.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") vpResult.LastUpdateContactTVItemID = 2;

            return vpResult;
        }
        private void CheckVPResultFields(List<VPResult> vpResultList)
        {
        }

        #endregion Functions private
    }
}
