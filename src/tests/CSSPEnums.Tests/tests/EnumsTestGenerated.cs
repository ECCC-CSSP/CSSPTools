/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [EnumsTestGenerate.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Globalization;
using CSSPEnums.Resources;
using System.Linq;

namespace CSSPEnums.Tests
{
    public partial class EnumsTest
    {

        #region Testing Methods GetEnumText public
        [TestMethod]
        public void Enums_GetEnumText_ActionDBTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), i);
        
                    switch ((ActionDBTypeEnum)i)
                    {
                        case ActionDBTypeEnum.Create:
                            Assert.AreEqual(CSSPEnumsRes.ActionDBTypeEnumCreate, retStr);
                            break;
                        case ActionDBTypeEnum.Read:
                            Assert.AreEqual(CSSPEnumsRes.ActionDBTypeEnumRead, retStr);
                            break;
                        case ActionDBTypeEnum.Update:
                            Assert.AreEqual(CSSPEnumsRes.ActionDBTypeEnumUpdate, retStr);
                            break;
                        case ActionDBTypeEnum.Delete:
                            Assert.AreEqual(CSSPEnumsRes.ActionDBTypeEnumDelete, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AddContactTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), i);
        
                    switch ((AddContactTypeEnum)i)
                    {
                        case AddContactTypeEnum.First:
                            Assert.AreEqual(CSSPEnumsRes.AddContactTypeEnumFirst, retStr);
                            break;
                        case AddContactTypeEnum.Register:
                            Assert.AreEqual(CSSPEnumsRes.AddContactTypeEnumRegister, retStr);
                            break;
                        case AddContactTypeEnum.LoggedIn:
                            Assert.AreEqual(CSSPEnumsRes.AddContactTypeEnumLoggedIn, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_DatabaseTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(DatabaseTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DatabaseTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DatabaseTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(DatabaseTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(DatabaseTypeEnum), i);
        
                    switch ((DatabaseTypeEnum)i)
                    {
                        case DatabaseTypeEnum.MemoryCSSPDB:
                            Assert.AreEqual(CSSPEnumsRes.DatabaseTypeEnumMemoryCSSPDB, retStr);
                            break;
                        case DatabaseTypeEnum.MemoryTestDB:
                            Assert.AreEqual(CSSPEnumsRes.DatabaseTypeEnumMemoryTestDB, retStr);
                            break;
                        case DatabaseTypeEnum.SqlServerCSSPDB:
                            Assert.AreEqual(CSSPEnumsRes.DatabaseTypeEnumSqlServerCSSPDB, retStr);
                            break;
                        case DatabaseTypeEnum.SqlServerTestDB:
                            Assert.AreEqual(CSSPEnumsRes.DatabaseTypeEnumSqlServerTestDB, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_EntityQueryTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), i);
        
                    switch ((EntityQueryTypeEnum)i)
                    {
                        case EntityQueryTypeEnum.AsNoTracking:
                            Assert.AreEqual(CSSPEnumsRes.EntityQueryTypeEnumAsNoTracking, retStr);
                            break;
                        case EntityQueryTypeEnum.WithTracking:
                            Assert.AreEqual(CSSPEnumsRes.EntityQueryTypeEnumWithTracking, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PolSourceObsInfoTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), i);
        
                    switch ((PolSourceObsInfoTypeEnum)i)
                    {
                        case PolSourceObsInfoTypeEnum.Description:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceObsInfoTypeEnumDescription, retStr);
                            break;
                        case PolSourceObsInfoTypeEnum.Report:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceObsInfoTypeEnumReport, retStr);
                            break;
                        case PolSourceObsInfoTypeEnum.Text:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceObsInfoTypeEnumText, retStr);
                            break;
                        case PolSourceObsInfoTypeEnum.Initial:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceObsInfoTypeEnumInitial, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AddressTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), i);
        
                    switch ((AddressTypeEnum)i)
                    {
                        case AddressTypeEnum.Mailing:
                            Assert.AreEqual(CSSPEnumsRes.AddressTypeEnumMailing, retStr);
                            break;
                        case AddressTypeEnum.Shipping:
                            Assert.AreEqual(CSSPEnumsRes.AddressTypeEnumShipping, retStr);
                            break;
                        case AddressTypeEnum.Civic:
                            Assert.AreEqual(CSSPEnumsRes.AddressTypeEnumCivic, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AerationTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), i);
        
                    switch ((AerationTypeEnum)i)
                    {
                        case AerationTypeEnum.MechanicalAirLines:
                            Assert.AreEqual(CSSPEnumsRes.AerationTypeEnumMechanicalAirLines, retStr);
                            break;
                        case AerationTypeEnum.MechanicalSurfaceMixers:
                            Assert.AreEqual(CSSPEnumsRes.AerationTypeEnumMechanicalSurfaceMixers, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AlarmSystemTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), i);
        
                    switch ((AlarmSystemTypeEnum)i)
                    {
                        case AlarmSystemTypeEnum.SCADA:
                            Assert.AreEqual(CSSPEnumsRes.AlarmSystemTypeEnumSCADA, retStr);
                            break;
                        case AlarmSystemTypeEnum.None:
                            Assert.AreEqual(CSSPEnumsRes.AlarmSystemTypeEnumNone, retStr);
                            break;
                        case AlarmSystemTypeEnum.OnlyVisualLight:
                            Assert.AreEqual(CSSPEnumsRes.AlarmSystemTypeEnumOnlyVisualLight, retStr);
                            break;
                        case AlarmSystemTypeEnum.SCADAAndLight:
                            Assert.AreEqual(CSSPEnumsRes.AlarmSystemTypeEnumSCADAAndLight, retStr);
                            break;
                        case AlarmSystemTypeEnum.PagerAndLight:
                            Assert.AreEqual(CSSPEnumsRes.AlarmSystemTypeEnumPagerAndLight, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AnalysisCalculationTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), i);
        
                    switch ((AnalysisCalculationTypeEnum)i)
                    {
                        case AnalysisCalculationTypeEnum.AllAllAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumAllAllAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.WetAllAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumWetAllAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.DryAllAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumDryAllAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.WetWetAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumWetWetAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.DryDryAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumDryDryAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.WetDryAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumWetDryAll, retStr);
                            break;
                        case AnalysisCalculationTypeEnum.DryWetAll:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisCalculationTypeEnumDryWetAll, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AnalysisReportExportCommandEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), i);
        
                    switch ((AnalysisReportExportCommandEnum)i)
                    {
                        case AnalysisReportExportCommandEnum.Report:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisReportExportCommandEnumReport, retStr);
                            break;
                        case AnalysisReportExportCommandEnum.Excel:
                            Assert.AreEqual(CSSPEnumsRes.AnalysisReportExportCommandEnumExcel, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AnalyzeMethodEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), i);
        
                    switch ((AnalyzeMethodEnum)i)
                    {
                        case AnalyzeMethodEnum.MF:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumMF, retStr);
                            break;
                        case AnalyzeMethodEnum.ZZ_510Q:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumZZ_510Q, retStr);
                            break;
                        case AnalyzeMethodEnum.ZZ_509Q:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumZZ_509Q, retStr);
                            break;
                        case AnalyzeMethodEnum.ZZ_0:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumZZ_0, retStr);
                            break;
                        case AnalyzeMethodEnum.ZZ_525Q:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumZZ_525Q, retStr);
                            break;
                        case AnalyzeMethodEnum.MPN:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumMPN, retStr);
                            break;
                        case AnalyzeMethodEnum.ZZ_0Q:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumZZ_0Q, retStr);
                            break;
                        case AnalyzeMethodEnum.AnalyzeMethod8:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod8, retStr);
                            break;
                        case AnalyzeMethodEnum.AnalyzeMethod9:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod9, retStr);
                            break;
                        case AnalyzeMethodEnum.AnalyzeMethod10:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod10, retStr);
                            break;
                        case AnalyzeMethodEnum.AnalyzeMethod11:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod11, retStr);
                            break;
                        case AnalyzeMethodEnum.AnalyzeMethod12:
                            Assert.AreEqual(CSSPEnumsRes.AnalyzeMethodEnumAnalyzeMethod12, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AppTaskCommandEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), i);
        
                    switch ((AppTaskCommandEnum)i)
                    {
                        case AppTaskCommandEnum.GenerateWebTide:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGenerateWebTide, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioAskToRun:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioAskToRun, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioImport:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioImport, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioOtherFileImport:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioOtherFileImport, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioRunning:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioRunning, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioToCancel:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioToCancel, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioWaitingToRun:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioWaitingToRun, retStr);
                            break;
                        case AppTaskCommandEnum.SetupWebTide:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumSetupWebTide, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateClimateSiteInformation:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteInformation, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyFromStartDateToEndDate:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyFromStartDateToEndDate, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate, retStr);
                            break;
                        case AppTaskCommandEnum.CreateFCForm:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateFCForm, retStr);
                            break;
                        case AppTaskCommandEnum.CreateSamplingPlanSamplingPlanTextFile:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateSamplingPlanSamplingPlanTextFile, retStr);
                            break;
                        case AppTaskCommandEnum.CreateDocumentFromTemplate:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateDocumentFromTemplate, retStr);
                            break;
                        case AppTaskCommandEnum.GetClimateSitesDataForRunsOfYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGetClimateSitesDataForRunsOfYear, retStr);
                            break;
                        case AppTaskCommandEnum.CreateWebTideDataWLAtFirstNode:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateWebTideDataWLAtFirstNode, retStr);
                            break;
                        case AppTaskCommandEnum.ExportEmailDistributionLists:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumExportEmailDistributionLists, retStr);
                            break;
                        case AppTaskCommandEnum.ExportAnalysisToExcel:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumExportAnalysisToExcel, retStr);
                            break;
                        case AppTaskCommandEnum.CreateDocumentFromParameters:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateDocumentFromParameters, retStr);
                            break;
                        case AppTaskCommandEnum.CreateDocxPDF:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateDocxPDF, retStr);
                            break;
                        case AppTaskCommandEnum.CreateXlsxPDF:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumCreateXlsxPDF, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataCSVOfMWQMSites:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSites, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataKMZOfMWQMSites:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataKMZOfMWQMSites, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataXlsxOfMWQMSitesAndSamples:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataXlsxOfMWQMSitesAndSamples, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataCSVOfMWQMSamples:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSamples, retStr);
                            break;
                        case AppTaskCommandEnum.GetAllPrecipitationForYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGetAllPrecipitationForYear, retStr);
                            break;
                        case AppTaskCommandEnum.FillRunPrecipByClimateSitePriorityForYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumFillRunPrecipByClimateSitePriorityForYear, retStr);
                            break;
                        case AppTaskCommandEnum.FindMissingPrecipForProvince:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumFindMissingPrecipForProvince, retStr);
                            break;
                        case AppTaskCommandEnum.ExportToArcGIS:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumExportToArcGIS, retStr);
                            break;
                        case AppTaskCommandEnum.GenerateClassificationForCSSPWebToolsVisualization:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGenerateClassificationForCSSPWebToolsVisualization, retStr);
                            break;
                        case AppTaskCommandEnum.GenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSites:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSites, retStr);
                            break;
                        case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSamples:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSamples, retStr);
                            break;
                        case AppTaskCommandEnum.ProvinceToolsCreateClassificationInputsKML:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateClassificationInputsKML, retStr);
                            break;
                        case AppTaskCommandEnum.ProvinceToolsCreateGroupingInputsKML:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateGroupingInputsKML, retStr);
                            break;
                        case AppTaskCommandEnum.ProvinceToolsCreateMWQMSitesAndPolSourceSitesKML:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumProvinceToolsCreateMWQMSitesAndPolSourceSitesKML, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateHydrometricSiteInformation:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteInformation, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate, retStr);
                            break;
                        case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate, retStr);
                            break;
                        case AppTaskCommandEnum.GetHydrometricSitesDataForRunsOfYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGetHydrometricSitesDataForRunsOfYear, retStr);
                            break;
                        case AppTaskCommandEnum.GetAllDischargesForYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGetAllDischargesForYear, retStr);
                            break;
                        case AppTaskCommandEnum.FillRunDischargesByHydrometricSitePriorityForYear:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumFillRunDischargesByHydrometricSitePriorityForYear, retStr);
                            break;
                        case AppTaskCommandEnum.FindMissingDischargesForProvince:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumFindMissingDischargesForProvince, retStr);
                            break;
                        case AppTaskCommandEnum.LoadHydrometricDataValue:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumLoadHydrometricDataValue, retStr);
                            break;
                        case AppTaskCommandEnum.GenerateKMLFileClassificationForCSSPWebToolsVisualization:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumGenerateKMLFileClassificationForCSSPWebToolsVisualization, retStr);
                            break;
                        case AppTaskCommandEnum.ProvinceToolsGenerateStats:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumProvinceToolsGenerateStats, retStr);
                            break;
                        case AppTaskCommandEnum.MikeScenarioPrepareResults:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskCommandEnumMikeScenarioPrepareResults, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_AppTaskStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), i);
        
                    switch ((AppTaskStatusEnum)i)
                    {
                        case AppTaskStatusEnum.Created:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskStatusEnumCreated, retStr);
                            break;
                        case AppTaskStatusEnum.Running:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskStatusEnumRunning, retStr);
                            break;
                        case AppTaskStatusEnum.Completed:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskStatusEnumCompleted, retStr);
                            break;
                        case AppTaskStatusEnum.Cancelled:
                            Assert.AreEqual(CSSPEnumsRes.AppTaskStatusEnumCancelled, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_BeaufortScaleEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), i);
        
                    switch ((BeaufortScaleEnum)i)
                    {
                        case BeaufortScaleEnum.Calm:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumCalm, retStr);
                            break;
                        case BeaufortScaleEnum.LightAir:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumLightAir, retStr);
                            break;
                        case BeaufortScaleEnum.LightBreeze:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumLightBreeze, retStr);
                            break;
                        case BeaufortScaleEnum.GentleBreeze:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumGentleBreeze, retStr);
                            break;
                        case BeaufortScaleEnum.ModerateBreeze:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumModerateBreeze, retStr);
                            break;
                        case BeaufortScaleEnum.FreshBreeze:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumFreshBreeze, retStr);
                            break;
                        case BeaufortScaleEnum.StrongBreeze:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumStrongBreeze, retStr);
                            break;
                        case BeaufortScaleEnum.HighWind_ModerateGale_NearGale:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumHighWind_ModerateGale_NearGale, retStr);
                            break;
                        case BeaufortScaleEnum.Gale_FreshGale:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumGale_FreshGale, retStr);
                            break;
                        case BeaufortScaleEnum.Strong_SevereGale:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumStrong_SevereGale, retStr);
                            break;
                        case BeaufortScaleEnum.Storm_WholeGale:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumStorm_WholeGale, retStr);
                            break;
                        case BeaufortScaleEnum.ViolentStorm:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumViolentStorm, retStr);
                            break;
                        case BeaufortScaleEnum.HurricaneForce:
                            Assert.AreEqual(CSSPEnumsRes.BeaufortScaleEnumHurricaneForce, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_BoxModelResultTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), i);
        
                    switch ((BoxModelResultTypeEnum)i)
                    {
                        case BoxModelResultTypeEnum.Dilution:
                            Assert.AreEqual(CSSPEnumsRes.BoxModelResultTypeEnumDilution, retStr);
                            break;
                        case BoxModelResultTypeEnum.NoDecayUntreated:
                            Assert.AreEqual(CSSPEnumsRes.BoxModelResultTypeEnumNoDecayUntreated, retStr);
                            break;
                        case BoxModelResultTypeEnum.NoDecayPreDisinfection:
                            Assert.AreEqual(CSSPEnumsRes.BoxModelResultTypeEnumNoDecayPreDisinfection, retStr);
                            break;
                        case BoxModelResultTypeEnum.DecayUntreated:
                            Assert.AreEqual(CSSPEnumsRes.BoxModelResultTypeEnumDecayUntreated, retStr);
                            break;
                        case BoxModelResultTypeEnum.DecayPreDisinfection:
                            Assert.AreEqual(CSSPEnumsRes.BoxModelResultTypeEnumDecayPreDisinfection, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ClassificationTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), i);
        
                    switch ((ClassificationTypeEnum)i)
                    {
                        case ClassificationTypeEnum.Approved:
                            Assert.AreEqual(CSSPEnumsRes.ClassificationTypeEnumApproved, retStr);
                            break;
                        case ClassificationTypeEnum.Restricted:
                            Assert.AreEqual(CSSPEnumsRes.ClassificationTypeEnumRestricted, retStr);
                            break;
                        case ClassificationTypeEnum.Prohibited:
                            Assert.AreEqual(CSSPEnumsRes.ClassificationTypeEnumProhibited, retStr);
                            break;
                        case ClassificationTypeEnum.ConditionallyApproved:
                            Assert.AreEqual(CSSPEnumsRes.ClassificationTypeEnumConditionallyApproved, retStr);
                            break;
                        case ClassificationTypeEnum.ConditionallyRestricted:
                            Assert.AreEqual(CSSPEnumsRes.ClassificationTypeEnumConditionallyRestricted, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_CollectionSystemTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), i);
        
                    switch ((CollectionSystemTypeEnum)i)
                    {
                        case CollectionSystemTypeEnum.CompletelySeparated:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCompletelySeparated, retStr);
                            break;
                        case CollectionSystemTypeEnum.CompletelyCombined:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCompletelyCombined, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined90Separated10:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined90Separated10, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined80Separated20:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined80Separated20, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined70Separated30:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined70Separated30, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined60Separated40:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined60Separated40, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined50Separated50:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined50Separated50, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined40Separated60:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined40Separated60, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined30Separated70:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined30Separated70, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined20Separated80:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined20Separated80, retStr);
                            break;
                        case CollectionSystemTypeEnum.Combined10Separated90:
                            Assert.AreEqual(CSSPEnumsRes.CollectionSystemTypeEnumCombined10Separated90, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ContactTitleEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), i);
        
                    switch ((ContactTitleEnum)i)
                    {
                        case ContactTitleEnum.DirectorGeneral:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumDirectorGeneral, retStr);
                            break;
                        case ContactTitleEnum.DirectorPublicWorks:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumDirectorPublicWorks, retStr);
                            break;
                        case ContactTitleEnum.Superintendent:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumSuperintendent, retStr);
                            break;
                        case ContactTitleEnum.Engineer:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumEngineer, retStr);
                            break;
                        case ContactTitleEnum.Foreman:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumForeman, retStr);
                            break;
                        case ContactTitleEnum.Operator:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumOperator, retStr);
                            break;
                        case ContactTitleEnum.FacilitiesManager:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumFacilitiesManager, retStr);
                            break;
                        case ContactTitleEnum.Supervisor:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumSupervisor, retStr);
                            break;
                        case ContactTitleEnum.Technician:
                            Assert.AreEqual(CSSPEnumsRes.ContactTitleEnumTechnician, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_CSSPWQInputSheetTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), i);
        
                    switch ((CSSPWQInputSheetTypeEnum)i)
                    {
                        case CSSPWQInputSheetTypeEnum.A1:
                            Assert.AreEqual(CSSPEnumsRes.CSSPWQInputSheetTypeEnumA1, retStr);
                            break;
                        case CSSPWQInputSheetTypeEnum.LTB:
                            Assert.AreEqual(CSSPEnumsRes.CSSPWQInputSheetTypeEnumLTB, retStr);
                            break;
                        case CSSPWQInputSheetTypeEnum.EC:
                            Assert.AreEqual(CSSPEnumsRes.CSSPWQInputSheetTypeEnumEC, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_CSSPWQInputTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), i);
        
                    switch ((CSSPWQInputTypeEnum)i)
                    {
                        case CSSPWQInputTypeEnum.Subsector:
                            Assert.AreEqual(CSSPEnumsRes.CSSPWQInputTypeEnumSubsector, retStr);
                            break;
                        case CSSPWQInputTypeEnum.Municipality:
                            Assert.AreEqual(CSSPEnumsRes.CSSPWQInputTypeEnumMunicipality, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_DailyOrHourlyDataEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), i);
        
                    switch ((DailyOrHourlyDataEnum)i)
                    {
                        case DailyOrHourlyDataEnum.Daily:
                            Assert.AreEqual(CSSPEnumsRes.DailyOrHourlyDataEnumDaily, retStr);
                            break;
                        case DailyOrHourlyDataEnum.Hourly:
                            Assert.AreEqual(CSSPEnumsRes.DailyOrHourlyDataEnumHourly, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_DisinfectionTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), i);
        
                    switch ((DisinfectionTypeEnum)i)
                    {
                        case DisinfectionTypeEnum.None:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumNone, retStr);
                            break;
                        case DisinfectionTypeEnum.UV:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumUV, retStr);
                            break;
                        case DisinfectionTypeEnum.ChlorinationNoDechlorination:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorination, retStr);
                            break;
                        case DisinfectionTypeEnum.ChlorinationWithDechlorination:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorination, retStr);
                            break;
                        case DisinfectionTypeEnum.UVSeasonal:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumUVSeasonal, retStr);
                            break;
                        case DisinfectionTypeEnum.ChlorinationNoDechlorinationSeasonal:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorinationSeasonal, retStr);
                            break;
                        case DisinfectionTypeEnum.ChlorinationWithDechlorinationSeasonal:
                            Assert.AreEqual(CSSPEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorinationSeasonal, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_DrogueTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), i);
        
                    switch ((DrogueTypeEnum)i)
                    {
                        case DrogueTypeEnum.SmallDrogue:
                            Assert.AreEqual(CSSPEnumsRes.DrogueTypeEnumSmallDrogue, retStr);
                            break;
                        case DrogueTypeEnum.LargeDrogue:
                            Assert.AreEqual(CSSPEnumsRes.DrogueTypeEnumLargeDrogue, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_EmailTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), i);
        
                    switch ((EmailTypeEnum)i)
                    {
                        case EmailTypeEnum.Personal:
                            Assert.AreEqual(CSSPEnumsRes.EmailTypeEnumPersonal, retStr);
                            break;
                        case EmailTypeEnum.Work:
                            Assert.AreEqual(CSSPEnumsRes.EmailTypeEnumWork, retStr);
                            break;
                        case EmailTypeEnum.Personal2:
                            Assert.AreEqual(CSSPEnumsRes.EmailTypeEnumPersonal2, retStr);
                            break;
                        case EmailTypeEnum.Work2:
                            Assert.AreEqual(CSSPEnumsRes.EmailTypeEnumWork2, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ExcelExportShowDataTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), i);
        
                    switch ((ExcelExportShowDataTypeEnum)i)
                    {
                        case ExcelExportShowDataTypeEnum.FecalColiform:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumFecalColiform, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.Temperature:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumTemperature, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.Salinity:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumSalinity, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.P90:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumP90, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.GemetricMean:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumGemetricMean, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.Median:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumMedian, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.PercOfP90Over43:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over43, retStr);
                            break;
                        case ExcelExportShowDataTypeEnum.PercOfP90Over260:
                            Assert.AreEqual(CSSPEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over260, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_FacilityTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), i);
        
                    switch ((FacilityTypeEnum)i)
                    {
                        case FacilityTypeEnum.Lagoon:
                            Assert.AreEqual(CSSPEnumsRes.FacilityTypeEnumLagoon, retStr);
                            break;
                        case FacilityTypeEnum.Plant:
                            Assert.AreEqual(CSSPEnumsRes.FacilityTypeEnumPlant, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_FilePurposeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), i);
        
                    switch ((FilePurposeEnum)i)
                    {
                        case FilePurposeEnum.MikeInput:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumMikeInput, retStr);
                            break;
                        case FilePurposeEnum.MikeInputMDF:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumMikeInputMDF, retStr);
                            break;
                        case FilePurposeEnum.MikeResultDFSU:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumMikeResultDFSU, retStr);
                            break;
                        case FilePurposeEnum.MikeResultKMZ:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumMikeResultKMZ, retStr);
                            break;
                        case FilePurposeEnum.Information:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumInformation, retStr);
                            break;
                        case FilePurposeEnum.Image:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumImage, retStr);
                            break;
                        case FilePurposeEnum.Picture:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumPicture, retStr);
                            break;
                        case FilePurposeEnum.ReportGenerated:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumReportGenerated, retStr);
                            break;
                        case FilePurposeEnum.TemplateGenerated:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumTemplateGenerated, retStr);
                            break;
                        case FilePurposeEnum.GeneratedFCForm:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumGeneratedFCForm, retStr);
                            break;
                        case FilePurposeEnum.Template:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumTemplate, retStr);
                            break;
                        case FilePurposeEnum.Map:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumMap, retStr);
                            break;
                        case FilePurposeEnum.Analysis:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumAnalysis, retStr);
                            break;
                        case FilePurposeEnum.OpenData:
                            Assert.AreEqual(CSSPEnumsRes.FilePurposeEnumOpenData, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_FileStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), i);
        
                    switch ((FileStatusEnum)i)
                    {
                        case FileStatusEnum.Changed:
                            Assert.AreEqual(CSSPEnumsRes.FileStatusEnumChanged, retStr);
                            break;
                        case FileStatusEnum.Sent:
                            Assert.AreEqual(CSSPEnumsRes.FileStatusEnumSent, retStr);
                            break;
                        case FileStatusEnum.Accepted:
                            Assert.AreEqual(CSSPEnumsRes.FileStatusEnumAccepted, retStr);
                            break;
                        case FileStatusEnum.Rejected:
                            Assert.AreEqual(CSSPEnumsRes.FileStatusEnumRejected, retStr);
                            break;
                        case FileStatusEnum.Fail:
                            Assert.AreEqual(CSSPEnumsRes.FileStatusEnumFail, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_FileTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), i);
        
                    switch ((FileTypeEnum)i)
                    {
                        case FileTypeEnum.DFS0:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumDFS0, retStr);
                            break;
                        case FileTypeEnum.DFS1:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumDFS1, retStr);
                            break;
                        case FileTypeEnum.DFSU:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumDFSU, retStr);
                            break;
                        case FileTypeEnum.KMZ:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumKMZ, retStr);
                            break;
                        case FileTypeEnum.LOG:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumLOG, retStr);
                            break;
                        case FileTypeEnum.M21FM:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumM21FM, retStr);
                            break;
                        case FileTypeEnum.M3FM:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumM3FM, retStr);
                            break;
                        case FileTypeEnum.MDF:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumMDF, retStr);
                            break;
                        case FileTypeEnum.MESH:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumMESH, retStr);
                            break;
                        case FileTypeEnum.XLSX:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumXLSX, retStr);
                            break;
                        case FileTypeEnum.DOCX:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumDOCX, retStr);
                            break;
                        case FileTypeEnum.PDF:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumPDF, retStr);
                            break;
                        case FileTypeEnum.JPG:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumJPG, retStr);
                            break;
                        case FileTypeEnum.JPEG:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumJPEG, retStr);
                            break;
                        case FileTypeEnum.GIF:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumGIF, retStr);
                            break;
                        case FileTypeEnum.PNG:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumPNG, retStr);
                            break;
                        case FileTypeEnum.HTML:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumHTML, retStr);
                            break;
                        case FileTypeEnum.TXT:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumTXT, retStr);
                            break;
                        case FileTypeEnum.XYZ:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumXYZ, retStr);
                            break;
                        case FileTypeEnum.KML:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumKML, retStr);
                            break;
                        case FileTypeEnum.CSV:
                            Assert.AreEqual(CSSPEnumsRes.FileTypeEnumCSV, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_InfrastructureTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), i);
        
                    switch ((InfrastructureTypeEnum)i)
                    {
                        case InfrastructureTypeEnum.WWTP:
                            Assert.AreEqual(CSSPEnumsRes.InfrastructureTypeEnumWWTP, retStr);
                            break;
                        case InfrastructureTypeEnum.LiftStation:
                            Assert.AreEqual(CSSPEnumsRes.InfrastructureTypeEnumLiftStation, retStr);
                            break;
                        case InfrastructureTypeEnum.Other:
                            Assert.AreEqual(CSSPEnumsRes.InfrastructureTypeEnumOther, retStr);
                            break;
                        case InfrastructureTypeEnum.SeeOtherMunicipality:
                            Assert.AreEqual(CSSPEnumsRes.InfrastructureTypeEnumSeeOtherMunicipality, retStr);
                            break;
                        case InfrastructureTypeEnum.LineOverflow:
                            Assert.AreEqual(CSSPEnumsRes.InfrastructureTypeEnumLineOverflow, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_KMZActionEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), i);
        
                    switch ((KMZActionEnum)i)
                    {
                        case KMZActionEnum.DoNothing:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumDoNothing, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZContourAnimation:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZContourAnimation, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZContourLimit:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZContourLimit, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZCurrentAnimation:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZCurrentAnimation, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZCurrentMaximum:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZCurrentMaximum, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZMesh:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZMesh, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZStudyArea:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZStudyArea, retStr);
                            break;
                        case KMZActionEnum.GenerateKMZBoundaryConditionNodes:
                            Assert.AreEqual(CSSPEnumsRes.KMZActionEnumGenerateKMZBoundaryConditionNodes, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_LaboratoryEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), i);
        
                    switch ((LaboratoryEnum)i)
                    {
                        case LaboratoryEnum.ZZ_0:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_0, retStr);
                            break;
                        case LaboratoryEnum.ZZ_1:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_1, retStr);
                            break;
                        case LaboratoryEnum.ZZ_2:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_2, retStr);
                            break;
                        case LaboratoryEnum.ZZ_3:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_3, retStr);
                            break;
                        case LaboratoryEnum.ZZ_4:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_4, retStr);
                            break;
                        case LaboratoryEnum.ZZ_1Q:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_1Q, retStr);
                            break;
                        case LaboratoryEnum.ZZ_2Q:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_2Q, retStr);
                            break;
                        case LaboratoryEnum.ZZ_3Q:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_3Q, retStr);
                            break;
                        case LaboratoryEnum.ZZ_4Q:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_4Q, retStr);
                            break;
                        case LaboratoryEnum.ZZ_5Q:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_5Q, retStr);
                            break;
                        case LaboratoryEnum.ZZ_11BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_11BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_12BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_12BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_13BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_13BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_14BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_14BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_15BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_15BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_16BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_16BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_17BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_17BC, retStr);
                            break;
                        case LaboratoryEnum.ZZ_18BC:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumZZ_18BC, retStr);
                            break;
                        case LaboratoryEnum.MonctonEnvironmentCanada:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumMonctonEnvironmentCanada, retStr);
                            break;
                        case LaboratoryEnum.BIOEnvironmentCanada:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumBIOEnvironmentCanada, retStr);
                            break;
                        case LaboratoryEnum.EasternCharlotteWaterwayLaboratory:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumEasternCharlotteWaterwayLaboratory, retStr);
                            break;
                        case LaboratoryEnum.InstitutDeRechercheSurLesZonesCotieres:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumInstitutDeRechercheSurLesZonesCotieres, retStr);
                            break;
                        case LaboratoryEnum.CentreDeRechercheSurLesAliments:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumCentreDeRechercheSurLesAliments, retStr);
                            break;
                        case LaboratoryEnum.CaraquetMobileLaboratoryEnvironmentCanada:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumCaraquetMobileLaboratoryEnvironmentCanada, retStr);
                            break;
                        case LaboratoryEnum.MaxxamAnalyticsBedford:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumMaxxamAnalyticsBedford, retStr);
                            break;
                        case LaboratoryEnum.MaxxamAnalyticsSydney:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumMaxxamAnalyticsSydney, retStr);
                            break;
                        case LaboratoryEnum.PEIAnalyticalLaboratory:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumPEIAnalyticalLaboratory, retStr);
                            break;
                        case LaboratoryEnum.NLMobileLaboratory:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumNLMobileLaboratory, retStr);
                            break;
                        case LaboratoryEnum.AvalonLaboratoriesInc:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumAvalonLaboratoriesInc, retStr);
                            break;
                        case LaboratoryEnum.Maxxam:
                            Assert.AreEqual(CSSPEnumsRes.LaboratoryEnumMaxxam, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_LabSheetStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), i);
        
                    switch ((LabSheetStatusEnum)i)
                    {
                        case LabSheetStatusEnum.Created:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetStatusEnumCreated, retStr);
                            break;
                        case LabSheetStatusEnum.Transferred:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetStatusEnumTransferred, retStr);
                            break;
                        case LabSheetStatusEnum.Accepted:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetStatusEnumAccepted, retStr);
                            break;
                        case LabSheetStatusEnum.Rejected:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetStatusEnumRejected, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_LabSheetTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), i);
        
                    switch ((LabSheetTypeEnum)i)
                    {
                        case LabSheetTypeEnum.A1:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetTypeEnumA1, retStr);
                            break;
                        case LabSheetTypeEnum.LTB:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetTypeEnumLTB, retStr);
                            break;
                        case LabSheetTypeEnum.EC:
                            Assert.AreEqual(CSSPEnumsRes.LabSheetTypeEnumEC, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_LanguageEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), i);
        
                    switch ((LanguageEnum)i)
                    {
                        case LanguageEnum.en:
                            Assert.AreEqual(CSSPEnumsRes.LanguageEnumen, retStr);
                            break;
                        case LanguageEnum.fr:
                            Assert.AreEqual(CSSPEnumsRes.LanguageEnumfr, retStr);
                            break;
                        case LanguageEnum.enAndfr:
                            Assert.AreEqual(CSSPEnumsRes.LanguageEnumenAndfr, retStr);
                            break;
                        case LanguageEnum.es:
                            Assert.AreEqual(CSSPEnumsRes.LanguageEnumes, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_LogCommandEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), i);
        
                    switch ((LogCommandEnum)i)
                    {
                        case LogCommandEnum.Add:
                            Assert.AreEqual(CSSPEnumsRes.LogCommandEnumAdd, retStr);
                            break;
                        case LogCommandEnum.Change:
                            Assert.AreEqual(CSSPEnumsRes.LogCommandEnumChange, retStr);
                            break;
                        case LogCommandEnum.Delete:
                            Assert.AreEqual(CSSPEnumsRes.LogCommandEnumDelete, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_MapInfoDrawTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), i);
        
                    switch ((MapInfoDrawTypeEnum)i)
                    {
                        case MapInfoDrawTypeEnum.Point:
                            Assert.AreEqual(CSSPEnumsRes.MapInfoDrawTypeEnumPoint, retStr);
                            break;
                        case MapInfoDrawTypeEnum.Polyline:
                            Assert.AreEqual(CSSPEnumsRes.MapInfoDrawTypeEnumPolyline, retStr);
                            break;
                        case MapInfoDrawTypeEnum.Polygon:
                            Assert.AreEqual(CSSPEnumsRes.MapInfoDrawTypeEnumPolygon, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_MikeBoundaryConditionLevelOrVelocityEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i);
        
                    switch ((MikeBoundaryConditionLevelOrVelocityEnum)i)
                    {
                        case MikeBoundaryConditionLevelOrVelocityEnum.Level:
                            Assert.AreEqual(CSSPEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumLevel, retStr);
                            break;
                        case MikeBoundaryConditionLevelOrVelocityEnum.Velocity:
                            Assert.AreEqual(CSSPEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumVelocity, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_MikeScenarioSpecialResultKMLTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), i);
        
                    switch ((MikeScenarioSpecialResultKMLTypeEnum)i)
                    {
                        case MikeScenarioSpecialResultKMLTypeEnum.Mesh:
                            Assert.AreEqual(CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumMesh, retStr);
                            break;
                        case MikeScenarioSpecialResultKMLTypeEnum.StudyArea:
                            Assert.AreEqual(CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumStudyArea, retStr);
                            break;
                        case MikeScenarioSpecialResultKMLTypeEnum.BoundaryConditions:
                            Assert.AreEqual(CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumBoundaryConditions, retStr);
                            break;
                        case MikeScenarioSpecialResultKMLTypeEnum.PollutionLimit:
                            Assert.AreEqual(CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionLimit, retStr);
                            break;
                        case MikeScenarioSpecialResultKMLTypeEnum.PollutionAnimation:
                            Assert.AreEqual(CSSPEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionAnimation, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_MWQMSiteLatestClassificationEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), i);
        
                    switch ((MWQMSiteLatestClassificationEnum)i)
                    {
                        case MWQMSiteLatestClassificationEnum.Approved:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumApproved, retStr);
                            break;
                        case MWQMSiteLatestClassificationEnum.ConditionallyApproved:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumConditionallyApproved, retStr);
                            break;
                        case MWQMSiteLatestClassificationEnum.Restricted:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumRestricted, retStr);
                            break;
                        case MWQMSiteLatestClassificationEnum.ConditionallyRestricted:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumConditionallyRestricted, retStr);
                            break;
                        case MWQMSiteLatestClassificationEnum.Prohibited:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumProhibited, retStr);
                            break;
                        case MWQMSiteLatestClassificationEnum.Unclassified:
                            Assert.AreEqual(CSSPEnumsRes.MWQMSiteLatestClassificationEnumUnclassified, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PolSourceInactiveReasonEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), i);
        
                    switch ((PolSourceInactiveReasonEnum)i)
                    {
                        case PolSourceInactiveReasonEnum.Abandoned:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceInactiveReasonEnumAbandoned, retStr);
                            break;
                        case PolSourceInactiveReasonEnum.Closed:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceInactiveReasonEnumClosed, retStr);
                            break;
                        case PolSourceInactiveReasonEnum.Removed:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceInactiveReasonEnumRemoved, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PolSourceIssueRiskEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), i);
        
                    switch ((PolSourceIssueRiskEnum)i)
                    {
                        case PolSourceIssueRiskEnum.LowRisk:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceIssueRiskEnumLowRisk, retStr);
                            break;
                        case PolSourceIssueRiskEnum.ModerateRisk:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceIssueRiskEnumModerateRisk, retStr);
                            break;
                        case PolSourceIssueRiskEnum.HighRisk:
                            Assert.AreEqual(CSSPEnumsRes.PolSourceIssueRiskEnumHighRisk, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PositionEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PositionEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), i);
        
                    switch ((PositionEnum)i)
                    {
                        case PositionEnum.LeftBottom:
                            Assert.AreEqual(CSSPEnumsRes.PositionEnumLeftBottom, retStr);
                            break;
                        case PositionEnum.RightBottom:
                            Assert.AreEqual(CSSPEnumsRes.PositionEnumRightBottom, retStr);
                            break;
                        case PositionEnum.LeftTop:
                            Assert.AreEqual(CSSPEnumsRes.PositionEnumLeftTop, retStr);
                            break;
                        case PositionEnum.RightTop:
                            Assert.AreEqual(CSSPEnumsRes.PositionEnumRightTop, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PreliminaryTreatmentTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), i);
        
                    switch ((PreliminaryTreatmentTypeEnum)i)
                    {
                        case PreliminaryTreatmentTypeEnum.NotApplicable:
                            Assert.AreEqual(CSSPEnumsRes.PreliminaryTreatmentTypeEnumNotApplicable, retStr);
                            break;
                        case PreliminaryTreatmentTypeEnum.BarScreen:
                            Assert.AreEqual(CSSPEnumsRes.PreliminaryTreatmentTypeEnumBarScreen, retStr);
                            break;
                        case PreliminaryTreatmentTypeEnum.Grinder:
                            Assert.AreEqual(CSSPEnumsRes.PreliminaryTreatmentTypeEnumGrinder, retStr);
                            break;
                        case PreliminaryTreatmentTypeEnum.MechanicalScreening:
                            Assert.AreEqual(CSSPEnumsRes.PreliminaryTreatmentTypeEnumMechanicalScreening, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PrimaryTreatmentTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), i);
        
                    switch ((PrimaryTreatmentTypeEnum)i)
                    {
                        case PrimaryTreatmentTypeEnum.NotApplicable:
                            Assert.AreEqual(CSSPEnumsRes.PrimaryTreatmentTypeEnumNotApplicable, retStr);
                            break;
                        case PrimaryTreatmentTypeEnum.Sedimentation:
                            Assert.AreEqual(CSSPEnumsRes.PrimaryTreatmentTypeEnumSedimentation, retStr);
                            break;
                        case PrimaryTreatmentTypeEnum.ChemicalCoagulation:
                            Assert.AreEqual(CSSPEnumsRes.PrimaryTreatmentTypeEnumChemicalCoagulation, retStr);
                            break;
                        case PrimaryTreatmentTypeEnum.Filtration:
                            Assert.AreEqual(CSSPEnumsRes.PrimaryTreatmentTypeEnumFiltration, retStr);
                            break;
                        case PrimaryTreatmentTypeEnum.PrimaryClarification:
                            Assert.AreEqual(CSSPEnumsRes.PrimaryTreatmentTypeEnumPrimaryClarification, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_PropertyTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), i);
        
                    switch ((PropertyTypeEnum)i)
                    {
                        case PropertyTypeEnum.Int:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumInt, retStr);
                            break;
                        case PropertyTypeEnum.Double:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumDouble, retStr);
                            break;
                        case PropertyTypeEnum.String:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumString, retStr);
                            break;
                        case PropertyTypeEnum.Boolean:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumBoolean, retStr);
                            break;
                        case PropertyTypeEnum.DateTime:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumDateTime, retStr);
                            break;
                        case PropertyTypeEnum.Enum:
                            Assert.AreEqual(CSSPEnumsRes.PropertyTypeEnumEnum, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportConditionEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), i);
        
                    switch ((ReportConditionEnum)i)
                    {
                        case ReportConditionEnum.ReportConditionTrue:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionTrue, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionFalse:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionFalse, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionContain:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionContain, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionStart:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionStart, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionEnd:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionEnd, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionBigger:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionBigger, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionSmaller:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionSmaller, retStr);
                            break;
                        case ReportConditionEnum.ReportConditionEqual:
                            Assert.AreEqual(CSSPEnumsRes.ReportConditionEnumReportConditionEqual, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportFieldTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), i);
        
                    switch ((ReportFieldTypeEnum)i)
                    {
                        case ReportFieldTypeEnum.NumberWhole:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumNumberWhole, retStr);
                            break;
                        case ReportFieldTypeEnum.NumberWithDecimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumNumberWithDecimal, retStr);
                            break;
                        case ReportFieldTypeEnum.DateAndTime:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumDateAndTime, retStr);
                            break;
                        case ReportFieldTypeEnum.Text:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumText, retStr);
                            break;
                        case ReportFieldTypeEnum.TrueOrFalse:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTrueOrFalse, retStr);
                            break;
                        case ReportFieldTypeEnum.FilePurpose:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumFilePurpose, retStr);
                            break;
                        case ReportFieldTypeEnum.FileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumFileType, retStr);
                            break;
                        case ReportFieldTypeEnum.TranslationStatus:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTranslationStatus, retStr);
                            break;
                        case ReportFieldTypeEnum.BoxModelResultType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumBoxModelResultType, retStr);
                            break;
                        case ReportFieldTypeEnum.InfrastructureType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumInfrastructureType, retStr);
                            break;
                        case ReportFieldTypeEnum.FacilityType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumFacilityType, retStr);
                            break;
                        case ReportFieldTypeEnum.AerationType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumAerationType, retStr);
                            break;
                        case ReportFieldTypeEnum.PreliminaryTreatmentType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumPreliminaryTreatmentType, retStr);
                            break;
                        case ReportFieldTypeEnum.PrimaryTreatmentType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumPrimaryTreatmentType, retStr);
                            break;
                        case ReportFieldTypeEnum.SecondaryTreatmentType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSecondaryTreatmentType, retStr);
                            break;
                        case ReportFieldTypeEnum.TertiaryTreatmentType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTertiaryTreatmentType, retStr);
                            break;
                        case ReportFieldTypeEnum.TreatmentType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTreatmentType, retStr);
                            break;
                        case ReportFieldTypeEnum.DisinfectionType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumDisinfectionType, retStr);
                            break;
                        case ReportFieldTypeEnum.CollectionSystemType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumCollectionSystemType, retStr);
                            break;
                        case ReportFieldTypeEnum.AlarmSystemType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumAlarmSystemType, retStr);
                            break;
                        case ReportFieldTypeEnum.ScenarioStatus:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumScenarioStatus, retStr);
                            break;
                        case ReportFieldTypeEnum.StorageDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumStorageDataType, retStr);
                            break;
                        case ReportFieldTypeEnum.Language:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumLanguage, retStr);
                            break;
                        case ReportFieldTypeEnum.SampleType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSampleType, retStr);
                            break;
                        case ReportFieldTypeEnum.BeaufortScale:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumBeaufortScale, retStr);
                            break;
                        case ReportFieldTypeEnum.AnalyzeMethod:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumAnalyzeMethod, retStr);
                            break;
                        case ReportFieldTypeEnum.SampleMatrix:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSampleMatrix, retStr);
                            break;
                        case ReportFieldTypeEnum.Laboratory:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumLaboratory, retStr);
                            break;
                        case ReportFieldTypeEnum.SampleStatus:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSampleStatus, retStr);
                            break;
                        case ReportFieldTypeEnum.SamplingPlanType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSamplingPlanType, retStr);
                            break;
                        case ReportFieldTypeEnum.LabSheetSampleType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumLabSheetSampleType, retStr);
                            break;
                        case ReportFieldTypeEnum.LabSheetType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumLabSheetType, retStr);
                            break;
                        case ReportFieldTypeEnum.LabSheetStatus:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumLabSheetStatus, retStr);
                            break;
                        case ReportFieldTypeEnum.PolSourceInactiveReason:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumPolSourceInactiveReason, retStr);
                            break;
                        case ReportFieldTypeEnum.PolSourceObsInfo:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumPolSourceObsInfo, retStr);
                            break;
                        case ReportFieldTypeEnum.AddressType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumAddressType, retStr);
                            break;
                        case ReportFieldTypeEnum.StreetType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumStreetType, retStr);
                            break;
                        case ReportFieldTypeEnum.ContactTitle:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumContactTitle, retStr);
                            break;
                        case ReportFieldTypeEnum.EmailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumEmailType, retStr);
                            break;
                        case ReportFieldTypeEnum.TelType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTelType, retStr);
                            break;
                        case ReportFieldTypeEnum.TideText:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTideText, retStr);
                            break;
                        case ReportFieldTypeEnum.TideDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumTideDataType, retStr);
                            break;
                        case ReportFieldTypeEnum.SpecialTableType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumSpecialTableType, retStr);
                            break;
                        case ReportFieldTypeEnum.MWQMSiteLatestClassification:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumMWQMSiteLatestClassification, retStr);
                            break;
                        case ReportFieldTypeEnum.PolSourceIssueRisk:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumPolSourceIssueRisk, retStr);
                            break;
                        case ReportFieldTypeEnum.MikeScenarioSpecialResultKMLType:
                            Assert.AreEqual(CSSPEnumsRes.ReportFieldTypeEnumMikeScenarioSpecialResultKMLType, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportFileTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), i);
        
                    switch ((ReportFileTypeEnum)i)
                    {
                        case ReportFileTypeEnum.CSV:
                            Assert.AreEqual(CSSPEnumsRes.ReportFileTypeEnumCSV, retStr);
                            break;
                        case ReportFileTypeEnum.Word:
                            Assert.AreEqual(CSSPEnumsRes.ReportFileTypeEnumWord, retStr);
                            break;
                        case ReportFileTypeEnum.Excel:
                            Assert.AreEqual(CSSPEnumsRes.ReportFileTypeEnumExcel, retStr);
                            break;
                        case ReportFileTypeEnum.KML:
                            Assert.AreEqual(CSSPEnumsRes.ReportFileTypeEnumKML, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportFormatingDateEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), i);
        
                    switch ((ReportFormatingDateEnum)i)
                    {
                        case ReportFormatingDateEnum.ReportFormatingDateYearOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateMonthDecimalOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthDecimalOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateMonthShortTextOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthShortTextOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateMonthFullTextOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthFullTextOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateDayOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateDayOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateHourOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateHourOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateMinuteOnly:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateMinuteOnly, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDay:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDay, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDay:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDay, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDay:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDay, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDayHourMinute:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDayHourMinute, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDayHourMinute:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDayHourMinute, retStr);
                            break;
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDayHourMinute:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDayHourMinute, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportFormatingNumberEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), i);
        
                    switch ((ReportFormatingNumberEnum)i)
                    {
                        case ReportFormatingNumberEnum.ReportFormatingNumber0Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber0Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber1Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber1Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber2Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber2Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber3Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber3Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber4Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber4Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber5Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber5Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumber6Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumber6Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific0Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific0Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific1Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific1Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific2Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific2Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific3Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific3Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific4Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific4Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific5Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific5Decimal, retStr);
                            break;
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific6Decimal:
                            Assert.AreEqual(CSSPEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific6Decimal, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportGenerateObjectsKeywordEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), i);
        
                    switch ((ReportGenerateObjectsKeywordEnum)i)
                    {
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RE_EVALUATION_COVER_PAGE:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RE_EVALUATION_COVER_PAGE, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_ALL:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_ALL, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_WET:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_WET, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_DRY:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_DRY, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_DATA_AVAILABILITY:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_DATA_AVAILABILITY, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_FC_TABLE:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_FC_TABLE, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_SALINITY_TABLE:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_SALINITY_TABLE, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITIES, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_CONTACTS:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_CONTACTS, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_DETAIL:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_DETAIL, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_ECCC_AND_SWCP_LOGO:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_ECCC_AND_SWCP_LOGO, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CSSP_LOGO:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CSSP_LOGO, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP, retStr);
                            break;
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP:
                            Assert.AreEqual(CSSPEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportSortingEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), i);
        
                    switch ((ReportSortingEnum)i)
                    {
                        case ReportSortingEnum.ReportSortingAscending:
                            Assert.AreEqual(CSSPEnumsRes.ReportSortingEnumReportSortingAscending, retStr);
                            break;
                        case ReportSortingEnum.ReportSortingDescending:
                            Assert.AreEqual(CSSPEnumsRes.ReportSortingEnumReportSortingDescending, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportTreeNodeSubTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), i);
        
                    switch ((ReportTreeNodeSubTypeEnum)i)
                    {
                        case ReportTreeNodeSubTypeEnum.TableSelectable:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeSubTypeEnumTableSelectable, retStr);
                            break;
                        case ReportTreeNodeSubTypeEnum.Field:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeSubTypeEnumField, retStr);
                            break;
                        case ReportTreeNodeSubTypeEnum.FieldsHolder:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeSubTypeEnumFieldsHolder, retStr);
                            break;
                        case ReportTreeNodeSubTypeEnum.TableNotSelectable:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeSubTypeEnumTableNotSelectable, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ReportTreeNodeTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), i);
        
                    switch ((ReportTreeNodeTypeEnum)i)
                    {
                        case ReportTreeNodeTypeEnum.ReportRootType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportRootType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportCountryType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportCountryType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportProvinceType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportProvinceType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportAreaType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportAreaType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSectorType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSectorType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportRootFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportRootFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportInfrastructureType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportBoxModelType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportBoxModelType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeSourceType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteSampleType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteSampleType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsIssueType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsIssueType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioGeneralParameterType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioGeneralParameterType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportConditionType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportConditionType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportStatisticType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportStatisticType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportFieldsType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportFieldsType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportFieldType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportFieldType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteAddressType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteAddressType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactTelType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactTelType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactEmailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactEmailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportBoxModelResultType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportBoxModelResultType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportClimateSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportClimateSiteDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteDataType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteDataType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveValueType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveValueType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportInfrastructureAddressType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureAddressType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetTubeMPNDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetTubeMPNDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunSampleType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunSampleType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportCountryFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportCountryFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportProvinceFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportProvinceFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportAreaFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportAreaFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSectorFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSectorFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportInfrastructureFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioFileType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioFileType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeSourceStartEndType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceStartEndType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetTubeMPNDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetTubeMPNDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetTubeMPNDetailType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetTubeMPNDetailType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeBoundaryConditionType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeBoundaryConditionType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioAmbientType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioAmbientType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioResultType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioResultType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMPNLookupType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMPNLookupType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteStartAndEndType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteStartAndEndType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteDataType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportOrderType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportOrderType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportFormatType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportFormatType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactAddressType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactAddressType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteDataType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteDataType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteDataType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveValueType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveValueType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportSubsectorSpecialTableType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportSubsectorSpecialTableType, retStr);
                            break;
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioSpecialResultKMLType:
                            Assert.AreEqual(CSSPEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioSpecialResultKMLType, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SameDayNextDayEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), i);
        
                    switch ((SameDayNextDayEnum)i)
                    {
                        case SameDayNextDayEnum.SameDay:
                            Assert.AreEqual(CSSPEnumsRes.SameDayNextDayEnumSameDay, retStr);
                            break;
                        case SameDayNextDayEnum.NextDay:
                            Assert.AreEqual(CSSPEnumsRes.SameDayNextDayEnumNextDay, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SampleMatrixEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), i);
        
                    switch ((SampleMatrixEnum)i)
                    {
                        case SampleMatrixEnum.W:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumW, retStr);
                            break;
                        case SampleMatrixEnum.S:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumS, retStr);
                            break;
                        case SampleMatrixEnum.B:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumB, retStr);
                            break;
                        case SampleMatrixEnum.MPNQ:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumMPNQ, retStr);
                            break;
                        case SampleMatrixEnum.SampleMatrix5:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumSampleMatrix5, retStr);
                            break;
                        case SampleMatrixEnum.SampleMatrix6:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumSampleMatrix6, retStr);
                            break;
                        case SampleMatrixEnum.Water:
                            Assert.AreEqual(CSSPEnumsRes.SampleMatrixEnumWater, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SampleStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), i);
        
                    switch ((SampleStatusEnum)i)
                    {
                        case SampleStatusEnum.Active:
                            Assert.AreEqual(CSSPEnumsRes.SampleStatusEnumActive, retStr);
                            break;
                        case SampleStatusEnum.Archived:
                            Assert.AreEqual(CSSPEnumsRes.SampleStatusEnumArchived, retStr);
                            break;
                        case SampleStatusEnum.SampleStatus3:
                            Assert.AreEqual(CSSPEnumsRes.SampleStatusEnumSampleStatus3, retStr);
                            break;
                        case SampleStatusEnum.SampleStatus4:
                            Assert.AreEqual(CSSPEnumsRes.SampleStatusEnumSampleStatus4, retStr);
                            break;
                        case SampleStatusEnum.SampleStatus5:
                            Assert.AreEqual(CSSPEnumsRes.SampleStatusEnumSampleStatus5, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SampleTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), i);
        
                    switch ((SampleTypeEnum)i)
                    {
                        case SampleTypeEnum.DailyDuplicate:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumDailyDuplicate, retStr);
                            break;
                        case SampleTypeEnum.Infrastructure:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumInfrastructure, retStr);
                            break;
                        case SampleTypeEnum.IntertechDuplicate:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumIntertechDuplicate, retStr);
                            break;
                        case SampleTypeEnum.IntertechRead:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumIntertechRead, retStr);
                            break;
                        case SampleTypeEnum.RainCMP:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumRainCMP, retStr);
                            break;
                        case SampleTypeEnum.RainRun:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumRainRun, retStr);
                            break;
                        case SampleTypeEnum.ReopeningEmergencyRain:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumReopeningEmergencyRain, retStr);
                            break;
                        case SampleTypeEnum.ReopeningSpill:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumReopeningSpill, retStr);
                            break;
                        case SampleTypeEnum.Routine:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumRoutine, retStr);
                            break;
                        case SampleTypeEnum.Sanitary:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumSanitary, retStr);
                            break;
                        case SampleTypeEnum.Study:
                            Assert.AreEqual(CSSPEnumsRes.SampleTypeEnumStudy, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SamplingPlanTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), i);
        
                    switch ((SamplingPlanTypeEnum)i)
                    {
                        case SamplingPlanTypeEnum.Subsector:
                            Assert.AreEqual(CSSPEnumsRes.SamplingPlanTypeEnumSubsector, retStr);
                            break;
                        case SamplingPlanTypeEnum.Municipality:
                            Assert.AreEqual(CSSPEnumsRes.SamplingPlanTypeEnumMunicipality, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_ScenarioStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), i);
        
                    switch ((ScenarioStatusEnum)i)
                    {
                        case ScenarioStatusEnum.Normal:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumNormal, retStr);
                            break;
                        case ScenarioStatusEnum.Copying:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumCopying, retStr);
                            break;
                        case ScenarioStatusEnum.Copied:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumCopied, retStr);
                            break;
                        case ScenarioStatusEnum.Changing:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumChanging, retStr);
                            break;
                        case ScenarioStatusEnum.Changed:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumChanged, retStr);
                            break;
                        case ScenarioStatusEnum.AskToRun:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumAskToRun, retStr);
                            break;
                        case ScenarioStatusEnum.Running:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumRunning, retStr);
                            break;
                        case ScenarioStatusEnum.Completed:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumCompleted, retStr);
                            break;
                        case ScenarioStatusEnum.Cancelled:
                            Assert.AreEqual(CSSPEnumsRes.ScenarioStatusEnumCancelled, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SearchTagEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), i);
        
                    switch ((SearchTagEnum)i)
                    {
                        case SearchTagEnum.c:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumc, retStr);
                            break;
                        case SearchTagEnum.e:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnume, retStr);
                            break;
                        case SearchTagEnum.t:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumt, retStr);
                            break;
                        case SearchTagEnum.fi:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfi, retStr);
                            break;
                        case SearchTagEnum.fp:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfp, retStr);
                            break;
                        case SearchTagEnum.frg:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfrg, retStr);
                            break;
                        case SearchTagEnum.ftg:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumftg, retStr);
                            break;
                        case SearchTagEnum.fpdf:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfpdf, retStr);
                            break;
                        case SearchTagEnum.fdocx:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfdocx, retStr);
                            break;
                        case SearchTagEnum.fxlsx:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfxlsx, retStr);
                            break;
                        case SearchTagEnum.fkmz:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfkmz, retStr);
                            break;
                        case SearchTagEnum.fxyz:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfxyz, retStr);
                            break;
                        case SearchTagEnum.fdfs:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfdfs, retStr);
                            break;
                        case SearchTagEnum.fmike:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfmike, retStr);
                            break;
                        case SearchTagEnum.fmdf:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfmdf, retStr);
                            break;
                        case SearchTagEnum.fm21fm:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfm21fm, retStr);
                            break;
                        case SearchTagEnum.fm3fm:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfm3fm, retStr);
                            break;
                        case SearchTagEnum.fmesh:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfmesh, retStr);
                            break;
                        case SearchTagEnum.flog:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumflog, retStr);
                            break;
                        case SearchTagEnum.ftxt:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumftxt, retStr);
                            break;
                        case SearchTagEnum.m:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumm, retStr);
                            break;
                        case SearchTagEnum.p:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnump, retStr);
                            break;
                        case SearchTagEnum.ms:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumms, retStr);
                            break;
                        case SearchTagEnum.cs:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumcs, retStr);
                            break;
                        case SearchTagEnum.hs:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumhs, retStr);
                            break;
                        case SearchTagEnum.ts:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumts, retStr);
                            break;
                        case SearchTagEnum.ww:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumww, retStr);
                            break;
                        case SearchTagEnum.ls:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumls, retStr);
                            break;
                        case SearchTagEnum.st:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumst, retStr);
                            break;
                        case SearchTagEnum.ps:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumps, retStr);
                            break;
                        case SearchTagEnum.a:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnuma, retStr);
                            break;
                        case SearchTagEnum.s:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnums, retStr);
                            break;
                        case SearchTagEnum.ss:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumss, retStr);
                            break;
                        case SearchTagEnum.u:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumu, retStr);
                            break;
                        case SearchTagEnum.notag:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumnotag, retStr);
                            break;
                        case SearchTagEnum.fcsv:
                            Assert.AreEqual(CSSPEnumsRes.SearchTagEnumfcsv, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SecondaryTreatmentTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), i);
        
                    switch ((SecondaryTreatmentTypeEnum)i)
                    {
                        case SecondaryTreatmentTypeEnum.NotApplicable:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumNotApplicable, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.RotatingBiologicalContactor:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumRotatingBiologicalContactor, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.TricklingFilters:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumTricklingFilters, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.SequencingBatchReactor:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumSequencingBatchReactor, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.OxidationDitch:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumOxidationDitch, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.ExtendedAeration:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumExtendedAeration, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.ContactStabilization:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumContactStabilization, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.PhysicalChemicalProcesses:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumPhysicalChemicalProcesses, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.MovingBedBioReactor:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumMovingBedBioReactor, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.BiologicalAearatedFilters:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumBiologicalAearatedFilters, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.AeratedSubmergedBioFilmReactor:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumAeratedSubmergedBioFilmReactor, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.IntegratedFixedFilmActivatedSludge:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumIntegratedFixedFilmActivatedSludge, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.ActivatedSludge:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumActivatedSludge, retStr);
                            break;
                        case SecondaryTreatmentTypeEnum.ExtendedActivatedSludge:
                            Assert.AreEqual(CSSPEnumsRes.SecondaryTreatmentTypeEnumExtendedActivatedSludge, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SiteTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), i);
        
                    switch ((SiteTypeEnum)i)
                    {
                        case SiteTypeEnum.Climate:
                            Assert.AreEqual(CSSPEnumsRes.SiteTypeEnumClimate, retStr);
                            break;
                        case SiteTypeEnum.Hydrometric:
                            Assert.AreEqual(CSSPEnumsRes.SiteTypeEnumHydrometric, retStr);
                            break;
                        case SiteTypeEnum.Tide:
                            Assert.AreEqual(CSSPEnumsRes.SiteTypeEnumTide, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_SpecialTableTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), i);
        
                    switch ((SpecialTableTypeEnum)i)
                    {
                        case SpecialTableTypeEnum.FCDensitiesTable:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumFCDensitiesTable, retStr);
                            break;
                        case SpecialTableTypeEnum.SalinityTable:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumSalinityTable, retStr);
                            break;
                        case SpecialTableTypeEnum.TemperatureTable:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumTemperatureTable, retStr);
                            break;
                        case SpecialTableTypeEnum.GeometricMeanTable:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumGeometricMeanTable, retStr);
                            break;
                        case SpecialTableTypeEnum.MedianTable:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumMedianTable, retStr);
                            break;
                        case SpecialTableTypeEnum.P90Table:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumP90Table, retStr);
                            break;
                        case SpecialTableTypeEnum.PercentOver43Table:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumPercentOver43Table, retStr);
                            break;
                        case SpecialTableTypeEnum.PercentOver260Table:
                            Assert.AreEqual(CSSPEnumsRes.SpecialTableTypeEnumPercentOver260Table, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_StorageDataTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), i);
        
                    switch ((StorageDataTypeEnum)i)
                    {
                        case StorageDataTypeEnum.Archived:
                            Assert.AreEqual(CSSPEnumsRes.StorageDataTypeEnumArchived, retStr);
                            break;
                        case StorageDataTypeEnum.Forcasted:
                            Assert.AreEqual(CSSPEnumsRes.StorageDataTypeEnumForcasted, retStr);
                            break;
                        case StorageDataTypeEnum.Observed:
                            Assert.AreEqual(CSSPEnumsRes.StorageDataTypeEnumObserved, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_StreetTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), i);
        
                    switch ((StreetTypeEnum)i)
                    {
                        case StreetTypeEnum.Street:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumStreet, retStr);
                            break;
                        case StreetTypeEnum.Road:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumRoad, retStr);
                            break;
                        case StreetTypeEnum.Avenue:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumAvenue, retStr);
                            break;
                        case StreetTypeEnum.Crescent:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumCrescent, retStr);
                            break;
                        case StreetTypeEnum.Court:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumCourt, retStr);
                            break;
                        case StreetTypeEnum.Alley:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumAlley, retStr);
                            break;
                        case StreetTypeEnum.Drive:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumDrive, retStr);
                            break;
                        case StreetTypeEnum.Blvd:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumBlvd, retStr);
                            break;
                        case StreetTypeEnum.Route:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumRoute, retStr);
                            break;
                        case StreetTypeEnum.Lane:
                            Assert.AreEqual(CSSPEnumsRes.StreetTypeEnumLane, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TelTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), i);
        
                    switch ((TelTypeEnum)i)
                    {
                        case TelTypeEnum.Personal:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumPersonal, retStr);
                            break;
                        case TelTypeEnum.Work:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumWork, retStr);
                            break;
                        case TelTypeEnum.Mobile:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumMobile, retStr);
                            break;
                        case TelTypeEnum.Personal2:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumPersonal2, retStr);
                            break;
                        case TelTypeEnum.Work2:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumWork2, retStr);
                            break;
                        case TelTypeEnum.Mobile2:
                            Assert.AreEqual(CSSPEnumsRes.TelTypeEnumMobile2, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TertiaryTreatmentTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), i);
        
                    switch ((TertiaryTreatmentTypeEnum)i)
                    {
                        case TertiaryTreatmentTypeEnum.NotApplicable:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumNotApplicable, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.Adsorption:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumAdsorption, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.Flocculation:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumFlocculation, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.MembraneFiltration:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumMembraneFiltration, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.IonExchange:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumIonExchange, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.ReverseOsmosis:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumReverseOsmosis, retStr);
                            break;
                        case TertiaryTreatmentTypeEnum.BiologicalNutrientRemoval:
                            Assert.AreEqual(CSSPEnumsRes.TertiaryTreatmentTypeEnumBiologicalNutrientRemoval, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TideDataTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), i);
        
                    switch ((TideDataTypeEnum)i)
                    {
                        case TideDataTypeEnum.Min15:
                            Assert.AreEqual(CSSPEnumsRes.TideDataTypeEnumMin15, retStr);
                            break;
                        case TideDataTypeEnum.Min60:
                            Assert.AreEqual(CSSPEnumsRes.TideDataTypeEnumMin60, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TideTextEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), i);
        
                    switch ((TideTextEnum)i)
                    {
                        case TideTextEnum.LowTide:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumLowTide, retStr);
                            break;
                        case TideTextEnum.LowTideFalling:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumLowTideFalling, retStr);
                            break;
                        case TideTextEnum.LowTideRising:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumLowTideRising, retStr);
                            break;
                        case TideTextEnum.MidTide:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumMidTide, retStr);
                            break;
                        case TideTextEnum.MidTideFalling:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumMidTideFalling, retStr);
                            break;
                        case TideTextEnum.MidTideRising:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumMidTideRising, retStr);
                            break;
                        case TideTextEnum.HighTide:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumHighTide, retStr);
                            break;
                        case TideTextEnum.HighTideFalling:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumHighTideFalling, retStr);
                            break;
                        case TideTextEnum.HighTideRising:
                            Assert.AreEqual(CSSPEnumsRes.TideTextEnumHighTideRising, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TranslationStatusEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), i);
        
                    switch ((TranslationStatusEnum)i)
                    {
                        case TranslationStatusEnum.NotTranslated:
                            Assert.AreEqual(CSSPEnumsRes.TranslationStatusEnumNotTranslated, retStr);
                            break;
                        case TranslationStatusEnum.ElectronicallyTranslated:
                            Assert.AreEqual(CSSPEnumsRes.TranslationStatusEnumElectronicallyTranslated, retStr);
                            break;
                        case TranslationStatusEnum.Translated:
                            Assert.AreEqual(CSSPEnumsRes.TranslationStatusEnumTranslated, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TreatmentTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), i);
        
                    switch ((TreatmentTypeEnum)i)
                    {
                        case TreatmentTypeEnum.ActivatedSludge:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumActivatedSludge, retStr);
                            break;
                        case TreatmentTypeEnum.ActivatedSludgeWithBiofilter:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumActivatedSludgeWithBiofilter, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonNoAeration1Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration1Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonNoAeration2Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration2Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonNoAeration3Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration3Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonNoAeration4Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration4Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonNoAeration5Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonNoAeration5Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration1Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration1Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration2Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration2Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration3Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration3Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration4Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration4Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration5Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration5Cell, retStr);
                            break;
                        case TreatmentTypeEnum.LagoonWithAeration6Cell:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumLagoonWithAeration6Cell, retStr);
                            break;
                        case TreatmentTypeEnum.StabalizingPondOnly:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumStabalizingPondOnly, retStr);
                            break;
                        case TreatmentTypeEnum.OxidationDitchOnly:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumOxidationDitchOnly, retStr);
                            break;
                        case TreatmentTypeEnum.CirculatingFluidizedBed:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumCirculatingFluidizedBed, retStr);
                            break;
                        case TreatmentTypeEnum.TricklingFilter:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumTricklingFilter, retStr);
                            break;
                        case TreatmentTypeEnum.RecirculatingSandFilter:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumRecirculatingSandFilter, retStr);
                            break;
                        case TreatmentTypeEnum.TrashRackRakeOnly:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumTrashRackRakeOnly, retStr);
                            break;
                        case TreatmentTypeEnum.SepticTank:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumSepticTank, retStr);
                            break;
                        case TreatmentTypeEnum.Secondary:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumSecondary, retStr);
                            break;
                        case TreatmentTypeEnum.Tertiary:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumTertiary, retStr);
                            break;
                        case TreatmentTypeEnum.VolumeFermenter:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumVolumeFermenter, retStr);
                            break;
                        case TreatmentTypeEnum.BioFilmReactor:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumBioFilmReactor, retStr);
                            break;
                        case TreatmentTypeEnum.BioGreen:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumBioGreen, retStr);
                            break;
                        case TreatmentTypeEnum.BioDisks:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumBioDisks, retStr);
                            break;
                        case TreatmentTypeEnum.ChemicalPrimary:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumChemicalPrimary, retStr);
                            break;
                        case TreatmentTypeEnum.Chromoglass:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumChromoglass, retStr);
                            break;
                        case TreatmentTypeEnum.Primary:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumPrimary, retStr);
                            break;
                        case TreatmentTypeEnum.SequencingBatchReactor:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumSequencingBatchReactor, retStr);
                            break;
                        case TreatmentTypeEnum.PeatSystem:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumPeatSystem, retStr);
                            break;
                        case TreatmentTypeEnum.Physicochimique:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumPhysicochimique, retStr);
                            break;
                        case TreatmentTypeEnum.RotatingBiologicalContactor:
                            Assert.AreEqual(CSSPEnumsRes.TreatmentTypeEnumRotatingBiologicalContactor, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TVAuthEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), i);
        
                    switch ((TVAuthEnum)i)
                    {
                        case TVAuthEnum.NoAccess:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumNoAccess, retStr);
                            break;
                        case TVAuthEnum.Read:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumRead, retStr);
                            break;
                        case TVAuthEnum.Write:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumWrite, retStr);
                            break;
                        case TVAuthEnum.Create:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumCreate, retStr);
                            break;
                        case TVAuthEnum.Delete:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumDelete, retStr);
                            break;
                        case TVAuthEnum.Admin:
                            Assert.AreEqual(CSSPEnumsRes.TVAuthEnumAdmin, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_TVTypeEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), i);
        
                    switch ((TVTypeEnum)i)
                    {
                        case TVTypeEnum.Root:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumRoot, retStr);
                            break;
                        case TVTypeEnum.Address:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumAddress, retStr);
                            break;
                        case TVTypeEnum.Area:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumArea, retStr);
                            break;
                        case TVTypeEnum.ClimateSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumClimateSite, retStr);
                            break;
                        case TVTypeEnum.Contact:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumContact, retStr);
                            break;
                        case TVTypeEnum.Country:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumCountry, retStr);
                            break;
                        case TVTypeEnum.Email:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumEmail, retStr);
                            break;
                        case TVTypeEnum.File:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumFile, retStr);
                            break;
                        case TVTypeEnum.HydrometricSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumHydrometricSite, retStr);
                            break;
                        case TVTypeEnum.Infrastructure:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumInfrastructure, retStr);
                            break;
                        case TVTypeEnum.MikeBoundaryConditionWebTide:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeBoundaryConditionWebTide, retStr);
                            break;
                        case TVTypeEnum.MikeBoundaryConditionMesh:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeBoundaryConditionMesh, retStr);
                            break;
                        case TVTypeEnum.MikeScenario:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeScenario, retStr);
                            break;
                        case TVTypeEnum.MikeSource:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeSource, retStr);
                            break;
                        case TVTypeEnum.Municipality:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMunicipality, retStr);
                            break;
                        case TVTypeEnum.MWQMSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMSite, retStr);
                            break;
                        case TVTypeEnum.PolSourceSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumPolSourceSite, retStr);
                            break;
                        case TVTypeEnum.Province:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumProvince, retStr);
                            break;
                        case TVTypeEnum.Sector:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSector, retStr);
                            break;
                        case TVTypeEnum.Subsector:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSubsector, retStr);
                            break;
                        case TVTypeEnum.Tel:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumTel, retStr);
                            break;
                        case TVTypeEnum.TideSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumTideSite, retStr);
                            break;
                        case TVTypeEnum.MWQMSiteSample:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMSiteSample, retStr);
                            break;
                        case TVTypeEnum.WasteWaterTreatmentPlant:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumWasteWaterTreatmentPlant, retStr);
                            break;
                        case TVTypeEnum.LiftStation:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumLiftStation, retStr);
                            break;
                        case TVTypeEnum.Spill:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSpill, retStr);
                            break;
                        case TVTypeEnum.BoxModel:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumBoxModel, retStr);
                            break;
                        case TVTypeEnum.VisualPlumesScenario:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumVisualPlumesScenario, retStr);
                            break;
                        case TVTypeEnum.Outfall:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumOutfall, retStr);
                            break;
                        case TVTypeEnum.OtherInfrastructure:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumOtherInfrastructure, retStr);
                            break;
                        case TVTypeEnum.MWQMRun:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMRun, retStr);
                            break;
                        case TVTypeEnum.NoDepuration:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumNoDepuration, retStr);
                            break;
                        case TVTypeEnum.Failed:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumFailed, retStr);
                            break;
                        case TVTypeEnum.Passed:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumPassed, retStr);
                            break;
                        case TVTypeEnum.NoData:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumNoData, retStr);
                            break;
                        case TVTypeEnum.LessThan10:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumLessThan10, retStr);
                            break;
                        case TVTypeEnum.MeshNode:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMeshNode, retStr);
                            break;
                        case TVTypeEnum.WebTideNode:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumWebTideNode, retStr);
                            break;
                        case TVTypeEnum.SamplingPlan:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSamplingPlan, retStr);
                            break;
                        case TVTypeEnum.SeeOtherMunicipality:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSeeOtherMunicipality, retStr);
                            break;
                        case TVTypeEnum.LineOverflow:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumLineOverflow, retStr);
                            break;
                        case TVTypeEnum.BoxModelInputs:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumBoxModelInputs, retStr);
                            break;
                        case TVTypeEnum.BoxModelResults:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumBoxModelResults, retStr);
                            break;
                        case TVTypeEnum.ClimateSiteInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumClimateSiteInfo, retStr);
                            break;
                        case TVTypeEnum.ClimateSiteData:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumClimateSiteData, retStr);
                            break;
                        case TVTypeEnum.HydrometricSiteInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumHydrometricSiteInfo, retStr);
                            break;
                        case TVTypeEnum.HydrometricSiteData:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumHydrometricSiteData, retStr);
                            break;
                        case TVTypeEnum.InfrastructureInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumInfrastructureInfo, retStr);
                            break;
                        case TVTypeEnum.LabSheetInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumLabSheetInfo, retStr);
                            break;
                        case TVTypeEnum.LabSheetDetailInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumLabSheetDetailInfo, retStr);
                            break;
                        case TVTypeEnum.MapInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMapInfo, retStr);
                            break;
                        case TVTypeEnum.MapInfoPoint:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMapInfoPoint, retStr);
                            break;
                        case TVTypeEnum.MikeSourceStartEndInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeSourceStartEndInfo, retStr);
                            break;
                        case TVTypeEnum.MWQMLookupMPNInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMLookupMPNInfo, retStr);
                            break;
                        case TVTypeEnum.SamplingPlanInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSamplingPlanInfo, retStr);
                            break;
                        case TVTypeEnum.SamplingPlanSubsectorInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSamplingPlanSubsectorInfo, retStr);
                            break;
                        case TVTypeEnum.SamplingPlanSubsectorSiteInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSamplingPlanSubsectorSiteInfo, retStr);
                            break;
                        case TVTypeEnum.MWQMSiteStartEndInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMSiteStartEndInfo, retStr);
                            break;
                        case TVTypeEnum.MWQMSubsectorInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMWQMSubsectorInfo, retStr);
                            break;
                        case TVTypeEnum.PolSourceSiteInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumPolSourceSiteInfo, retStr);
                            break;
                        case TVTypeEnum.PolSourceSiteObsInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumPolSourceSiteObsInfo, retStr);
                            break;
                        case TVTypeEnum.HydrometricRatingCurveInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumHydrometricRatingCurveInfo, retStr);
                            break;
                        case TVTypeEnum.HydrometricRatingCurveDataInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumHydrometricRatingCurveDataInfo, retStr);
                            break;
                        case TVTypeEnum.TideLocationInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumTideLocationInfo, retStr);
                            break;
                        case TVTypeEnum.TideSiteDataInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumTideSiteDataInfo, retStr);
                            break;
                        case TVTypeEnum.UseOfSite:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumUseOfSite, retStr);
                            break;
                        case TVTypeEnum.VisualPlumesScenarioInfo:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioInfo, retStr);
                            break;
                        case TVTypeEnum.VisualPlumesScenarioAmbient:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioAmbient, retStr);
                            break;
                        case TVTypeEnum.VisualPlumesScenarioResults:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumVisualPlumesScenarioResults, retStr);
                            break;
                        case TVTypeEnum.TotalFile:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumTotalFile, retStr);
                            break;
                        case TVTypeEnum.MikeSourceIsRiver:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeSourceIsRiver, retStr);
                            break;
                        case TVTypeEnum.MikeSourceIncluded:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeSourceIncluded, retStr);
                            break;
                        case TVTypeEnum.MikeSourceNotIncluded:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumMikeSourceNotIncluded, retStr);
                            break;
                        case TVTypeEnum.RainExceedance:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumRainExceedance, retStr);
                            break;
                        case TVTypeEnum.EmailDistributionList:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumEmailDistributionList, retStr);
                            break;
                        case TVTypeEnum.OpenData:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumOpenData, retStr);
                            break;
                        case TVTypeEnum.ProvinceTools:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumProvinceTools, retStr);
                            break;
                        case TVTypeEnum.Classification:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumClassification, retStr);
                            break;
                        case TVTypeEnum.Approved:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumApproved, retStr);
                            break;
                        case TVTypeEnum.Restricted:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumRestricted, retStr);
                            break;
                        case TVTypeEnum.Prohibited:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumProhibited, retStr);
                            break;
                        case TVTypeEnum.ConditionallyApproved:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumConditionallyApproved, retStr);
                            break;
                        case TVTypeEnum.ConditionallyRestricted:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumConditionallyRestricted, retStr);
                            break;
                        case TVTypeEnum.OpenDataNational:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumOpenDataNational, retStr);
                            break;
                        case TVTypeEnum.PolSourceSiteMikeScenario:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumPolSourceSiteMikeScenario, retStr);
                            break;
                        case TVTypeEnum.SubsectorTools:
                            Assert.AreEqual(CSSPEnumsRes.TVTypeEnumSubsectorTools, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_WebTideDataSetEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), i);
        
                    switch ((WebTideDataSetEnum)i)
                    {
                        case WebTideDataSetEnum.arctic9:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumarctic9, retStr);
                            break;
                        case WebTideDataSetEnum.brador:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumbrador, retStr);
                            break;
                        case WebTideDataSetEnum.HRglobal:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumHRglobal, retStr);
                            break;
                        case WebTideDataSetEnum.h3o:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumh3o, retStr);
                            break;
                        case WebTideDataSetEnum.hudson:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumhudson, retStr);
                            break;
                        case WebTideDataSetEnum.ne_pac4:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumne_pac4, retStr);
                            break;
                        case WebTideDataSetEnum.nwatl:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumnwatl, retStr);
                            break;
                        case WebTideDataSetEnum.QuatsinoModel14:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumQuatsinoModel14, retStr);
                            break;
                        case WebTideDataSetEnum.sshelf:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumsshelf, retStr);
                            break;
                        case WebTideDataSetEnum.flood:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumflood, retStr);
                            break;
                        case WebTideDataSetEnum.vigf8:
                            Assert.AreEqual(CSSPEnumsRes.WebTideDataSetEnumvigf8, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_GetEnumText_WhereOperatorEnum_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.GetResValueForTypeAndID(typeof(WhereOperatorEnum), -100);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(WhereOperatorEnum), 10000000);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                retStr = enums.GetResValueForTypeAndID(typeof(WhereOperatorEnum), null);
                Assert.AreEqual(CSSPEnumsRes.Empty, retStr);

                foreach (int i in Enum.GetValues(typeof(WhereOperatorEnum)))
                {
                    retStr = enums.GetResValueForTypeAndID(typeof(WhereOperatorEnum), i);
        
                    switch ((WhereOperatorEnum)i)
                    {
                        case WhereOperatorEnum.Equal:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumEqual, retStr);
                            break;
                        case WhereOperatorEnum.LessThan:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumLessThan, retStr);
                            break;
                        case WhereOperatorEnum.GreaterThan:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumGreaterThan, retStr);
                            break;
                        case WhereOperatorEnum.Contains:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumContains, retStr);
                            break;
                        case WhereOperatorEnum.StartsWith:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumStartsWith, retStr);
                            break;
                        case WhereOperatorEnum.EndsWith:
                            Assert.AreEqual(CSSPEnumsRes.WhereOperatorEnumEndsWith, retStr);
                            break;
                        default:
                            Assert.AreEqual(CSSPEnumsRes.Empty, retStr);
                            break;
                    }
                }
            }
        }

        #endregion Testing Methods GetEnumText public

        #region Testing Methods Check OK public
        [TestMethod]
        public void Enums_EnumTypeListOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<int?> intList = new List<int?>() { (int)PolSourceObsInfoEnum.AgriculturalSourceCrop, (int)PolSourceObsInfoEnum.AgricultureSourcePasture };
                Assert.AreEqual((int)PolSourceObsInfoEnum.AgriculturalSourceCrop, intList[0]);
                Assert.AreEqual((int)PolSourceObsInfoEnum.AgricultureSourcePasture, intList[1]);
                string retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);
                Assert.AreEqual("", retStr);

                intList.Add(1000000);
                retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);
            }
        }
        [TestMethod]
        public void Enums_ActionDBTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), i);

                    switch ((ActionDBTypeEnum)i)
                    {
                        case ActionDBTypeEnum.Create:
                        case ActionDBTypeEnum.Read:
                        case ActionDBTypeEnum.Update:
                        case ActionDBTypeEnum.Delete:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AddContactTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), i);

                    switch ((AddContactTypeEnum)i)
                    {
                        case AddContactTypeEnum.First:
                        case AddContactTypeEnum.Register:
                        case AddContactTypeEnum.LoggedIn:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_DatabaseTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(DatabaseTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(DatabaseTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DatabaseTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(DatabaseTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DatabaseTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(DatabaseTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(DatabaseTypeEnum), i);

                    switch ((DatabaseTypeEnum)i)
                    {
                        case DatabaseTypeEnum.MemoryCSSPDB:
                        case DatabaseTypeEnum.MemoryTestDB:
                        case DatabaseTypeEnum.SqlServerCSSPDB:
                        case DatabaseTypeEnum.SqlServerTestDB:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DatabaseTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_EntityQueryTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), i);

                    switch ((EntityQueryTypeEnum)i)
                    {
                        case EntityQueryTypeEnum.AsNoTracking:
                        case EntityQueryTypeEnum.WithTracking:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceObsInfoTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), i);

                    switch ((PolSourceObsInfoTypeEnum)i)
                    {
                        case PolSourceObsInfoTypeEnum.Description:
                        case PolSourceObsInfoTypeEnum.Report:
                        case PolSourceObsInfoTypeEnum.Text:
                        case PolSourceObsInfoTypeEnum.Initial:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AddressTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddressTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddressTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), i);

                    switch ((AddressTypeEnum)i)
                    {
                        case AddressTypeEnum.Mailing:
                        case AddressTypeEnum.Shipping:
                        case AddressTypeEnum.Civic:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AddressTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AerationTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AerationTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AerationTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), i);

                    switch ((AerationTypeEnum)i)
                    {
                        case AerationTypeEnum.MechanicalAirLines:
                        case AerationTypeEnum.MechanicalSurfaceMixers:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AerationTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AlarmSystemTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), i);

                    switch ((AlarmSystemTypeEnum)i)
                    {
                        case AlarmSystemTypeEnum.SCADA:
                        case AlarmSystemTypeEnum.None:
                        case AlarmSystemTypeEnum.OnlyVisualLight:
                        case AlarmSystemTypeEnum.SCADAAndLight:
                        case AlarmSystemTypeEnum.PagerAndLight:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AnalysisCalculationTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), i);

                    switch ((AnalysisCalculationTypeEnum)i)
                    {
                        case AnalysisCalculationTypeEnum.AllAllAll:
                        case AnalysisCalculationTypeEnum.WetAllAll:
                        case AnalysisCalculationTypeEnum.DryAllAll:
                        case AnalysisCalculationTypeEnum.WetWetAll:
                        case AnalysisCalculationTypeEnum.DryDryAll:
                        case AnalysisCalculationTypeEnum.WetDryAll:
                        case AnalysisCalculationTypeEnum.DryWetAll:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AnalysisReportExportCommandOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), i);

                    switch ((AnalysisReportExportCommandEnum)i)
                    {
                        case AnalysisReportExportCommandEnum.Report:
                        case AnalysisReportExportCommandEnum.Excel:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AnalyzeMethodOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), i);

                    switch ((AnalyzeMethodEnum)i)
                    {
                        case AnalyzeMethodEnum.MF:
                        case AnalyzeMethodEnum.ZZ_510Q:
                        case AnalyzeMethodEnum.ZZ_509Q:
                        case AnalyzeMethodEnum.ZZ_0:
                        case AnalyzeMethodEnum.ZZ_525Q:
                        case AnalyzeMethodEnum.MPN:
                        case AnalyzeMethodEnum.ZZ_0Q:
                        case AnalyzeMethodEnum.AnalyzeMethod8:
                        case AnalyzeMethodEnum.AnalyzeMethod9:
                        case AnalyzeMethodEnum.AnalyzeMethod10:
                        case AnalyzeMethodEnum.AnalyzeMethod11:
                        case AnalyzeMethodEnum.AnalyzeMethod12:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AppTaskCommandOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), i);

                    switch ((AppTaskCommandEnum)i)
                    {
                        case AppTaskCommandEnum.GenerateWebTide:
                        case AppTaskCommandEnum.MikeScenarioAskToRun:
                        case AppTaskCommandEnum.MikeScenarioImport:
                        case AppTaskCommandEnum.MikeScenarioOtherFileImport:
                        case AppTaskCommandEnum.MikeScenarioRunning:
                        case AppTaskCommandEnum.MikeScenarioToCancel:
                        case AppTaskCommandEnum.MikeScenarioWaitingToRun:
                        case AppTaskCommandEnum.SetupWebTide:
                        case AppTaskCommandEnum.UpdateClimateSiteInformation:
                        case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyFromStartDateToEndDate:
                        case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                        case AppTaskCommandEnum.CreateFCForm:
                        case AppTaskCommandEnum.CreateSamplingPlanSamplingPlanTextFile:
                        case AppTaskCommandEnum.CreateDocumentFromTemplate:
                        case AppTaskCommandEnum.GetClimateSitesDataForRunsOfYear:
                        case AppTaskCommandEnum.CreateWebTideDataWLAtFirstNode:
                        case AppTaskCommandEnum.ExportEmailDistributionLists:
                        case AppTaskCommandEnum.ExportAnalysisToExcel:
                        case AppTaskCommandEnum.CreateDocumentFromParameters:
                        case AppTaskCommandEnum.CreateDocxPDF:
                        case AppTaskCommandEnum.CreateXlsxPDF:
                        case AppTaskCommandEnum.OpenDataCSVOfMWQMSites:
                        case AppTaskCommandEnum.OpenDataKMZOfMWQMSites:
                        case AppTaskCommandEnum.OpenDataXlsxOfMWQMSitesAndSamples:
                        case AppTaskCommandEnum.OpenDataCSVOfMWQMSamples:
                        case AppTaskCommandEnum.GetAllPrecipitationForYear:
                        case AppTaskCommandEnum.FillRunPrecipByClimateSitePriorityForYear:
                        case AppTaskCommandEnum.FindMissingPrecipForProvince:
                        case AppTaskCommandEnum.ExportToArcGIS:
                        case AppTaskCommandEnum.GenerateClassificationForCSSPWebToolsVisualization:
                        case AppTaskCommandEnum.GenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization:
                        case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSites:
                        case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSamples:
                        case AppTaskCommandEnum.ProvinceToolsCreateClassificationInputsKML:
                        case AppTaskCommandEnum.ProvinceToolsCreateGroupingInputsKML:
                        case AppTaskCommandEnum.ProvinceToolsCreateMWQMSitesAndPolSourceSitesKML:
                        case AppTaskCommandEnum.UpdateHydrometricSiteInformation:
                        case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate:
                        case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                        case AppTaskCommandEnum.GetHydrometricSitesDataForRunsOfYear:
                        case AppTaskCommandEnum.GetAllDischargesForYear:
                        case AppTaskCommandEnum.FillRunDischargesByHydrometricSitePriorityForYear:
                        case AppTaskCommandEnum.FindMissingDischargesForProvince:
                        case AppTaskCommandEnum.LoadHydrometricDataValue:
                        case AppTaskCommandEnum.GenerateKMLFileClassificationForCSSPWebToolsVisualization:
                        case AppTaskCommandEnum.ProvinceToolsGenerateStats:
                        case AppTaskCommandEnum.MikeScenarioPrepareResults:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_AppTaskStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), i);

                    switch ((AppTaskStatusEnum)i)
                    {
                        case AppTaskStatusEnum.Created:
                        case AppTaskStatusEnum.Running:
                        case AppTaskStatusEnum.Completed:
                        case AppTaskStatusEnum.Cancelled:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_BeaufortScaleOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), i);

                    switch ((BeaufortScaleEnum)i)
                    {
                        case BeaufortScaleEnum.Calm:
                        case BeaufortScaleEnum.LightAir:
                        case BeaufortScaleEnum.LightBreeze:
                        case BeaufortScaleEnum.GentleBreeze:
                        case BeaufortScaleEnum.ModerateBreeze:
                        case BeaufortScaleEnum.FreshBreeze:
                        case BeaufortScaleEnum.StrongBreeze:
                        case BeaufortScaleEnum.HighWind_ModerateGale_NearGale:
                        case BeaufortScaleEnum.Gale_FreshGale:
                        case BeaufortScaleEnum.Strong_SevereGale:
                        case BeaufortScaleEnum.Storm_WholeGale:
                        case BeaufortScaleEnum.ViolentStorm:
                        case BeaufortScaleEnum.HurricaneForce:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_BoxModelResultTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), i);

                    switch ((BoxModelResultTypeEnum)i)
                    {
                        case BoxModelResultTypeEnum.Dilution:
                        case BoxModelResultTypeEnum.NoDecayUntreated:
                        case BoxModelResultTypeEnum.NoDecayPreDisinfection:
                        case BoxModelResultTypeEnum.DecayUntreated:
                        case BoxModelResultTypeEnum.DecayPreDisinfection:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ClassificationTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), i);

                    switch ((ClassificationTypeEnum)i)
                    {
                        case ClassificationTypeEnum.Approved:
                        case ClassificationTypeEnum.Restricted:
                        case ClassificationTypeEnum.Prohibited:
                        case ClassificationTypeEnum.ConditionallyApproved:
                        case ClassificationTypeEnum.ConditionallyRestricted:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_CollectionSystemTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), i);

                    switch ((CollectionSystemTypeEnum)i)
                    {
                        case CollectionSystemTypeEnum.CompletelySeparated:
                        case CollectionSystemTypeEnum.CompletelyCombined:
                        case CollectionSystemTypeEnum.Combined90Separated10:
                        case CollectionSystemTypeEnum.Combined80Separated20:
                        case CollectionSystemTypeEnum.Combined70Separated30:
                        case CollectionSystemTypeEnum.Combined60Separated40:
                        case CollectionSystemTypeEnum.Combined50Separated50:
                        case CollectionSystemTypeEnum.Combined40Separated60:
                        case CollectionSystemTypeEnum.Combined30Separated70:
                        case CollectionSystemTypeEnum.Combined20Separated80:
                        case CollectionSystemTypeEnum.Combined10Separated90:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ContactTitleOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ContactTitleEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ContactTitleEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), i);

                    switch ((ContactTitleEnum)i)
                    {
                        case ContactTitleEnum.DirectorGeneral:
                        case ContactTitleEnum.DirectorPublicWorks:
                        case ContactTitleEnum.Superintendent:
                        case ContactTitleEnum.Engineer:
                        case ContactTitleEnum.Foreman:
                        case ContactTitleEnum.Operator:
                        case ContactTitleEnum.FacilitiesManager:
                        case ContactTitleEnum.Supervisor:
                        case ContactTitleEnum.Technician:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ContactTitleEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_CSSPWQInputSheetTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), i);

                    switch ((CSSPWQInputSheetTypeEnum)i)
                    {
                        case CSSPWQInputSheetTypeEnum.A1:
                        case CSSPWQInputSheetTypeEnum.LTB:
                        case CSSPWQInputSheetTypeEnum.EC:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_CSSPWQInputTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), i);

                    switch ((CSSPWQInputTypeEnum)i)
                    {
                        case CSSPWQInputTypeEnum.Subsector:
                        case CSSPWQInputTypeEnum.Municipality:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_DailyOrHourlyDataOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), i);

                    switch ((DailyOrHourlyDataEnum)i)
                    {
                        case DailyOrHourlyDataEnum.Daily:
                        case DailyOrHourlyDataEnum.Hourly:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_DisinfectionTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), i);

                    switch ((DisinfectionTypeEnum)i)
                    {
                        case DisinfectionTypeEnum.None:
                        case DisinfectionTypeEnum.UV:
                        case DisinfectionTypeEnum.ChlorinationNoDechlorination:
                        case DisinfectionTypeEnum.ChlorinationWithDechlorination:
                        case DisinfectionTypeEnum.UVSeasonal:
                        case DisinfectionTypeEnum.ChlorinationNoDechlorinationSeasonal:
                        case DisinfectionTypeEnum.ChlorinationWithDechlorinationSeasonal:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_DrogueTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), i);

                    switch ((DrogueTypeEnum)i)
                    {
                        case DrogueTypeEnum.SmallDrogue:
                        case DrogueTypeEnum.LargeDrogue:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_EmailTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EmailTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EmailTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), i);

                    switch ((EmailTypeEnum)i)
                    {
                        case EmailTypeEnum.Personal:
                        case EmailTypeEnum.Work:
                        case EmailTypeEnum.Personal2:
                        case EmailTypeEnum.Work2:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "EmailTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ExcelExportShowDataTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), i);

                    switch ((ExcelExportShowDataTypeEnum)i)
                    {
                        case ExcelExportShowDataTypeEnum.FecalColiform:
                        case ExcelExportShowDataTypeEnum.Temperature:
                        case ExcelExportShowDataTypeEnum.Salinity:
                        case ExcelExportShowDataTypeEnum.P90:
                        case ExcelExportShowDataTypeEnum.GemetricMean:
                        case ExcelExportShowDataTypeEnum.Median:
                        case ExcelExportShowDataTypeEnum.PercOfP90Over43:
                        case ExcelExportShowDataTypeEnum.PercOfP90Over260:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_FacilityTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), i);

                    switch ((FacilityTypeEnum)i)
                    {
                        case FacilityTypeEnum.Lagoon:
                        case FacilityTypeEnum.Plant:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_FilePurposeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FilePurposeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FilePurposeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), i);

                    switch ((FilePurposeEnum)i)
                    {
                        case FilePurposeEnum.MikeInput:
                        case FilePurposeEnum.MikeInputMDF:
                        case FilePurposeEnum.MikeResultDFSU:
                        case FilePurposeEnum.MikeResultKMZ:
                        case FilePurposeEnum.Information:
                        case FilePurposeEnum.Image:
                        case FilePurposeEnum.Picture:
                        case FilePurposeEnum.ReportGenerated:
                        case FilePurposeEnum.TemplateGenerated:
                        case FilePurposeEnum.GeneratedFCForm:
                        case FilePurposeEnum.Template:
                        case FilePurposeEnum.Map:
                        case FilePurposeEnum.Analysis:
                        case FilePurposeEnum.OpenData:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FilePurposeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_FileStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(FileStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(FileStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(FileStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(FileStatusEnum), i);

                    switch ((FileStatusEnum)i)
                    {
                        case FileStatusEnum.Changed:
                        case FileStatusEnum.Sent:
                        case FileStatusEnum.Accepted:
                        case FileStatusEnum.Rejected:
                        case FileStatusEnum.Fail:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_FileTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(FileTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(FileTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(FileTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(FileTypeEnum), i);

                    switch ((FileTypeEnum)i)
                    {
                        case FileTypeEnum.DFS0:
                        case FileTypeEnum.DFS1:
                        case FileTypeEnum.DFSU:
                        case FileTypeEnum.KMZ:
                        case FileTypeEnum.LOG:
                        case FileTypeEnum.M21FM:
                        case FileTypeEnum.M3FM:
                        case FileTypeEnum.MDF:
                        case FileTypeEnum.MESH:
                        case FileTypeEnum.XLSX:
                        case FileTypeEnum.DOCX:
                        case FileTypeEnum.PDF:
                        case FileTypeEnum.JPG:
                        case FileTypeEnum.JPEG:
                        case FileTypeEnum.GIF:
                        case FileTypeEnum.PNG:
                        case FileTypeEnum.HTML:
                        case FileTypeEnum.TXT:
                        case FileTypeEnum.XYZ:
                        case FileTypeEnum.KML:
                        case FileTypeEnum.CSV:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "FileTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_InfrastructureTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), i);

                    switch ((InfrastructureTypeEnum)i)
                    {
                        case InfrastructureTypeEnum.WWTP:
                        case InfrastructureTypeEnum.LiftStation:
                        case InfrastructureTypeEnum.Other:
                        case InfrastructureTypeEnum.SeeOtherMunicipality:
                        case InfrastructureTypeEnum.LineOverflow:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_KMZActionOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(KMZActionEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(KMZActionEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "KMZActionEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(KMZActionEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "KMZActionEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(KMZActionEnum), i);

                    switch ((KMZActionEnum)i)
                    {
                        case KMZActionEnum.DoNothing:
                        case KMZActionEnum.GenerateKMZContourAnimation:
                        case KMZActionEnum.GenerateKMZContourLimit:
                        case KMZActionEnum.GenerateKMZCurrentAnimation:
                        case KMZActionEnum.GenerateKMZCurrentMaximum:
                        case KMZActionEnum.GenerateKMZMesh:
                        case KMZActionEnum.GenerateKMZStudyArea:
                        case KMZActionEnum.GenerateKMZBoundaryConditionNodes:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "KMZActionEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_LaboratoryOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LaboratoryEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LaboratoryEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), i);

                    switch ((LaboratoryEnum)i)
                    {
                        case LaboratoryEnum.ZZ_0:
                        case LaboratoryEnum.ZZ_1:
                        case LaboratoryEnum.ZZ_2:
                        case LaboratoryEnum.ZZ_3:
                        case LaboratoryEnum.ZZ_4:
                        case LaboratoryEnum.ZZ_1Q:
                        case LaboratoryEnum.ZZ_2Q:
                        case LaboratoryEnum.ZZ_3Q:
                        case LaboratoryEnum.ZZ_4Q:
                        case LaboratoryEnum.ZZ_5Q:
                        case LaboratoryEnum.ZZ_11BC:
                        case LaboratoryEnum.ZZ_12BC:
                        case LaboratoryEnum.ZZ_13BC:
                        case LaboratoryEnum.ZZ_14BC:
                        case LaboratoryEnum.ZZ_15BC:
                        case LaboratoryEnum.ZZ_16BC:
                        case LaboratoryEnum.ZZ_17BC:
                        case LaboratoryEnum.ZZ_18BC:
                        case LaboratoryEnum.MonctonEnvironmentCanada:
                        case LaboratoryEnum.BIOEnvironmentCanada:
                        case LaboratoryEnum.EasternCharlotteWaterwayLaboratory:
                        case LaboratoryEnum.InstitutDeRechercheSurLesZonesCotieres:
                        case LaboratoryEnum.CentreDeRechercheSurLesAliments:
                        case LaboratoryEnum.CaraquetMobileLaboratoryEnvironmentCanada:
                        case LaboratoryEnum.MaxxamAnalyticsBedford:
                        case LaboratoryEnum.MaxxamAnalyticsSydney:
                        case LaboratoryEnum.PEIAnalyticalLaboratory:
                        case LaboratoryEnum.NLMobileLaboratory:
                        case LaboratoryEnum.AvalonLaboratoriesInc:
                        case LaboratoryEnum.Maxxam:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LaboratoryEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_LabSheetStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), i);

                    switch ((LabSheetStatusEnum)i)
                    {
                        case LabSheetStatusEnum.Created:
                        case LabSheetStatusEnum.Transferred:
                        case LabSheetStatusEnum.Accepted:
                        case LabSheetStatusEnum.Rejected:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_LabSheetTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), i);

                    switch ((LabSheetTypeEnum)i)
                    {
                        case LabSheetTypeEnum.A1:
                        case LabSheetTypeEnum.LTB:
                        case LabSheetTypeEnum.EC:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_LanguageOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(LanguageEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(LanguageEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LanguageEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(LanguageEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LanguageEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(LanguageEnum), i);

                    switch ((LanguageEnum)i)
                    {
                        case LanguageEnum.en:
                        case LanguageEnum.fr:
                        case LanguageEnum.enAndfr:
                        case LanguageEnum.es:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LanguageEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_LogCommandOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(LogCommandEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(LogCommandEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LogCommandEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(LogCommandEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LogCommandEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(LogCommandEnum), i);

                    switch ((LogCommandEnum)i)
                    {
                        case LogCommandEnum.Add:
                        case LogCommandEnum.Change:
                        case LogCommandEnum.Delete:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "LogCommandEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_MapInfoDrawTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), i);

                    switch ((MapInfoDrawTypeEnum)i)
                    {
                        case MapInfoDrawTypeEnum.Point:
                        case MapInfoDrawTypeEnum.Polyline:
                        case MapInfoDrawTypeEnum.Polygon:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_MikeBoundaryConditionLevelOrVelocityOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i);

                    switch ((MikeBoundaryConditionLevelOrVelocityEnum)i)
                    {
                        case MikeBoundaryConditionLevelOrVelocityEnum.Level:
                        case MikeBoundaryConditionLevelOrVelocityEnum.Velocity:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_MikeScenarioSpecialResultKMLTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), i);

                    switch ((MikeScenarioSpecialResultKMLTypeEnum)i)
                    {
                        case MikeScenarioSpecialResultKMLTypeEnum.Mesh:
                        case MikeScenarioSpecialResultKMLTypeEnum.StudyArea:
                        case MikeScenarioSpecialResultKMLTypeEnum.BoundaryConditions:
                        case MikeScenarioSpecialResultKMLTypeEnum.PollutionLimit:
                        case MikeScenarioSpecialResultKMLTypeEnum.PollutionAnimation:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_MWQMSiteLatestClassificationOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), i);

                    switch ((MWQMSiteLatestClassificationEnum)i)
                    {
                        case MWQMSiteLatestClassificationEnum.Approved:
                        case MWQMSiteLatestClassificationEnum.ConditionallyApproved:
                        case MWQMSiteLatestClassificationEnum.Restricted:
                        case MWQMSiteLatestClassificationEnum.ConditionallyRestricted:
                        case MWQMSiteLatestClassificationEnum.Prohibited:
                        case MWQMSiteLatestClassificationEnum.Unclassified:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceInactiveReasonOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), i);

                    switch ((PolSourceInactiveReasonEnum)i)
                    {
                        case PolSourceInactiveReasonEnum.Abandoned:
                        case PolSourceInactiveReasonEnum.Closed:
                        case PolSourceInactiveReasonEnum.Removed:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceIssueRiskOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), i);

                    switch ((PolSourceIssueRiskEnum)i)
                    {
                        case PolSourceIssueRiskEnum.LowRisk:
                        case PolSourceIssueRiskEnum.ModerateRisk:
                        case PolSourceIssueRiskEnum.HighRisk:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PositionOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PositionEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PositionEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PositionEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PositionEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PositionEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PositionEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PositionEnum), i);

                    switch ((PositionEnum)i)
                    {
                        case PositionEnum.LeftBottom:
                        case PositionEnum.RightBottom:
                        case PositionEnum.LeftTop:
                        case PositionEnum.RightTop:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PositionEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PreliminaryTreatmentTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), i);

                    switch ((PreliminaryTreatmentTypeEnum)i)
                    {
                        case PreliminaryTreatmentTypeEnum.NotApplicable:
                        case PreliminaryTreatmentTypeEnum.BarScreen:
                        case PreliminaryTreatmentTypeEnum.Grinder:
                        case PreliminaryTreatmentTypeEnum.MechanicalScreening:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PrimaryTreatmentTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), i);

                    switch ((PrimaryTreatmentTypeEnum)i)
                    {
                        case PrimaryTreatmentTypeEnum.NotApplicable:
                        case PrimaryTreatmentTypeEnum.Sedimentation:
                        case PrimaryTreatmentTypeEnum.ChemicalCoagulation:
                        case PrimaryTreatmentTypeEnum.Filtration:
                        case PrimaryTreatmentTypeEnum.PrimaryClarification:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PropertyTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), i);

                    switch ((PropertyTypeEnum)i)
                    {
                        case PropertyTypeEnum.Int:
                        case PropertyTypeEnum.Double:
                        case PropertyTypeEnum.String:
                        case PropertyTypeEnum.Boolean:
                        case PropertyTypeEnum.DateTime:
                        case PropertyTypeEnum.Enum:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportConditionOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportConditionEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportConditionEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), i);

                    switch ((ReportConditionEnum)i)
                    {
                        case ReportConditionEnum.ReportConditionTrue:
                        case ReportConditionEnum.ReportConditionFalse:
                        case ReportConditionEnum.ReportConditionContain:
                        case ReportConditionEnum.ReportConditionStart:
                        case ReportConditionEnum.ReportConditionEnd:
                        case ReportConditionEnum.ReportConditionBigger:
                        case ReportConditionEnum.ReportConditionSmaller:
                        case ReportConditionEnum.ReportConditionEqual:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportConditionEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFieldTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), i);

                    switch ((ReportFieldTypeEnum)i)
                    {
                        case ReportFieldTypeEnum.NumberWhole:
                        case ReportFieldTypeEnum.NumberWithDecimal:
                        case ReportFieldTypeEnum.DateAndTime:
                        case ReportFieldTypeEnum.Text:
                        case ReportFieldTypeEnum.TrueOrFalse:
                        case ReportFieldTypeEnum.FilePurpose:
                        case ReportFieldTypeEnum.FileType:
                        case ReportFieldTypeEnum.TranslationStatus:
                        case ReportFieldTypeEnum.BoxModelResultType:
                        case ReportFieldTypeEnum.InfrastructureType:
                        case ReportFieldTypeEnum.FacilityType:
                        case ReportFieldTypeEnum.AerationType:
                        case ReportFieldTypeEnum.PreliminaryTreatmentType:
                        case ReportFieldTypeEnum.PrimaryTreatmentType:
                        case ReportFieldTypeEnum.SecondaryTreatmentType:
                        case ReportFieldTypeEnum.TertiaryTreatmentType:
                        case ReportFieldTypeEnum.TreatmentType:
                        case ReportFieldTypeEnum.DisinfectionType:
                        case ReportFieldTypeEnum.CollectionSystemType:
                        case ReportFieldTypeEnum.AlarmSystemType:
                        case ReportFieldTypeEnum.ScenarioStatus:
                        case ReportFieldTypeEnum.StorageDataType:
                        case ReportFieldTypeEnum.Language:
                        case ReportFieldTypeEnum.SampleType:
                        case ReportFieldTypeEnum.BeaufortScale:
                        case ReportFieldTypeEnum.AnalyzeMethod:
                        case ReportFieldTypeEnum.SampleMatrix:
                        case ReportFieldTypeEnum.Laboratory:
                        case ReportFieldTypeEnum.SampleStatus:
                        case ReportFieldTypeEnum.SamplingPlanType:
                        case ReportFieldTypeEnum.LabSheetSampleType:
                        case ReportFieldTypeEnum.LabSheetType:
                        case ReportFieldTypeEnum.LabSheetStatus:
                        case ReportFieldTypeEnum.PolSourceInactiveReason:
                        case ReportFieldTypeEnum.PolSourceObsInfo:
                        case ReportFieldTypeEnum.AddressType:
                        case ReportFieldTypeEnum.StreetType:
                        case ReportFieldTypeEnum.ContactTitle:
                        case ReportFieldTypeEnum.EmailType:
                        case ReportFieldTypeEnum.TelType:
                        case ReportFieldTypeEnum.TideText:
                        case ReportFieldTypeEnum.TideDataType:
                        case ReportFieldTypeEnum.SpecialTableType:
                        case ReportFieldTypeEnum.MWQMSiteLatestClassification:
                        case ReportFieldTypeEnum.PolSourceIssueRisk:
                        case ReportFieldTypeEnum.MikeScenarioSpecialResultKMLType:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFileTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), i);

                    switch ((ReportFileTypeEnum)i)
                    {
                        case ReportFileTypeEnum.CSV:
                        case ReportFileTypeEnum.Word:
                        case ReportFileTypeEnum.Excel:
                        case ReportFileTypeEnum.KML:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFormatingDateOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), i);

                    switch ((ReportFormatingDateEnum)i)
                    {
                        case ReportFormatingDateEnum.ReportFormatingDateYearOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateMonthDecimalOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateMonthShortTextOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateMonthFullTextOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateDayOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateHourOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateMinuteOnly:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDay:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDay:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDay:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDayHourMinute:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDayHourMinute:
                        case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDayHourMinute:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFormatingNumberOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), i);

                    switch ((ReportFormatingNumberEnum)i)
                    {
                        case ReportFormatingNumberEnum.ReportFormatingNumber0Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber1Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber2Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber3Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber4Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber5Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumber6Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific0Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific1Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific2Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific3Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific4Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific5Decimal:
                        case ReportFormatingNumberEnum.ReportFormatingNumberScientific6Decimal:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportGenerateObjectsKeywordOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), i);

                    switch ((ReportGenerateObjectsKeywordEnum)i)
                    {
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RE_EVALUATION_COVER_PAGE:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_ALL:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_WET:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_DRY:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_DATA_AVAILABILITY:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_FC_TABLE:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_SALINITY_TABLE:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_CONTACTS:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_DETAIL:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_ECCC_AND_SWCP_LOGO:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CSSP_LOGO:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP:
                        case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportSortingOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportSortingEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportSortingEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), i);

                    switch ((ReportSortingEnum)i)
                    {
                        case ReportSortingEnum.ReportSortingAscending:
                        case ReportSortingEnum.ReportSortingDescending:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportSortingEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportTreeNodeSubTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), i);

                    switch ((ReportTreeNodeSubTypeEnum)i)
                    {
                        case ReportTreeNodeSubTypeEnum.TableSelectable:
                        case ReportTreeNodeSubTypeEnum.Field:
                        case ReportTreeNodeSubTypeEnum.FieldsHolder:
                        case ReportTreeNodeSubTypeEnum.TableNotSelectable:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ReportTreeNodeTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), i);

                    switch ((ReportTreeNodeTypeEnum)i)
                    {
                        case ReportTreeNodeTypeEnum.ReportRootType:
                        case ReportTreeNodeTypeEnum.ReportCountryType:
                        case ReportTreeNodeTypeEnum.ReportProvinceType:
                        case ReportTreeNodeTypeEnum.ReportAreaType:
                        case ReportTreeNodeTypeEnum.ReportSectorType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorType:
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunType:
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityType:
                        case ReportTreeNodeTypeEnum.ReportRootFileType:
                        case ReportTreeNodeTypeEnum.ReportInfrastructureType:
                        case ReportTreeNodeTypeEnum.ReportBoxModelType:
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioType:
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioType:
                        case ReportTreeNodeTypeEnum.ReportMikeSourceType:
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteSampleType:
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsType:
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsIssueType:
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioGeneralParameterType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactType:
                        case ReportTreeNodeTypeEnum.ReportConditionType:
                        case ReportTreeNodeTypeEnum.ReportStatisticType:
                        case ReportTreeNodeTypeEnum.ReportFieldsType:
                        case ReportTreeNodeTypeEnum.ReportFieldType:
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteAddressType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactTelType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactEmailType:
                        case ReportTreeNodeTypeEnum.ReportBoxModelResultType:
                        case ReportTreeNodeTypeEnum.ReportClimateSiteType:
                        case ReportTreeNodeTypeEnum.ReportClimateSiteDataType:
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteType:
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteDataType:
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveType:
                        case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveValueType:
                        case ReportTreeNodeTypeEnum.ReportInfrastructureAddressType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetDetailType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetTubeMPNDetailType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunSampleType:
                        case ReportTreeNodeTypeEnum.ReportCountryFileType:
                        case ReportTreeNodeTypeEnum.ReportProvinceFileType:
                        case ReportTreeNodeTypeEnum.ReportAreaFileType:
                        case ReportTreeNodeTypeEnum.ReportSectorFileType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorFileType:
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteFileType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunFileType:
                        case ReportTreeNodeTypeEnum.ReportPolSourceSiteFileType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityFileType:
                        case ReportTreeNodeTypeEnum.ReportInfrastructureFileType:
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioFileType:
                        case ReportTreeNodeTypeEnum.ReportMikeSourceStartEndType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetDetailType:
                        case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetTubeMPNDetailType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetDetailType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetTubeMPNDetailType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorType:
                        case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorSiteType:
                        case ReportTreeNodeTypeEnum.ReportMikeBoundaryConditionType:
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioAmbientType:
                        case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioResultType:
                        case ReportTreeNodeTypeEnum.ReportMPNLookupType:
                        case ReportTreeNodeTypeEnum.ReportMWQMSiteStartAndEndType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteDataType:
                        case ReportTreeNodeTypeEnum.ReportOrderType:
                        case ReportTreeNodeTypeEnum.ReportFormatType:
                        case ReportTreeNodeTypeEnum.ReportMunicipalityContactAddressType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteDataType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteDataType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveValueType:
                        case ReportTreeNodeTypeEnum.ReportSubsectorSpecialTableType:
                        case ReportTreeNodeTypeEnum.ReportMikeScenarioSpecialResultKMLType:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SameDayNextDayOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), i);

                    switch ((SameDayNextDayEnum)i)
                    {
                        case SameDayNextDayEnum.SameDay:
                        case SameDayNextDayEnum.NextDay:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SampleMatrixOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), i);

                    switch ((SampleMatrixEnum)i)
                    {
                        case SampleMatrixEnum.W:
                        case SampleMatrixEnum.S:
                        case SampleMatrixEnum.B:
                        case SampleMatrixEnum.MPNQ:
                        case SampleMatrixEnum.SampleMatrix5:
                        case SampleMatrixEnum.SampleMatrix6:
                        case SampleMatrixEnum.Water:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SampleStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), i);

                    switch ((SampleStatusEnum)i)
                    {
                        case SampleStatusEnum.Active:
                        case SampleStatusEnum.Archived:
                        case SampleStatusEnum.SampleStatus3:
                        case SampleStatusEnum.SampleStatus4:
                        case SampleStatusEnum.SampleStatus5:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SampleTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), i);

                    switch ((SampleTypeEnum)i)
                    {
                        case SampleTypeEnum.DailyDuplicate:
                        case SampleTypeEnum.Infrastructure:
                        case SampleTypeEnum.IntertechDuplicate:
                        case SampleTypeEnum.IntertechRead:
                        case SampleTypeEnum.RainCMP:
                        case SampleTypeEnum.RainRun:
                        case SampleTypeEnum.ReopeningEmergencyRain:
                        case SampleTypeEnum.ReopeningSpill:
                        case SampleTypeEnum.Routine:
                        case SampleTypeEnum.Sanitary:
                        case SampleTypeEnum.Study:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SampleTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SamplingPlanTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), i);

                    switch ((SamplingPlanTypeEnum)i)
                    {
                        case SamplingPlanTypeEnum.Subsector:
                        case SamplingPlanTypeEnum.Municipality:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_ScenarioStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), i);

                    switch ((ScenarioStatusEnum)i)
                    {
                        case ScenarioStatusEnum.Normal:
                        case ScenarioStatusEnum.Copying:
                        case ScenarioStatusEnum.Copied:
                        case ScenarioStatusEnum.Changing:
                        case ScenarioStatusEnum.Changed:
                        case ScenarioStatusEnum.AskToRun:
                        case ScenarioStatusEnum.Running:
                        case ScenarioStatusEnum.Completed:
                        case ScenarioStatusEnum.Cancelled:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SearchTagOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SearchTagEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SearchTagEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SearchTagEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SearchTagEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SearchTagEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SearchTagEnum), i);

                    switch ((SearchTagEnum)i)
                    {
                        case SearchTagEnum.c:
                        case SearchTagEnum.e:
                        case SearchTagEnum.t:
                        case SearchTagEnum.fi:
                        case SearchTagEnum.fp:
                        case SearchTagEnum.frg:
                        case SearchTagEnum.ftg:
                        case SearchTagEnum.fpdf:
                        case SearchTagEnum.fdocx:
                        case SearchTagEnum.fxlsx:
                        case SearchTagEnum.fkmz:
                        case SearchTagEnum.fxyz:
                        case SearchTagEnum.fdfs:
                        case SearchTagEnum.fmike:
                        case SearchTagEnum.fmdf:
                        case SearchTagEnum.fm21fm:
                        case SearchTagEnum.fm3fm:
                        case SearchTagEnum.fmesh:
                        case SearchTagEnum.flog:
                        case SearchTagEnum.ftxt:
                        case SearchTagEnum.m:
                        case SearchTagEnum.p:
                        case SearchTagEnum.ms:
                        case SearchTagEnum.cs:
                        case SearchTagEnum.hs:
                        case SearchTagEnum.ts:
                        case SearchTagEnum.ww:
                        case SearchTagEnum.ls:
                        case SearchTagEnum.st:
                        case SearchTagEnum.ps:
                        case SearchTagEnum.a:
                        case SearchTagEnum.s:
                        case SearchTagEnum.ss:
                        case SearchTagEnum.u:
                        case SearchTagEnum.notag:
                        case SearchTagEnum.fcsv:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SearchTagEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SecondaryTreatmentTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), i);

                    switch ((SecondaryTreatmentTypeEnum)i)
                    {
                        case SecondaryTreatmentTypeEnum.NotApplicable:
                        case SecondaryTreatmentTypeEnum.RotatingBiologicalContactor:
                        case SecondaryTreatmentTypeEnum.TricklingFilters:
                        case SecondaryTreatmentTypeEnum.SequencingBatchReactor:
                        case SecondaryTreatmentTypeEnum.OxidationDitch:
                        case SecondaryTreatmentTypeEnum.ExtendedAeration:
                        case SecondaryTreatmentTypeEnum.ContactStabilization:
                        case SecondaryTreatmentTypeEnum.PhysicalChemicalProcesses:
                        case SecondaryTreatmentTypeEnum.MovingBedBioReactor:
                        case SecondaryTreatmentTypeEnum.BiologicalAearatedFilters:
                        case SecondaryTreatmentTypeEnum.AeratedSubmergedBioFilmReactor:
                        case SecondaryTreatmentTypeEnum.IntegratedFixedFilmActivatedSludge:
                        case SecondaryTreatmentTypeEnum.ActivatedSludge:
                        case SecondaryTreatmentTypeEnum.ExtendedActivatedSludge:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SiteTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SiteTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SiteTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), i);

                    switch ((SiteTypeEnum)i)
                    {
                        case SiteTypeEnum.Climate:
                        case SiteTypeEnum.Hydrometric:
                        case SiteTypeEnum.Tide:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SiteTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_SpecialTableTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), i);

                    switch ((SpecialTableTypeEnum)i)
                    {
                        case SpecialTableTypeEnum.FCDensitiesTable:
                        case SpecialTableTypeEnum.SalinityTable:
                        case SpecialTableTypeEnum.TemperatureTable:
                        case SpecialTableTypeEnum.GeometricMeanTable:
                        case SpecialTableTypeEnum.MedianTable:
                        case SpecialTableTypeEnum.P90Table:
                        case SpecialTableTypeEnum.PercentOver43Table:
                        case SpecialTableTypeEnum.PercentOver260Table:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_StorageDataTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), i);

                    switch ((StorageDataTypeEnum)i)
                    {
                        case StorageDataTypeEnum.Archived:
                        case StorageDataTypeEnum.Forcasted:
                        case StorageDataTypeEnum.Observed:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_StreetTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StreetTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StreetTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), i);

                    switch ((StreetTypeEnum)i)
                    {
                        case StreetTypeEnum.Street:
                        case StreetTypeEnum.Road:
                        case StreetTypeEnum.Avenue:
                        case StreetTypeEnum.Crescent:
                        case StreetTypeEnum.Court:
                        case StreetTypeEnum.Alley:
                        case StreetTypeEnum.Drive:
                        case StreetTypeEnum.Blvd:
                        case StreetTypeEnum.Route:
                        case StreetTypeEnum.Lane:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "StreetTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TelTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TelTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TelTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TelTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TelTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TelTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TelTypeEnum), i);

                    switch ((TelTypeEnum)i)
                    {
                        case TelTypeEnum.Personal:
                        case TelTypeEnum.Work:
                        case TelTypeEnum.Mobile:
                        case TelTypeEnum.Personal2:
                        case TelTypeEnum.Work2:
                        case TelTypeEnum.Mobile2:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TelTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TertiaryTreatmentTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), i);

                    switch ((TertiaryTreatmentTypeEnum)i)
                    {
                        case TertiaryTreatmentTypeEnum.NotApplicable:
                        case TertiaryTreatmentTypeEnum.Adsorption:
                        case TertiaryTreatmentTypeEnum.Flocculation:
                        case TertiaryTreatmentTypeEnum.MembraneFiltration:
                        case TertiaryTreatmentTypeEnum.IonExchange:
                        case TertiaryTreatmentTypeEnum.ReverseOsmosis:
                        case TertiaryTreatmentTypeEnum.BiologicalNutrientRemoval:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TideDataTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), i);

                    switch ((TideDataTypeEnum)i)
                    {
                        case TideDataTypeEnum.Min15:
                        case TideDataTypeEnum.Min60:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TideTextOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TideTextEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TideTextEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideTextEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TideTextEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideTextEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TideTextEnum), i);

                    switch ((TideTextEnum)i)
                    {
                        case TideTextEnum.LowTide:
                        case TideTextEnum.LowTideFalling:
                        case TideTextEnum.LowTideRising:
                        case TideTextEnum.MidTide:
                        case TideTextEnum.MidTideFalling:
                        case TideTextEnum.MidTideRising:
                        case TideTextEnum.HighTide:
                        case TideTextEnum.HighTideFalling:
                        case TideTextEnum.HighTideRising:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TideTextEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TranslationStatusOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), i);

                    switch ((TranslationStatusEnum)i)
                    {
                        case TranslationStatusEnum.NotTranslated:
                        case TranslationStatusEnum.ElectronicallyTranslated:
                        case TranslationStatusEnum.Translated:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TreatmentTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), i);

                    switch ((TreatmentTypeEnum)i)
                    {
                        case TreatmentTypeEnum.ActivatedSludge:
                        case TreatmentTypeEnum.ActivatedSludgeWithBiofilter:
                        case TreatmentTypeEnum.LagoonNoAeration1Cell:
                        case TreatmentTypeEnum.LagoonNoAeration2Cell:
                        case TreatmentTypeEnum.LagoonNoAeration3Cell:
                        case TreatmentTypeEnum.LagoonNoAeration4Cell:
                        case TreatmentTypeEnum.LagoonNoAeration5Cell:
                        case TreatmentTypeEnum.LagoonWithAeration1Cell:
                        case TreatmentTypeEnum.LagoonWithAeration2Cell:
                        case TreatmentTypeEnum.LagoonWithAeration3Cell:
                        case TreatmentTypeEnum.LagoonWithAeration4Cell:
                        case TreatmentTypeEnum.LagoonWithAeration5Cell:
                        case TreatmentTypeEnum.LagoonWithAeration6Cell:
                        case TreatmentTypeEnum.StabalizingPondOnly:
                        case TreatmentTypeEnum.OxidationDitchOnly:
                        case TreatmentTypeEnum.CirculatingFluidizedBed:
                        case TreatmentTypeEnum.TricklingFilter:
                        case TreatmentTypeEnum.RecirculatingSandFilter:
                        case TreatmentTypeEnum.TrashRackRakeOnly:
                        case TreatmentTypeEnum.SepticTank:
                        case TreatmentTypeEnum.Secondary:
                        case TreatmentTypeEnum.Tertiary:
                        case TreatmentTypeEnum.VolumeFermenter:
                        case TreatmentTypeEnum.BioFilmReactor:
                        case TreatmentTypeEnum.BioGreen:
                        case TreatmentTypeEnum.BioDisks:
                        case TreatmentTypeEnum.ChemicalPrimary:
                        case TreatmentTypeEnum.Chromoglass:
                        case TreatmentTypeEnum.Primary:
                        case TreatmentTypeEnum.SequencingBatchReactor:
                        case TreatmentTypeEnum.PeatSystem:
                        case TreatmentTypeEnum.Physicochimique:
                        case TreatmentTypeEnum.RotatingBiologicalContactor:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TVAuthOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TVAuthEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TVAuthEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVAuthEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TVAuthEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVAuthEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TVAuthEnum), i);

                    switch ((TVAuthEnum)i)
                    {
                        case TVAuthEnum.NoAccess:
                        case TVAuthEnum.Read:
                        case TVAuthEnum.Write:
                        case TVAuthEnum.Create:
                        case TVAuthEnum.Delete:
                        case TVAuthEnum.Admin:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVAuthEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_TVTypeOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(TVTypeEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(TVTypeEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVTypeEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(TVTypeEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVTypeEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(TVTypeEnum), i);

                    switch ((TVTypeEnum)i)
                    {
                        case TVTypeEnum.Root:
                        case TVTypeEnum.Address:
                        case TVTypeEnum.Area:
                        case TVTypeEnum.ClimateSite:
                        case TVTypeEnum.Contact:
                        case TVTypeEnum.Country:
                        case TVTypeEnum.Email:
                        case TVTypeEnum.File:
                        case TVTypeEnum.HydrometricSite:
                        case TVTypeEnum.Infrastructure:
                        case TVTypeEnum.MikeBoundaryConditionWebTide:
                        case TVTypeEnum.MikeBoundaryConditionMesh:
                        case TVTypeEnum.MikeScenario:
                        case TVTypeEnum.MikeSource:
                        case TVTypeEnum.Municipality:
                        case TVTypeEnum.MWQMSite:
                        case TVTypeEnum.PolSourceSite:
                        case TVTypeEnum.Province:
                        case TVTypeEnum.Sector:
                        case TVTypeEnum.Subsector:
                        case TVTypeEnum.Tel:
                        case TVTypeEnum.TideSite:
                        case TVTypeEnum.MWQMSiteSample:
                        case TVTypeEnum.WasteWaterTreatmentPlant:
                        case TVTypeEnum.LiftStation:
                        case TVTypeEnum.Spill:
                        case TVTypeEnum.BoxModel:
                        case TVTypeEnum.VisualPlumesScenario:
                        case TVTypeEnum.Outfall:
                        case TVTypeEnum.OtherInfrastructure:
                        case TVTypeEnum.MWQMRun:
                        case TVTypeEnum.NoDepuration:
                        case TVTypeEnum.Failed:
                        case TVTypeEnum.Passed:
                        case TVTypeEnum.NoData:
                        case TVTypeEnum.LessThan10:
                        case TVTypeEnum.MeshNode:
                        case TVTypeEnum.WebTideNode:
                        case TVTypeEnum.SamplingPlan:
                        case TVTypeEnum.SeeOtherMunicipality:
                        case TVTypeEnum.LineOverflow:
                        case TVTypeEnum.BoxModelInputs:
                        case TVTypeEnum.BoxModelResults:
                        case TVTypeEnum.ClimateSiteInfo:
                        case TVTypeEnum.ClimateSiteData:
                        case TVTypeEnum.HydrometricSiteInfo:
                        case TVTypeEnum.HydrometricSiteData:
                        case TVTypeEnum.InfrastructureInfo:
                        case TVTypeEnum.LabSheetInfo:
                        case TVTypeEnum.LabSheetDetailInfo:
                        case TVTypeEnum.MapInfo:
                        case TVTypeEnum.MapInfoPoint:
                        case TVTypeEnum.MikeSourceStartEndInfo:
                        case TVTypeEnum.MWQMLookupMPNInfo:
                        case TVTypeEnum.SamplingPlanInfo:
                        case TVTypeEnum.SamplingPlanSubsectorInfo:
                        case TVTypeEnum.SamplingPlanSubsectorSiteInfo:
                        case TVTypeEnum.MWQMSiteStartEndInfo:
                        case TVTypeEnum.MWQMSubsectorInfo:
                        case TVTypeEnum.PolSourceSiteInfo:
                        case TVTypeEnum.PolSourceSiteObsInfo:
                        case TVTypeEnum.HydrometricRatingCurveInfo:
                        case TVTypeEnum.HydrometricRatingCurveDataInfo:
                        case TVTypeEnum.TideLocationInfo:
                        case TVTypeEnum.TideSiteDataInfo:
                        case TVTypeEnum.UseOfSite:
                        case TVTypeEnum.VisualPlumesScenarioInfo:
                        case TVTypeEnum.VisualPlumesScenarioAmbient:
                        case TVTypeEnum.VisualPlumesScenarioResults:
                        case TVTypeEnum.TotalFile:
                        case TVTypeEnum.MikeSourceIsRiver:
                        case TVTypeEnum.MikeSourceIncluded:
                        case TVTypeEnum.MikeSourceNotIncluded:
                        case TVTypeEnum.RainExceedance:
                        case TVTypeEnum.EmailDistributionList:
                        case TVTypeEnum.OpenData:
                        case TVTypeEnum.ProvinceTools:
                        case TVTypeEnum.Classification:
                        case TVTypeEnum.Approved:
                        case TVTypeEnum.Restricted:
                        case TVTypeEnum.Prohibited:
                        case TVTypeEnum.ConditionallyApproved:
                        case TVTypeEnum.ConditionallyRestricted:
                        case TVTypeEnum.OpenDataNational:
                        case TVTypeEnum.PolSourceSiteMikeScenario:
                        case TVTypeEnum.SubsectorTools:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "TVTypeEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_WebTideDataSetOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), i);

                    switch ((WebTideDataSetEnum)i)
                    {
                        case WebTideDataSetEnum.arctic9:
                        case WebTideDataSetEnum.brador:
                        case WebTideDataSetEnum.HRglobal:
                        case WebTideDataSetEnum.h3o:
                        case WebTideDataSetEnum.hudson:
                        case WebTideDataSetEnum.ne_pac4:
                        case WebTideDataSetEnum.nwatl:
                        case WebTideDataSetEnum.QuatsinoModel14:
                        case WebTideDataSetEnum.sshelf:
                        case WebTideDataSetEnum.flood:
                        case WebTideDataSetEnum.vigf8:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_WhereOperatorOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(WhereOperatorEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(WhereOperatorEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WhereOperatorEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(WhereOperatorEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WhereOperatorEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(WhereOperatorEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(WhereOperatorEnum), i);

                    switch ((WhereOperatorEnum)i)
                    {
                        case WhereOperatorEnum.Equal:
                        case WhereOperatorEnum.LessThan:
                        case WhereOperatorEnum.GreaterThan:
                        case WhereOperatorEnum.Contains:
                        case WhereOperatorEnum.StartsWith:
                        case WhereOperatorEnum.EndsWith:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "WhereOperatorEnum"), retStr);
                            break;
                    }
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceObsInfoOK_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                string retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), null);
                Assert.AreEqual("", retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), -100);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);

                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), 10000000);
                Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);

                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))
                {
                    retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), i);

                    switch ((PolSourceObsInfoEnum)i)
                    {
                        case PolSourceObsInfoEnum.SourceStart:
                        case PolSourceObsInfoEnum.SourceHumanLand:
                        case PolSourceObsInfoEnum.SourceHumanMarine:
                        case PolSourceObsInfoEnum.SourceAnimal:
                        case PolSourceObsInfoEnum.SourceEffluentLand:
                        case PolSourceObsInfoEnum.SourceEffluentMarine:
                        case PolSourceObsInfoEnum.HumanPollutionSingleStart:
                        case PolSourceObsInfoEnum.HumanPollutionSingleResidential:
                        case PolSourceObsInfoEnum.HumanPollutionSingleCottage:
                        case PolSourceObsInfoEnum.HumanPollutionSingleTrailer:
                        case PolSourceObsInfoEnum.HumanPollutionSingleWarehouse:
                        case PolSourceObsInfoEnum.HumanPollutionSingleCommerical:
                        case PolSourceObsInfoEnum.HumanPollutionSingleBarn:
                        case PolSourceObsInfoEnum.HumanPollutionSinglePublicBuildings:
                        case PolSourceObsInfoEnum.HumanPollutionSingleSchool:
                        case PolSourceObsInfoEnum.HumanPollutionSingleChurch:
                        case PolSourceObsInfoEnum.HumanPollutionSingleMedicalFacility:
                        case PolSourceObsInfoEnum.HumanPollutionSingleOuthouse:
                        case PolSourceObsInfoEnum.HumanPollutionSinglehotelMotel:
                        case PolSourceObsInfoEnum.HumanPollutionSingleBoatM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleBargeM:
                        case PolSourceObsInfoEnum.HumanPollutionSinglehotelMotelM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleResidentialM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleCottageM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleWarehouseM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleCommericalM:
                        case PolSourceObsInfoEnum.HumanPollutionSingleFishPlant:
                        case PolSourceObsInfoEnum.HumanPollutionSingleBeachPatio:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleStart:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleResidences:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleCottages:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleTrailers:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleWarehouses:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleCommericals:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleBarns:
                        case PolSourceObsInfoEnum.HumanPollutionMultiplePublicBuildings:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleSchools:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleChurches:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleMedicalFacilities:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleOuthouses:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleHotelsMotels:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleBoatsM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleBargesM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleHotelsMotelsM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleResidencesM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleCottagesM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleWarehousesM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleCommericalsM:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleFishPlants:
                        case PolSourceObsInfoEnum.HumanPollutionMultipleBeachPatios:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberStart:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo1:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo2:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo3:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo4:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo5:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo6:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo7:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo8:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo9:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo10:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween11and20:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween21and40:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween41and60:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween61and100:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween101and200:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween201and400:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberGreaterThan400:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo1M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo2M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo3M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo4M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo5M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo6M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo7M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo8M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo9M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo10M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween11and20M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween21and40M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween41and60M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween61and100M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween101and200M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween201and400M:
                        case PolSourceObsInfoEnum.HumanPollutionCountNumberGreaterThan400M:
                        case PolSourceObsInfoEnum.HumanLocationStart:
                        case PolSourceObsInfoEnum.HumanLocationRural:
                        case PolSourceObsInfoEnum.HumanLocationUrban:
                        case PolSourceObsInfoEnum.HumanLocationForested:
                        case PolSourceObsInfoEnum.HumanLocationAgricultural:
                        case PolSourceObsInfoEnum.HumanLocationFarm:
                        case PolSourceObsInfoEnum.HumanLocationShorelineMarine:
                        case PolSourceObsInfoEnum.HumanLocationWharfMarine:
                        case PolSourceObsInfoEnum.HumanLocationBarge:
                        case PolSourceObsInfoEnum.HumanLocationIsland:
                        case PolSourceObsInfoEnum.HumanLocationRecreationalArea:
                        case PolSourceObsInfoEnum.HumanLocationSeasonalCottageLot:
                        case PolSourceObsInfoEnum.HumanLocationWetland:
                        case PolSourceObsInfoEnum.HumanLocationWaterCourse:
                        case PolSourceObsInfoEnum.HumanLocationFishPlant:
                        case PolSourceObsInfoEnum.HumanLocationAquacultureSiteMarine:
                        case PolSourceObsInfoEnum.HumanLocationAnchorageMooringSiteMarine:
                        case PolSourceObsInfoEnum.HumanLocationDisposalAtSeaMarine:
                        case PolSourceObsInfoEnum.HumanLocationMarineParkMarine:
                        case PolSourceObsInfoEnum.HumanLocationMarinaMarine:
                        case PolSourceObsInfoEnum.HumanLocationFloatHomeCommunityMarine:
                        case PolSourceObsInfoEnum.HumanLocationMarinaLand:
                        case PolSourceObsInfoEnum.HumanLocationShorelineLand:
                        case PolSourceObsInfoEnum.HumanLocationWharfLand:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeStart:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals10:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals20:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals40:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals60:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals80:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals100:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween101And250:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween251And500:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween501And1000:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersGreaterThan1000:
                        case PolSourceObsInfoEnum.IndustrialAreaSizeMetersInFoRequired:
                        case PolSourceObsInfoEnum.OuthouseStart:
                        case PolSourceObsInfoEnum.OuthouseConcreteTank:
                        case PolSourceObsInfoEnum.OuthouseOnGround:
                        case PolSourceObsInfoEnum.OuthouseOnPortable:
                        case PolSourceObsInfoEnum.IndustrialEffluentStart:
                        case PolSourceObsInfoEnum.IndustrialEffluentForestry:
                        case PolSourceObsInfoEnum.IndustrialEffluentAgricultureFarm:
                        case PolSourceObsInfoEnum.IndustrialEffluentFisheryLand:
                        case PolSourceObsInfoEnum.IndustrialEffluentShorelineStructures:
                        case PolSourceObsInfoEnum.IndustrialEffluentIndustrialTreatment:
                        case PolSourceObsInfoEnum.IndustrialEffluentStorageTank:
                        case PolSourceObsInfoEnum.IndustrialEffluentAirport:
                        case PolSourceObsInfoEnum.IndustrialEffluentLandfill:
                        case PolSourceObsInfoEnum.IndustrialEffluentUrbanRunoff:
                        case PolSourceObsInfoEnum.IndustrialEffluentRecreation:
                        case PolSourceObsInfoEnum.IndustrialEffluentAquacultureSite:
                        case PolSourceObsInfoEnum.IndustrialEffluentAnchorageMooringSite:
                        case PolSourceObsInfoEnum.IndustrialEffluentDisposalAtSea:
                        case PolSourceObsInfoEnum.IndustrialEffluentMarina:
                        case PolSourceObsInfoEnum.IndustrialEffluentRural:
                        case PolSourceObsInfoEnum.IndustrialEffluentShoreline:
                        case PolSourceObsInfoEnum.AgriculturalSourceStart:
                        case PolSourceObsInfoEnum.AgriculturalSourceCrop:
                        case PolSourceObsInfoEnum.AgricultureSourcePasture:
                        case PolSourceObsInfoEnum.AgriculturesourceFeedlot:
                        case PolSourceObsInfoEnum.AriculturalSourcePeatMoss:
                        case PolSourceObsInfoEnum.AgricultureSourceManure:
                        case PolSourceObsInfoEnum.AgriculturalSourceBarn:
                        case PolSourceObsInfoEnum.AgriculturalSoureRunoff:
                        case PolSourceObsInfoEnum.ManureManagementStart:
                        case PolSourceObsInfoEnum.ManureManagementPileSpread:
                        case PolSourceObsInfoEnum.ManureManagementLiqSpread:
                        case PolSourceObsInfoEnum.ManureManagementBoth:
                        case PolSourceObsInfoEnum.FieldLocationStart:
                        case PolSourceObsInfoEnum.FieldLocationOnFarm:
                        case PolSourceObsInfoEnum.FieldLocationOffFarm:
                        case PolSourceObsInfoEnum.FieldLocationBoth:
                        case PolSourceObsInfoEnum.PastureStart:
                        case PolSourceObsInfoEnum.PastureActive:
                        case PolSourceObsInfoEnum.PastureFallow:
                        case PolSourceObsInfoEnum.FeedlotStart:
                        case PolSourceObsInfoEnum.FeedlotActive:
                        case PolSourceObsInfoEnum.FeedlotNotActive:
                        case PolSourceObsInfoEnum.FisheriesSourceStart:
                        case PolSourceObsInfoEnum.FisheriesSourceShellfishProcessing:
                        case PolSourceObsInfoEnum.FisheriesSourceFinfishProcessing:
                        case PolSourceObsInfoEnum.FisheriesSourceBaitFishProcessing:
                        case PolSourceObsInfoEnum.FisheriesSourceLobsterProcessing:
                        case PolSourceObsInfoEnum.FisheriesSourceLobsterAndBaitfishProcessing:
                        case PolSourceObsInfoEnum.FisheriesSourceShellfishLive:
                        case PolSourceObsInfoEnum.FisheriesSourceFinfishLive:
                        case PolSourceObsInfoEnum.FisheriesSourceLobsterLive:
                        case PolSourceObsInfoEnum.FishOperationStart:
                        case PolSourceObsInfoEnum.FishOperationProcessing:
                        case PolSourceObsInfoEnum.FishOperationHoldingTanks:
                        case PolSourceObsInfoEnum.FishOperationPackaging:
                        case PolSourceObsInfoEnum.FishOperationRearing:
                        case PolSourceObsInfoEnum.FishOperationFishMeal:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleStart:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleProcessingPlant:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleHatchery:
                        case PolSourceObsInfoEnum.FishBuildingTypeSinglePond:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleTank:
                        case PolSourceObsInfoEnum.FishBuildingTypeSinglePound:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleAbandoned:
                        case PolSourceObsInfoEnum.FishBuildingTypeSingleWarehouse:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleStart:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleProcessingPlants:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleHatcheries:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultiplePonds:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleTanks:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultiplePounds:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleAbandoned:
                        case PolSourceObsInfoEnum.FishBuildingTypeMultipleWarehouse:
                        case PolSourceObsInfoEnum.FISCountNumberStart:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo1:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo2:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo3:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo4:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo5:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo6:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo7:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo8:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo9:
                        case PolSourceObsInfoEnum.FISCountNumberEqualTo10:
                        case PolSourceObsInfoEnum.FISCountNumberBetween10and25:
                        case PolSourceObsInfoEnum.FISCountNumberBetween25and40:
                        case PolSourceObsInfoEnum.FISCountNumberGreaterThan40:
                        case PolSourceObsInfoEnum.ShorelineSourceStart:
                        case PolSourceObsInfoEnum.ShorelineSourceWharf:
                        case PolSourceObsInfoEnum.ShorelineSourceSeaWall:
                        case PolSourceObsInfoEnum.ShorelineSourceBoatRamp:
                        case PolSourceObsInfoEnum.ShorelineSourceBoatHouse:
                        case PolSourceObsInfoEnum.SlipwayStart:
                        case PolSourceObsInfoEnum.SlipwayPaved:
                        case PolSourceObsInfoEnum.SlipwayRocks:
                        case PolSourceObsInfoEnum.WharfStart:
                        case PolSourceObsInfoEnum.WharfCommercialTransportation:
                        case PolSourceObsInfoEnum.WharfFishing:
                        case PolSourceObsInfoEnum.WharfRecreational:
                        case PolSourceObsInfoEnum.WharfAbandoned:
                        case PolSourceObsInfoEnum.VesselCountStart:
                        case PolSourceObsInfoEnum.VesselCountEquals1:
                        case PolSourceObsInfoEnum.VesselCountEquals2:
                        case PolSourceObsInfoEnum.VesselCountEquals3:
                        case PolSourceObsInfoEnum.VesselCountEquals4:
                        case PolSourceObsInfoEnum.VesselCountEquals5:
                        case PolSourceObsInfoEnum.VesselCountEquals6:
                        case PolSourceObsInfoEnum.VesselCountEquals7:
                        case PolSourceObsInfoEnum.VesselCountEquals8:
                        case PolSourceObsInfoEnum.VesselCountEquals9:
                        case PolSourceObsInfoEnum.VesselCountEquals10:
                        case PolSourceObsInfoEnum.VesselCountBetwee11and25:
                        case PolSourceObsInfoEnum.VesselCountBetween26and50:
                        case PolSourceObsInfoEnum.VesselCountBetween51and100:
                        case PolSourceObsInfoEnum.VesselCountGreaterThan100:
                        case PolSourceObsInfoEnum.VesselCountNotApplicable:
                        case PolSourceObsInfoEnum.WharfTransportationSingleStart:
                        case PolSourceObsInfoEnum.WharfTransportationCommericalSingle:
                        case PolSourceObsInfoEnum.WharfTransportationFerrySingle:
                        case PolSourceObsInfoEnum.WharfTransportationFishingBoatSingle:
                        case PolSourceObsInfoEnum.WharfTransportationBargeSingle:
                        case PolSourceObsInfoEnum.WharfTransportationRecreationActivitySingle:
                        case PolSourceObsInfoEnum.WharfTransportationPleasureBoatSingle:
                        case PolSourceObsInfoEnum.WharfTransportationStart:
                        case PolSourceObsInfoEnum.WharfTransportationCommerical:
                        case PolSourceObsInfoEnum.WharfTransportationFerry:
                        case PolSourceObsInfoEnum.WharfTransportationFishingBoats:
                        case PolSourceObsInfoEnum.WharfTransportationBarges:
                        case PolSourceObsInfoEnum.WharfTransportationRecreationActivities:
                        case PolSourceObsInfoEnum.WharfTransportationPleasureBoats:
                        case PolSourceObsInfoEnum.MarWhfCountNumberStart:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo1:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo2:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo3:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo4:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo5:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo6:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo7:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo8:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo9:
                        case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo10:
                        case PolSourceObsInfoEnum.MarWhfCountNumberBetween11and25:
                        case PolSourceObsInfoEnum.MarWhfCountNumberBetween26and40:
                        case PolSourceObsInfoEnum.MarWhfCountNumberGreaterThan40:
                        case PolSourceObsInfoEnum.RecreationStart:
                        case PolSourceObsInfoEnum.RecreationCampground:
                        case PolSourceObsInfoEnum.RecreationDayUseArea:
                        case PolSourceObsInfoEnum.RecreationSwimmingArea:
                        case PolSourceObsInfoEnum.RecreationGolfCourse:
                        case PolSourceObsInfoEnum.RecreationFishing:
                        case PolSourceObsInfoEnum.RecreationCampgroundSewage:
                        case PolSourceObsInfoEnum.RecreationDayUseAreaSewage:
                        case PolSourceObsInfoEnum.RecreationSwimmingAreaSewage:
                        case PolSourceObsInfoEnum.RecreationGolfCourseSewage:
                        case PolSourceObsInfoEnum.RECCountNumberStart:
                        case PolSourceObsInfoEnum.RECCountNumber10:
                        case PolSourceObsInfoEnum.RECCountNumber30:
                        case PolSourceObsInfoEnum.RECCountNumber50:
                        case PolSourceObsInfoEnum.RECCountNumber100:
                        case PolSourceObsInfoEnum.RECCountNumber200:
                        case PolSourceObsInfoEnum.RECCountNumber300:
                        case PolSourceObsInfoEnum.RECCountNumber500:
                        case PolSourceObsInfoEnum.CampgroundFacilitiesStart:
                        case PolSourceObsInfoEnum.CampgroundNoDumpStn:
                        case PolSourceObsInfoEnum.CampgroundWithDumpStn:
                        case PolSourceObsInfoEnum.CampgroundNoDumpStnSewage:
                        case PolSourceObsInfoEnum.CampgroundWithDumpStnSewage:
                        case PolSourceObsInfoEnum.UrbanStart:
                        case PolSourceObsInfoEnum.UrbanAccumulatedFlow:
                        case PolSourceObsInfoEnum.UrbanWastewaterDumpStation:
                        case PolSourceObsInfoEnum.TankSizeStart:
                        case PolSourceObsInfoEnum.TankSize400:
                        case PolSourceObsInfoEnum.TankSize2000:
                        case PolSourceObsInfoEnum.TankSize4000:
                        case PolSourceObsInfoEnum.TankSize8000:
                        case PolSourceObsInfoEnum.LandfillTypeStart:
                        case PolSourceObsInfoEnum.LandfillTypeResidental:
                        case PolSourceObsInfoEnum.LandfillTypeIndustrial:
                        case PolSourceObsInfoEnum.LandfillTypeWoodwaste:
                        case PolSourceObsInfoEnum.TypesOfAnimalStart:
                        case PolSourceObsInfoEnum.TypesOfAnimalLivestock:
                        case PolSourceObsInfoEnum.TypesOfAnimalWildlife:
                        case PolSourceObsInfoEnum.TypesOfAnimalMarine:
                        case PolSourceObsInfoEnum.TypesOfLivestockStart:
                        case PolSourceObsInfoEnum.TypesOfLivestockHorses:
                        case PolSourceObsInfoEnum.TypesOfLivestockCows:
                        case PolSourceObsInfoEnum.TypesOfLivestockSheep:
                        case PolSourceObsInfoEnum.TypesOfLivestockPigs:
                        case PolSourceObsInfoEnum.TypesOfLivestockMixtureLarge:
                        case PolSourceObsInfoEnum.TypesOfLivestockChickens:
                        case PolSourceObsInfoEnum.TypesOfLivestockTurkeys:
                        case PolSourceObsInfoEnum.TypesOfLivestockDucks:
                        case PolSourceObsInfoEnum.TypesOfLivestockMixtureSmall:
                        case PolSourceObsInfoEnum.TypesOfLivestockFurFarms:
                        case PolSourceObsInfoEnum.TypesOfLivestockDogs:
                        case PolSourceObsInfoEnum.TypesOfWildlifeStart:
                        case PolSourceObsInfoEnum.TypesOfWildlifeCrows:
                        case PolSourceObsInfoEnum.TypesOfWildlifeGulls:
                        case PolSourceObsInfoEnum.TypesOfWildlifeEagle:
                        case PolSourceObsInfoEnum.TypesOfWildlifeUngulate:
                        case PolSourceObsInfoEnum.TypesOfWildlifeCoyote:
                        case PolSourceObsInfoEnum.TypesOfWildlifeGeneral:
                        case PolSourceObsInfoEnum.TypesOfWildlifeBeaver:
                        case PolSourceObsInfoEnum.TypesOfWildlifeMuskrat:
                        case PolSourceObsInfoEnum.TypesOfWildLifeDucksGeese:
                        case PolSourceObsInfoEnum.AnimalLocationStart:
                        case PolSourceObsInfoEnum.AnimalLocationRuralDom:
                        case PolSourceObsInfoEnum.AnimalLocationUrbanDom:
                        case PolSourceObsInfoEnum.AnimalLocationForestedDom:
                        case PolSourceObsInfoEnum.AnimalLocationAgriculturalDom:
                        case PolSourceObsInfoEnum.AnimalLocationFarmDom:
                        case PolSourceObsInfoEnum.AnimalLocationShorelineDom:
                        case PolSourceObsInfoEnum.AnimalLocationWharfDom:
                        case PolSourceObsInfoEnum.AnimalLocationBargeDom:
                        case PolSourceObsInfoEnum.AnimalLocationIslandDom:
                        case PolSourceObsInfoEnum.AnimalLocationRecreationalAreaDom:
                        case PolSourceObsInfoEnum.AnimalLocationCottageLotDom:
                        case PolSourceObsInfoEnum.AnimalLocationWetlandDom:
                        case PolSourceObsInfoEnum.AnimalLocationWaterCourseDom:
                        case PolSourceObsInfoEnum.AnimalLocationFishPlant:
                        case PolSourceObsInfoEnum.AnimalLocationRural:
                        case PolSourceObsInfoEnum.AnimalLocationUrban:
                        case PolSourceObsInfoEnum.AnimalLocationForested:
                        case PolSourceObsInfoEnum.AnimalLocationAgricultural:
                        case PolSourceObsInfoEnum.AnimalLocationFarm:
                        case PolSourceObsInfoEnum.AnimalLocationShoreline:
                        case PolSourceObsInfoEnum.AnimalLocationWharf:
                        case PolSourceObsInfoEnum.AnimalLocationBarge:
                        case PolSourceObsInfoEnum.AnimalLocationIsland:
                        case PolSourceObsInfoEnum.AnimalLocationRecreationalArea:
                        case PolSourceObsInfoEnum.AnimalLocationCottageLot:
                        case PolSourceObsInfoEnum.AnimalLocationWetland:
                        case PolSourceObsInfoEnum.AnimalLocationWaterCourse:
                        case PolSourceObsInfoEnum.AnimalLocationPondLakeDom:
                        case PolSourceObsInfoEnum.AnimalLocationPondLake:
                        case PolSourceObsInfoEnum.AnimalBldgStart:
                        case PolSourceObsInfoEnum.AnimalBldgEquals1:
                        case PolSourceObsInfoEnum.AnimalBldgEquals2:
                        case PolSourceObsInfoEnum.AnimalBldgEquals3:
                        case PolSourceObsInfoEnum.AnimalBldgEquals4:
                        case PolSourceObsInfoEnum.AnimalBldgEquals5:
                        case PolSourceObsInfoEnum.AnimalBldgEquals6:
                        case PolSourceObsInfoEnum.AnimalBldgEquals7:
                        case PolSourceObsInfoEnum.AnimalBldgEquals8:
                        case PolSourceObsInfoEnum.AnimalBldgEquals9:
                        case PolSourceObsInfoEnum.AnimalBldgEquals10:
                        case PolSourceObsInfoEnum.AnimalBldgEqualsNotApplicable:
                        case PolSourceObsInfoEnum.AnimalBldgSingleTypeStart:
                        case PolSourceObsInfoEnum.AnimalBldgSingleCages:
                        case PolSourceObsInfoEnum.AnimalBldgSingleBarn:
                        case PolSourceObsInfoEnum.AnimalBldgSingleBuildings:
                        case PolSourceObsInfoEnum.AnimalBldgMultipleTypeStart:
                        case PolSourceObsInfoEnum.AnimalBldgMultipleCages:
                        case PolSourceObsInfoEnum.AnimalBldgMultipleBarns:
                        case PolSourceObsInfoEnum.AnimalBldgMultipleOtherBuildings:
                        case PolSourceObsInfoEnum.AnimalNumberPresentStart:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox2:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox5:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox10:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox15:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox25:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox50:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox100:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox500:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox1000:
                        case PolSourceObsInfoEnum.NumberAnimalPresentapprox5000:
                        case PolSourceObsInfoEnum.NumberAnimalPresentGreaterThan10000:
                        case PolSourceObsInfoEnum.NumberAnimalPresentGreaterThan20000:
                        case PolSourceObsInfoEnum.NumberAnimalPresentUnknown:
                        case PolSourceObsInfoEnum.BoatStart:
                        case PolSourceObsInfoEnum.BoatCountEquals1:
                        case PolSourceObsInfoEnum.BoatCountEquals2:
                        case PolSourceObsInfoEnum.BoatCountEquals3:
                        case PolSourceObsInfoEnum.BoatCountEquals4:
                        case PolSourceObsInfoEnum.BoatCountEquals5:
                        case PolSourceObsInfoEnum.BoatCountEquals6:
                        case PolSourceObsInfoEnum.BoatCountEquals7:
                        case PolSourceObsInfoEnum.BoatCountEquals8:
                        case PolSourceObsInfoEnum.BoatCountEquals9:
                        case PolSourceObsInfoEnum.BoatCountEquals10:
                        case PolSourceObsInfoEnum.BoatCountBetween11to25:
                        case PolSourceObsInfoEnum.BoatCountBetween26to50:
                        case PolSourceObsInfoEnum.BoatCountBetween51to75:
                        case PolSourceObsInfoEnum.BoatCountBetween76to100:
                        case PolSourceObsInfoEnum.BoatCountGreaterThan100:
                        case PolSourceObsInfoEnum.BoatCountGreaterThan150:
                        case PolSourceObsInfoEnum.BoatCountGreaterThan250:
                        case PolSourceObsInfoEnum.OilDumpingFacilityStart:
                        case PolSourceObsInfoEnum.OilDumpingFacilityPresent:
                        case PolSourceObsInfoEnum.OilDumpingFacilityAbsent:
                        case PolSourceObsInfoEnum.OilDumpingFacilityNotObserved:
                        case PolSourceObsInfoEnum.OilDumpingFacilityNotApplicable:
                        case PolSourceObsInfoEnum.WastewaterDumpingStationStart:
                        case PolSourceObsInfoEnum.WastewaterDumpingStationPresent:
                        case PolSourceObsInfoEnum.WastewaterDumpingStationAbsent:
                        case PolSourceObsInfoEnum.WastewaterDumpingStationNotObserved:
                        case PolSourceObsInfoEnum.WaterAquacultureStart:
                        case PolSourceObsInfoEnum.WaterAquacultureSiteActive:
                        case PolSourceObsInfoEnum.WaterAquacultureSiteFallow:
                        case PolSourceObsInfoEnum.WatAquaCountNumberStart:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo1:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo2:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo3:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo4:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo5:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo6:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo7:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo8:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo9:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo10:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo15:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo20:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo25:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo30:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo40:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo50:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo60:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo70:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo80:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo90:
                        case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo100:
                        case PolSourceObsInfoEnum.WatAquaCountNumberGreaterThan100:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleStart:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleCage:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleFloatingBag:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleSubmergedLine:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleLosterPound:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleBarge:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSingleBoat:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeStart:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeCages:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeFloatingBags:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeSubmergedLines:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeLosterPounds:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeBarges:
                        case PolSourceObsInfoEnum.WaterAquacultureTypeBoats:
                        case PolSourceObsInfoEnum.MarineLocationStart:
                        case PolSourceObsInfoEnum.MarineLocationShoreline:
                        case PolSourceObsInfoEnum.MarineLocationWharf:
                        case PolSourceObsInfoEnum.MarineLocationBarge:
                        case PolSourceObsInfoEnum.MarineLocationIsland:
                        case PolSourceObsInfoEnum.MarineLocationWetland:
                        case PolSourceObsInfoEnum.MarineLocationSandBar:
                        case PolSourceObsInfoEnum.MarineLocationRockOutcrop:
                        case PolSourceObsInfoEnum.MarineLocationAquacultureSite:
                        case PolSourceObsInfoEnum.MarineLocationOffShoreline:
                        case PolSourceObsInfoEnum.MarineLocationMudflat:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeStart:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeShorelineBirds:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeGulls:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeCormorants:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeDucksGeese:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeLoons:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeaducks:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeOther:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeal:
                        case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeaOtter:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminantStart:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminantRunoff:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminantExcrement:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminantEffluent:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminantEffluentMultiple:
                        case PolSourceObsInfoEnum.MarineSourcesOfContaminanMixedMarine:
                        case PolSourceObsInfoEnum.SourcesOfContaminantStart:
                        case PolSourceObsInfoEnum.SourcesOfContaminantRunoff:
                        case PolSourceObsInfoEnum.SourcesOfContaminantRunoffFromField:
                        case PolSourceObsInfoEnum.SourcesOfContaminantProcessingWater:
                        case PolSourceObsInfoEnum.SourcesOfContaminantTankWater:
                        case PolSourceObsInfoEnum.SourcesOfContaminantSewage:
                        case PolSourceObsInfoEnum.SourcesOfContaminantEffluent:
                        case PolSourceObsInfoEnum.SourcesOfContaminantDomesticExcrement:
                        case PolSourceObsInfoEnum.SourcesOfContaminantMarineWashrooms:
                        case PolSourceObsInfoEnum.SourcesOfContaminantLandMarine:
                        case PolSourceObsInfoEnum.SourcesOfContaminantSpills:
                        case PolSourceObsInfoEnum.SourcesOfContaminantWilldExcrement:
                        case PolSourceObsInfoEnum.SourcesOfContaminantEffluentMarine:
                        case PolSourceObsInfoEnum.SourcesOfContaminantEffluentLocation:
                        case PolSourceObsInfoEnum.SewageStart:
                        case PolSourceObsInfoEnum.SewageRunoffLand:
                        case PolSourceObsInfoEnum.SewageThruConduit:
                        case PolSourceObsInfoEnum.SewageSepticSystemLeachateField:
                        case PolSourceObsInfoEnum.SewageRetentionTank:
                        case PolSourceObsInfoEnum.SewageOpenTank:
                        case PolSourceObsInfoEnum.SewageSystemConstructedWetland:
                        case PolSourceObsInfoEnum.SewageOnSiteSystem:
                        case PolSourceObsInfoEnum.SewageOffSiteSystem:
                        case PolSourceObsInfoEnum.SepticNoInformation:
                        case PolSourceObsInfoEnum.SewageAnimalWasteStorage:
                        case PolSourceObsInfoEnum.SewageAnimalExcrement:
                        case PolSourceObsInfoEnum.SewageRunoffMarine:
                        case PolSourceObsInfoEnum.SewageThruConduitMarine:
                        case PolSourceObsInfoEnum.SewageRetentionTankMarine:
                        case PolSourceObsInfoEnum.SewageMixedMarine:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelStart:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelHigh:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelMed:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelLow:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelHighMarine:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelMedMarine:
                        case PolSourceObsInfoEnum.ObservationHazardousLevelLowMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonStart:
                        case PolSourceObsInfoEnum.ObservationHazReasonVisualH:
                        case PolSourceObsInfoEnum.ObservationHazReasonNumbersH:
                        case PolSourceObsInfoEnum.ObservationHazReasonDiscussH:
                        case PolSourceObsInfoEnum.ObservationHazReasonRainfallH:
                        case PolSourceObsInfoEnum.ObservationHazReasonVisualM:
                        case PolSourceObsInfoEnum.ObservationHazReasonNumbersM:
                        case PolSourceObsInfoEnum.ObservationHazReasonDiscussM:
                        case PolSourceObsInfoEnum.ObservationHazReasonRainfallM:
                        case PolSourceObsInfoEnum.ObservationHazReasonVisualHMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonNumbersHMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonDiscussHMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonRainfallHMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonVisualMMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonNumbersMMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonDiscussMMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonRainfallMMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataH:
                        case PolSourceObsInfoEnum.ObservationHazReasonHIstoricDataM:
                        case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataHMarine:
                        case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataMMarine:
                        case PolSourceObsInfoEnum.PathWayStart:
                        case PolSourceObsInfoEnum.PathwayLandHigh:
                        case PolSourceObsInfoEnum.PathwayLandMed:
                        case PolSourceObsInfoEnum.PathwayLandLow:
                        case PolSourceObsInfoEnum.PathWayMarineHigh:
                        case PolSourceObsInfoEnum.PathWayMarineMed:
                        case PolSourceObsInfoEnum.PathWayMarineLow:
                        case PolSourceObsInfoEnum.PathWayInActive:
                        case PolSourceObsInfoEnum.PathWayNotDetermined:
                        case PolSourceObsInfoEnum.PathwayRouteFirstStart:
                        case PolSourceObsInfoEnum.PathwaySourceFirstCulvert:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPipe:
                        case PolSourceObsInfoEnum.PathwaySourceFirstStream:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDitch:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstCulvertMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPipeMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstStreamMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDitchMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlowMed:
                        case PolSourceObsInfoEnum.PathwaySourceFirstCulvertLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPipeLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstStreamLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDitchLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlowLow:
                        case PolSourceObsInfoEnum.PathwaySourceFirstInActive:
                        case PolSourceObsInfoEnum.PathwaySourceFirstNotDetermined:
                        case PolSourceObsInfoEnum.PathwaySourceFirstMunicipalityONSITE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstDirectMARINE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPipeMARINE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstLandDisposalMARINE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstMunicipalityOFFSITE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstMixesMARINE:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPondLake:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPondLakeMED:
                        case PolSourceObsInfoEnum.PathwaySourceFirstPondLakeLOW:
                        case PolSourceObsInfoEnum.PathwayRouteSecondPipeStart:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeStream:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitch:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeStreamMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitchMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflowMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeStreamLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitchLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflowLow:
                        case PolSourceObsInfoEnum.PathwayRouteSecondCulvertStart:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStream:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitch:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainage:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStreamMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitchMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainageMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlowMed:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStreamLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitchLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainageLow:
                        case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlowLow:
                        case PolSourceObsInfoEnum.WidthInMetersStart:
                        case PolSourceObsInfoEnum.WidthInMetersApprox1:
                        case PolSourceObsInfoEnum.WidthInMetersApprox2:
                        case PolSourceObsInfoEnum.WidthInMetersApprox3:
                        case PolSourceObsInfoEnum.WidthInMetersApprox4:
                        case PolSourceObsInfoEnum.WidthInMetersApprox5:
                        case PolSourceObsInfoEnum.WidthInMetersApprox6:
                        case PolSourceObsInfoEnum.WidthInMetersApprox7:
                        case PolSourceObsInfoEnum.WidthInMetersApprox8:
                        case PolSourceObsInfoEnum.WidthInMetersApprox9:
                        case PolSourceObsInfoEnum.WidthInMetersApprox10:
                        case PolSourceObsInfoEnum.WidthInMetersBetween11And25:
                        case PolSourceObsInfoEnum.WidthInMetersBetween26And40:
                        case PolSourceObsInfoEnum.WidthInMetersGreaterThan40:
                        case PolSourceObsInfoEnum.WidthInMetersApprox1Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox2Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox3Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox4Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox5Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox6Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox7Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox8Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox9Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox10Med:
                        case PolSourceObsInfoEnum.WidthInMetersBetween11And25Med:
                        case PolSourceObsInfoEnum.WidthInMetersBetween26And40Med:
                        case PolSourceObsInfoEnum.WidthInMetersGreaterThan40Med:
                        case PolSourceObsInfoEnum.WidthInMetersApprox1Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox2Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox3Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox4Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox5Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox6Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox7Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox8Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox9Low:
                        case PolSourceObsInfoEnum.WidthInMetersApprox10Low:
                        case PolSourceObsInfoEnum.WidthInMetersBetween11And25Low:
                        case PolSourceObsInfoEnum.WidthInMetersBetween26And40Low:
                        case PolSourceObsInfoEnum.WidthInMetersGreaterThan40Low:
                        case PolSourceObsInfoEnum.AreaSlopeStart:
                        case PolSourceObsInfoEnum.AreaSlopeLow:
                        case PolSourceObsInfoEnum.AreaSlopeMedium:
                        case PolSourceObsInfoEnum.AreaSlopeHigh:
                        case PolSourceObsInfoEnum.AreaSlopeNA:
                        case PolSourceObsInfoEnum.AreaSlopeLowMed:
                        case PolSourceObsInfoEnum.AreaSlopeMediumMed:
                        case PolSourceObsInfoEnum.AreaSlopeHighMed:
                        case PolSourceObsInfoEnum.AreaSlopeNAMed:
                        case PolSourceObsInfoEnum.AreaSlopeLowLow:
                        case PolSourceObsInfoEnum.AreaSlopeMediumLow:
                        case PolSourceObsInfoEnum.AreaSlopeHighLow:
                        case PolSourceObsInfoEnum.AreaSlopeNALow:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeStart:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowHigh:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumHigh:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighHigh:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeNAHigh:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowMed:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumMed:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighMed:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeNAMed:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowLow:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumLow:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighLow:
                        case PolSourceObsInfoEnum.WaterCourseAreaSlopeNALow:
                        case PolSourceObsInfoEnum.ShorelineRiparionZoneStart:
                        case PolSourceObsInfoEnum.ShorelineRiparianZonePresentHigh:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentHigh:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoHigh:
                        case PolSourceObsInfoEnum.ShorelineRiparianZonePresentMed:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentMed:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoMed:
                        case PolSourceObsInfoEnum.ShorelineRiparianZonePresentLow:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentLow:
                        case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoLow:
                        case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentHigh:
                        case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentMed:
                        case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureStart:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructurePipeHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandHigh:
                        case PolSourceObsInfoEnum.FlowThroughNoStructureHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertMed:
                        case PolSourceObsInfoEnum.FlowThroughStructurePipeMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandMed:
                        case PolSourceObsInfoEnum.FlowThroughNoStructureMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertLow:
                        case PolSourceObsInfoEnum.FlowThroughStructurePipeLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandLow:
                        case PolSourceObsInfoEnum.FlowThroughNoStructureLow:
                        case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshHigh:
                        case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshMed:
                        case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshLow:
                        case PolSourceObsInfoEnum.FlowThroughBeaverDamHigh:
                        case PolSourceObsInfoEnum.FlowThroughBeaverDamMed:
                        case PolSourceObsInfoEnum.FlowThroughBeaverDamLow:
                        case PolSourceObsInfoEnum.FlowThroughWaterCourseStart:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseHigh:
                        case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseMed:
                        case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseLow:
                        case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWatercourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWatercourseHigh:
                        case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWaterCourseLow:
                        case PolSourceObsInfoEnum.WaterCourseDistStart:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetersGreaterThan1000HighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetersInfoRequiredHighW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000MedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqMedW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000LowW:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqLowW:
                        case PolSourceObsInfoEnum.PipeCountNumberStart:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo1High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo2High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo3High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo4High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo5High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo6High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo7High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo8High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo9High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo10High:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo1Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo2Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo3Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo4Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo5Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo6Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo7Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo8Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo9Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo10Med:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo1Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo2Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo3Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo4Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo5Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo6Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo7Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo8Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo9Low:
                        case PolSourceObsInfoEnum.PipeCountNumberEqualTo10Low:
                        case PolSourceObsInfoEnum.PipeCountNumbeNoInformation:
                        case PolSourceObsInfoEnum.DiameterInCentimetersStart:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual15High:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual30High:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmHigh:
                        case PolSourceObsInfoEnum.DiameterNoInformationHigh:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual15Med:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual30Med:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmMed:
                        case PolSourceObsInfoEnum.DiameterNoInformationMed:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual15Low:
                        case PolSourceObsInfoEnum.DiameterInCentimetersEqual30Low:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmLow:
                        case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmLow:
                        case PolSourceObsInfoEnum.DiameterNoInformationLow:
                        case PolSourceObsInfoEnum.DitchStart:
                        case PolSourceObsInfoEnum.DitchAlongRoadHigh:
                        case PolSourceObsInfoEnum.DitchAcrossPropertiesHigh:
                        case PolSourceObsInfoEnum.DitchAlongRoadMed:
                        case PolSourceObsInfoEnum.DitchAcrossPropertiesMed:
                        case PolSourceObsInfoEnum.DitchAlongRoadLow:
                        case PolSourceObsInfoEnum.DitchAcrossPropertiesLow:
                        case PolSourceObsInfoEnum.DrainageStart:
                        case PolSourceObsInfoEnum.DrainagePavedSurfacesHigh:
                        case PolSourceObsInfoEnum.DrainageVegetatedSurfacesHigh:
                        case PolSourceObsInfoEnum.DrainageBareSoilSurfacesHigh:
                        case PolSourceObsInfoEnum.DrainagePavedSurfacesMed:
                        case PolSourceObsInfoEnum.DrainageVegetatedSurfacesMed:
                        case PolSourceObsInfoEnum.DrainageBareSoilSurfacesMed:
                        case PolSourceObsInfoEnum.DrainagePavedSurfacesLow:
                        case PolSourceObsInfoEnum.DrainageVegetatedSurfacesLow:
                        case PolSourceObsInfoEnum.DrainageBareSoilSurfacesLow:
                        case PolSourceObsInfoEnum.FlowLevelStart:
                        case PolSourceObsInfoEnum.FlowLevelHiHigh:
                        case PolSourceObsInfoEnum.FlowLevelMedHigh:
                        case PolSourceObsInfoEnum.FlowLevelLoHigh:
                        case PolSourceObsInfoEnum.FlowLevelRainHigh:
                        case PolSourceObsInfoEnum.FlowLevelHighMed:
                        case PolSourceObsInfoEnum.FlowLevelMediumMed:
                        case PolSourceObsInfoEnum.FlowLevelLowMed:
                        case PolSourceObsInfoEnum.FlowLevelRainfallMed:
                        case PolSourceObsInfoEnum.FlowLevelHighLow:
                        case PolSourceObsInfoEnum.FlowLevelMediumLow:
                        case PolSourceObsInfoEnum.FlowLevelLowLow:
                        case PolSourceObsInfoEnum.FlowLevelRainfallLow:
                        case PolSourceObsInfoEnum.FlowLevelHighWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowLevelLowWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseHigh:
                        case PolSourceObsInfoEnum.FlowLevelHighWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowLevelLowWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseMed:
                        case PolSourceObsInfoEnum.FlowLevelHighWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowLevelLowWaterCourseLow:
                        case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseLow:
                        case PolSourceObsInfoEnum.PipeFlowStart:
                        case PolSourceObsInfoEnum.PipeFlowlHighHigh:
                        case PolSourceObsInfoEnum.PipeFlowMediumHigh:
                        case PolSourceObsInfoEnum.PipeFlowLowHigh:
                        case PolSourceObsInfoEnum.PipeFlowRainfallHigh:
                        case PolSourceObsInfoEnum.PipeFlowNAHigh:
                        case PolSourceObsInfoEnum.PipeFlowlHighMed:
                        case PolSourceObsInfoEnum.PipeFlowMediumMed:
                        case PolSourceObsInfoEnum.PipeFlowLowMed:
                        case PolSourceObsInfoEnum.PipeFlowRainfallMed:
                        case PolSourceObsInfoEnum.PipeFlowNAMed:
                        case PolSourceObsInfoEnum.PipeFlowlHighLow:
                        case PolSourceObsInfoEnum.PipeFlowMediumLow:
                        case PolSourceObsInfoEnum.PipeFlowLowLow:
                        case PolSourceObsInfoEnum.PipeFlowRainfallLow:
                        case PolSourceObsInfoEnum.PipeFlowNALow:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetersStart:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetersGreaterThan1000High:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetersInfoRequiredHigh:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000Med:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqMed:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters0Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters5Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters10Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters20Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters30Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters40Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters50Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters75Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters100Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters150Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters200Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters300Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters400Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters600Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters800Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMeters1000Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000Low:
                        case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqLow:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelStart:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelHighIndirect:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelMedIndirect:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelLowIndirect:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelHighDirect:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelMedDirect:
                        case PolSourceObsInfoEnum.SecondaryHazardousLevelLowDirect:
                        case PolSourceObsInfoEnum.ImpactRatingStart:
                        case PolSourceObsInfoEnum.ImpactRatingDirectHighHaz:
                        case PolSourceObsInfoEnum.ImpactRatingindirectHighHaz:
                        case PolSourceObsInfoEnum.ImpactRatingDirectMedHaz:
                        case PolSourceObsInfoEnum.ImpactRatingindirectMedHaz:
                        case PolSourceObsInfoEnum.ImpactRatingDirectLowHaz:
                        case PolSourceObsInfoEnum.ImpactRatingindirectLowHaz:
                        case PolSourceObsInfoEnum.ImpactRatingNone:
                        case PolSourceObsInfoEnum.StatusStart:
                        case PolSourceObsInfoEnum.StatusDefiniteHi:
                        case PolSourceObsInfoEnum.StatusPotentialHi:
                        case PolSourceObsInfoEnum.StatusDefiniteMed:
                        case PolSourceObsInfoEnum.StatusPotentialMed:
                        case PolSourceObsInfoEnum.StatusDefiniteLo:
                        case PolSourceObsInfoEnum.StatusPotentialLo:
                        case PolSourceObsInfoEnum.StatusNonPollutionSource:
                        case PolSourceObsInfoEnum.StatusNotDetermined:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesStart:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectHighYes:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectHighNo:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectHighYes:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectHighNo:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectMedYes:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectMedNo:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectMedYes:
                        case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectMedNo:
                        case PolSourceObsInfoEnum.SuggestedRiskStart:
                        case PolSourceObsInfoEnum.SuggestedRiskLow:
                        case PolSourceObsInfoEnum.SuggestedRiskModerate:
                        case PolSourceObsInfoEnum.SuggestedRiskHigh:
                        case PolSourceObsInfoEnum.SuggestedRiskInfoRequired:
                        case PolSourceObsInfoEnum.RiskStart:
                        case PolSourceObsInfoEnum.RiskLow:
                        case PolSourceObsInfoEnum.RiskModerate:
                        case PolSourceObsInfoEnum.RiskHigh:
                        case PolSourceObsInfoEnum.RiskNotDetermined:
                        case PolSourceObsInfoEnum.RiskConfirmationStart:
                        case PolSourceObsInfoEnum.RiskConfirmationNotConfirmed:
                        case PolSourceObsInfoEnum.RiskConfirmationConfirmedVisual:
                        case PolSourceObsInfoEnum.RiskConfirmationConfirmedWater:
                        case PolSourceObsInfoEnum.FollowUpStart:
                        case PolSourceObsInfoEnum.FollowupRequired:
                        case PolSourceObsInfoEnum.FollowupCompleted:
                        case PolSourceObsInfoEnum.TypeOfSourceStart:
                        case PolSourceObsInfoEnum.TypeOfSourceCircular:
                        case PolSourceObsInfoEnum.TypeOfSourceWaterWays:
                        case PolSourceObsInfoEnum.WaterwayWidthInMetersStart:
                        case PolSourceObsInfoEnum.WaterwayWidthInMetersApprox1:
                        case PolSourceObsInfoEnum.WaterwayWidthInMetersApprox2:
                        case PolSourceObsInfoEnum.AverageDepthStart:
                        case PolSourceObsInfoEnum.AverageDepthApprox50cm1:
                        case PolSourceObsInfoEnum.AverageDepthApprox1m1:
                        case PolSourceObsInfoEnum.AverageDepthApprox50cm2:
                        case PolSourceObsInfoEnum.AverageDepthApprox1m2:
                        case PolSourceObsInfoEnum.StreamVolSqMeterStart:
                        case PolSourceObsInfoEnum.StreamVolSqMeterEquals05m2:
                        case PolSourceObsInfoEnum.StreamVolSqMeterEquals1m2:
                        case PolSourceObsInfoEnum.StreamVolSqMeterEquals3m2:
                        case PolSourceObsInfoEnum.TimeToFloat10mStart:
                        case PolSourceObsInfoEnum.TimeToFloat30SecondsHalf:
                        case PolSourceObsInfoEnum.TimeToFloat1MinuteHalf:
                        case PolSourceObsInfoEnum.TimeToFloat2MinutesHalf:
                        case PolSourceObsInfoEnum.TimeToFloat30SecondsOne:
                        case PolSourceObsInfoEnum.TimeToFloat1MinuteOne:
                        case PolSourceObsInfoEnum.TimeToFloat2MinutesOne:
                        case PolSourceObsInfoEnum.TimeToFloat30SecondsThree:
                        case PolSourceObsInfoEnum.TimeToFloat1MinuteThree:
                        case PolSourceObsInfoEnum.TimeToFloat2MinutesThree:
                        case PolSourceObsInfoEnum.StructureDiameterStart:
                        case PolSourceObsInfoEnum.StructureDiameter50cm:
                        case PolSourceObsInfoEnum.StructureDiameter1m:
                        case PolSourceObsInfoEnum.HeigthOfFlowStart:
                        case PolSourceObsInfoEnum.HeigthOfFlowApprox50Percent50cm:
                        case PolSourceObsInfoEnum.HeigthOfFlowApprox75Percent50cm:
                        case PolSourceObsInfoEnum.HeigthOfFlowApprox25Percent1m:
                        case PolSourceObsInfoEnum.HeigthOfFlowApprox50Percent1m:
                        case PolSourceObsInfoEnum.HeigthOfFlowApprox75Percent1m:
                        case PolSourceObsInfoEnum.DischargeM3DayStart:
                        case PolSourceObsInfoEnum.DischargeM3Day1:
                        case PolSourceObsInfoEnum.DischargeM3Day2:
                        case PolSourceObsInfoEnum.DischargeM3Day3:
                        case PolSourceObsInfoEnum.DischargeM3Day4:
                        case PolSourceObsInfoEnum.DischargeM3Day5:
                        case PolSourceObsInfoEnum.DischargeM3Day6:
                        case PolSourceObsInfoEnum.SampleFecalCountStart:
                        case PolSourceObsInfoEnum.SampleFecalCount500For4320:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For4320:
                        case PolSourceObsInfoEnum.SampleFecalCount500For8640:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For8640:
                        case PolSourceObsInfoEnum.SampleFecalCount500For17280:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For17280:
                        case PolSourceObsInfoEnum.SampleFecalCount500For25920:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For25920:
                        case PolSourceObsInfoEnum.SampleFecalCount500For43200:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For43200:
                        case PolSourceObsInfoEnum.SampleFecalCount500For64800:
                        case PolSourceObsInfoEnum.SampleFecalCoun1000For64800:
                        case PolSourceObsInfoEnum.LoadinPerDayStart:
                        case PolSourceObsInfoEnum.LoadPerDayA:
                        case PolSourceObsInfoEnum.LoadPerDayB:
                        case PolSourceObsInfoEnum.LoadPerDayC:
                        case PolSourceObsInfoEnum.LoadPerDayD:
                        case PolSourceObsInfoEnum.LoadPerDayE:
                        case PolSourceObsInfoEnum.LoadPerDayF:
                        case PolSourceObsInfoEnum.LoadPerDayG:
                        case PolSourceObsInfoEnum.LoadPerDayH:
                        case PolSourceObsInfoEnum.DilutionVolumeToTarget14Start:
                        case PolSourceObsInfoEnum.DilutionVolumeA:
                        case PolSourceObsInfoEnum.DilutionVolumeB:
                        case PolSourceObsInfoEnum.DilutionVolumeC:
                        case PolSourceObsInfoEnum.DilutionVolumeD:
                        case PolSourceObsInfoEnum.DilutionVolumeE:
                        case PolSourceObsInfoEnum.DilutionVolumeF:
                        case PolSourceObsInfoEnum.DilutionVolumeG:
                        case PolSourceObsInfoEnum.DilutionVolumeH:
                        case PolSourceObsInfoEnum.RegionStart:
                        case PolSourceObsInfoEnum.RegionNewBrunswick2E5:
                        case PolSourceObsInfoEnum.RegionNovaScotia2E5:
                        case PolSourceObsInfoEnum.RegionPEI2E5:
                        case PolSourceObsInfoEnum.RegionNewfoundland2E5:
                        case PolSourceObsInfoEnum.RegionQuebec2E5:
                        case PolSourceObsInfoEnum.RegionBritishC2E5:
                        case PolSourceObsInfoEnum.RegionNewBrunswick3E5:
                        case PolSourceObsInfoEnum.RegionNovaScotiak3E5:
                        case PolSourceObsInfoEnum.RegionPEIk3E5:
                        case PolSourceObsInfoEnum.RegionNewfoundlandk3E5:
                        case PolSourceObsInfoEnum.RegionQuebeck3E5:
                        case PolSourceObsInfoEnum.RegionBritishCk3E5:
                        case PolSourceObsInfoEnum.RegionNewBrunswick6E5:
                        case PolSourceObsInfoEnum.RegionNovaScotia6E5:
                        case PolSourceObsInfoEnum.RegionPEI6E5:
                        case PolSourceObsInfoEnum.RegionNewfoundland6E5:
                        case PolSourceObsInfoEnum.RegionQuebec6E5:
                        case PolSourceObsInfoEnum.RegionBritishC6E5:
                        case PolSourceObsInfoEnum.RegionNewBrunswick9E5:
                        case PolSourceObsInfoEnum.RegionNovaScotiak39E5:
                        case PolSourceObsInfoEnum.RegionPEIk9E5:
                        case PolSourceObsInfoEnum.RegionNewfoundlandk9E5:
                        case PolSourceObsInfoEnum.RegionQuebeck9E5:
                        case PolSourceObsInfoEnum.RegionBritishCk9E5:
                        case PolSourceObsInfoEnum.RegionNewBrunswick1E6:
                        case PolSourceObsInfoEnum.RegionNovaScotia1E6:
                        case PolSourceObsInfoEnum.RegionPEI1E6:
                        case PolSourceObsInfoEnum.RegionNewfoundland1E6:
                        case PolSourceObsInfoEnum.RegionQuebec1E6:
                        case PolSourceObsInfoEnum.RegionBritishC1E6:
                        case PolSourceObsInfoEnum.RegionNewBrunswick2E6:
                        case PolSourceObsInfoEnum.RegionNovaScotiak2E6:
                        case PolSourceObsInfoEnum.RegionPEIk2E6:
                        case PolSourceObsInfoEnum.RegionNewfoundland2E6:
                        case PolSourceObsInfoEnum.RegionQuebec2E6:
                        case PolSourceObsInfoEnum.RegionBritishC2E6:
                        case PolSourceObsInfoEnum.RegionNewBrunswick3E6:
                        case PolSourceObsInfoEnum.RegionNovaScotia3E6:
                        case PolSourceObsInfoEnum.RegionPEI3E6:
                        case PolSourceObsInfoEnum.RegionNewfoundland3E6:
                        case PolSourceObsInfoEnum.RegionQuebec3E6:
                        case PolSourceObsInfoEnum.RegionBritishC3E6:
                        case PolSourceObsInfoEnum.RegionNewBrunswick5E6:
                        case PolSourceObsInfoEnum.RegionNovaScotia5E6:
                        case PolSourceObsInfoEnum.RegionPEI5E6:
                        case PolSourceObsInfoEnum.RegionNewfoundland5E6:
                        case PolSourceObsInfoEnum.RegionQuebec5E6:
                        case PolSourceObsInfoEnum.RegionBritishC5E6:
                        case PolSourceObsInfoEnum.SectorsInNBStart:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V2E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V2E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V2E5:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V3E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V3E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V3E5:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V6E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V6E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V6E5:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V9E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V9E5:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V9E5:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V1E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V1E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V1E6:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V2E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V2E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V2E6:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V3E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V3E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V3E6:
                        case PolSourceObsInfoEnum.SectorsInNB1To2V5E6:
                        case PolSourceObsInfoEnum.SectorsInNB3To4V5E6:
                        case PolSourceObsInfoEnum.SectorsInNB5To7V5E6:
                        case PolSourceObsInfoEnum.SectorsInNB9To12V5E6:
                        case PolSourceObsInfoEnum.SectorsInNB13To15V5E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals16V5E6:
                        case PolSourceObsInfoEnum.SectorsInNB17To18V5E6:
                        case PolSourceObsInfoEnum.SectorsInNBEquals19V5E6:
                        case PolSourceObsInfoEnum.SectorsInNSStart:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V2E5:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V2E5:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V2E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V2E5:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V2E5:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V2E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V2E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V2E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V2E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V3E5:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V3E5:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V3E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V3E5:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V3E5:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V3E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V3E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V3E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V3E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V6E5:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V6E5:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V6E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V6E5:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V6E5:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V6E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V6E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V6E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V6E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V9E5:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V9E5:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V9E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V9E5:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V9E5:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V9E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V9E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V9E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V9E5:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V1E6:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V1E6:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V1E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V1E6:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V1E6:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V1E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V1E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V1E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V1E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V2E6:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V2E6:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V2E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V2E6:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V2E6:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V2E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V2E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V2E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V2E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V3E6:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V3E6:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V3E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V3E6:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V3E6:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V3E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V3E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V3E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V3E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals1V5E6:
                        case PolSourceObsInfoEnum.SectorsInNS2To3V5E6:
                        case PolSourceObsInfoEnum.SectorsInNS4To6V5E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals7V5E6:
                        case PolSourceObsInfoEnum.SectorsInNS8To14V5E6:
                        case PolSourceObsInfoEnum.SectorsInNEquals15V5E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals16V5E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals18V5E6:
                        case PolSourceObsInfoEnum.SectorsInNSEquals20V5E6:
                        case PolSourceObsInfoEnum.SectorsInPEIStart:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V2E5:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V2E5:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V2E5:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V3E5:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V3E5:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V3E5:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V6E5:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V6E5:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V6E5:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V9E5:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V9E5:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V9E5:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V1E6:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V1E6:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V1E6:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V2E6:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V2E6:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V2E6:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V3E6:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V3E6:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V3E6:
                        case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V5E6:
                        case PolSourceObsInfoEnum.SectorsInPEI5To6V5E6:
                        case PolSourceObsInfoEnum.SectorsInPEI7To8V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldStart:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V2E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V3E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V6E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V9E5:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V1E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V2E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V3E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual2V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfld6To7V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual15V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual29V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual30V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual35V5E6:
                        case PolSourceObsInfoEnum.SectorsInNfldEqual43V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecStart:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInBCStart:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V2E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V3E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V6E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V9E5:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V1E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V2E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V3E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V5E6:
                        case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V5E6:
                        case PolSourceObsInfoEnum.DepthOfWaterStart:
                        case PolSourceObsInfoEnum.DepthOfWater1mV2E5:
                        case PolSourceObsInfoEnum.DepthOfWater2mV2E5:
                        case PolSourceObsInfoEnum.DepthOfWater5mV2E5:
                        case PolSourceObsInfoEnum.DepthOfWater8mV2E5:
                        case PolSourceObsInfoEnum.DepthOfWater14mV2E5:
                        case PolSourceObsInfoEnum.DepthOfWater1mV3E5:
                        case PolSourceObsInfoEnum.DepthOfWater2mV3E5:
                        case PolSourceObsInfoEnum.DepthOfWater5mV3E5:
                        case PolSourceObsInfoEnum.DepthOfWater8mV3E5:
                        case PolSourceObsInfoEnum.DepthOfWater14mV3E5:
                        case PolSourceObsInfoEnum.DepthOfWater1mV6E5:
                        case PolSourceObsInfoEnum.DepthOfWater2mV6E5:
                        case PolSourceObsInfoEnum.DepthOfWater5mV6E5:
                        case PolSourceObsInfoEnum.DepthOfWater8mV6E5:
                        case PolSourceObsInfoEnum.DepthOfWater14mV6E5:
                        case PolSourceObsInfoEnum.DepthOfWater1mV9E5:
                        case PolSourceObsInfoEnum.DepthOfWater2mV9E5:
                        case PolSourceObsInfoEnum.DepthOfWater5mV9E5:
                        case PolSourceObsInfoEnum.DepthOfWater8mV9E5:
                        case PolSourceObsInfoEnum.DepthOfWater14mV9E5:
                        case PolSourceObsInfoEnum.DepthOfWater1mV1E6:
                        case PolSourceObsInfoEnum.DepthOfWater2mV1E6:
                        case PolSourceObsInfoEnum.DepthOfWater5mV1E6:
                        case PolSourceObsInfoEnum.DepthOfWater8mV1E6:
                        case PolSourceObsInfoEnum.DepthOfWater14mV1E6:
                        case PolSourceObsInfoEnum.DepthOfWater1mV2E6:
                        case PolSourceObsInfoEnum.DepthOfWater2mV2E6:
                        case PolSourceObsInfoEnum.DepthOfWater5mV2E6:
                        case PolSourceObsInfoEnum.DepthOfWater8mV2E6:
                        case PolSourceObsInfoEnum.DepthOfWater14mV2E6:
                        case PolSourceObsInfoEnum.DepthOfWater1mV3E6:
                        case PolSourceObsInfoEnum.DepthOfWater2mV3E6:
                        case PolSourceObsInfoEnum.DepthOfWater5mV3E6:
                        case PolSourceObsInfoEnum.DepthOfWater8mV3E6:
                        case PolSourceObsInfoEnum.DepthOfWater14mV3E6:
                        case PolSourceObsInfoEnum.DepthOfWater1mV5E6:
                        case PolSourceObsInfoEnum.DepthOfWater2mV5E6:
                        case PolSourceObsInfoEnum.DepthOfWater5mV5E6:
                        case PolSourceObsInfoEnum.DepthOfWater8mV5E6:
                        case PolSourceObsInfoEnum.DepthOfWater14mV5E5:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadiusStart:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5Two3E5Two:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5eight:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5eight:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5five6E5one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5two:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5eight:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E59E5fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5two:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5eight:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6two:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6Eight2E6Eight3E6eight:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6two:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6Five3E6Five5E6five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E6Two5E6Two2E5five:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E6one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E65E6fourteen:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius5E6one:
                        case PolSourceObsInfoEnum.SurfaceAreaImpactRadius5E6eight:
                        case PolSourceObsInfoEnum.ImpactZoneStart:
                        case PolSourceObsInfoEnum.ImpactZoneYes:
                        case PolSourceObsInfoEnum.ImpactZonePotential:
                        case PolSourceObsInfoEnum.ImpactZoneNo:
                        case PolSourceObsInfoEnum.ImpactZoneNotSure:
                        case PolSourceObsInfoEnum.DistanceToShoreStart:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters0W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters5W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters10W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters20W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters30W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters40W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters50W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters75W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters100W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters150W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters200W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters300W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters400W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters600W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters800W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters1000W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000W:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters5WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters10WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters20WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters30WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters40WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters50WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters75WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters100WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters150WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters200WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters300WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters400WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters600WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters800WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters1000WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000WAnchor:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters5WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters10WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters20WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters30WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters40WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters50WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters75WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters100WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters150WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters200WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters300WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters400WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters600WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters800WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMeters1000WDisposal:
                        case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000WDisposal:
                            Assert.AreEqual("", retStr);
                            break;
                        default:
                            Assert.AreEqual(string.Format(CSSPEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);
                            break;
                    }
                }
            }
        }

        #endregion Testing Methods Check OK public
        #region Testing Methods TextOrdered public
        [TestMethod]
        public void Enums_ActionDBTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ActionDBTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AddContactTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AddContactTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_DatabaseTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(DatabaseTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DatabaseTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DatabaseTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_EntityQueryTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(EntityQueryTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceObsInfoTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceObsInfoTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AddressTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AddressTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AerationTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AerationTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AlarmSystemTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AlarmSystemTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AnalysisCalculationTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalysisCalculationTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AnalysisReportExportCommandEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalysisReportExportCommandEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AnalyzeMethodEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalyzeMethodEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AppTaskCommandEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AppTaskCommandEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_AppTaskStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AppTaskStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_BeaufortScaleEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(BeaufortScaleEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_BoxModelResultTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(BoxModelResultTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ClassificationTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ClassificationTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_CollectionSystemTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CollectionSystemTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ContactTitleEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ContactTitleEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_CSSPWQInputSheetTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CSSPWQInputSheetTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_CSSPWQInputTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CSSPWQInputTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_DailyOrHourlyDataEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DailyOrHourlyDataEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_DisinfectionTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DisinfectionTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_DrogueTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DrogueTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_EmailTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(EmailTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ExcelExportShowDataTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ExcelExportShowDataTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_FacilityTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FacilityTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_FilePurposeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FilePurposeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_FileStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FileStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_FileTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FileTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_InfrastructureTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(InfrastructureTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_KMZActionEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(KMZActionEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_LaboratoryEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LaboratoryEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_LabSheetStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LabSheetStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_LabSheetTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LabSheetTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_LanguageEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LanguageEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LanguageEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_LogCommandEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LogCommandEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_MapInfoDrawTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MapInfoDrawTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_MikeBoundaryConditionLevelOrVelocityEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MikeBoundaryConditionLevelOrVelocityEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_MikeScenarioSpecialResultKMLTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MikeScenarioSpecialResultKMLTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_MWQMSiteLatestClassificationEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MWQMSiteLatestClassificationEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceInactiveReasonEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceInactiveReasonEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceIssueRiskEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceIssueRiskEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PositionEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PositionEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PositionEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PositionEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PreliminaryTreatmentTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PreliminaryTreatmentTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PrimaryTreatmentTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PrimaryTreatmentTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PropertyTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PropertyTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportConditionEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportConditionEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFieldTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFieldTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFileTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFileTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFormatingDateEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFormatingDateEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportFormatingNumberEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFormatingNumberEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportGenerateObjectsKeywordEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportGenerateObjectsKeywordEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportSortingEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportSortingEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportTreeNodeSubTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportTreeNodeSubTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ReportTreeNodeTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportTreeNodeTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SameDayNextDayEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SameDayNextDayEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SampleMatrixEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleMatrixEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SampleStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SampleTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SamplingPlanTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SamplingPlanTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_ScenarioStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ScenarioStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SearchTagEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SearchTagEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SecondaryTreatmentTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SecondaryTreatmentTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SiteTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SiteTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_SpecialTableTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SpecialTableTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_StorageDataTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(StorageDataTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_StreetTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(StreetTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TelTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TelTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TertiaryTreatmentTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TertiaryTreatmentTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TideDataTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TideDataTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TideTextEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TideTextEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TideTextEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TranslationStatusEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TranslationStatusEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TreatmentTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TreatmentTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TVAuthEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TVAuthEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_TVTypeEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TVTypeEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_WebTideDataSetEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(WebTideDataSetEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_WhereOperatorEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(WhereOperatorEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(WhereOperatorEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(WhereOperatorEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }
        [TestMethod]
        public void Enums_PolSourceObsInfoEnumTextOrdered_Test()
        {
            foreach (CultureInfo culture in new List<CultureInfo>() { new CultureInfo("en-CA"), new CultureInfo("fr-CA") })
            {
                SetupTest(culture);

                List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
                foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))
                {
                    enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i) });
                }
                enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

                List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceObsInfoEnum));
                Assert.AreEqual(enumTextOrderedList.Count, enumTextOrderedList2.Count);

                EnumIDAndText enumTextOrdered = new EnumIDAndText();
                Assert.IsNotNull(enumTextOrdered);

                for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
                {
                    Assert.AreEqual(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                    Assert.AreEqual(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
                }
            }
        }

        #endregion Testing Methods TextOrdered public
    }
}
