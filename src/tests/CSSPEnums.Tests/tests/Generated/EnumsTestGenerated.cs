/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPEnums_Tests.exe
 *
 * Do not edit this file.
 *
 */
using CSSPCultureServices.Resources;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace CSSPEnums.Tests
{
    public partial class EnumsTest
    {

        #region Testing Method GetResValueForTypeAndID for each Enum value name
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ActionDBTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), i);

                switch ((ActionDBTypeEnum)i)
                {
                    case ActionDBTypeEnum.Create:
                        Assert.Equal(CSSPCultureEnumsRes.ActionDBTypeEnumCreate, retStr);
                        break;
                    case ActionDBTypeEnum.Read:
                        Assert.Equal(CSSPCultureEnumsRes.ActionDBTypeEnumRead, retStr);
                        break;
                    case ActionDBTypeEnum.Update:
                        Assert.Equal(CSSPCultureEnumsRes.ActionDBTypeEnumUpdate, retStr);
                        break;
                    case ActionDBTypeEnum.Delete:
                        Assert.Equal(CSSPCultureEnumsRes.ActionDBTypeEnumDelete, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AddContactTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), i);

                switch ((AddContactTypeEnum)i)
                {
                    case AddContactTypeEnum.First:
                        Assert.Equal(CSSPCultureEnumsRes.AddContactTypeEnumFirst, retStr);
                        break;
                    case AddContactTypeEnum.Register:
                        Assert.Equal(CSSPCultureEnumsRes.AddContactTypeEnumRegister, retStr);
                        break;
                    case AddContactTypeEnum.LoggedIn:
                        Assert.Equal(CSSPCultureEnumsRes.AddContactTypeEnumLoggedIn, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_EntityQueryTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), i);

                switch ((EntityQueryTypeEnum)i)
                {
                    case EntityQueryTypeEnum.AsNoTracking:
                        Assert.Equal(CSSPCultureEnumsRes.EntityQueryTypeEnumAsNoTracking, retStr);
                        break;
                    case EntityQueryTypeEnum.WithTracking:
                        Assert.Equal(CSSPCultureEnumsRes.EntityQueryTypeEnumWithTracking, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PolSourceObsInfoTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), i);

                switch ((PolSourceObsInfoTypeEnum)i)
                {
                    case PolSourceObsInfoTypeEnum.Description:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceObsInfoTypeEnumDescription, retStr);
                        break;
                    case PolSourceObsInfoTypeEnum.Report:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceObsInfoTypeEnumReport, retStr);
                        break;
                    case PolSourceObsInfoTypeEnum.Text:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceObsInfoTypeEnumText, retStr);
                        break;
                    case PolSourceObsInfoTypeEnum.Initial:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceObsInfoTypeEnumInitial, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AddressTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), i);

                switch ((AddressTypeEnum)i)
                {
                    case AddressTypeEnum.Mailing:
                        Assert.Equal(CSSPCultureEnumsRes.AddressTypeEnumMailing, retStr);
                        break;
                    case AddressTypeEnum.Shipping:
                        Assert.Equal(CSSPCultureEnumsRes.AddressTypeEnumShipping, retStr);
                        break;
                    case AddressTypeEnum.Civic:
                        Assert.Equal(CSSPCultureEnumsRes.AddressTypeEnumCivic, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AreaSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AreaSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AreaSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AreaSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AreaSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AreaSubComponentEnum), i);

                switch ((AreaSubComponentEnum)i)
                {
                    case AreaSubComponentEnum.Sectors:
                        Assert.Equal(CSSPCultureEnumsRes.AreaSubComponentEnumSectors, retStr);
                        break;
                    case AreaSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.AreaSubComponentEnumFiles, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AerationTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), i);

                switch ((AerationTypeEnum)i)
                {
                    case AerationTypeEnum.MechanicalAirLines:
                        Assert.Equal(CSSPCultureEnumsRes.AerationTypeEnumMechanicalAirLines, retStr);
                        break;
                    case AerationTypeEnum.MechanicalSurfaceMixers:
                        Assert.Equal(CSSPCultureEnumsRes.AerationTypeEnumMechanicalSurfaceMixers, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AlarmSystemTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), i);

                switch ((AlarmSystemTypeEnum)i)
                {
                    case AlarmSystemTypeEnum.SCADA:
                        Assert.Equal(CSSPCultureEnumsRes.AlarmSystemTypeEnumSCADA, retStr);
                        break;
                    case AlarmSystemTypeEnum.None:
                        Assert.Equal(CSSPCultureEnumsRes.AlarmSystemTypeEnumNone, retStr);
                        break;
                    case AlarmSystemTypeEnum.OnlyVisualLight:
                        Assert.Equal(CSSPCultureEnumsRes.AlarmSystemTypeEnumOnlyVisualLight, retStr);
                        break;
                    case AlarmSystemTypeEnum.SCADAAndLight:
                        Assert.Equal(CSSPCultureEnumsRes.AlarmSystemTypeEnumSCADAAndLight, retStr);
                        break;
                    case AlarmSystemTypeEnum.PagerAndLight:
                        Assert.Equal(CSSPCultureEnumsRes.AlarmSystemTypeEnumPagerAndLight, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AnalysisCalculationTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), i);

                switch ((AnalysisCalculationTypeEnum)i)
                {
                    case AnalysisCalculationTypeEnum.All:
                        Assert.Equal(CSSPCultureEnumsRes.AnalysisCalculationTypeEnumAll, retStr);
                        break;
                    case AnalysisCalculationTypeEnum.Wet:
                        Assert.Equal(CSSPCultureEnumsRes.AnalysisCalculationTypeEnumWet, retStr);
                        break;
                    case AnalysisCalculationTypeEnum.Dry:
                        Assert.Equal(CSSPCultureEnumsRes.AnalysisCalculationTypeEnumDry, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AnalysisReportExportCommandEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), i);

                switch ((AnalysisReportExportCommandEnum)i)
                {
                    case AnalysisReportExportCommandEnum.Report:
                        Assert.Equal(CSSPCultureEnumsRes.AnalysisReportExportCommandEnumReport, retStr);
                        break;
                    case AnalysisReportExportCommandEnum.Excel:
                        Assert.Equal(CSSPCultureEnumsRes.AnalysisReportExportCommandEnumExcel, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AnalyzeMethodEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), i);

                switch ((AnalyzeMethodEnum)i)
                {
                    case AnalyzeMethodEnum.MF:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumMF, retStr);
                        break;
                    case AnalyzeMethodEnum.ZZ_510Q:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumZZ_510Q, retStr);
                        break;
                    case AnalyzeMethodEnum.ZZ_509Q:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumZZ_509Q, retStr);
                        break;
                    case AnalyzeMethodEnum.ZZ_0:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumZZ_0, retStr);
                        break;
                    case AnalyzeMethodEnum.ZZ_525Q:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumZZ_525Q, retStr);
                        break;
                    case AnalyzeMethodEnum.MPN:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumMPN, retStr);
                        break;
                    case AnalyzeMethodEnum.ZZ_0Q:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumZZ_0Q, retStr);
                        break;
                    case AnalyzeMethodEnum.AnalyzeMethod8:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumAnalyzeMethod8, retStr);
                        break;
                    case AnalyzeMethodEnum.AnalyzeMethod9:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumAnalyzeMethod9, retStr);
                        break;
                    case AnalyzeMethodEnum.AnalyzeMethod10:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumAnalyzeMethod10, retStr);
                        break;
                    case AnalyzeMethodEnum.AnalyzeMethod11:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumAnalyzeMethod11, retStr);
                        break;
                    case AnalyzeMethodEnum.AnalyzeMethod12:
                        Assert.Equal(CSSPCultureEnumsRes.AnalyzeMethodEnumAnalyzeMethod12, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AppTaskCommandEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), i);

                switch ((AppTaskCommandEnum)i)
                {
                    case AppTaskCommandEnum.GenerateWebTide:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGenerateWebTide, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioAskToRun:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioAskToRun, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioImport:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioImport, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioOtherFileImport:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioOtherFileImport, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioRunning:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioRunning, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioToCancel:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioToCancel, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioWaitingToRun:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioWaitingToRun, retStr);
                        break;
                    case AppTaskCommandEnum.SetupWebTide:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumSetupWebTide, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateClimateSiteInformation:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateClimateSiteInformation, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyFromStartDateToEndDate:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyFromStartDateToEndDate, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate, retStr);
                        break;
                    case AppTaskCommandEnum.CreateFCForm:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateFCForm, retStr);
                        break;
                    case AppTaskCommandEnum.CreateSamplingPlanSamplingPlanTextFile:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateSamplingPlanSamplingPlanTextFile, retStr);
                        break;
                    case AppTaskCommandEnum.CreateDocumentFromTemplate:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateDocumentFromTemplate, retStr);
                        break;
                    case AppTaskCommandEnum.GetClimateSitesDataForRunsOfYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGetClimateSitesDataForRunsOfYear, retStr);
                        break;
                    case AppTaskCommandEnum.CreateWebTideDataWLAtFirstNode:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateWebTideDataWLAtFirstNode, retStr);
                        break;
                    case AppTaskCommandEnum.ExportEmailDistributionLists:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumExportEmailDistributionLists, retStr);
                        break;
                    case AppTaskCommandEnum.ExportAnalysisToExcel:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumExportAnalysisToExcel, retStr);
                        break;
                    case AppTaskCommandEnum.CreateDocumentFromParameters:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateDocumentFromParameters, retStr);
                        break;
                    case AppTaskCommandEnum.CreateDocxPDF:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateDocxPDF, retStr);
                        break;
                    case AppTaskCommandEnum.CreateXlsxPDF:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumCreateXlsxPDF, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataCSVOfMWQMSites:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSites, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataKMZOfMWQMSites:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataKMZOfMWQMSites, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataXlsxOfMWQMSitesAndSamples:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataXlsxOfMWQMSitesAndSamples, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataCSVOfMWQMSamples:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataCSVOfMWQMSamples, retStr);
                        break;
                    case AppTaskCommandEnum.GetAllPrecipitationForYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGetAllPrecipitationForYear, retStr);
                        break;
                    case AppTaskCommandEnum.FillRunPrecipByClimateSitePriorityForYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumFillRunPrecipByClimateSitePriorityForYear, retStr);
                        break;
                    case AppTaskCommandEnum.FindMissingPrecipForProvince:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumFindMissingPrecipForProvince, retStr);
                        break;
                    case AppTaskCommandEnum.ExportToArcGIS:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumExportToArcGIS, retStr);
                        break;
                    case AppTaskCommandEnum.GenerateClassificationForCSSPWebToolsVisualization:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGenerateClassificationForCSSPWebToolsVisualization, retStr);
                        break;
                    case AppTaskCommandEnum.GenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSites:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSites, retStr);
                        break;
                    case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSamples:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumOpenDataCSVNationalOfMWQMSamples, retStr);
                        break;
                    case AppTaskCommandEnum.ProvinceToolsCreateClassificationInputsKML:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumProvinceToolsCreateClassificationInputsKML, retStr);
                        break;
                    case AppTaskCommandEnum.ProvinceToolsCreateGroupingInputsKML:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumProvinceToolsCreateGroupingInputsKML, retStr);
                        break;
                    case AppTaskCommandEnum.ProvinceToolsCreateMWQMSitesAndPolSourceSitesKML:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumProvinceToolsCreateMWQMSitesAndPolSourceSitesKML, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateHydrometricSiteInformation:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteInformation, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate, retStr);
                        break;
                    case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumUpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate, retStr);
                        break;
                    case AppTaskCommandEnum.GetHydrometricSitesDataForRunsOfYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGetHydrometricSitesDataForRunsOfYear, retStr);
                        break;
                    case AppTaskCommandEnum.GetAllDischargesForYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGetAllDischargesForYear, retStr);
                        break;
                    case AppTaskCommandEnum.FillRunDischargesByHydrometricSitePriorityForYear:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumFillRunDischargesByHydrometricSitePriorityForYear, retStr);
                        break;
                    case AppTaskCommandEnum.FindMissingDischargesForProvince:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumFindMissingDischargesForProvince, retStr);
                        break;
                    case AppTaskCommandEnum.LoadHydrometricDataValue:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumLoadHydrometricDataValue, retStr);
                        break;
                    case AppTaskCommandEnum.GenerateKMLFileClassificationForCSSPWebToolsVisualization:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumGenerateKMLFileClassificationForCSSPWebToolsVisualization, retStr);
                        break;
                    case AppTaskCommandEnum.ProvinceToolsGenerateStats:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumProvinceToolsGenerateStats, retStr);
                        break;
                    case AppTaskCommandEnum.MikeScenarioPrepareResults:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumMikeScenarioPrepareResults, retStr);
                        break;
                    case AppTaskCommandEnum.ClimateSiteLoadCoCoRaHSData:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskCommandEnumClimateSiteLoadCoCoRaHSData, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AppTaskStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), i);

                switch ((AppTaskStatusEnum)i)
                {
                    case AppTaskStatusEnum.Created:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskStatusEnumCreated, retStr);
                        break;
                    case AppTaskStatusEnum.Running:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskStatusEnumRunning, retStr);
                        break;
                    case AppTaskStatusEnum.Completed:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskStatusEnumCompleted, retStr);
                        break;
                    case AppTaskStatusEnum.Cancelled:
                        Assert.Equal(CSSPCultureEnumsRes.AppTaskStatusEnumCancelled, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_AscDescEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(AscDescEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AscDescEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(AscDescEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(AscDescEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(AscDescEnum), i);

                switch ((AscDescEnum)i)
                {
                    case AscDescEnum.Ascending:
                        Assert.Equal(CSSPCultureEnumsRes.AscDescEnumAscending, retStr);
                        break;
                    case AscDescEnum.Descending:
                        Assert.Equal(CSSPCultureEnumsRes.AscDescEnumDescending, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_BeaufortScaleEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), i);

                switch ((BeaufortScaleEnum)i)
                {
                    case BeaufortScaleEnum.Calm:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumCalm, retStr);
                        break;
                    case BeaufortScaleEnum.LightAir:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumLightAir, retStr);
                        break;
                    case BeaufortScaleEnum.LightBreeze:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumLightBreeze, retStr);
                        break;
                    case BeaufortScaleEnum.GentleBreeze:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumGentleBreeze, retStr);
                        break;
                    case BeaufortScaleEnum.ModerateBreeze:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumModerateBreeze, retStr);
                        break;
                    case BeaufortScaleEnum.FreshBreeze:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumFreshBreeze, retStr);
                        break;
                    case BeaufortScaleEnum.StrongBreeze:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumStrongBreeze, retStr);
                        break;
                    case BeaufortScaleEnum.HighWind_ModerateGale_NearGale:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumHighWind_ModerateGale_NearGale, retStr);
                        break;
                    case BeaufortScaleEnum.Gale_FreshGale:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumGale_FreshGale, retStr);
                        break;
                    case BeaufortScaleEnum.Strong_SevereGale:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumStrong_SevereGale, retStr);
                        break;
                    case BeaufortScaleEnum.Storm_WholeGale:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumStorm_WholeGale, retStr);
                        break;
                    case BeaufortScaleEnum.ViolentStorm:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumViolentStorm, retStr);
                        break;
                    case BeaufortScaleEnum.HurricaneForce:
                        Assert.Equal(CSSPCultureEnumsRes.BeaufortScaleEnumHurricaneForce, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_BoxModelResultTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), i);

                switch ((BoxModelResultTypeEnum)i)
                {
                    case BoxModelResultTypeEnum.Dilution:
                        Assert.Equal(CSSPCultureEnumsRes.BoxModelResultTypeEnumDilution, retStr);
                        break;
                    case BoxModelResultTypeEnum.NoDecayUntreated:
                        Assert.Equal(CSSPCultureEnumsRes.BoxModelResultTypeEnumNoDecayUntreated, retStr);
                        break;
                    case BoxModelResultTypeEnum.NoDecayPreDisinfection:
                        Assert.Equal(CSSPCultureEnumsRes.BoxModelResultTypeEnumNoDecayPreDisinfection, retStr);
                        break;
                    case BoxModelResultTypeEnum.DecayUntreated:
                        Assert.Equal(CSSPCultureEnumsRes.BoxModelResultTypeEnumDecayUntreated, retStr);
                        break;
                    case BoxModelResultTypeEnum.DecayPreDisinfection:
                        Assert.Equal(CSSPCultureEnumsRes.BoxModelResultTypeEnumDecayPreDisinfection, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_CanOverflowTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(CanOverflowTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CanOverflowTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CanOverflowTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(CanOverflowTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(CanOverflowTypeEnum), i);

                switch ((CanOverflowTypeEnum)i)
                {
                    case CanOverflowTypeEnum.Yes:
                        Assert.Equal(CSSPCultureEnumsRes.CanOverflowTypeEnumYes, retStr);
                        break;
                    case CanOverflowTypeEnum.No:
                        Assert.Equal(CSSPCultureEnumsRes.CanOverflowTypeEnumNo, retStr);
                        break;
                    case CanOverflowTypeEnum.Unknown:
                        Assert.Equal(CSSPCultureEnumsRes.CanOverflowTypeEnumUnknown, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ClassificationTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), i);

                switch ((ClassificationTypeEnum)i)
                {
                    case ClassificationTypeEnum.Approved:
                        Assert.Equal(CSSPCultureEnumsRes.ClassificationTypeEnumApproved, retStr);
                        break;
                    case ClassificationTypeEnum.Restricted:
                        Assert.Equal(CSSPCultureEnumsRes.ClassificationTypeEnumRestricted, retStr);
                        break;
                    case ClassificationTypeEnum.Prohibited:
                        Assert.Equal(CSSPCultureEnumsRes.ClassificationTypeEnumProhibited, retStr);
                        break;
                    case ClassificationTypeEnum.ConditionallyApproved:
                        Assert.Equal(CSSPCultureEnumsRes.ClassificationTypeEnumConditionallyApproved, retStr);
                        break;
                    case ClassificationTypeEnum.ConditionallyRestricted:
                        Assert.Equal(CSSPCultureEnumsRes.ClassificationTypeEnumConditionallyRestricted, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_CollectionSystemTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), i);

                switch ((CollectionSystemTypeEnum)i)
                {
                    case CollectionSystemTypeEnum.CompletelySeparated:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCompletelySeparated, retStr);
                        break;
                    case CollectionSystemTypeEnum.CompletelyCombined:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCompletelyCombined, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined90Separated10:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined90Separated10, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined80Separated20:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined80Separated20, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined70Separated30:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined70Separated30, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined60Separated40:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined60Separated40, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined50Separated50:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined50Separated50, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined40Separated60:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined40Separated60, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined30Separated70:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined30Separated70, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined20Separated80:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined20Separated80, retStr);
                        break;
                    case CollectionSystemTypeEnum.Combined10Separated90:
                        Assert.Equal(CSSPCultureEnumsRes.CollectionSystemTypeEnumCombined10Separated90, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ContactTitleEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), i);

                switch ((ContactTitleEnum)i)
                {
                    case ContactTitleEnum.DirectorGeneral:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumDirectorGeneral, retStr);
                        break;
                    case ContactTitleEnum.DirectorPublicWorks:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumDirectorPublicWorks, retStr);
                        break;
                    case ContactTitleEnum.Superintendent:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumSuperintendent, retStr);
                        break;
                    case ContactTitleEnum.Engineer:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumEngineer, retStr);
                        break;
                    case ContactTitleEnum.Foreman:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumForeman, retStr);
                        break;
                    case ContactTitleEnum.Operator:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumOperator, retStr);
                        break;
                    case ContactTitleEnum.FacilitiesManager:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumFacilitiesManager, retStr);
                        break;
                    case ContactTitleEnum.Supervisor:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumSupervisor, retStr);
                        break;
                    case ContactTitleEnum.Technician:
                        Assert.Equal(CSSPCultureEnumsRes.ContactTitleEnumTechnician, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ContentSizeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ContentSizeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ContentSizeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ContentSizeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ContentSizeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ContentSizeEnum), i);

                switch ((ContentSizeEnum)i)
                {
                    case ContentSizeEnum.Size30:
                        Assert.Equal(CSSPCultureEnumsRes.ContentSizeEnumSize30, retStr);
                        break;
                    case ContentSizeEnum.Size40:
                        Assert.Equal(CSSPCultureEnumsRes.ContentSizeEnumSize40, retStr);
                        break;
                    case ContentSizeEnum.Size50:
                        Assert.Equal(CSSPCultureEnumsRes.ContentSizeEnumSize50, retStr);
                        break;
                    case ContentSizeEnum.Size60:
                        Assert.Equal(CSSPCultureEnumsRes.ContentSizeEnumSize60, retStr);
                        break;
                    case ContentSizeEnum.Size70:
                        Assert.Equal(CSSPCultureEnumsRes.ContentSizeEnumSize70, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_CountrySubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(CountrySubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CountrySubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CountrySubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(CountrySubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(CountrySubComponentEnum), i);

                switch ((CountrySubComponentEnum)i)
                {
                    case CountrySubComponentEnum.Provinces:
                        Assert.Equal(CSSPCultureEnumsRes.CountrySubComponentEnumProvinces, retStr);
                        break;
                    case CountrySubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.CountrySubComponentEnumFiles, retStr);
                        break;
                    case CountrySubComponentEnum.OpenDataNational:
                        Assert.Equal(CSSPCultureEnumsRes.CountrySubComponentEnumOpenDataNational, retStr);
                        break;
                    case CountrySubComponentEnum.EmailDistributionList:
                        Assert.Equal(CSSPCultureEnumsRes.CountrySubComponentEnumEmailDistributionList, retStr);
                        break;
                    case CountrySubComponentEnum.RainExceedance:
                        Assert.Equal(CSSPCultureEnumsRes.CountrySubComponentEnumRainExceedance, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_CSSPWQInputSheetTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), i);

                switch ((CSSPWQInputSheetTypeEnum)i)
                {
                    case CSSPWQInputSheetTypeEnum.A1:
                        Assert.Equal(CSSPCultureEnumsRes.CSSPWQInputSheetTypeEnumA1, retStr);
                        break;
                    case CSSPWQInputSheetTypeEnum.LTB:
                        Assert.Equal(CSSPCultureEnumsRes.CSSPWQInputSheetTypeEnumLTB, retStr);
                        break;
                    case CSSPWQInputSheetTypeEnum.EC:
                        Assert.Equal(CSSPCultureEnumsRes.CSSPWQInputSheetTypeEnumEC, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_CSSPWQInputTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), i);

                switch ((CSSPWQInputTypeEnum)i)
                {
                    case CSSPWQInputTypeEnum.Subsector:
                        Assert.Equal(CSSPCultureEnumsRes.CSSPWQInputTypeEnumSubsector, retStr);
                        break;
                    case CSSPWQInputTypeEnum.Municipality:
                        Assert.Equal(CSSPCultureEnumsRes.CSSPWQInputTypeEnumMunicipality, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_DBLocationEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(DBLocationEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DBLocationEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DBLocationEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(DBLocationEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(DBLocationEnum), i);

                switch ((DBLocationEnum)i)
                {
                    case DBLocationEnum.Local:
                        Assert.Equal(CSSPCultureEnumsRes.DBLocationEnumLocal, retStr);
                        break;
                    case DBLocationEnum.Server:
                        Assert.Equal(CSSPCultureEnumsRes.DBLocationEnumServer, retStr);
                        break;
                    case DBLocationEnum.InMemory:
                        Assert.Equal(CSSPCultureEnumsRes.DBLocationEnumInMemory, retStr);
                        break;
                    case DBLocationEnum.Login:
                        Assert.Equal(CSSPCultureEnumsRes.DBLocationEnumLogin, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_DailyOrHourlyDataEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), i);

                switch ((DailyOrHourlyDataEnum)i)
                {
                    case DailyOrHourlyDataEnum.Daily:
                        Assert.Equal(CSSPCultureEnumsRes.DailyOrHourlyDataEnumDaily, retStr);
                        break;
                    case DailyOrHourlyDataEnum.Hourly:
                        Assert.Equal(CSSPCultureEnumsRes.DailyOrHourlyDataEnumHourly, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_DisinfectionTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), i);

                switch ((DisinfectionTypeEnum)i)
                {
                    case DisinfectionTypeEnum.None:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumNone, retStr);
                        break;
                    case DisinfectionTypeEnum.UV:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumUV, retStr);
                        break;
                    case DisinfectionTypeEnum.ChlorinationNoDechlorination:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorination, retStr);
                        break;
                    case DisinfectionTypeEnum.ChlorinationWithDechlorination:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorination, retStr);
                        break;
                    case DisinfectionTypeEnum.UVSeasonal:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumUVSeasonal, retStr);
                        break;
                    case DisinfectionTypeEnum.ChlorinationNoDechlorinationSeasonal:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumChlorinationNoDechlorinationSeasonal, retStr);
                        break;
                    case DisinfectionTypeEnum.ChlorinationWithDechlorinationSeasonal:
                        Assert.Equal(CSSPCultureEnumsRes.DisinfectionTypeEnumChlorinationWithDechlorinationSeasonal, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_DrogueTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), i);

                switch ((DrogueTypeEnum)i)
                {
                    case DrogueTypeEnum.SmallDrogue:
                        Assert.Equal(CSSPCultureEnumsRes.DrogueTypeEnumSmallDrogue, retStr);
                        break;
                    case DrogueTypeEnum.LargeDrogue:
                        Assert.Equal(CSSPCultureEnumsRes.DrogueTypeEnumLargeDrogue, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_EmailTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), i);

                switch ((EmailTypeEnum)i)
                {
                    case EmailTypeEnum.Personal:
                        Assert.Equal(CSSPCultureEnumsRes.EmailTypeEnumPersonal, retStr);
                        break;
                    case EmailTypeEnum.Work:
                        Assert.Equal(CSSPCultureEnumsRes.EmailTypeEnumWork, retStr);
                        break;
                    case EmailTypeEnum.Personal2:
                        Assert.Equal(CSSPCultureEnumsRes.EmailTypeEnumPersonal2, retStr);
                        break;
                    case EmailTypeEnum.Work2:
                        Assert.Equal(CSSPCultureEnumsRes.EmailTypeEnumWork2, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ExcelExportShowDataTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), i);

                switch ((ExcelExportShowDataTypeEnum)i)
                {
                    case ExcelExportShowDataTypeEnum.FecalColiform:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumFecalColiform, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.Temperature:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumTemperature, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.Salinity:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumSalinity, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.P90:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumP90, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.GemetricMean:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumGemetricMean, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.Median:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumMedian, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.PercOfP90Over43:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over43, retStr);
                        break;
                    case ExcelExportShowDataTypeEnum.PercOfP90Over260:
                        Assert.Equal(CSSPCultureEnumsRes.ExcelExportShowDataTypeEnumPercOfP90Over260, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_FacilityTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), i);

                switch ((FacilityTypeEnum)i)
                {
                    case FacilityTypeEnum.Lagoon:
                        Assert.Equal(CSSPCultureEnumsRes.FacilityTypeEnumLagoon, retStr);
                        break;
                    case FacilityTypeEnum.Plant:
                        Assert.Equal(CSSPCultureEnumsRes.FacilityTypeEnumPlant, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_FilePurposeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), i);

                switch ((FilePurposeEnum)i)
                {
                    case FilePurposeEnum.MikeInput:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumMikeInput, retStr);
                        break;
                    case FilePurposeEnum.MikeInputMDF:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumMikeInputMDF, retStr);
                        break;
                    case FilePurposeEnum.MikeResultDFSU:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumMikeResultDFSU, retStr);
                        break;
                    case FilePurposeEnum.MikeResultKMZ:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumMikeResultKMZ, retStr);
                        break;
                    case FilePurposeEnum.Information:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumInformation, retStr);
                        break;
                    case FilePurposeEnum.Image:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumImage, retStr);
                        break;
                    case FilePurposeEnum.Picture:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumPicture, retStr);
                        break;
                    case FilePurposeEnum.ReportGenerated:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumReportGenerated, retStr);
                        break;
                    case FilePurposeEnum.TemplateGenerated:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumTemplateGenerated, retStr);
                        break;
                    case FilePurposeEnum.GeneratedFCForm:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumGeneratedFCForm, retStr);
                        break;
                    case FilePurposeEnum.Template:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumTemplate, retStr);
                        break;
                    case FilePurposeEnum.Map:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumMap, retStr);
                        break;
                    case FilePurposeEnum.Analysis:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumAnalysis, retStr);
                        break;
                    case FilePurposeEnum.OpenData:
                        Assert.Equal(CSSPCultureEnumsRes.FilePurposeEnumOpenData, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_FilesSortPropEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(FilesSortPropEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FilesSortPropEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FilesSortPropEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(FilesSortPropEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(FilesSortPropEnum), i);

                switch ((FilesSortPropEnum)i)
                {
                    case FilesSortPropEnum.FileName:
                        Assert.Equal(CSSPCultureEnumsRes.FilesSortPropEnumFileName, retStr);
                        break;
                    case FilesSortPropEnum.FileSize:
                        Assert.Equal(CSSPCultureEnumsRes.FilesSortPropEnumFileSize, retStr);
                        break;
                    case FilesSortPropEnum.FileType:
                        Assert.Equal(CSSPCultureEnumsRes.FilesSortPropEnumFileType, retStr);
                        break;
                    case FilesSortPropEnum.FilePurpose:
                        Assert.Equal(CSSPCultureEnumsRes.FilesSortPropEnumFilePurpose, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_FileStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), i);

                switch ((FileStatusEnum)i)
                {
                    case FileStatusEnum.Changed:
                        Assert.Equal(CSSPCultureEnumsRes.FileStatusEnumChanged, retStr);
                        break;
                    case FileStatusEnum.Sent:
                        Assert.Equal(CSSPCultureEnumsRes.FileStatusEnumSent, retStr);
                        break;
                    case FileStatusEnum.Accepted:
                        Assert.Equal(CSSPCultureEnumsRes.FileStatusEnumAccepted, retStr);
                        break;
                    case FileStatusEnum.Rejected:
                        Assert.Equal(CSSPCultureEnumsRes.FileStatusEnumRejected, retStr);
                        break;
                    case FileStatusEnum.Fail:
                        Assert.Equal(CSSPCultureEnumsRes.FileStatusEnumFail, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_FileTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), i);

                switch ((FileTypeEnum)i)
                {
                    case FileTypeEnum.DFS0:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumDFS0, retStr);
                        break;
                    case FileTypeEnum.DFS1:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumDFS1, retStr);
                        break;
                    case FileTypeEnum.DFSU:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumDFSU, retStr);
                        break;
                    case FileTypeEnum.KMZ:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumKMZ, retStr);
                        break;
                    case FileTypeEnum.LOG:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumLOG, retStr);
                        break;
                    case FileTypeEnum.M21FM:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumM21FM, retStr);
                        break;
                    case FileTypeEnum.M3FM:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumM3FM, retStr);
                        break;
                    case FileTypeEnum.MDF:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumMDF, retStr);
                        break;
                    case FileTypeEnum.MESH:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumMESH, retStr);
                        break;
                    case FileTypeEnum.XLSX:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumXLSX, retStr);
                        break;
                    case FileTypeEnum.DOCX:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumDOCX, retStr);
                        break;
                    case FileTypeEnum.PDF:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumPDF, retStr);
                        break;
                    case FileTypeEnum.JPG:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumJPG, retStr);
                        break;
                    case FileTypeEnum.JPEG:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumJPEG, retStr);
                        break;
                    case FileTypeEnum.GIF:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumGIF, retStr);
                        break;
                    case FileTypeEnum.PNG:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumPNG, retStr);
                        break;
                    case FileTypeEnum.HTML:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumHTML, retStr);
                        break;
                    case FileTypeEnum.TXT:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumTXT, retStr);
                        break;
                    case FileTypeEnum.XYZ:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumXYZ, retStr);
                        break;
                    case FileTypeEnum.KML:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumKML, retStr);
                        break;
                    case FileTypeEnum.CSV:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumCSV, retStr);
                        break;
                    case FileTypeEnum.WMV:
                        Assert.Equal(CSSPCultureEnumsRes.FileTypeEnumWMV, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_InfrastructureTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), i);

                switch ((InfrastructureTypeEnum)i)
                {
                    case InfrastructureTypeEnum.WWTP:
                        Assert.Equal(CSSPCultureEnumsRes.InfrastructureTypeEnumWWTP, retStr);
                        break;
                    case InfrastructureTypeEnum.LiftStation:
                        Assert.Equal(CSSPCultureEnumsRes.InfrastructureTypeEnumLiftStation, retStr);
                        break;
                    case InfrastructureTypeEnum.Other:
                        Assert.Equal(CSSPCultureEnumsRes.InfrastructureTypeEnumOther, retStr);
                        break;
                    case InfrastructureTypeEnum.SeeOtherMunicipality:
                        Assert.Equal(CSSPCultureEnumsRes.InfrastructureTypeEnumSeeOtherMunicipality, retStr);
                        break;
                    case InfrastructureTypeEnum.LineOverflow:
                        Assert.Equal(CSSPCultureEnumsRes.InfrastructureTypeEnumLineOverflow, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_KMZActionEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), i);

                switch ((KMZActionEnum)i)
                {
                    case KMZActionEnum.DoNothing:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumDoNothing, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZContourAnimation:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZContourAnimation, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZContourLimit:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZContourLimit, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZCurrentAnimation:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZCurrentAnimation, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZCurrentMaximum:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZCurrentMaximum, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZMesh:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZMesh, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZStudyArea:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZStudyArea, retStr);
                        break;
                    case KMZActionEnum.GenerateKMZBoundaryConditionNodes:
                        Assert.Equal(CSSPCultureEnumsRes.KMZActionEnumGenerateKMZBoundaryConditionNodes, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LaboratoryEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), i);

                switch ((LaboratoryEnum)i)
                {
                    case LaboratoryEnum.ZZ_0:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_0, retStr);
                        break;
                    case LaboratoryEnum.ZZ_1:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_1, retStr);
                        break;
                    case LaboratoryEnum.ZZ_2:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_2, retStr);
                        break;
                    case LaboratoryEnum.ZZ_3:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_3, retStr);
                        break;
                    case LaboratoryEnum.ZZ_4:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_4, retStr);
                        break;
                    case LaboratoryEnum.ZZ_1Q:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_1Q, retStr);
                        break;
                    case LaboratoryEnum.ZZ_2Q:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_2Q, retStr);
                        break;
                    case LaboratoryEnum.ZZ_3Q:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_3Q, retStr);
                        break;
                    case LaboratoryEnum.ZZ_4Q:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_4Q, retStr);
                        break;
                    case LaboratoryEnum.ZZ_5Q:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_5Q, retStr);
                        break;
                    case LaboratoryEnum.ZZ_11BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_11BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_12BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_12BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_13BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_13BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_14BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_14BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_15BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_15BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_16BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_16BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_17BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_17BC, retStr);
                        break;
                    case LaboratoryEnum.ZZ_18BC:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumZZ_18BC, retStr);
                        break;
                    case LaboratoryEnum.MonctonEnvironmentCanada:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumMonctonEnvironmentCanada, retStr);
                        break;
                    case LaboratoryEnum.BIOEnvironmentCanada:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumBIOEnvironmentCanada, retStr);
                        break;
                    case LaboratoryEnum.EasternCharlotteWaterwayLaboratory:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumEasternCharlotteWaterwayLaboratory, retStr);
                        break;
                    case LaboratoryEnum.InstitutDeRechercheSurLesZonesCotieres:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumInstitutDeRechercheSurLesZonesCotieres, retStr);
                        break;
                    case LaboratoryEnum.CentreDeRechercheSurLesAliments:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumCentreDeRechercheSurLesAliments, retStr);
                        break;
                    case LaboratoryEnum.CaraquetMobileLaboratoryEnvironmentCanada:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumCaraquetMobileLaboratoryEnvironmentCanada, retStr);
                        break;
                    case LaboratoryEnum.MaxxamAnalyticsBedford:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumMaxxamAnalyticsBedford, retStr);
                        break;
                    case LaboratoryEnum.MaxxamAnalyticsSydney:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumMaxxamAnalyticsSydney, retStr);
                        break;
                    case LaboratoryEnum.PEIAnalyticalLaboratory:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumPEIAnalyticalLaboratory, retStr);
                        break;
                    case LaboratoryEnum.NLMobileLaboratory:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumNLMobileLaboratory, retStr);
                        break;
                    case LaboratoryEnum.AvalonLaboratoriesInc:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumAvalonLaboratoriesInc, retStr);
                        break;
                    case LaboratoryEnum.Maxxam:
                        Assert.Equal(CSSPCultureEnumsRes.LaboratoryEnumMaxxam, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LabSheetStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), i);

                switch ((LabSheetStatusEnum)i)
                {
                    case LabSheetStatusEnum.Created:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetStatusEnumCreated, retStr);
                        break;
                    case LabSheetStatusEnum.Transferred:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetStatusEnumTransferred, retStr);
                        break;
                    case LabSheetStatusEnum.Accepted:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetStatusEnumAccepted, retStr);
                        break;
                    case LabSheetStatusEnum.Rejected:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetStatusEnumRejected, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LabSheetTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), i);

                switch ((LabSheetTypeEnum)i)
                {
                    case LabSheetTypeEnum.A1:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetTypeEnumA1, retStr);
                        break;
                    case LabSheetTypeEnum.LTB:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetTypeEnumLTB, retStr);
                        break;
                    case LabSheetTypeEnum.EC:
                        Assert.Equal(CSSPCultureEnumsRes.LabSheetTypeEnumEC, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LanguageEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LanguageEnum), i);

                switch ((LanguageEnum)i)
                {
                    case LanguageEnum.en:
                        Assert.Equal(CSSPCultureEnumsRes.LanguageEnumen, retStr);
                        break;
                    case LanguageEnum.fr:
                        Assert.Equal(CSSPCultureEnumsRes.LanguageEnumfr, retStr);
                        break;
                    case LanguageEnum.enAndfr:
                        Assert.Equal(CSSPCultureEnumsRes.LanguageEnumenAndfr, retStr);
                        break;
                    case LanguageEnum.es:
                        Assert.Equal(CSSPCultureEnumsRes.LanguageEnumes, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LocalDBCommandEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LocalDBCommandEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LocalDBCommandEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LocalDBCommandEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LocalDBCommandEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LocalDBCommandEnum), i);

                switch ((LocalDBCommandEnum)i)
                {
                    case LocalDBCommandEnum.Change:
                        Assert.Equal(CSSPCultureEnumsRes.LocalDBCommandEnumChange, retStr);
                        break;
                    case LocalDBCommandEnum.New:
                        Assert.Equal(CSSPCultureEnumsRes.LocalDBCommandEnumNew, retStr);
                        break;
                    case LocalDBCommandEnum.Delete:
                        Assert.Equal(CSSPCultureEnumsRes.LocalDBCommandEnumDelete, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_LogCommandEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), i);

                switch ((LogCommandEnum)i)
                {
                    case LogCommandEnum.Add:
                        Assert.Equal(CSSPCultureEnumsRes.LogCommandEnumAdd, retStr);
                        break;
                    case LogCommandEnum.Change:
                        Assert.Equal(CSSPCultureEnumsRes.LogCommandEnumChange, retStr);
                        break;
                    case LogCommandEnum.Delete:
                        Assert.Equal(CSSPCultureEnumsRes.LogCommandEnumDelete, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MapInfoDrawTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), i);

                switch ((MapInfoDrawTypeEnum)i)
                {
                    case MapInfoDrawTypeEnum.Point:
                        Assert.Equal(CSSPCultureEnumsRes.MapInfoDrawTypeEnumPoint, retStr);
                        break;
                    case MapInfoDrawTypeEnum.Polyline:
                        Assert.Equal(CSSPCultureEnumsRes.MapInfoDrawTypeEnumPolyline, retStr);
                        break;
                    case MapInfoDrawTypeEnum.Polygon:
                        Assert.Equal(CSSPCultureEnumsRes.MapInfoDrawTypeEnumPolygon, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MapSizeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MapSizeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MapSizeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MapSizeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MapSizeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MapSizeEnum), i);

                switch ((MapSizeEnum)i)
                {
                    case MapSizeEnum.Size30:
                        Assert.Equal(CSSPCultureEnumsRes.MapSizeEnumSize30, retStr);
                        break;
                    case MapSizeEnum.Size40:
                        Assert.Equal(CSSPCultureEnumsRes.MapSizeEnumSize40, retStr);
                        break;
                    case MapSizeEnum.Size50:
                        Assert.Equal(CSSPCultureEnumsRes.MapSizeEnumSize50, retStr);
                        break;
                    case MapSizeEnum.Size60:
                        Assert.Equal(CSSPCultureEnumsRes.MapSizeEnumSize60, retStr);
                        break;
                    case MapSizeEnum.Size70:
                        Assert.Equal(CSSPCultureEnumsRes.MapSizeEnumSize70, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MikeBoundaryConditionLevelOrVelocityEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i);

                switch ((MikeBoundaryConditionLevelOrVelocityEnum)i)
                {
                    case MikeBoundaryConditionLevelOrVelocityEnum.Level:
                        Assert.Equal(CSSPCultureEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumLevel, retStr);
                        break;
                    case MikeBoundaryConditionLevelOrVelocityEnum.Velocity:
                        Assert.Equal(CSSPCultureEnumsRes.MikeBoundaryConditionLevelOrVelocityEnumVelocity, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MikeScenarioSpecialResultKMLTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), i);

                switch ((MikeScenarioSpecialResultKMLTypeEnum)i)
                {
                    case MikeScenarioSpecialResultKMLTypeEnum.Mesh:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSpecialResultKMLTypeEnumMesh, retStr);
                        break;
                    case MikeScenarioSpecialResultKMLTypeEnum.StudyArea:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSpecialResultKMLTypeEnumStudyArea, retStr);
                        break;
                    case MikeScenarioSpecialResultKMLTypeEnum.BoundaryConditions:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSpecialResultKMLTypeEnumBoundaryConditions, retStr);
                        break;
                    case MikeScenarioSpecialResultKMLTypeEnum.PollutionLimit:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionLimit, retStr);
                        break;
                    case MikeScenarioSpecialResultKMLTypeEnum.PollutionAnimation:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSpecialResultKMLTypeEnumPollutionAnimation, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MikeScenarioSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MikeScenarioSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MikeScenarioSubComponentEnum), i);

                switch ((MikeScenarioSubComponentEnum)i)
                {
                    case MikeScenarioSubComponentEnum.GeneralParameters:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSubComponentEnumGeneralParameters, retStr);
                        break;
                    case MikeScenarioSubComponentEnum.Sources:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSubComponentEnumSources, retStr);
                        break;
                    case MikeScenarioSubComponentEnum.InputSummary:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSubComponentEnumInputSummary, retStr);
                        break;
                    case MikeScenarioSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSubComponentEnumFiles, retStr);
                        break;
                    case MikeScenarioSubComponentEnum.GeneralResults:
                        Assert.Equal(CSSPCultureEnumsRes.MikeScenarioSubComponentEnumGeneralResults, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MWQMRunSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MWQMRunSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMRunSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMRunSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMRunSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MWQMRunSubComponentEnum), i);

                switch ((MWQMRunSubComponentEnum)i)
                {
                    case MWQMRunSubComponentEnum.Information:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMRunSubComponentEnumInformation, retStr);
                        break;
                    case MWQMRunSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMRunSubComponentEnumFiles, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MWQMSiteLatestClassificationEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), i);

                switch ((MWQMSiteLatestClassificationEnum)i)
                {
                    case MWQMSiteLatestClassificationEnum.Approved:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumApproved, retStr);
                        break;
                    case MWQMSiteLatestClassificationEnum.ConditionallyApproved:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumConditionallyApproved, retStr);
                        break;
                    case MWQMSiteLatestClassificationEnum.Restricted:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumRestricted, retStr);
                        break;
                    case MWQMSiteLatestClassificationEnum.ConditionallyRestricted:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumConditionallyRestricted, retStr);
                        break;
                    case MWQMSiteLatestClassificationEnum.Prohibited:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumProhibited, retStr);
                        break;
                    case MWQMSiteLatestClassificationEnum.Unclassified:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteLatestClassificationEnumUnclassified, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MWQMSiteSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMSiteSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MWQMSiteSubComponentEnum), i);

                switch ((MWQMSiteSubComponentEnum)i)
                {
                    case MWQMSiteSubComponentEnum.Information:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteSubComponentEnumInformation, retStr);
                        break;
                    case MWQMSiteSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.MWQMSiteSubComponentEnumFiles, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_MunicipalitySubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(MunicipalitySubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MunicipalitySubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(MunicipalitySubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(MunicipalitySubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(MunicipalitySubComponentEnum), i);

                switch ((MunicipalitySubComponentEnum)i)
                {
                    case MunicipalitySubComponentEnum.Infrastructures:
                        Assert.Equal(CSSPCultureEnumsRes.MunicipalitySubComponentEnumInfrastructures, retStr);
                        break;
                    case MunicipalitySubComponentEnum.MIKEScenarios:
                        Assert.Equal(CSSPCultureEnumsRes.MunicipalitySubComponentEnumMIKEScenarios, retStr);
                        break;
                    case MunicipalitySubComponentEnum.Contacts:
                        Assert.Equal(CSSPCultureEnumsRes.MunicipalitySubComponentEnumContacts, retStr);
                        break;
                    case MunicipalitySubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.MunicipalitySubComponentEnumFiles, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PolSourceInactiveReasonEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), i);

                switch ((PolSourceInactiveReasonEnum)i)
                {
                    case PolSourceInactiveReasonEnum.Abandoned:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceInactiveReasonEnumAbandoned, retStr);
                        break;
                    case PolSourceInactiveReasonEnum.Closed:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceInactiveReasonEnumClosed, retStr);
                        break;
                    case PolSourceInactiveReasonEnum.Removed:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceInactiveReasonEnumRemoved, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PolSourceIssueRiskEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), i);

                switch ((PolSourceIssueRiskEnum)i)
                {
                    case PolSourceIssueRiskEnum.LowRisk:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceIssueRiskEnumLowRisk, retStr);
                        break;
                    case PolSourceIssueRiskEnum.ModerateRisk:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceIssueRiskEnumModerateRisk, retStr);
                        break;
                    case PolSourceIssueRiskEnum.HighRisk:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceIssueRiskEnumHighRisk, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PolSourceSiteSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PolSourceSiteSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceSiteSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PolSourceSiteSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceSiteSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PolSourceSiteSubComponentEnum), i);

                switch ((PolSourceSiteSubComponentEnum)i)
                {
                    case PolSourceSiteSubComponentEnum.Information:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceSiteSubComponentEnumInformation, retStr);
                        break;
                    case PolSourceSiteSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.PolSourceSiteSubComponentEnumFiles, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PositionEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PositionEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PositionEnum), i);

                switch ((PositionEnum)i)
                {
                    case PositionEnum.LeftBottom:
                        Assert.Equal(CSSPCultureEnumsRes.PositionEnumLeftBottom, retStr);
                        break;
                    case PositionEnum.RightBottom:
                        Assert.Equal(CSSPCultureEnumsRes.PositionEnumRightBottom, retStr);
                        break;
                    case PositionEnum.LeftTop:
                        Assert.Equal(CSSPCultureEnumsRes.PositionEnumLeftTop, retStr);
                        break;
                    case PositionEnum.RightTop:
                        Assert.Equal(CSSPCultureEnumsRes.PositionEnumRightTop, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PreliminaryTreatmentTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), i);

                switch ((PreliminaryTreatmentTypeEnum)i)
                {
                    case PreliminaryTreatmentTypeEnum.NotApplicable:
                        Assert.Equal(CSSPCultureEnumsRes.PreliminaryTreatmentTypeEnumNotApplicable, retStr);
                        break;
                    case PreliminaryTreatmentTypeEnum.BarScreen:
                        Assert.Equal(CSSPCultureEnumsRes.PreliminaryTreatmentTypeEnumBarScreen, retStr);
                        break;
                    case PreliminaryTreatmentTypeEnum.Grinder:
                        Assert.Equal(CSSPCultureEnumsRes.PreliminaryTreatmentTypeEnumGrinder, retStr);
                        break;
                    case PreliminaryTreatmentTypeEnum.MechanicalScreening:
                        Assert.Equal(CSSPCultureEnumsRes.PreliminaryTreatmentTypeEnumMechanicalScreening, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PrimaryTreatmentTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), i);

                switch ((PrimaryTreatmentTypeEnum)i)
                {
                    case PrimaryTreatmentTypeEnum.NotApplicable:
                        Assert.Equal(CSSPCultureEnumsRes.PrimaryTreatmentTypeEnumNotApplicable, retStr);
                        break;
                    case PrimaryTreatmentTypeEnum.Sedimentation:
                        Assert.Equal(CSSPCultureEnumsRes.PrimaryTreatmentTypeEnumSedimentation, retStr);
                        break;
                    case PrimaryTreatmentTypeEnum.ChemicalCoagulation:
                        Assert.Equal(CSSPCultureEnumsRes.PrimaryTreatmentTypeEnumChemicalCoagulation, retStr);
                        break;
                    case PrimaryTreatmentTypeEnum.Filtration:
                        Assert.Equal(CSSPCultureEnumsRes.PrimaryTreatmentTypeEnumFiltration, retStr);
                        break;
                    case PrimaryTreatmentTypeEnum.PrimaryClarification:
                        Assert.Equal(CSSPCultureEnumsRes.PrimaryTreatmentTypeEnumPrimaryClarification, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_PropertyTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), i);

                switch ((PropertyTypeEnum)i)
                {
                    case PropertyTypeEnum.Int:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumInt, retStr);
                        break;
                    case PropertyTypeEnum.Double:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumDouble, retStr);
                        break;
                    case PropertyTypeEnum.String:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumString, retStr);
                        break;
                    case PropertyTypeEnum.Boolean:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumBoolean, retStr);
                        break;
                    case PropertyTypeEnum.DateTime:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumDateTime, retStr);
                        break;
                    case PropertyTypeEnum.Enum:
                        Assert.Equal(CSSPCultureEnumsRes.PropertyTypeEnumEnum, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ProvinceSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ProvinceSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ProvinceSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ProvinceSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ProvinceSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ProvinceSubComponentEnum), i);

                switch ((ProvinceSubComponentEnum)i)
                {
                    case ProvinceSubComponentEnum.Areas:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumAreas, retStr);
                        break;
                    case ProvinceSubComponentEnum.Municipalities:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumMunicipalities, retStr);
                        break;
                    case ProvinceSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumFiles, retStr);
                        break;
                    case ProvinceSubComponentEnum.SamplingPlan:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumSamplingPlan, retStr);
                        break;
                    case ProvinceSubComponentEnum.OpenData:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumOpenData, retStr);
                        break;
                    case ProvinceSubComponentEnum.ProvinceTools:
                        Assert.Equal(CSSPCultureEnumsRes.ProvinceSubComponentEnumProvinceTools, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportConditionEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), i);

                switch ((ReportConditionEnum)i)
                {
                    case ReportConditionEnum.ReportConditionTrue:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionTrue, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionFalse:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionFalse, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionContain:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionContain, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionStart:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionStart, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionEnd:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionEnd, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionBigger:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionBigger, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionSmaller:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionSmaller, retStr);
                        break;
                    case ReportConditionEnum.ReportConditionEqual:
                        Assert.Equal(CSSPCultureEnumsRes.ReportConditionEnumReportConditionEqual, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportFieldTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), i);

                switch ((ReportFieldTypeEnum)i)
                {
                    case ReportFieldTypeEnum.NumberWhole:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumNumberWhole, retStr);
                        break;
                    case ReportFieldTypeEnum.NumberWithDecimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumNumberWithDecimal, retStr);
                        break;
                    case ReportFieldTypeEnum.DateAndTime:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumDateAndTime, retStr);
                        break;
                    case ReportFieldTypeEnum.Text:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumText, retStr);
                        break;
                    case ReportFieldTypeEnum.TrueOrFalse:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTrueOrFalse, retStr);
                        break;
                    case ReportFieldTypeEnum.FilePurpose:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumFilePurpose, retStr);
                        break;
                    case ReportFieldTypeEnum.FileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumFileType, retStr);
                        break;
                    case ReportFieldTypeEnum.TranslationStatus:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTranslationStatus, retStr);
                        break;
                    case ReportFieldTypeEnum.BoxModelResultType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumBoxModelResultType, retStr);
                        break;
                    case ReportFieldTypeEnum.InfrastructureType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumInfrastructureType, retStr);
                        break;
                    case ReportFieldTypeEnum.FacilityType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumFacilityType, retStr);
                        break;
                    case ReportFieldTypeEnum.AerationType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumAerationType, retStr);
                        break;
                    case ReportFieldTypeEnum.PreliminaryTreatmentType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumPreliminaryTreatmentType, retStr);
                        break;
                    case ReportFieldTypeEnum.PrimaryTreatmentType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumPrimaryTreatmentType, retStr);
                        break;
                    case ReportFieldTypeEnum.SecondaryTreatmentType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSecondaryTreatmentType, retStr);
                        break;
                    case ReportFieldTypeEnum.TertiaryTreatmentType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTertiaryTreatmentType, retStr);
                        break;
                    case ReportFieldTypeEnum.TreatmentType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTreatmentType, retStr);
                        break;
                    case ReportFieldTypeEnum.DisinfectionType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumDisinfectionType, retStr);
                        break;
                    case ReportFieldTypeEnum.CollectionSystemType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumCollectionSystemType, retStr);
                        break;
                    case ReportFieldTypeEnum.AlarmSystemType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumAlarmSystemType, retStr);
                        break;
                    case ReportFieldTypeEnum.ScenarioStatus:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumScenarioStatus, retStr);
                        break;
                    case ReportFieldTypeEnum.StorageDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumStorageDataType, retStr);
                        break;
                    case ReportFieldTypeEnum.Language:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumLanguage, retStr);
                        break;
                    case ReportFieldTypeEnum.SampleType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSampleType, retStr);
                        break;
                    case ReportFieldTypeEnum.BeaufortScale:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumBeaufortScale, retStr);
                        break;
                    case ReportFieldTypeEnum.AnalyzeMethod:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumAnalyzeMethod, retStr);
                        break;
                    case ReportFieldTypeEnum.SampleMatrix:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSampleMatrix, retStr);
                        break;
                    case ReportFieldTypeEnum.Laboratory:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumLaboratory, retStr);
                        break;
                    case ReportFieldTypeEnum.SampleStatus:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSampleStatus, retStr);
                        break;
                    case ReportFieldTypeEnum.SamplingPlanType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSamplingPlanType, retStr);
                        break;
                    case ReportFieldTypeEnum.LabSheetSampleType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumLabSheetSampleType, retStr);
                        break;
                    case ReportFieldTypeEnum.LabSheetType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumLabSheetType, retStr);
                        break;
                    case ReportFieldTypeEnum.LabSheetStatus:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumLabSheetStatus, retStr);
                        break;
                    case ReportFieldTypeEnum.PolSourceInactiveReason:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumPolSourceInactiveReason, retStr);
                        break;
                    case ReportFieldTypeEnum.PolSourceObsInfo:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumPolSourceObsInfo, retStr);
                        break;
                    case ReportFieldTypeEnum.AddressType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumAddressType, retStr);
                        break;
                    case ReportFieldTypeEnum.StreetType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumStreetType, retStr);
                        break;
                    case ReportFieldTypeEnum.ContactTitle:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumContactTitle, retStr);
                        break;
                    case ReportFieldTypeEnum.EmailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumEmailType, retStr);
                        break;
                    case ReportFieldTypeEnum.TelType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTelType, retStr);
                        break;
                    case ReportFieldTypeEnum.TideText:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTideText, retStr);
                        break;
                    case ReportFieldTypeEnum.TideDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumTideDataType, retStr);
                        break;
                    case ReportFieldTypeEnum.SpecialTableType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumSpecialTableType, retStr);
                        break;
                    case ReportFieldTypeEnum.MWQMSiteLatestClassification:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumMWQMSiteLatestClassification, retStr);
                        break;
                    case ReportFieldTypeEnum.PolSourceIssueRisk:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumPolSourceIssueRisk, retStr);
                        break;
                    case ReportFieldTypeEnum.MikeScenarioSpecialResultKMLType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFieldTypeEnumMikeScenarioSpecialResultKMLType, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportFileTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), i);

                switch ((ReportFileTypeEnum)i)
                {
                    case ReportFileTypeEnum.CSV:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFileTypeEnumCSV, retStr);
                        break;
                    case ReportFileTypeEnum.Word:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFileTypeEnumWord, retStr);
                        break;
                    case ReportFileTypeEnum.Excel:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFileTypeEnumExcel, retStr);
                        break;
                    case ReportFileTypeEnum.KML:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFileTypeEnumKML, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportFormatingDateEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), i);

                switch ((ReportFormatingDateEnum)i)
                {
                    case ReportFormatingDateEnum.ReportFormatingDateYearOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateMonthDecimalOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthDecimalOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateMonthShortTextOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthShortTextOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateMonthFullTextOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateMonthFullTextOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateDayOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateDayOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateHourOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateHourOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateMinuteOnly:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateMinuteOnly, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDay:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDay, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDay:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDay, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDay:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDay, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDayHourMinute:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthDecimalDayHourMinute, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDayHourMinute:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthShortTextDayHourMinute, retStr);
                        break;
                    case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDayHourMinute:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingDateEnumReportFormatingDateYearMonthFullTextDayHourMinute, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportFormatingNumberEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), i);

                switch ((ReportFormatingNumberEnum)i)
                {
                    case ReportFormatingNumberEnum.ReportFormatingNumber0Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber0Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber1Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber1Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber2Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber2Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber3Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber3Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber4Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber4Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber5Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber5Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumber6Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumber6Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific0Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific0Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific1Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific1Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific2Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific2Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific3Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific3Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific4Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific4Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific5Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific5Decimal, retStr);
                        break;
                    case ReportFormatingNumberEnum.ReportFormatingNumberScientific6Decimal:
                        Assert.Equal(CSSPCultureEnumsRes.ReportFormatingNumberEnumReportFormatingNumberScientific6Decimal, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportGenerateObjectsKeywordEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), i);

                switch ((ReportGenerateObjectsKeywordEnum)i)
                {
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RE_EVALUATION_COVER_PAGE:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RE_EVALUATION_COVER_PAGE, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_ALL:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_ALL, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_WET:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_WET, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_DRY:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_FC_SUMMARY_STAT_DRY, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_DATA_AVAILABILITY:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_DATA_AVAILABILITY, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_FC_TABLE:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_FC_TABLE, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_SALINITY_TABLE:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_SALINITY_TABLE, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES_COMPACT:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITIES_COMPACT, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES_FULL:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITIES_FULL, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_ECCC_AND_SWCP_LOGO:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_ECCC_AND_SWCP_LOGO, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CSSP_LOGO:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CSSP_LOGO, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP, retStr);
                        break;
                    case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP:
                        Assert.Equal(CSSPCultureEnumsRes.ReportGenerateObjectsKeywordEnumSUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportSortingEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), i);

                switch ((ReportSortingEnum)i)
                {
                    case ReportSortingEnum.ReportSortingAscending:
                        Assert.Equal(CSSPCultureEnumsRes.ReportSortingEnumReportSortingAscending, retStr);
                        break;
                    case ReportSortingEnum.ReportSortingDescending:
                        Assert.Equal(CSSPCultureEnumsRes.ReportSortingEnumReportSortingDescending, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportTreeNodeSubTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), i);

                switch ((ReportTreeNodeSubTypeEnum)i)
                {
                    case ReportTreeNodeSubTypeEnum.TableSelectable:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeSubTypeEnumTableSelectable, retStr);
                        break;
                    case ReportTreeNodeSubTypeEnum.Field:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeSubTypeEnumField, retStr);
                        break;
                    case ReportTreeNodeSubTypeEnum.FieldsHolder:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeSubTypeEnumFieldsHolder, retStr);
                        break;
                    case ReportTreeNodeSubTypeEnum.TableNotSelectable:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeSubTypeEnumTableNotSelectable, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ReportTreeNodeTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), i);

                switch ((ReportTreeNodeTypeEnum)i)
                {
                    case ReportTreeNodeTypeEnum.ReportRootType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportRootType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportCountryType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportCountryType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportProvinceType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportProvinceType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportAreaType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportAreaType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSectorType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSectorType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportPolSourceSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportRootFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportRootFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportInfrastructureType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportBoxModelType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportBoxModelType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeScenarioType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeSourceType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMSiteSampleType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteSampleType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsIssueType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteObsIssueType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeScenarioGeneralParameterType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioGeneralParameterType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityContactType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportConditionType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportConditionType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportStatisticType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportStatisticType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportFieldsType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportFieldsType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportFieldType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportFieldType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportPolSourceSiteAddressType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteAddressType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityContactTelType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactTelType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityContactEmailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactEmailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportBoxModelResultType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportBoxModelResultType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportClimateSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportClimateSiteDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportClimateSiteDataType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportHydrometricSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportHydrometricSiteDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteDataType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveValueType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportHydrometricSiteRatingCurveValueType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportInfrastructureAddressType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureAddressType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetTubeMPNDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorLabSheetTubeMPNDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunSampleType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunSampleType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportCountryFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportCountryFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportProvinceFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportProvinceFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportAreaFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportAreaFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSectorFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSectorFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMSiteFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportPolSourceSiteFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportPolSourceSiteFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportInfrastructureFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportInfrastructureFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeScenarioFileType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioFileType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeSourceStartEndType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeSourceStartEndType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetTubeMPNDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMRunLabSheetTubeMPNDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetTubeMPNDetailType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanLabSheetTubeMPNDetailType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSamplingPlanSubsectorSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeBoundaryConditionType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeBoundaryConditionType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioAmbientType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioAmbientType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioResultType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportVisualPlumesScenarioResultType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMPNLookupType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMPNLookupType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMWQMSiteStartAndEndType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMWQMSiteStartAndEndType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorTideSiteDataType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportOrderType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportOrderType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportFormatType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportFormatType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMunicipalityContactAddressType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMunicipalityContactAddressType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteDataType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteDataType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorClimateSiteDataType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveValueType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorHydrometricSiteRatingCurveValueType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportSubsectorSpecialTableType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportSubsectorSpecialTableType, retStr);
                        break;
                    case ReportTreeNodeTypeEnum.ReportMikeScenarioSpecialResultKMLType:
                        Assert.Equal(CSSPCultureEnumsRes.ReportTreeNodeTypeEnumReportMikeScenarioSpecialResultKMLType, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_RootSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(RootSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(RootSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(RootSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(RootSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(RootSubComponentEnum), i);

                switch ((RootSubComponentEnum)i)
                {
                    case RootSubComponentEnum.Countries:
                        Assert.Equal(CSSPCultureEnumsRes.RootSubComponentEnumCountries, retStr);
                        break;
                    case RootSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.RootSubComponentEnumFiles, retStr);
                        break;
                    case RootSubComponentEnum.ExportArcGIS:
                        Assert.Equal(CSSPCultureEnumsRes.RootSubComponentEnumExportArcGIS, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_RunningOnEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(RunningOnEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(RunningOnEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(RunningOnEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(RunningOnEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(RunningOnEnum), i);

                switch ((RunningOnEnum)i)
                {
                    case RunningOnEnum.Azure:
                        Assert.Equal(CSSPCultureEnumsRes.RunningOnEnumAzure, retStr);
                        break;
                    case RunningOnEnum.Local:
                        Assert.Equal(CSSPCultureEnumsRes.RunningOnEnumLocal, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SameDayNextDayEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), i);

                switch ((SameDayNextDayEnum)i)
                {
                    case SameDayNextDayEnum.SameDay:
                        Assert.Equal(CSSPCultureEnumsRes.SameDayNextDayEnumSameDay, retStr);
                        break;
                    case SameDayNextDayEnum.NextDay:
                        Assert.Equal(CSSPCultureEnumsRes.SameDayNextDayEnumNextDay, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SampleMatrixEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), i);

                switch ((SampleMatrixEnum)i)
                {
                    case SampleMatrixEnum.W:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumW, retStr);
                        break;
                    case SampleMatrixEnum.S:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumS, retStr);
                        break;
                    case SampleMatrixEnum.B:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumB, retStr);
                        break;
                    case SampleMatrixEnum.MPNQ:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumMPNQ, retStr);
                        break;
                    case SampleMatrixEnum.SampleMatrix5:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumSampleMatrix5, retStr);
                        break;
                    case SampleMatrixEnum.SampleMatrix6:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumSampleMatrix6, retStr);
                        break;
                    case SampleMatrixEnum.Water:
                        Assert.Equal(CSSPCultureEnumsRes.SampleMatrixEnumWater, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SampleStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), i);

                switch ((SampleStatusEnum)i)
                {
                    case SampleStatusEnum.Active:
                        Assert.Equal(CSSPCultureEnumsRes.SampleStatusEnumActive, retStr);
                        break;
                    case SampleStatusEnum.Archived:
                        Assert.Equal(CSSPCultureEnumsRes.SampleStatusEnumArchived, retStr);
                        break;
                    case SampleStatusEnum.SampleStatus3:
                        Assert.Equal(CSSPCultureEnumsRes.SampleStatusEnumSampleStatus3, retStr);
                        break;
                    case SampleStatusEnum.SampleStatus4:
                        Assert.Equal(CSSPCultureEnumsRes.SampleStatusEnumSampleStatus4, retStr);
                        break;
                    case SampleStatusEnum.SampleStatus5:
                        Assert.Equal(CSSPCultureEnumsRes.SampleStatusEnumSampleStatus5, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SampleTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), i);

                switch ((SampleTypeEnum)i)
                {
                    case SampleTypeEnum.DailyDuplicate:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumDailyDuplicate, retStr);
                        break;
                    case SampleTypeEnum.Infrastructure:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumInfrastructure, retStr);
                        break;
                    case SampleTypeEnum.IntertechDuplicate:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumIntertechDuplicate, retStr);
                        break;
                    case SampleTypeEnum.IntertechRead:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumIntertechRead, retStr);
                        break;
                    case SampleTypeEnum.RainCMP:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumRainCMP, retStr);
                        break;
                    case SampleTypeEnum.RainRun:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumRainRun, retStr);
                        break;
                    case SampleTypeEnum.ReopeningEmergencyRain:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumReopeningEmergencyRain, retStr);
                        break;
                    case SampleTypeEnum.ReopeningSpill:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumReopeningSpill, retStr);
                        break;
                    case SampleTypeEnum.Routine:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumRoutine, retStr);
                        break;
                    case SampleTypeEnum.Sanitary:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumSanitary, retStr);
                        break;
                    case SampleTypeEnum.Study:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumStudy, retStr);
                        break;
                    case SampleTypeEnum.Sediment:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumSediment, retStr);
                        break;
                    case SampleTypeEnum.Bivalve:
                        Assert.Equal(CSSPCultureEnumsRes.SampleTypeEnumBivalve, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SamplingPlanTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), i);

                switch ((SamplingPlanTypeEnum)i)
                {
                    case SamplingPlanTypeEnum.Subsector:
                        Assert.Equal(CSSPCultureEnumsRes.SamplingPlanTypeEnumSubsector, retStr);
                        break;
                    case SamplingPlanTypeEnum.Municipality:
                        Assert.Equal(CSSPCultureEnumsRes.SamplingPlanTypeEnumMunicipality, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ScenarioStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), i);

                switch ((ScenarioStatusEnum)i)
                {
                    case ScenarioStatusEnum.Normal:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumNormal, retStr);
                        break;
                    case ScenarioStatusEnum.Copying:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumCopying, retStr);
                        break;
                    case ScenarioStatusEnum.Copied:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumCopied, retStr);
                        break;
                    case ScenarioStatusEnum.Changing:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumChanging, retStr);
                        break;
                    case ScenarioStatusEnum.Changed:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumChanged, retStr);
                        break;
                    case ScenarioStatusEnum.AskToRun:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumAskToRun, retStr);
                        break;
                    case ScenarioStatusEnum.Running:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumRunning, retStr);
                        break;
                    case ScenarioStatusEnum.Completed:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumCompleted, retStr);
                        break;
                    case ScenarioStatusEnum.Cancelled:
                        Assert.Equal(CSSPCultureEnumsRes.ScenarioStatusEnumCancelled, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SearchTagEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), i);

                switch ((SearchTagEnum)i)
                {
                    case SearchTagEnum.c:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumc, retStr);
                        break;
                    case SearchTagEnum.e:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnume, retStr);
                        break;
                    case SearchTagEnum.t:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumt, retStr);
                        break;
                    case SearchTagEnum.fi:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfi, retStr);
                        break;
                    case SearchTagEnum.fp:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfp, retStr);
                        break;
                    case SearchTagEnum.frg:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfrg, retStr);
                        break;
                    case SearchTagEnum.ftg:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumftg, retStr);
                        break;
                    case SearchTagEnum.fpdf:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfpdf, retStr);
                        break;
                    case SearchTagEnum.fdocx:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfdocx, retStr);
                        break;
                    case SearchTagEnum.fxlsx:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfxlsx, retStr);
                        break;
                    case SearchTagEnum.fkmz:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfkmz, retStr);
                        break;
                    case SearchTagEnum.fxyz:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfxyz, retStr);
                        break;
                    case SearchTagEnum.fdfs:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfdfs, retStr);
                        break;
                    case SearchTagEnum.fmike:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfmike, retStr);
                        break;
                    case SearchTagEnum.fmdf:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfmdf, retStr);
                        break;
                    case SearchTagEnum.fm21fm:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfm21fm, retStr);
                        break;
                    case SearchTagEnum.fm3fm:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfm3fm, retStr);
                        break;
                    case SearchTagEnum.fmesh:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfmesh, retStr);
                        break;
                    case SearchTagEnum.flog:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumflog, retStr);
                        break;
                    case SearchTagEnum.ftxt:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumftxt, retStr);
                        break;
                    case SearchTagEnum.m:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumm, retStr);
                        break;
                    case SearchTagEnum.p:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnump, retStr);
                        break;
                    case SearchTagEnum.ms:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumms, retStr);
                        break;
                    case SearchTagEnum.cs:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumcs, retStr);
                        break;
                    case SearchTagEnum.hs:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumhs, retStr);
                        break;
                    case SearchTagEnum.ts:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumts, retStr);
                        break;
                    case SearchTagEnum.ww:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumww, retStr);
                        break;
                    case SearchTagEnum.ls:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumls, retStr);
                        break;
                    case SearchTagEnum.st:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumst, retStr);
                        break;
                    case SearchTagEnum.ps:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumps, retStr);
                        break;
                    case SearchTagEnum.a:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnuma, retStr);
                        break;
                    case SearchTagEnum.s:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnums, retStr);
                        break;
                    case SearchTagEnum.ss:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumss, retStr);
                        break;
                    case SearchTagEnum.u:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumu, retStr);
                        break;
                    case SearchTagEnum.notag:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumnotag, retStr);
                        break;
                    case SearchTagEnum.fcsv:
                        Assert.Equal(CSSPCultureEnumsRes.SearchTagEnumfcsv, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SecondaryTreatmentTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), i);

                switch ((SecondaryTreatmentTypeEnum)i)
                {
                    case SecondaryTreatmentTypeEnum.NotApplicable:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumNotApplicable, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.RotatingBiologicalContactor:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumRotatingBiologicalContactor, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.TricklingFilters:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumTricklingFilters, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.SequencingBatchReactor:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumSequencingBatchReactor, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.OxidationDitch:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumOxidationDitch, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.ExtendedAeration:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumExtendedAeration, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.ContactStabilization:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumContactStabilization, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.PhysicalChemicalProcesses:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumPhysicalChemicalProcesses, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.MovingBedBioReactor:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumMovingBedBioReactor, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.BiologicalAearatedFilters:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumBiologicalAearatedFilters, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.AeratedSubmergedBioFilmReactor:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumAeratedSubmergedBioFilmReactor, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.IntegratedFixedFilmActivatedSludge:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumIntegratedFixedFilmActivatedSludge, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.ActivatedSludge:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumActivatedSludge, retStr);
                        break;
                    case SecondaryTreatmentTypeEnum.ExtendedActivatedSludge:
                        Assert.Equal(CSSPCultureEnumsRes.SecondaryTreatmentTypeEnumExtendedActivatedSludge, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SectorSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SectorSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SectorSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SectorSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SectorSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SectorSubComponentEnum), i);

                switch ((SectorSubComponentEnum)i)
                {
                    case SectorSubComponentEnum.Subsectors:
                        Assert.Equal(CSSPCultureEnumsRes.SectorSubComponentEnumSubsectors, retStr);
                        break;
                    case SectorSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.SectorSubComponentEnumFiles, retStr);
                        break;
                    case SectorSubComponentEnum.MIKEScenarios:
                        Assert.Equal(CSSPCultureEnumsRes.SectorSubComponentEnumMIKEScenarios, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ShellSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ShellSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ShellSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ShellSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ShellSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ShellSubComponentEnum), i);

                switch ((ShellSubComponentEnum)i)
                {
                    case ShellSubComponentEnum.Area:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumArea, retStr);
                        break;
                    case ShellSubComponentEnum.Country:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumCountry, retStr);
                        break;
                    case ShellSubComponentEnum.MikeScenario:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumMikeScenario, retStr);
                        break;
                    case ShellSubComponentEnum.Municipality:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumMunicipality, retStr);
                        break;
                    case ShellSubComponentEnum.MWQMRun:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumMWQMRun, retStr);
                        break;
                    case ShellSubComponentEnum.MWQMSite:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumMWQMSite, retStr);
                        break;
                    case ShellSubComponentEnum.PolSourceSite:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumPolSourceSite, retStr);
                        break;
                    case ShellSubComponentEnum.Province:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumProvince, retStr);
                        break;
                    case ShellSubComponentEnum.Root:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumRoot, retStr);
                        break;
                    case ShellSubComponentEnum.Sector:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumSector, retStr);
                        break;
                    case ShellSubComponentEnum.Subsector:
                        Assert.Equal(CSSPCultureEnumsRes.ShellSubComponentEnumSubsector, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SiteTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), i);

                switch ((SiteTypeEnum)i)
                {
                    case SiteTypeEnum.Climate:
                        Assert.Equal(CSSPCultureEnumsRes.SiteTypeEnumClimate, retStr);
                        break;
                    case SiteTypeEnum.Hydrometric:
                        Assert.Equal(CSSPCultureEnumsRes.SiteTypeEnumHydrometric, retStr);
                        break;
                    case SiteTypeEnum.Tide:
                        Assert.Equal(CSSPCultureEnumsRes.SiteTypeEnumTide, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SortOrderAngularEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SortOrderAngularEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SortOrderAngularEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SortOrderAngularEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SortOrderAngularEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SortOrderAngularEnum), i);

                switch ((SortOrderAngularEnum)i)
                {
                    case SortOrderAngularEnum.AreaSectors:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumAreaSectors, retStr);
                        break;
                    case SortOrderAngularEnum.CountryProvinces:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumCountryProvinces, retStr);
                        break;
                    case SortOrderAngularEnum.MunicipalityMIKEScenarios:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumMunicipalityMIKEScenarios, retStr);
                        break;
                    case SortOrderAngularEnum.ProvinceAreas:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumProvinceAreas, retStr);
                        break;
                    case SortOrderAngularEnum.ProvinceMunicipalities:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumProvinceMunicipalities, retStr);
                        break;
                    case SortOrderAngularEnum.RootCountries:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumRootCountries, retStr);
                        break;
                    case SortOrderAngularEnum.SectorSubsectors:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumSectorSubsectors, retStr);
                        break;
                    case SortOrderAngularEnum.SectorMikeScenarios:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumSectorMikeScenarios, retStr);
                        break;
                    case SortOrderAngularEnum.SubsectorMWQMRuns:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumSubsectorMWQMRuns, retStr);
                        break;
                    case SortOrderAngularEnum.SubsectorMWQMSites:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumSubsectorMWQMSites, retStr);
                        break;
                    case SortOrderAngularEnum.SubsectorPolSourceSites:
                        Assert.Equal(CSSPCultureEnumsRes.SortOrderAngularEnumSubsectorPolSourceSites, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SpecialTableTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), i);

                switch ((SpecialTableTypeEnum)i)
                {
                    case SpecialTableTypeEnum.FCDensitiesTable:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumFCDensitiesTable, retStr);
                        break;
                    case SpecialTableTypeEnum.SalinityTable:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumSalinityTable, retStr);
                        break;
                    case SpecialTableTypeEnum.TemperatureTable:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumTemperatureTable, retStr);
                        break;
                    case SpecialTableTypeEnum.GeometricMeanTable:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumGeometricMeanTable, retStr);
                        break;
                    case SpecialTableTypeEnum.MedianTable:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumMedianTable, retStr);
                        break;
                    case SpecialTableTypeEnum.P90Table:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumP90Table, retStr);
                        break;
                    case SpecialTableTypeEnum.PercentOver43Table:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumPercentOver43Table, retStr);
                        break;
                    case SpecialTableTypeEnum.PercentOver260Table:
                        Assert.Equal(CSSPCultureEnumsRes.SpecialTableTypeEnumPercentOver260Table, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_StorageDataTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), i);

                switch ((StorageDataTypeEnum)i)
                {
                    case StorageDataTypeEnum.Archived:
                        Assert.Equal(CSSPCultureEnumsRes.StorageDataTypeEnumArchived, retStr);
                        break;
                    case StorageDataTypeEnum.Forcasted:
                        Assert.Equal(CSSPCultureEnumsRes.StorageDataTypeEnumForcasted, retStr);
                        break;
                    case StorageDataTypeEnum.Observed:
                        Assert.Equal(CSSPCultureEnumsRes.StorageDataTypeEnumObserved, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_StreetTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), i);

                switch ((StreetTypeEnum)i)
                {
                    case StreetTypeEnum.Street:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumStreet, retStr);
                        break;
                    case StreetTypeEnum.Road:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumRoad, retStr);
                        break;
                    case StreetTypeEnum.Avenue:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumAvenue, retStr);
                        break;
                    case StreetTypeEnum.Crescent:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumCrescent, retStr);
                        break;
                    case StreetTypeEnum.Court:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumCourt, retStr);
                        break;
                    case StreetTypeEnum.Alley:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumAlley, retStr);
                        break;
                    case StreetTypeEnum.Drive:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumDrive, retStr);
                        break;
                    case StreetTypeEnum.Blvd:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumBlvd, retStr);
                        break;
                    case StreetTypeEnum.Route:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumRoute, retStr);
                        break;
                    case StreetTypeEnum.Lane:
                        Assert.Equal(CSSPCultureEnumsRes.StreetTypeEnumLane, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_SubsectorSubComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(SubsectorSubComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SubsectorSubComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(SubsectorSubComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(SubsectorSubComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(SubsectorSubComponentEnum), i);

                switch ((SubsectorSubComponentEnum)i)
                {
                    case SubsectorSubComponentEnum.MWQMSites:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumMWQMSites, retStr);
                        break;
                    case SubsectorSubComponentEnum.Analysis:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumAnalysis, retStr);
                        break;
                    case SubsectorSubComponentEnum.MWQMRuns:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumMWQMRuns, retStr);
                        break;
                    case SubsectorSubComponentEnum.PollutionSourceSites:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumPollutionSourceSites, retStr);
                        break;
                    case SubsectorSubComponentEnum.Files:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumFiles, retStr);
                        break;
                    case SubsectorSubComponentEnum.SubsectorTools:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumSubsectorTools, retStr);
                        break;
                    case SubsectorSubComponentEnum.LogBook:
                        Assert.Equal(CSSPCultureEnumsRes.SubsectorSubComponentEnumLogBook, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TelTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), i);

                switch ((TelTypeEnum)i)
                {
                    case TelTypeEnum.Personal:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumPersonal, retStr);
                        break;
                    case TelTypeEnum.Work:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumWork, retStr);
                        break;
                    case TelTypeEnum.Mobile:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumMobile, retStr);
                        break;
                    case TelTypeEnum.Personal2:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumPersonal2, retStr);
                        break;
                    case TelTypeEnum.Work2:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumWork2, retStr);
                        break;
                    case TelTypeEnum.Mobile2:
                        Assert.Equal(CSSPCultureEnumsRes.TelTypeEnumMobile2, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TertiaryTreatmentTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), i);

                switch ((TertiaryTreatmentTypeEnum)i)
                {
                    case TertiaryTreatmentTypeEnum.NotApplicable:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumNotApplicable, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.Adsorption:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumAdsorption, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.Flocculation:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumFlocculation, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.MembraneFiltration:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumMembraneFiltration, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.IonExchange:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumIonExchange, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.ReverseOsmosis:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumReverseOsmosis, retStr);
                        break;
                    case TertiaryTreatmentTypeEnum.BiologicalNutrientRemoval:
                        Assert.Equal(CSSPCultureEnumsRes.TertiaryTreatmentTypeEnumBiologicalNutrientRemoval, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TideDataTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), i);

                switch ((TideDataTypeEnum)i)
                {
                    case TideDataTypeEnum.Min15:
                        Assert.Equal(CSSPCultureEnumsRes.TideDataTypeEnumMin15, retStr);
                        break;
                    case TideDataTypeEnum.Min60:
                        Assert.Equal(CSSPCultureEnumsRes.TideDataTypeEnumMin60, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TideTextEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TideTextEnum), i);

                switch ((TideTextEnum)i)
                {
                    case TideTextEnum.LowTide:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumLowTide, retStr);
                        break;
                    case TideTextEnum.LowTideFalling:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumLowTideFalling, retStr);
                        break;
                    case TideTextEnum.LowTideRising:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumLowTideRising, retStr);
                        break;
                    case TideTextEnum.MidTide:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumMidTide, retStr);
                        break;
                    case TideTextEnum.MidTideFalling:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumMidTideFalling, retStr);
                        break;
                    case TideTextEnum.MidTideRising:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumMidTideRising, retStr);
                        break;
                    case TideTextEnum.HighTide:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumHighTide, retStr);
                        break;
                    case TideTextEnum.HighTideFalling:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumHighTideFalling, retStr);
                        break;
                    case TideTextEnum.HighTideRising:
                        Assert.Equal(CSSPCultureEnumsRes.TideTextEnumHighTideRising, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TopComponentEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TopComponentEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TopComponentEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TopComponentEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TopComponentEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TopComponentEnum), i);

                switch ((TopComponentEnum)i)
                {
                    case TopComponentEnum.Home:
                        Assert.Equal(CSSPCultureEnumsRes.TopComponentEnumHome, retStr);
                        break;
                    case TopComponentEnum.Shell:
                        Assert.Equal(CSSPCultureEnumsRes.TopComponentEnumShell, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TranslationStatusEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), i);

                switch ((TranslationStatusEnum)i)
                {
                    case TranslationStatusEnum.NotTranslated:
                        Assert.Equal(CSSPCultureEnumsRes.TranslationStatusEnumNotTranslated, retStr);
                        break;
                    case TranslationStatusEnum.ElectronicallyTranslated:
                        Assert.Equal(CSSPCultureEnumsRes.TranslationStatusEnumElectronicallyTranslated, retStr);
                        break;
                    case TranslationStatusEnum.Translated:
                        Assert.Equal(CSSPCultureEnumsRes.TranslationStatusEnumTranslated, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TreatmentTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), i);

                switch ((TreatmentTypeEnum)i)
                {
                    case TreatmentTypeEnum.ActivatedSludge:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumActivatedSludge, retStr);
                        break;
                    case TreatmentTypeEnum.ActivatedSludgeWithBiofilter:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumActivatedSludgeWithBiofilter, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonNoAeration1Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonNoAeration1Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonNoAeration2Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonNoAeration2Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonNoAeration3Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonNoAeration3Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonNoAeration4Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonNoAeration4Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonNoAeration5Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonNoAeration5Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration1Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration1Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration2Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration2Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration3Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration3Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration4Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration4Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration5Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration5Cell, retStr);
                        break;
                    case TreatmentTypeEnum.LagoonWithAeration6Cell:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumLagoonWithAeration6Cell, retStr);
                        break;
                    case TreatmentTypeEnum.StabalizingPondOnly:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumStabalizingPondOnly, retStr);
                        break;
                    case TreatmentTypeEnum.OxidationDitchOnly:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumOxidationDitchOnly, retStr);
                        break;
                    case TreatmentTypeEnum.CirculatingFluidizedBed:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumCirculatingFluidizedBed, retStr);
                        break;
                    case TreatmentTypeEnum.TricklingFilter:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumTricklingFilter, retStr);
                        break;
                    case TreatmentTypeEnum.RecirculatingSandFilter:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumRecirculatingSandFilter, retStr);
                        break;
                    case TreatmentTypeEnum.TrashRackRakeOnly:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumTrashRackRakeOnly, retStr);
                        break;
                    case TreatmentTypeEnum.SepticTank:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumSepticTank, retStr);
                        break;
                    case TreatmentTypeEnum.Secondary:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumSecondary, retStr);
                        break;
                    case TreatmentTypeEnum.Tertiary:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumTertiary, retStr);
                        break;
                    case TreatmentTypeEnum.VolumeFermenter:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumVolumeFermenter, retStr);
                        break;
                    case TreatmentTypeEnum.BioFilmReactor:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumBioFilmReactor, retStr);
                        break;
                    case TreatmentTypeEnum.BioGreen:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumBioGreen, retStr);
                        break;
                    case TreatmentTypeEnum.BioDisks:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumBioDisks, retStr);
                        break;
                    case TreatmentTypeEnum.ChemicalPrimary:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumChemicalPrimary, retStr);
                        break;
                    case TreatmentTypeEnum.Chromoglass:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumChromoglass, retStr);
                        break;
                    case TreatmentTypeEnum.Primary:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumPrimary, retStr);
                        break;
                    case TreatmentTypeEnum.SequencingBatchReactor:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumSequencingBatchReactor, retStr);
                        break;
                    case TreatmentTypeEnum.PeatSystem:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumPeatSystem, retStr);
                        break;
                    case TreatmentTypeEnum.Physicochimique:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumPhysicochimique, retStr);
                        break;
                    case TreatmentTypeEnum.RotatingBiologicalContactor:
                        Assert.Equal(CSSPCultureEnumsRes.TreatmentTypeEnumRotatingBiologicalContactor, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TVAuthEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), i);

                switch ((TVAuthEnum)i)
                {
                    case TVAuthEnum.NoAccess:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumNoAccess, retStr);
                        break;
                    case TVAuthEnum.Read:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumRead, retStr);
                        break;
                    case TVAuthEnum.Write:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumWrite, retStr);
                        break;
                    case TVAuthEnum.Create:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumCreate, retStr);
                        break;
                    case TVAuthEnum.Delete:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumDelete, retStr);
                        break;
                    case TVAuthEnum.Admin:
                        Assert.Equal(CSSPCultureEnumsRes.TVAuthEnumAdmin, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_TVTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), i);

                switch ((TVTypeEnum)i)
                {
                    case TVTypeEnum.Root:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumRoot, retStr);
                        break;
                    case TVTypeEnum.Address:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumAddress, retStr);
                        break;
                    case TVTypeEnum.Area:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumArea, retStr);
                        break;
                    case TVTypeEnum.ClimateSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumClimateSite, retStr);
                        break;
                    case TVTypeEnum.Contact:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumContact, retStr);
                        break;
                    case TVTypeEnum.Country:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumCountry, retStr);
                        break;
                    case TVTypeEnum.Email:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumEmail, retStr);
                        break;
                    case TVTypeEnum.File:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumFile, retStr);
                        break;
                    case TVTypeEnum.HydrometricSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumHydrometricSite, retStr);
                        break;
                    case TVTypeEnum.Infrastructure:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumInfrastructure, retStr);
                        break;
                    case TVTypeEnum.MikeBoundaryConditionWebTide:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeBoundaryConditionWebTide, retStr);
                        break;
                    case TVTypeEnum.MikeBoundaryConditionMesh:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeBoundaryConditionMesh, retStr);
                        break;
                    case TVTypeEnum.MikeScenario:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeScenario, retStr);
                        break;
                    case TVTypeEnum.MikeSource:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeSource, retStr);
                        break;
                    case TVTypeEnum.Municipality:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMunicipality, retStr);
                        break;
                    case TVTypeEnum.MWQMSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMSite, retStr);
                        break;
                    case TVTypeEnum.PolSourceSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumPolSourceSite, retStr);
                        break;
                    case TVTypeEnum.Province:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumProvince, retStr);
                        break;
                    case TVTypeEnum.Sector:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSector, retStr);
                        break;
                    case TVTypeEnum.Subsector:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSubsector, retStr);
                        break;
                    case TVTypeEnum.Tel:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumTel, retStr);
                        break;
                    case TVTypeEnum.TideSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumTideSite, retStr);
                        break;
                    case TVTypeEnum.MWQMSiteSample:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMSiteSample, retStr);
                        break;
                    case TVTypeEnum.WasteWaterTreatmentPlant:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumWasteWaterTreatmentPlant, retStr);
                        break;
                    case TVTypeEnum.LiftStation:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumLiftStation, retStr);
                        break;
                    case TVTypeEnum.Spill:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSpill, retStr);
                        break;
                    case TVTypeEnum.BoxModel:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumBoxModel, retStr);
                        break;
                    case TVTypeEnum.VisualPlumesScenario:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumVisualPlumesScenario, retStr);
                        break;
                    case TVTypeEnum.Outfall:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumOutfall, retStr);
                        break;
                    case TVTypeEnum.OtherInfrastructure:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumOtherInfrastructure, retStr);
                        break;
                    case TVTypeEnum.MWQMRun:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMRun, retStr);
                        break;
                    case TVTypeEnum.NoDepuration:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumNoDepuration, retStr);
                        break;
                    case TVTypeEnum.Failed:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumFailed, retStr);
                        break;
                    case TVTypeEnum.Passed:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumPassed, retStr);
                        break;
                    case TVTypeEnum.NoData:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumNoData, retStr);
                        break;
                    case TVTypeEnum.LessThan10:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumLessThan10, retStr);
                        break;
                    case TVTypeEnum.MeshNode:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMeshNode, retStr);
                        break;
                    case TVTypeEnum.WebTideNode:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumWebTideNode, retStr);
                        break;
                    case TVTypeEnum.SamplingPlan:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSamplingPlan, retStr);
                        break;
                    case TVTypeEnum.SeeOtherMunicipality:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSeeOtherMunicipality, retStr);
                        break;
                    case TVTypeEnum.LineOverflow:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumLineOverflow, retStr);
                        break;
                    case TVTypeEnum.BoxModelInputs:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumBoxModelInputs, retStr);
                        break;
                    case TVTypeEnum.BoxModelResults:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumBoxModelResults, retStr);
                        break;
                    case TVTypeEnum.ClimateSiteInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumClimateSiteInfo, retStr);
                        break;
                    case TVTypeEnum.ClimateSiteData:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumClimateSiteData, retStr);
                        break;
                    case TVTypeEnum.HydrometricSiteInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumHydrometricSiteInfo, retStr);
                        break;
                    case TVTypeEnum.HydrometricSiteData:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumHydrometricSiteData, retStr);
                        break;
                    case TVTypeEnum.InfrastructureInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumInfrastructureInfo, retStr);
                        break;
                    case TVTypeEnum.LabSheetInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumLabSheetInfo, retStr);
                        break;
                    case TVTypeEnum.LabSheetDetailInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumLabSheetDetailInfo, retStr);
                        break;
                    case TVTypeEnum.MapInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMapInfo, retStr);
                        break;
                    case TVTypeEnum.MapInfoPoint:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMapInfoPoint, retStr);
                        break;
                    case TVTypeEnum.MikeSourceStartEndInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeSourceStartEndInfo, retStr);
                        break;
                    case TVTypeEnum.MWQMLookupMPNInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMLookupMPNInfo, retStr);
                        break;
                    case TVTypeEnum.SamplingPlanInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSamplingPlanInfo, retStr);
                        break;
                    case TVTypeEnum.SamplingPlanSubsectorInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSamplingPlanSubsectorInfo, retStr);
                        break;
                    case TVTypeEnum.SamplingPlanSubsectorSiteInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSamplingPlanSubsectorSiteInfo, retStr);
                        break;
                    case TVTypeEnum.MWQMSiteStartEndInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMSiteStartEndInfo, retStr);
                        break;
                    case TVTypeEnum.MWQMSubsectorInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMWQMSubsectorInfo, retStr);
                        break;
                    case TVTypeEnum.PolSourceSiteInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumPolSourceSiteInfo, retStr);
                        break;
                    case TVTypeEnum.PolSourceSiteObsInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumPolSourceSiteObsInfo, retStr);
                        break;
                    case TVTypeEnum.HydrometricRatingCurveInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumHydrometricRatingCurveInfo, retStr);
                        break;
                    case TVTypeEnum.HydrometricRatingCurveDataInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumHydrometricRatingCurveDataInfo, retStr);
                        break;
                    case TVTypeEnum.TideLocationInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumTideLocationInfo, retStr);
                        break;
                    case TVTypeEnum.TideSiteDataInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumTideSiteDataInfo, retStr);
                        break;
                    case TVTypeEnum.UseOfSite:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumUseOfSite, retStr);
                        break;
                    case TVTypeEnum.VisualPlumesScenarioInfo:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumVisualPlumesScenarioInfo, retStr);
                        break;
                    case TVTypeEnum.VisualPlumesScenarioAmbient:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumVisualPlumesScenarioAmbient, retStr);
                        break;
                    case TVTypeEnum.VisualPlumesScenarioResults:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumVisualPlumesScenarioResults, retStr);
                        break;
                    case TVTypeEnum.TotalFile:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumTotalFile, retStr);
                        break;
                    case TVTypeEnum.MikeSourceIsRiver:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeSourceIsRiver, retStr);
                        break;
                    case TVTypeEnum.MikeSourceIncluded:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeSourceIncluded, retStr);
                        break;
                    case TVTypeEnum.MikeSourceNotIncluded:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumMikeSourceNotIncluded, retStr);
                        break;
                    case TVTypeEnum.RainExceedance:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumRainExceedance, retStr);
                        break;
                    case TVTypeEnum.EmailDistributionList:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumEmailDistributionList, retStr);
                        break;
                    case TVTypeEnum.OpenData:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumOpenData, retStr);
                        break;
                    case TVTypeEnum.ProvinceTools:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumProvinceTools, retStr);
                        break;
                    case TVTypeEnum.Classification:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumClassification, retStr);
                        break;
                    case TVTypeEnum.Approved:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumApproved, retStr);
                        break;
                    case TVTypeEnum.Restricted:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumRestricted, retStr);
                        break;
                    case TVTypeEnum.Prohibited:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumProhibited, retStr);
                        break;
                    case TVTypeEnum.ConditionallyApproved:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumConditionallyApproved, retStr);
                        break;
                    case TVTypeEnum.ConditionallyRestricted:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumConditionallyRestricted, retStr);
                        break;
                    case TVTypeEnum.OpenDataNational:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumOpenDataNational, retStr);
                        break;
                    case TVTypeEnum.PolSourceSiteMikeScenario:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumPolSourceSiteMikeScenario, retStr);
                        break;
                    case TVTypeEnum.SubsectorTools:
                        Assert.Equal(CSSPCultureEnumsRes.TVTypeEnumSubsectorTools, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_ValveTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(ValveTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ValveTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(ValveTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(ValveTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(ValveTypeEnum), i);

                switch ((ValveTypeEnum)i)
                {
                    case ValveTypeEnum.Manually:
                        Assert.Equal(CSSPCultureEnumsRes.ValveTypeEnumManually, retStr);
                        break;
                    case ValveTypeEnum.Automatically:
                        Assert.Equal(CSSPCultureEnumsRes.ValveTypeEnumAutomatically, retStr);
                        break;
                    case ValveTypeEnum.None:
                        Assert.Equal(CSSPCultureEnumsRes.ValveTypeEnumNone, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_WebTypeEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(WebTypeEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTypeEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTypeEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(WebTypeEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(WebTypeEnum), i);

                switch ((WebTypeEnum)i)
                {
                    case WebTypeEnum.WebRoot:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebRoot, retStr);
                        break;
                    case WebTypeEnum.WebCountry:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebCountry, retStr);
                        break;
                    case WebTypeEnum.WebProvince:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebProvince, retStr);
                        break;
                    case WebTypeEnum.WebArea:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebArea, retStr);
                        break;
                    case WebTypeEnum.WebMunicipalities:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMunicipalities, retStr);
                        break;
                    case WebTypeEnum.WebSector:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebSector, retStr);
                        break;
                    case WebTypeEnum.WebSubsector:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebSubsector, retStr);
                        break;
                    case WebTypeEnum.WebMunicipality:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMunicipality, retStr);
                        break;
                    case WebTypeEnum.WebMWQMSample:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMWQMSample, retStr);
                        break;
                    case WebTypeEnum.WebSamplingPlan:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebSamplingPlan, retStr);
                        break;
                    case WebTypeEnum.WebMWQMRun:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMWQMRun, retStr);
                        break;
                    case WebTypeEnum.WebMWQMSite:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMWQMSite, retStr);
                        break;
                    case WebTypeEnum.WebContact:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebContact, retStr);
                        break;
                    case WebTypeEnum.WebClimateSite:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebClimateSite, retStr);
                        break;
                    case WebTypeEnum.WebHydrometricSite:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebHydrometricSite, retStr);
                        break;
                    case WebTypeEnum.WebDrogueRun:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebDrogueRun, retStr);
                        break;
                    case WebTypeEnum.WebMWQMLookupMPN:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMWQMLookupMPN, retStr);
                        break;
                    case WebTypeEnum.WebMikeScenario:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebMikeScenario, retStr);
                        break;
                    case WebTypeEnum.WebClimateDataValue:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebClimateDataValue, retStr);
                        break;
                    case WebTypeEnum.WebHydrometricDataValue:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebHydrometricDataValue, retStr);
                        break;
                    case WebTypeEnum.WebHelpDoc:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebHelpDoc, retStr);
                        break;
                    case WebTypeEnum.WebTideLocation:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebTideLocation, retStr);
                        break;
                    case WebTypeEnum.WebPolSourceSite:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebPolSourceSite, retStr);
                        break;
                    case WebTypeEnum.WebPolSourceGrouping:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebPolSourceGrouping, retStr);
                        break;
                    case WebTypeEnum.WebReportType:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebReportType, retStr);
                        break;
                    case WebTypeEnum.WebAllTVItem:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebAllTVItem, retStr);
                        break;
                    case WebTypeEnum.WebPolSourceSiteEffectTerm:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebPolSourceSiteEffectTerm, retStr);
                        break;
                    case WebTypeEnum.WebAllTVItemLanguage:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeEnumWebAllTVItemLanguage, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_WebTypeYearEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(WebTypeYearEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTypeYearEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTypeYearEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(WebTypeYearEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(WebTypeYearEnum), i);

                switch ((WebTypeYearEnum)i)
                {
                    case WebTypeYearEnum.Year1980:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear1980, retStr);
                        break;
                    case WebTypeYearEnum.Year1990:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear1990, retStr);
                        break;
                    case WebTypeYearEnum.Year2000:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2000, retStr);
                        break;
                    case WebTypeYearEnum.Year2010:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2010, retStr);
                        break;
                    case WebTypeYearEnum.Year2020:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2020, retStr);
                        break;
                    case WebTypeYearEnum.Year2030:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2030, retStr);
                        break;
                    case WebTypeYearEnum.Year2040:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2040, retStr);
                        break;
                    case WebTypeYearEnum.Year2050:
                        Assert.Equal(CSSPCultureEnumsRes.WebTypeYearEnumYear2050, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task GetResValueForTypeAndID_ForEnum_WebTideDataSetEnum_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), -100);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), 10000000);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), null);
            Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);

            foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
            {
                retStr = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), i);

                switch ((WebTideDataSetEnum)i)
                {
                    case WebTideDataSetEnum.arctic9:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumarctic9, retStr);
                        break;
                    case WebTideDataSetEnum.brador:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumbrador, retStr);
                        break;
                    case WebTideDataSetEnum.HRglobal:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumHRglobal, retStr);
                        break;
                    case WebTideDataSetEnum.h3o:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumh3o, retStr);
                        break;
                    case WebTideDataSetEnum.hudson:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumhudson, retStr);
                        break;
                    case WebTideDataSetEnum.ne_pac4:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumne_pac4, retStr);
                        break;
                    case WebTideDataSetEnum.nwatl:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumnwatl, retStr);
                        break;
                    case WebTideDataSetEnum.QuatsinoModel14:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumQuatsinoModel14, retStr);
                        break;
                    case WebTideDataSetEnum.sshelf:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumsshelf, retStr);
                        break;
                    case WebTideDataSetEnum.flood:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumflood, retStr);
                        break;
                    case WebTideDataSetEnum.vigf8:
                        Assert.Equal(CSSPCultureEnumsRes.WebTideDataSetEnumvigf8, retStr);
                        break;
                    default:
                        Assert.Equal(CSSPCultureEnumsRes.Empty, retStr);
                        break;
                }
            }
        }

        #endregion Testing Method GetResValueForTypeAndID for each Enum value name

        #region Testing Method EnumTypeListOK
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_EnumTypeListOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<int?> intList = new List<int?>() { (int)PolSourceObsInfoEnum.AgriculturalSourceCrop, (int)PolSourceObsInfoEnum.AgricultureSourcePasture };
            Assert.Equal((int)PolSourceObsInfoEnum.AgriculturalSourceCrop, intList[0]);
            Assert.Equal((int)PolSourceObsInfoEnum.AgricultureSourcePasture, intList[1]);
            string retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);
            Assert.Equal("", retStr);

            intList.Add(1000000);
            retStr = enums.EnumTypeListOK(typeof(PolSourceObsInfoEnum), intList);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);
        }

        #endregion Testing Method EnumTypeListOK

        #region Testing Method EnumTypeOK for each Enum value name
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ActionDBTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ActionDBTypeEnum), i);

                switch ((ActionDBTypeEnum)i)
                {
                     case ActionDBTypeEnum.Create:
                     case ActionDBTypeEnum.Read:
                     case ActionDBTypeEnum.Update:
                     case ActionDBTypeEnum.Delete:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ActionDBTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AddContactTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AddContactTypeEnum), i);

                switch ((AddContactTypeEnum)i)
                {
                     case AddContactTypeEnum.First:
                     case AddContactTypeEnum.Register:
                     case AddContactTypeEnum.LoggedIn:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddContactTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_EntityQueryTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(EntityQueryTypeEnum), i);

                switch ((EntityQueryTypeEnum)i)
                {
                     case EntityQueryTypeEnum.AsNoTracking:
                     case EntityQueryTypeEnum.WithTracking:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EntityQueryTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceObsInfoTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoTypeEnum), i);

                switch ((PolSourceObsInfoTypeEnum)i)
                {
                     case PolSourceObsInfoTypeEnum.Description:
                     case PolSourceObsInfoTypeEnum.Report:
                     case PolSourceObsInfoTypeEnum.Text:
                     case PolSourceObsInfoTypeEnum.Initial:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AddressTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddressTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddressTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AddressTypeEnum), i);

                switch ((AddressTypeEnum)i)
                {
                     case AddressTypeEnum.Mailing:
                     case AddressTypeEnum.Shipping:
                     case AddressTypeEnum.Civic:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AddressTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AreaSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AreaSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AreaSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AreaSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AreaSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AreaSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AreaSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AreaSubComponentEnum), i);

                switch ((AreaSubComponentEnum)i)
                {
                     case AreaSubComponentEnum.Sectors:
                     case AreaSubComponentEnum.Files:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AreaSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AerationTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AerationTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AerationTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AerationTypeEnum), i);

                switch ((AerationTypeEnum)i)
                {
                     case AerationTypeEnum.MechanicalAirLines:
                     case AerationTypeEnum.MechanicalSurfaceMixers:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AerationTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AlarmSystemTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AlarmSystemTypeEnum), i);

                switch ((AlarmSystemTypeEnum)i)
                {
                     case AlarmSystemTypeEnum.SCADA:
                     case AlarmSystemTypeEnum.None:
                     case AlarmSystemTypeEnum.OnlyVisualLight:
                     case AlarmSystemTypeEnum.SCADAAndLight:
                     case AlarmSystemTypeEnum.PagerAndLight:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AlarmSystemTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalysisCalculationTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AnalysisCalculationTypeEnum), i);

                switch ((AnalysisCalculationTypeEnum)i)
                {
                     case AnalysisCalculationTypeEnum.All:
                     case AnalysisCalculationTypeEnum.Wet:
                     case AnalysisCalculationTypeEnum.Dry:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisCalculationTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalysisReportExportCommandOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AnalysisReportExportCommandEnum), i);

                switch ((AnalysisReportExportCommandEnum)i)
                {
                     case AnalysisReportExportCommandEnum.Report:
                     case AnalysisReportExportCommandEnum.Excel:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalysisReportExportCommandEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalyzeMethodOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AnalyzeMethodEnum), i);

                switch ((AnalyzeMethodEnum)i)
                {
                     case AnalyzeMethodEnum.MF:
                     case AnalyzeMethodEnum.ZZ_510Q:
                     case AnalyzeMethodEnum.ZZ_509Q:
                     case AnalyzeMethodEnum.ZZ_0:
                     case AnalyzeMethodEnum.ZZ_525Q:
                     case AnalyzeMethodEnum.MPN:
                     case AnalyzeMethodEnum.ZZ_0Q:
                     case AnalyzeMethodEnum.AnalyzeMethod8:
                     case AnalyzeMethodEnum.AnalyzeMethod9:
                     case AnalyzeMethodEnum.AnalyzeMethod10:
                     case AnalyzeMethodEnum.AnalyzeMethod11:
                     case AnalyzeMethodEnum.AnalyzeMethod12:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AnalyzeMethodEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AppTaskCommandOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AppTaskCommandEnum), i);

                switch ((AppTaskCommandEnum)i)
                {
                     case AppTaskCommandEnum.GenerateWebTide:
                     case AppTaskCommandEnum.MikeScenarioAskToRun:
                     case AppTaskCommandEnum.MikeScenarioImport:
                     case AppTaskCommandEnum.MikeScenarioOtherFileImport:
                     case AppTaskCommandEnum.MikeScenarioRunning:
                     case AppTaskCommandEnum.MikeScenarioToCancel:
                     case AppTaskCommandEnum.MikeScenarioWaitingToRun:
                     case AppTaskCommandEnum.SetupWebTide:
                     case AppTaskCommandEnum.UpdateClimateSiteInformation:
                     case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyFromStartDateToEndDate:
                     case AppTaskCommandEnum.UpdateClimateSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                     case AppTaskCommandEnum.CreateFCForm:
                     case AppTaskCommandEnum.CreateSamplingPlanSamplingPlanTextFile:
                     case AppTaskCommandEnum.CreateDocumentFromTemplate:
                     case AppTaskCommandEnum.GetClimateSitesDataForRunsOfYear:
                     case AppTaskCommandEnum.CreateWebTideDataWLAtFirstNode:
                     case AppTaskCommandEnum.ExportEmailDistributionLists:
                     case AppTaskCommandEnum.ExportAnalysisToExcel:
                     case AppTaskCommandEnum.CreateDocumentFromParameters:
                     case AppTaskCommandEnum.CreateDocxPDF:
                     case AppTaskCommandEnum.CreateXlsxPDF:
                     case AppTaskCommandEnum.OpenDataCSVOfMWQMSites:
                     case AppTaskCommandEnum.OpenDataKMZOfMWQMSites:
                     case AppTaskCommandEnum.OpenDataXlsxOfMWQMSitesAndSamples:
                     case AppTaskCommandEnum.OpenDataCSVOfMWQMSamples:
                     case AppTaskCommandEnum.GetAllPrecipitationForYear:
                     case AppTaskCommandEnum.FillRunPrecipByClimateSitePriorityForYear:
                     case AppTaskCommandEnum.FindMissingPrecipForProvince:
                     case AppTaskCommandEnum.ExportToArcGIS:
                     case AppTaskCommandEnum.GenerateClassificationForCSSPWebToolsVisualization:
                     case AppTaskCommandEnum.GenerateLinksBetweenMWQMSitesAndPolSourceSitesForCSSPWebToolsVisualization:
                     case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSites:
                     case AppTaskCommandEnum.OpenDataCSVNationalOfMWQMSamples:
                     case AppTaskCommandEnum.ProvinceToolsCreateClassificationInputsKML:
                     case AppTaskCommandEnum.ProvinceToolsCreateGroupingInputsKML:
                     case AppTaskCommandEnum.ProvinceToolsCreateMWQMSitesAndPolSourceSitesKML:
                     case AppTaskCommandEnum.UpdateHydrometricSiteInformation:
                     case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyFromStartDateToEndDate:
                     case AppTaskCommandEnum.UpdateHydrometricSiteDailyAndHourlyForSubsectorFromStartDateToEndDate:
                     case AppTaskCommandEnum.GetHydrometricSitesDataForRunsOfYear:
                     case AppTaskCommandEnum.GetAllDischargesForYear:
                     case AppTaskCommandEnum.FillRunDischargesByHydrometricSitePriorityForYear:
                     case AppTaskCommandEnum.FindMissingDischargesForProvince:
                     case AppTaskCommandEnum.LoadHydrometricDataValue:
                     case AppTaskCommandEnum.GenerateKMLFileClassificationForCSSPWebToolsVisualization:
                     case AppTaskCommandEnum.ProvinceToolsGenerateStats:
                     case AppTaskCommandEnum.MikeScenarioPrepareResults:
                     case AppTaskCommandEnum.ClimateSiteLoadCoCoRaHSData:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskCommandEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AppTaskStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AppTaskStatusEnum), i);

                switch ((AppTaskStatusEnum)i)
                {
                     case AppTaskStatusEnum.Created:
                     case AppTaskStatusEnum.Running:
                     case AppTaskStatusEnum.Completed:
                     case AppTaskStatusEnum.Cancelled:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AppTaskStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AscDescOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(AscDescEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(AscDescEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AscDescEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(AscDescEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AscDescEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(AscDescEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(AscDescEnum), i);

                switch ((AscDescEnum)i)
                {
                     case AscDescEnum.Ascending:
                     case AscDescEnum.Descending:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "AscDescEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_BeaufortScaleOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(BeaufortScaleEnum), i);

                switch ((BeaufortScaleEnum)i)
                {
                     case BeaufortScaleEnum.Calm:
                     case BeaufortScaleEnum.LightAir:
                     case BeaufortScaleEnum.LightBreeze:
                     case BeaufortScaleEnum.GentleBreeze:
                     case BeaufortScaleEnum.ModerateBreeze:
                     case BeaufortScaleEnum.FreshBreeze:
                     case BeaufortScaleEnum.StrongBreeze:
                     case BeaufortScaleEnum.HighWind_ModerateGale_NearGale:
                     case BeaufortScaleEnum.Gale_FreshGale:
                     case BeaufortScaleEnum.Strong_SevereGale:
                     case BeaufortScaleEnum.Storm_WholeGale:
                     case BeaufortScaleEnum.ViolentStorm:
                     case BeaufortScaleEnum.HurricaneForce:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BeaufortScaleEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_BoxModelResultTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(BoxModelResultTypeEnum), i);

                switch ((BoxModelResultTypeEnum)i)
                {
                     case BoxModelResultTypeEnum.Dilution:
                     case BoxModelResultTypeEnum.NoDecayUntreated:
                     case BoxModelResultTypeEnum.NoDecayPreDisinfection:
                     case BoxModelResultTypeEnum.DecayUntreated:
                     case BoxModelResultTypeEnum.DecayPreDisinfection:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "BoxModelResultTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CanOverflowTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(CanOverflowTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(CanOverflowTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CanOverflowTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(CanOverflowTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CanOverflowTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(CanOverflowTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(CanOverflowTypeEnum), i);

                switch ((CanOverflowTypeEnum)i)
                {
                     case CanOverflowTypeEnum.Yes:
                     case CanOverflowTypeEnum.No:
                     case CanOverflowTypeEnum.Unknown:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CanOverflowTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ClassificationTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ClassificationTypeEnum), i);

                switch ((ClassificationTypeEnum)i)
                {
                     case ClassificationTypeEnum.Approved:
                     case ClassificationTypeEnum.Restricted:
                     case ClassificationTypeEnum.Prohibited:
                     case ClassificationTypeEnum.ConditionallyApproved:
                     case ClassificationTypeEnum.ConditionallyRestricted:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ClassificationTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CollectionSystemTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(CollectionSystemTypeEnum), i);

                switch ((CollectionSystemTypeEnum)i)
                {
                     case CollectionSystemTypeEnum.CompletelySeparated:
                     case CollectionSystemTypeEnum.CompletelyCombined:
                     case CollectionSystemTypeEnum.Combined90Separated10:
                     case CollectionSystemTypeEnum.Combined80Separated20:
                     case CollectionSystemTypeEnum.Combined70Separated30:
                     case CollectionSystemTypeEnum.Combined60Separated40:
                     case CollectionSystemTypeEnum.Combined50Separated50:
                     case CollectionSystemTypeEnum.Combined40Separated60:
                     case CollectionSystemTypeEnum.Combined30Separated70:
                     case CollectionSystemTypeEnum.Combined20Separated80:
                     case CollectionSystemTypeEnum.Combined10Separated90:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CollectionSystemTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ContactTitleOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContactTitleEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContactTitleEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ContactTitleEnum), i);

                switch ((ContactTitleEnum)i)
                {
                     case ContactTitleEnum.DirectorGeneral:
                     case ContactTitleEnum.DirectorPublicWorks:
                     case ContactTitleEnum.Superintendent:
                     case ContactTitleEnum.Engineer:
                     case ContactTitleEnum.Foreman:
                     case ContactTitleEnum.Operator:
                     case ContactTitleEnum.FacilitiesManager:
                     case ContactTitleEnum.Supervisor:
                     case ContactTitleEnum.Technician:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContactTitleEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ContentSizeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ContentSizeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ContentSizeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContentSizeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ContentSizeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContentSizeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ContentSizeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ContentSizeEnum), i);

                switch ((ContentSizeEnum)i)
                {
                     case ContentSizeEnum.Size30:
                     case ContentSizeEnum.Size40:
                     case ContentSizeEnum.Size50:
                     case ContentSizeEnum.Size60:
                     case ContentSizeEnum.Size70:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ContentSizeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CountrySubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(CountrySubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(CountrySubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CountrySubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(CountrySubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CountrySubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(CountrySubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(CountrySubComponentEnum), i);

                switch ((CountrySubComponentEnum)i)
                {
                     case CountrySubComponentEnum.Provinces:
                     case CountrySubComponentEnum.Files:
                     case CountrySubComponentEnum.OpenDataNational:
                     case CountrySubComponentEnum.EmailDistributionList:
                     case CountrySubComponentEnum.RainExceedance:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CountrySubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CSSPWQInputSheetTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(CSSPWQInputSheetTypeEnum), i);

                switch ((CSSPWQInputSheetTypeEnum)i)
                {
                     case CSSPWQInputSheetTypeEnum.A1:
                     case CSSPWQInputSheetTypeEnum.LTB:
                     case CSSPWQInputSheetTypeEnum.EC:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputSheetTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CSSPWQInputTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(CSSPWQInputTypeEnum), i);

                switch ((CSSPWQInputTypeEnum)i)
                {
                     case CSSPWQInputTypeEnum.Subsector:
                     case CSSPWQInputTypeEnum.Municipality:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "CSSPWQInputTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DBLocationOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(DBLocationEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(DBLocationEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DBLocationEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(DBLocationEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DBLocationEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(DBLocationEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(DBLocationEnum), i);

                switch ((DBLocationEnum)i)
                {
                     case DBLocationEnum.Local:
                     case DBLocationEnum.Server:
                     case DBLocationEnum.InMemory:
                     case DBLocationEnum.Login:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DBLocationEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DailyOrHourlyDataOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(DailyOrHourlyDataEnum), i);

                switch ((DailyOrHourlyDataEnum)i)
                {
                     case DailyOrHourlyDataEnum.Daily:
                     case DailyOrHourlyDataEnum.Hourly:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DailyOrHourlyDataEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DisinfectionTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(DisinfectionTypeEnum), i);

                switch ((DisinfectionTypeEnum)i)
                {
                     case DisinfectionTypeEnum.None:
                     case DisinfectionTypeEnum.UV:
                     case DisinfectionTypeEnum.ChlorinationNoDechlorination:
                     case DisinfectionTypeEnum.ChlorinationWithDechlorination:
                     case DisinfectionTypeEnum.UVSeasonal:
                     case DisinfectionTypeEnum.ChlorinationNoDechlorinationSeasonal:
                     case DisinfectionTypeEnum.ChlorinationWithDechlorinationSeasonal:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DisinfectionTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DrogueTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(DrogueTypeEnum), i);

                switch ((DrogueTypeEnum)i)
                {
                     case DrogueTypeEnum.SmallDrogue:
                     case DrogueTypeEnum.LargeDrogue:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "DrogueTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_EmailTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EmailTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EmailTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(EmailTypeEnum), i);

                switch ((EmailTypeEnum)i)
                {
                     case EmailTypeEnum.Personal:
                     case EmailTypeEnum.Work:
                     case EmailTypeEnum.Personal2:
                     case EmailTypeEnum.Work2:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "EmailTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ExcelExportShowDataTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ExcelExportShowDataTypeEnum), i);

                switch ((ExcelExportShowDataTypeEnum)i)
                {
                     case ExcelExportShowDataTypeEnum.FecalColiform:
                     case ExcelExportShowDataTypeEnum.Temperature:
                     case ExcelExportShowDataTypeEnum.Salinity:
                     case ExcelExportShowDataTypeEnum.P90:
                     case ExcelExportShowDataTypeEnum.GemetricMean:
                     case ExcelExportShowDataTypeEnum.Median:
                     case ExcelExportShowDataTypeEnum.PercOfP90Over43:
                     case ExcelExportShowDataTypeEnum.PercOfP90Over260:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ExcelExportShowDataTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FacilityTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(FacilityTypeEnum), i);

                switch ((FacilityTypeEnum)i)
                {
                     case FacilityTypeEnum.Lagoon:
                     case FacilityTypeEnum.Plant:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FacilityTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FilePurposeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilePurposeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilePurposeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(FilePurposeEnum), i);

                switch ((FilePurposeEnum)i)
                {
                     case FilePurposeEnum.MikeInput:
                     case FilePurposeEnum.MikeInputMDF:
                     case FilePurposeEnum.MikeResultDFSU:
                     case FilePurposeEnum.MikeResultKMZ:
                     case FilePurposeEnum.Information:
                     case FilePurposeEnum.Image:
                     case FilePurposeEnum.Picture:
                     case FilePurposeEnum.ReportGenerated:
                     case FilePurposeEnum.TemplateGenerated:
                     case FilePurposeEnum.GeneratedFCForm:
                     case FilePurposeEnum.Template:
                     case FilePurposeEnum.Map:
                     case FilePurposeEnum.Analysis:
                     case FilePurposeEnum.OpenData:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilePurposeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FilesSortPropOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(FilesSortPropEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(FilesSortPropEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilesSortPropEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(FilesSortPropEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilesSortPropEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(FilesSortPropEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(FilesSortPropEnum), i);

                switch ((FilesSortPropEnum)i)
                {
                     case FilesSortPropEnum.FileName:
                     case FilesSortPropEnum.FileSize:
                     case FilesSortPropEnum.FileType:
                     case FilesSortPropEnum.FilePurpose:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FilesSortPropEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FileStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(FileStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(FileStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(FileStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(FileStatusEnum), i);

                switch ((FileStatusEnum)i)
                {
                     case FileStatusEnum.Changed:
                     case FileStatusEnum.Sent:
                     case FileStatusEnum.Accepted:
                     case FileStatusEnum.Rejected:
                     case FileStatusEnum.Fail:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FileTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(FileTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(FileTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(FileTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(FileTypeEnum), i);

                switch ((FileTypeEnum)i)
                {
                     case FileTypeEnum.DFS0:
                     case FileTypeEnum.DFS1:
                     case FileTypeEnum.DFSU:
                     case FileTypeEnum.KMZ:
                     case FileTypeEnum.LOG:
                     case FileTypeEnum.M21FM:
                     case FileTypeEnum.M3FM:
                     case FileTypeEnum.MDF:
                     case FileTypeEnum.MESH:
                     case FileTypeEnum.XLSX:
                     case FileTypeEnum.DOCX:
                     case FileTypeEnum.PDF:
                     case FileTypeEnum.JPG:
                     case FileTypeEnum.JPEG:
                     case FileTypeEnum.GIF:
                     case FileTypeEnum.PNG:
                     case FileTypeEnum.HTML:
                     case FileTypeEnum.TXT:
                     case FileTypeEnum.XYZ:
                     case FileTypeEnum.KML:
                     case FileTypeEnum.CSV:
                     case FileTypeEnum.WMV:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "FileTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_InfrastructureTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(InfrastructureTypeEnum), i);

                switch ((InfrastructureTypeEnum)i)
                {
                     case InfrastructureTypeEnum.WWTP:
                     case InfrastructureTypeEnum.LiftStation:
                     case InfrastructureTypeEnum.Other:
                     case InfrastructureTypeEnum.SeeOtherMunicipality:
                     case InfrastructureTypeEnum.LineOverflow:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "InfrastructureTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_KMZActionOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(KMZActionEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(KMZActionEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "KMZActionEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(KMZActionEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "KMZActionEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(KMZActionEnum), i);

                switch ((KMZActionEnum)i)
                {
                     case KMZActionEnum.DoNothing:
                     case KMZActionEnum.GenerateKMZContourAnimation:
                     case KMZActionEnum.GenerateKMZContourLimit:
                     case KMZActionEnum.GenerateKMZCurrentAnimation:
                     case KMZActionEnum.GenerateKMZCurrentMaximum:
                     case KMZActionEnum.GenerateKMZMesh:
                     case KMZActionEnum.GenerateKMZStudyArea:
                     case KMZActionEnum.GenerateKMZBoundaryConditionNodes:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "KMZActionEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LaboratoryOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LaboratoryEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LaboratoryEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LaboratoryEnum), i);

                switch ((LaboratoryEnum)i)
                {
                     case LaboratoryEnum.ZZ_0:
                     case LaboratoryEnum.ZZ_1:
                     case LaboratoryEnum.ZZ_2:
                     case LaboratoryEnum.ZZ_3:
                     case LaboratoryEnum.ZZ_4:
                     case LaboratoryEnum.ZZ_1Q:
                     case LaboratoryEnum.ZZ_2Q:
                     case LaboratoryEnum.ZZ_3Q:
                     case LaboratoryEnum.ZZ_4Q:
                     case LaboratoryEnum.ZZ_5Q:
                     case LaboratoryEnum.ZZ_11BC:
                     case LaboratoryEnum.ZZ_12BC:
                     case LaboratoryEnum.ZZ_13BC:
                     case LaboratoryEnum.ZZ_14BC:
                     case LaboratoryEnum.ZZ_15BC:
                     case LaboratoryEnum.ZZ_16BC:
                     case LaboratoryEnum.ZZ_17BC:
                     case LaboratoryEnum.ZZ_18BC:
                     case LaboratoryEnum.MonctonEnvironmentCanada:
                     case LaboratoryEnum.BIOEnvironmentCanada:
                     case LaboratoryEnum.EasternCharlotteWaterwayLaboratory:
                     case LaboratoryEnum.InstitutDeRechercheSurLesZonesCotieres:
                     case LaboratoryEnum.CentreDeRechercheSurLesAliments:
                     case LaboratoryEnum.CaraquetMobileLaboratoryEnvironmentCanada:
                     case LaboratoryEnum.MaxxamAnalyticsBedford:
                     case LaboratoryEnum.MaxxamAnalyticsSydney:
                     case LaboratoryEnum.PEIAnalyticalLaboratory:
                     case LaboratoryEnum.NLMobileLaboratory:
                     case LaboratoryEnum.AvalonLaboratoriesInc:
                     case LaboratoryEnum.Maxxam:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LaboratoryEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LabSheetStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LabSheetStatusEnum), i);

                switch ((LabSheetStatusEnum)i)
                {
                     case LabSheetStatusEnum.Created:
                     case LabSheetStatusEnum.Transferred:
                     case LabSheetStatusEnum.Accepted:
                     case LabSheetStatusEnum.Rejected:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LabSheetTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LabSheetTypeEnum), i);

                switch ((LabSheetTypeEnum)i)
                {
                     case LabSheetTypeEnum.A1:
                     case LabSheetTypeEnum.LTB:
                     case LabSheetTypeEnum.EC:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LabSheetTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LanguageOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LanguageEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LanguageEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LanguageEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LanguageEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LanguageEnum), i);

                switch ((LanguageEnum)i)
                {
                     case LanguageEnum.en:
                     case LanguageEnum.fr:
                     case LanguageEnum.enAndfr:
                     case LanguageEnum.es:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LanguageEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LocalDBCommandOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LocalDBCommandEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LocalDBCommandEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LocalDBCommandEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LocalDBCommandEnum), i);

                switch ((LocalDBCommandEnum)i)
                {
                     case LocalDBCommandEnum.Change:
                     case LocalDBCommandEnum.New:
                     case LocalDBCommandEnum.Delete:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LocalDBCommandEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LogCommandOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(LogCommandEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(LogCommandEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LogCommandEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(LogCommandEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LogCommandEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(LogCommandEnum), i);

                switch ((LogCommandEnum)i)
                {
                     case LogCommandEnum.Add:
                     case LogCommandEnum.Change:
                     case LogCommandEnum.Delete:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "LogCommandEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MapInfoDrawTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MapInfoDrawTypeEnum), i);

                switch ((MapInfoDrawTypeEnum)i)
                {
                     case MapInfoDrawTypeEnum.Point:
                     case MapInfoDrawTypeEnum.Polyline:
                     case MapInfoDrawTypeEnum.Polygon:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapInfoDrawTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MapSizeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MapSizeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MapSizeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapSizeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MapSizeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapSizeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MapSizeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MapSizeEnum), i);

                switch ((MapSizeEnum)i)
                {
                     case MapSizeEnum.Size30:
                     case MapSizeEnum.Size40:
                     case MapSizeEnum.Size50:
                     case MapSizeEnum.Size60:
                     case MapSizeEnum.Size70:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MapSizeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeBoundaryConditionLevelOrVelocityOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i);

                switch ((MikeBoundaryConditionLevelOrVelocityEnum)i)
                {
                     case MikeBoundaryConditionLevelOrVelocityEnum.Level:
                     case MikeBoundaryConditionLevelOrVelocityEnum.Velocity:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeBoundaryConditionLevelOrVelocityEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeScenarioSpecialResultKMLTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MikeScenarioSpecialResultKMLTypeEnum), i);

                switch ((MikeScenarioSpecialResultKMLTypeEnum)i)
                {
                     case MikeScenarioSpecialResultKMLTypeEnum.Mesh:
                     case MikeScenarioSpecialResultKMLTypeEnum.StudyArea:
                     case MikeScenarioSpecialResultKMLTypeEnum.BoundaryConditions:
                     case MikeScenarioSpecialResultKMLTypeEnum.PollutionLimit:
                     case MikeScenarioSpecialResultKMLTypeEnum.PollutionAnimation:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSpecialResultKMLTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeScenarioSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MikeScenarioSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MikeScenarioSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MikeScenarioSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MikeScenarioSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MikeScenarioSubComponentEnum), i);

                switch ((MikeScenarioSubComponentEnum)i)
                {
                     case MikeScenarioSubComponentEnum.GeneralParameters:
                     case MikeScenarioSubComponentEnum.Sources:
                     case MikeScenarioSubComponentEnum.InputSummary:
                     case MikeScenarioSubComponentEnum.Files:
                     case MikeScenarioSubComponentEnum.GeneralResults:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MikeScenarioSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMRunSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MWQMRunSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMRunSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMRunSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMRunSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMRunSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMRunSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MWQMRunSubComponentEnum), i);

                switch ((MWQMRunSubComponentEnum)i)
                {
                     case MWQMRunSubComponentEnum.Information:
                     case MWQMRunSubComponentEnum.Files:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMRunSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMSiteLatestClassificationOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MWQMSiteLatestClassificationEnum), i);

                switch ((MWQMSiteLatestClassificationEnum)i)
                {
                     case MWQMSiteLatestClassificationEnum.Approved:
                     case MWQMSiteLatestClassificationEnum.ConditionallyApproved:
                     case MWQMSiteLatestClassificationEnum.Restricted:
                     case MWQMSiteLatestClassificationEnum.ConditionallyRestricted:
                     case MWQMSiteLatestClassificationEnum.Prohibited:
                     case MWQMSiteLatestClassificationEnum.Unclassified:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteLatestClassificationEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMSiteSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MWQMSiteSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMSiteSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MWQMSiteSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MWQMSiteSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MWQMSiteSubComponentEnum), i);

                switch ((MWQMSiteSubComponentEnum)i)
                {
                     case MWQMSiteSubComponentEnum.Information:
                     case MWQMSiteSubComponentEnum.Files:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MWQMSiteSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MunicipalitySubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(MunicipalitySubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(MunicipalitySubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MunicipalitySubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(MunicipalitySubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MunicipalitySubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(MunicipalitySubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(MunicipalitySubComponentEnum), i);

                switch ((MunicipalitySubComponentEnum)i)
                {
                     case MunicipalitySubComponentEnum.Infrastructures:
                     case MunicipalitySubComponentEnum.MIKEScenarios:
                     case MunicipalitySubComponentEnum.Contacts:
                     case MunicipalitySubComponentEnum.Files:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "MunicipalitySubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceInactiveReasonOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceInactiveReasonEnum), i);

                switch ((PolSourceInactiveReasonEnum)i)
                {
                     case PolSourceInactiveReasonEnum.Abandoned:
                     case PolSourceInactiveReasonEnum.Closed:
                     case PolSourceInactiveReasonEnum.Removed:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceInactiveReasonEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceIssueRiskOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceIssueRiskEnum), i);

                switch ((PolSourceIssueRiskEnum)i)
                {
                     case PolSourceIssueRiskEnum.LowRisk:
                     case PolSourceIssueRiskEnum.ModerateRisk:
                     case PolSourceIssueRiskEnum.HighRisk:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceIssueRiskEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceSiteSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PolSourceSiteSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceSiteSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceSiteSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceSiteSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceSiteSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceSiteSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceSiteSubComponentEnum), i);

                switch ((PolSourceSiteSubComponentEnum)i)
                {
                     case PolSourceSiteSubComponentEnum.Information:
                     case PolSourceSiteSubComponentEnum.Files:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceSiteSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PositionOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PositionEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PositionEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PositionEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PositionEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PositionEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PositionEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PositionEnum), i);

                switch ((PositionEnum)i)
                {
                     case PositionEnum.LeftBottom:
                     case PositionEnum.RightBottom:
                     case PositionEnum.LeftTop:
                     case PositionEnum.RightTop:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PositionEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PreliminaryTreatmentTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PreliminaryTreatmentTypeEnum), i);

                switch ((PreliminaryTreatmentTypeEnum)i)
                {
                     case PreliminaryTreatmentTypeEnum.NotApplicable:
                     case PreliminaryTreatmentTypeEnum.BarScreen:
                     case PreliminaryTreatmentTypeEnum.Grinder:
                     case PreliminaryTreatmentTypeEnum.MechanicalScreening:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PreliminaryTreatmentTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PrimaryTreatmentTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PrimaryTreatmentTypeEnum), i);

                switch ((PrimaryTreatmentTypeEnum)i)
                {
                     case PrimaryTreatmentTypeEnum.NotApplicable:
                     case PrimaryTreatmentTypeEnum.Sedimentation:
                     case PrimaryTreatmentTypeEnum.ChemicalCoagulation:
                     case PrimaryTreatmentTypeEnum.Filtration:
                     case PrimaryTreatmentTypeEnum.PrimaryClarification:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PrimaryTreatmentTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PropertyTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PropertyTypeEnum), i);

                switch ((PropertyTypeEnum)i)
                {
                     case PropertyTypeEnum.Int:
                     case PropertyTypeEnum.Double:
                     case PropertyTypeEnum.String:
                     case PropertyTypeEnum.Boolean:
                     case PropertyTypeEnum.DateTime:
                     case PropertyTypeEnum.Enum:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PropertyTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ProvinceSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ProvinceSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ProvinceSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ProvinceSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ProvinceSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ProvinceSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ProvinceSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ProvinceSubComponentEnum), i);

                switch ((ProvinceSubComponentEnum)i)
                {
                     case ProvinceSubComponentEnum.Areas:
                     case ProvinceSubComponentEnum.Municipalities:
                     case ProvinceSubComponentEnum.Files:
                     case ProvinceSubComponentEnum.SamplingPlan:
                     case ProvinceSubComponentEnum.OpenData:
                     case ProvinceSubComponentEnum.ProvinceTools:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ProvinceSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportConditionOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportConditionEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportConditionEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportConditionEnum), i);

                switch ((ReportConditionEnum)i)
                {
                     case ReportConditionEnum.ReportConditionTrue:
                     case ReportConditionEnum.ReportConditionFalse:
                     case ReportConditionEnum.ReportConditionContain:
                     case ReportConditionEnum.ReportConditionStart:
                     case ReportConditionEnum.ReportConditionEnd:
                     case ReportConditionEnum.ReportConditionBigger:
                     case ReportConditionEnum.ReportConditionSmaller:
                     case ReportConditionEnum.ReportConditionEqual:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportConditionEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFieldTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportFieldTypeEnum), i);

                switch ((ReportFieldTypeEnum)i)
                {
                     case ReportFieldTypeEnum.NumberWhole:
                     case ReportFieldTypeEnum.NumberWithDecimal:
                     case ReportFieldTypeEnum.DateAndTime:
                     case ReportFieldTypeEnum.Text:
                     case ReportFieldTypeEnum.TrueOrFalse:
                     case ReportFieldTypeEnum.FilePurpose:
                     case ReportFieldTypeEnum.FileType:
                     case ReportFieldTypeEnum.TranslationStatus:
                     case ReportFieldTypeEnum.BoxModelResultType:
                     case ReportFieldTypeEnum.InfrastructureType:
                     case ReportFieldTypeEnum.FacilityType:
                     case ReportFieldTypeEnum.AerationType:
                     case ReportFieldTypeEnum.PreliminaryTreatmentType:
                     case ReportFieldTypeEnum.PrimaryTreatmentType:
                     case ReportFieldTypeEnum.SecondaryTreatmentType:
                     case ReportFieldTypeEnum.TertiaryTreatmentType:
                     case ReportFieldTypeEnum.TreatmentType:
                     case ReportFieldTypeEnum.DisinfectionType:
                     case ReportFieldTypeEnum.CollectionSystemType:
                     case ReportFieldTypeEnum.AlarmSystemType:
                     case ReportFieldTypeEnum.ScenarioStatus:
                     case ReportFieldTypeEnum.StorageDataType:
                     case ReportFieldTypeEnum.Language:
                     case ReportFieldTypeEnum.SampleType:
                     case ReportFieldTypeEnum.BeaufortScale:
                     case ReportFieldTypeEnum.AnalyzeMethod:
                     case ReportFieldTypeEnum.SampleMatrix:
                     case ReportFieldTypeEnum.Laboratory:
                     case ReportFieldTypeEnum.SampleStatus:
                     case ReportFieldTypeEnum.SamplingPlanType:
                     case ReportFieldTypeEnum.LabSheetSampleType:
                     case ReportFieldTypeEnum.LabSheetType:
                     case ReportFieldTypeEnum.LabSheetStatus:
                     case ReportFieldTypeEnum.PolSourceInactiveReason:
                     case ReportFieldTypeEnum.PolSourceObsInfo:
                     case ReportFieldTypeEnum.AddressType:
                     case ReportFieldTypeEnum.StreetType:
                     case ReportFieldTypeEnum.ContactTitle:
                     case ReportFieldTypeEnum.EmailType:
                     case ReportFieldTypeEnum.TelType:
                     case ReportFieldTypeEnum.TideText:
                     case ReportFieldTypeEnum.TideDataType:
                     case ReportFieldTypeEnum.SpecialTableType:
                     case ReportFieldTypeEnum.MWQMSiteLatestClassification:
                     case ReportFieldTypeEnum.PolSourceIssueRisk:
                     case ReportFieldTypeEnum.MikeScenarioSpecialResultKMLType:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFieldTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFileTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportFileTypeEnum), i);

                switch ((ReportFileTypeEnum)i)
                {
                     case ReportFileTypeEnum.CSV:
                     case ReportFileTypeEnum.Word:
                     case ReportFileTypeEnum.Excel:
                     case ReportFileTypeEnum.KML:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFileTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFormatingDateOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportFormatingDateEnum), i);

                switch ((ReportFormatingDateEnum)i)
                {
                     case ReportFormatingDateEnum.ReportFormatingDateYearOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateMonthDecimalOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateMonthShortTextOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateMonthFullTextOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateDayOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateHourOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateMinuteOnly:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDay:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDay:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDay:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthDecimalDayHourMinute:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthShortTextDayHourMinute:
                     case ReportFormatingDateEnum.ReportFormatingDateYearMonthFullTextDayHourMinute:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingDateEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFormatingNumberOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportFormatingNumberEnum), i);

                switch ((ReportFormatingNumberEnum)i)
                {
                     case ReportFormatingNumberEnum.ReportFormatingNumber0Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber1Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber2Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber3Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber4Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber5Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumber6Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific0Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific1Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific2Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific3Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific4Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific5Decimal:
                     case ReportFormatingNumberEnum.ReportFormatingNumberScientific6Decimal:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportFormatingNumberEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportGenerateObjectsKeywordOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportGenerateObjectsKeywordEnum), i);

                switch ((ReportGenerateObjectsKeywordEnum)i)
                {
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RE_EVALUATION_COVER_PAGE:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_ALL:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_WET:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_FC_SUMMARY_STAT_DRY:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_DATA_AVAILABILITY:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SITES_BY_YEAR:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_RUNS_BY_YEAR:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_NUMBER_OF_SAMPLES_BY_YEAR:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_FC_TABLE:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_SALINITY_TABLE:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MWQM_SITES_TEMPERATURE_TABLE:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_SITES_COMPACT:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES_COMPACT:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITIES_FULL:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_MUNICIPALITY_INFRASTRUCTURE_MAP:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_ECCC_AND_SWCP_LOGO:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CSSP_LOGO:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_LOCATION_OF_SURVEY_AREA_MAP:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_CURRENT_CLASSIFICATION_AND_SAMPLING_LOCATION_MAP:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_RECOMMENDED_CLASSIFICATION_MAP:
                     case ReportGenerateObjectsKeywordEnum.SUBSECTOR_POLLUTION_SOURCE_LOCATIONS_MAP:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportGenerateObjectsKeywordEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportSortingOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportSortingEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportSortingEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportSortingEnum), i);

                switch ((ReportSortingEnum)i)
                {
                     case ReportSortingEnum.ReportSortingAscending:
                     case ReportSortingEnum.ReportSortingDescending:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportSortingEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportTreeNodeSubTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeSubTypeEnum), i);

                switch ((ReportTreeNodeSubTypeEnum)i)
                {
                     case ReportTreeNodeSubTypeEnum.TableSelectable:
                     case ReportTreeNodeSubTypeEnum.Field:
                     case ReportTreeNodeSubTypeEnum.FieldsHolder:
                     case ReportTreeNodeSubTypeEnum.TableNotSelectable:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeSubTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportTreeNodeTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ReportTreeNodeTypeEnum), i);

                switch ((ReportTreeNodeTypeEnum)i)
                {
                     case ReportTreeNodeTypeEnum.ReportRootType:
                     case ReportTreeNodeTypeEnum.ReportCountryType:
                     case ReportTreeNodeTypeEnum.ReportProvinceType:
                     case ReportTreeNodeTypeEnum.ReportAreaType:
                     case ReportTreeNodeTypeEnum.ReportSectorType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorType:
                     case ReportTreeNodeTypeEnum.ReportMWQMSiteType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunType:
                     case ReportTreeNodeTypeEnum.ReportPolSourceSiteType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityType:
                     case ReportTreeNodeTypeEnum.ReportRootFileType:
                     case ReportTreeNodeTypeEnum.ReportInfrastructureType:
                     case ReportTreeNodeTypeEnum.ReportBoxModelType:
                     case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioType:
                     case ReportTreeNodeTypeEnum.ReportMikeScenarioType:
                     case ReportTreeNodeTypeEnum.ReportMikeSourceType:
                     case ReportTreeNodeTypeEnum.ReportMWQMSiteSampleType:
                     case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsType:
                     case ReportTreeNodeTypeEnum.ReportPolSourceSiteObsIssueType:
                     case ReportTreeNodeTypeEnum.ReportMikeScenarioGeneralParameterType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityContactType:
                     case ReportTreeNodeTypeEnum.ReportConditionType:
                     case ReportTreeNodeTypeEnum.ReportStatisticType:
                     case ReportTreeNodeTypeEnum.ReportFieldsType:
                     case ReportTreeNodeTypeEnum.ReportFieldType:
                     case ReportTreeNodeTypeEnum.ReportPolSourceSiteAddressType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityContactTelType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityContactEmailType:
                     case ReportTreeNodeTypeEnum.ReportBoxModelResultType:
                     case ReportTreeNodeTypeEnum.ReportClimateSiteType:
                     case ReportTreeNodeTypeEnum.ReportClimateSiteDataType:
                     case ReportTreeNodeTypeEnum.ReportHydrometricSiteType:
                     case ReportTreeNodeTypeEnum.ReportHydrometricSiteDataType:
                     case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveType:
                     case ReportTreeNodeTypeEnum.ReportHydrometricSiteRatingCurveValueType:
                     case ReportTreeNodeTypeEnum.ReportInfrastructureAddressType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetDetailType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorLabSheetTubeMPNDetailType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunSampleType:
                     case ReportTreeNodeTypeEnum.ReportCountryFileType:
                     case ReportTreeNodeTypeEnum.ReportProvinceFileType:
                     case ReportTreeNodeTypeEnum.ReportAreaFileType:
                     case ReportTreeNodeTypeEnum.ReportSectorFileType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorFileType:
                     case ReportTreeNodeTypeEnum.ReportMWQMSiteFileType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunFileType:
                     case ReportTreeNodeTypeEnum.ReportPolSourceSiteFileType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityFileType:
                     case ReportTreeNodeTypeEnum.ReportInfrastructureFileType:
                     case ReportTreeNodeTypeEnum.ReportMikeScenarioFileType:
                     case ReportTreeNodeTypeEnum.ReportMikeSourceStartEndType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetDetailType:
                     case ReportTreeNodeTypeEnum.ReportMWQMRunLabSheetTubeMPNDetailType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetDetailType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanLabSheetTubeMPNDetailType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorType:
                     case ReportTreeNodeTypeEnum.ReportSamplingPlanSubsectorSiteType:
                     case ReportTreeNodeTypeEnum.ReportMikeBoundaryConditionType:
                     case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioAmbientType:
                     case ReportTreeNodeTypeEnum.ReportVisualPlumesScenarioResultType:
                     case ReportTreeNodeTypeEnum.ReportMPNLookupType:
                     case ReportTreeNodeTypeEnum.ReportMWQMSiteStartAndEndType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorTideSiteDataType:
                     case ReportTreeNodeTypeEnum.ReportOrderType:
                     case ReportTreeNodeTypeEnum.ReportFormatType:
                     case ReportTreeNodeTypeEnum.ReportMunicipalityContactAddressType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteDataType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorClimateSiteDataType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorHydrometricSiteRatingCurveValueType:
                     case ReportTreeNodeTypeEnum.ReportSubsectorSpecialTableType:
                     case ReportTreeNodeTypeEnum.ReportMikeScenarioSpecialResultKMLType:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ReportTreeNodeTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_RootSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(RootSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(RootSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RootSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(RootSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RootSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(RootSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(RootSubComponentEnum), i);

                switch ((RootSubComponentEnum)i)
                {
                     case RootSubComponentEnum.Countries:
                     case RootSubComponentEnum.Files:
                     case RootSubComponentEnum.ExportArcGIS:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RootSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_RunningOnOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(RunningOnEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(RunningOnEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RunningOnEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(RunningOnEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RunningOnEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(RunningOnEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(RunningOnEnum), i);

                switch ((RunningOnEnum)i)
                {
                     case RunningOnEnum.Azure:
                     case RunningOnEnum.Local:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "RunningOnEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SameDayNextDayOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SameDayNextDayEnum), i);

                switch ((SameDayNextDayEnum)i)
                {
                     case SameDayNextDayEnum.SameDay:
                     case SameDayNextDayEnum.NextDay:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SameDayNextDayEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleMatrixOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SampleMatrixEnum), i);

                switch ((SampleMatrixEnum)i)
                {
                     case SampleMatrixEnum.W:
                     case SampleMatrixEnum.S:
                     case SampleMatrixEnum.B:
                     case SampleMatrixEnum.MPNQ:
                     case SampleMatrixEnum.SampleMatrix5:
                     case SampleMatrixEnum.SampleMatrix6:
                     case SampleMatrixEnum.Water:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleMatrixEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SampleStatusEnum), i);

                switch ((SampleStatusEnum)i)
                {
                     case SampleStatusEnum.Active:
                     case SampleStatusEnum.Archived:
                     case SampleStatusEnum.SampleStatus3:
                     case SampleStatusEnum.SampleStatus4:
                     case SampleStatusEnum.SampleStatus5:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SampleTypeEnum), i);

                switch ((SampleTypeEnum)i)
                {
                     case SampleTypeEnum.DailyDuplicate:
                     case SampleTypeEnum.Infrastructure:
                     case SampleTypeEnum.IntertechDuplicate:
                     case SampleTypeEnum.IntertechRead:
                     case SampleTypeEnum.RainCMP:
                     case SampleTypeEnum.RainRun:
                     case SampleTypeEnum.ReopeningEmergencyRain:
                     case SampleTypeEnum.ReopeningSpill:
                     case SampleTypeEnum.Routine:
                     case SampleTypeEnum.Sanitary:
                     case SampleTypeEnum.Study:
                     case SampleTypeEnum.Sediment:
                     case SampleTypeEnum.Bivalve:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SampleTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SamplingPlanTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SamplingPlanTypeEnum), i);

                switch ((SamplingPlanTypeEnum)i)
                {
                     case SamplingPlanTypeEnum.Subsector:
                     case SamplingPlanTypeEnum.Municipality:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SamplingPlanTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ScenarioStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ScenarioStatusEnum), i);

                switch ((ScenarioStatusEnum)i)
                {
                     case ScenarioStatusEnum.Normal:
                     case ScenarioStatusEnum.Copying:
                     case ScenarioStatusEnum.Copied:
                     case ScenarioStatusEnum.Changing:
                     case ScenarioStatusEnum.Changed:
                     case ScenarioStatusEnum.AskToRun:
                     case ScenarioStatusEnum.Running:
                     case ScenarioStatusEnum.Completed:
                     case ScenarioStatusEnum.Cancelled:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ScenarioStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SearchTagOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SearchTagEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SearchTagEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SearchTagEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SearchTagEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SearchTagEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SearchTagEnum), i);

                switch ((SearchTagEnum)i)
                {
                     case SearchTagEnum.c:
                     case SearchTagEnum.e:
                     case SearchTagEnum.t:
                     case SearchTagEnum.fi:
                     case SearchTagEnum.fp:
                     case SearchTagEnum.frg:
                     case SearchTagEnum.ftg:
                     case SearchTagEnum.fpdf:
                     case SearchTagEnum.fdocx:
                     case SearchTagEnum.fxlsx:
                     case SearchTagEnum.fkmz:
                     case SearchTagEnum.fxyz:
                     case SearchTagEnum.fdfs:
                     case SearchTagEnum.fmike:
                     case SearchTagEnum.fmdf:
                     case SearchTagEnum.fm21fm:
                     case SearchTagEnum.fm3fm:
                     case SearchTagEnum.fmesh:
                     case SearchTagEnum.flog:
                     case SearchTagEnum.ftxt:
                     case SearchTagEnum.m:
                     case SearchTagEnum.p:
                     case SearchTagEnum.ms:
                     case SearchTagEnum.cs:
                     case SearchTagEnum.hs:
                     case SearchTagEnum.ts:
                     case SearchTagEnum.ww:
                     case SearchTagEnum.ls:
                     case SearchTagEnum.st:
                     case SearchTagEnum.ps:
                     case SearchTagEnum.a:
                     case SearchTagEnum.s:
                     case SearchTagEnum.ss:
                     case SearchTagEnum.u:
                     case SearchTagEnum.notag:
                     case SearchTagEnum.fcsv:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SearchTagEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SecondaryTreatmentTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SecondaryTreatmentTypeEnum), i);

                switch ((SecondaryTreatmentTypeEnum)i)
                {
                     case SecondaryTreatmentTypeEnum.NotApplicable:
                     case SecondaryTreatmentTypeEnum.RotatingBiologicalContactor:
                     case SecondaryTreatmentTypeEnum.TricklingFilters:
                     case SecondaryTreatmentTypeEnum.SequencingBatchReactor:
                     case SecondaryTreatmentTypeEnum.OxidationDitch:
                     case SecondaryTreatmentTypeEnum.ExtendedAeration:
                     case SecondaryTreatmentTypeEnum.ContactStabilization:
                     case SecondaryTreatmentTypeEnum.PhysicalChemicalProcesses:
                     case SecondaryTreatmentTypeEnum.MovingBedBioReactor:
                     case SecondaryTreatmentTypeEnum.BiologicalAearatedFilters:
                     case SecondaryTreatmentTypeEnum.AeratedSubmergedBioFilmReactor:
                     case SecondaryTreatmentTypeEnum.IntegratedFixedFilmActivatedSludge:
                     case SecondaryTreatmentTypeEnum.ActivatedSludge:
                     case SecondaryTreatmentTypeEnum.ExtendedActivatedSludge:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SecondaryTreatmentTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SectorSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SectorSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SectorSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SectorSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SectorSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SectorSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SectorSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SectorSubComponentEnum), i);

                switch ((SectorSubComponentEnum)i)
                {
                     case SectorSubComponentEnum.Subsectors:
                     case SectorSubComponentEnum.Files:
                     case SectorSubComponentEnum.MIKEScenarios:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SectorSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ShellSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ShellSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ShellSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ShellSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ShellSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ShellSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ShellSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ShellSubComponentEnum), i);

                switch ((ShellSubComponentEnum)i)
                {
                     case ShellSubComponentEnum.Area:
                     case ShellSubComponentEnum.Country:
                     case ShellSubComponentEnum.MikeScenario:
                     case ShellSubComponentEnum.Municipality:
                     case ShellSubComponentEnum.MWQMRun:
                     case ShellSubComponentEnum.MWQMSite:
                     case ShellSubComponentEnum.PolSourceSite:
                     case ShellSubComponentEnum.Province:
                     case ShellSubComponentEnum.Root:
                     case ShellSubComponentEnum.Sector:
                     case ShellSubComponentEnum.Subsector:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ShellSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SiteTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SiteTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SiteTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SiteTypeEnum), i);

                switch ((SiteTypeEnum)i)
                {
                     case SiteTypeEnum.Climate:
                     case SiteTypeEnum.Hydrometric:
                     case SiteTypeEnum.Tide:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SiteTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SortOrderAngularOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SortOrderAngularEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SortOrderAngularEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SortOrderAngularEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SortOrderAngularEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SortOrderAngularEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SortOrderAngularEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SortOrderAngularEnum), i);

                switch ((SortOrderAngularEnum)i)
                {
                     case SortOrderAngularEnum.AreaSectors:
                     case SortOrderAngularEnum.CountryProvinces:
                     case SortOrderAngularEnum.MunicipalityMIKEScenarios:
                     case SortOrderAngularEnum.ProvinceAreas:
                     case SortOrderAngularEnum.ProvinceMunicipalities:
                     case SortOrderAngularEnum.RootCountries:
                     case SortOrderAngularEnum.SectorSubsectors:
                     case SortOrderAngularEnum.SectorMikeScenarios:
                     case SortOrderAngularEnum.SubsectorMWQMRuns:
                     case SortOrderAngularEnum.SubsectorMWQMSites:
                     case SortOrderAngularEnum.SubsectorPolSourceSites:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SortOrderAngularEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SpecialTableTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SpecialTableTypeEnum), i);

                switch ((SpecialTableTypeEnum)i)
                {
                     case SpecialTableTypeEnum.FCDensitiesTable:
                     case SpecialTableTypeEnum.SalinityTable:
                     case SpecialTableTypeEnum.TemperatureTable:
                     case SpecialTableTypeEnum.GeometricMeanTable:
                     case SpecialTableTypeEnum.MedianTable:
                     case SpecialTableTypeEnum.P90Table:
                     case SpecialTableTypeEnum.PercentOver43Table:
                     case SpecialTableTypeEnum.PercentOver260Table:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SpecialTableTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_StorageDataTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(StorageDataTypeEnum), i);

                switch ((StorageDataTypeEnum)i)
                {
                     case StorageDataTypeEnum.Archived:
                     case StorageDataTypeEnum.Forcasted:
                     case StorageDataTypeEnum.Observed:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StorageDataTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_StreetTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StreetTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StreetTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(StreetTypeEnum), i);

                switch ((StreetTypeEnum)i)
                {
                     case StreetTypeEnum.Street:
                     case StreetTypeEnum.Road:
                     case StreetTypeEnum.Avenue:
                     case StreetTypeEnum.Crescent:
                     case StreetTypeEnum.Court:
                     case StreetTypeEnum.Alley:
                     case StreetTypeEnum.Drive:
                     case StreetTypeEnum.Blvd:
                     case StreetTypeEnum.Route:
                     case StreetTypeEnum.Lane:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "StreetTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SubsectorSubComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(SubsectorSubComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(SubsectorSubComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SubsectorSubComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(SubsectorSubComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SubsectorSubComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(SubsectorSubComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(SubsectorSubComponentEnum), i);

                switch ((SubsectorSubComponentEnum)i)
                {
                     case SubsectorSubComponentEnum.MWQMSites:
                     case SubsectorSubComponentEnum.Analysis:
                     case SubsectorSubComponentEnum.MWQMRuns:
                     case SubsectorSubComponentEnum.PollutionSourceSites:
                     case SubsectorSubComponentEnum.Files:
                     case SubsectorSubComponentEnum.SubsectorTools:
                     case SubsectorSubComponentEnum.LogBook:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "SubsectorSubComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TelTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TelTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TelTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TelTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TelTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TelTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TelTypeEnum), i);

                switch ((TelTypeEnum)i)
                {
                     case TelTypeEnum.Personal:
                     case TelTypeEnum.Work:
                     case TelTypeEnum.Mobile:
                     case TelTypeEnum.Personal2:
                     case TelTypeEnum.Work2:
                     case TelTypeEnum.Mobile2:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TelTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TertiaryTreatmentTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TertiaryTreatmentTypeEnum), i);

                switch ((TertiaryTreatmentTypeEnum)i)
                {
                     case TertiaryTreatmentTypeEnum.NotApplicable:
                     case TertiaryTreatmentTypeEnum.Adsorption:
                     case TertiaryTreatmentTypeEnum.Flocculation:
                     case TertiaryTreatmentTypeEnum.MembraneFiltration:
                     case TertiaryTreatmentTypeEnum.IonExchange:
                     case TertiaryTreatmentTypeEnum.ReverseOsmosis:
                     case TertiaryTreatmentTypeEnum.BiologicalNutrientRemoval:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TertiaryTreatmentTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TideDataTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TideDataTypeEnum), i);

                switch ((TideDataTypeEnum)i)
                {
                     case TideDataTypeEnum.Min15:
                     case TideDataTypeEnum.Min60:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideDataTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TideTextOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TideTextEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TideTextEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideTextEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TideTextEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideTextEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TideTextEnum), i);

                switch ((TideTextEnum)i)
                {
                     case TideTextEnum.LowTide:
                     case TideTextEnum.LowTideFalling:
                     case TideTextEnum.LowTideRising:
                     case TideTextEnum.MidTide:
                     case TideTextEnum.MidTideFalling:
                     case TideTextEnum.MidTideRising:
                     case TideTextEnum.HighTide:
                     case TideTextEnum.HighTideFalling:
                     case TideTextEnum.HighTideRising:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TideTextEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TopComponentOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TopComponentEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TopComponentEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TopComponentEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TopComponentEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TopComponentEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TopComponentEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TopComponentEnum), i);

                switch ((TopComponentEnum)i)
                {
                     case TopComponentEnum.Home:
                     case TopComponentEnum.Shell:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TopComponentEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TranslationStatusOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TranslationStatusEnum), i);

                switch ((TranslationStatusEnum)i)
                {
                     case TranslationStatusEnum.NotTranslated:
                     case TranslationStatusEnum.ElectronicallyTranslated:
                     case TranslationStatusEnum.Translated:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TranslationStatusEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TreatmentTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TreatmentTypeEnum), i);

                switch ((TreatmentTypeEnum)i)
                {
                     case TreatmentTypeEnum.ActivatedSludge:
                     case TreatmentTypeEnum.ActivatedSludgeWithBiofilter:
                     case TreatmentTypeEnum.LagoonNoAeration1Cell:
                     case TreatmentTypeEnum.LagoonNoAeration2Cell:
                     case TreatmentTypeEnum.LagoonNoAeration3Cell:
                     case TreatmentTypeEnum.LagoonNoAeration4Cell:
                     case TreatmentTypeEnum.LagoonNoAeration5Cell:
                     case TreatmentTypeEnum.LagoonWithAeration1Cell:
                     case TreatmentTypeEnum.LagoonWithAeration2Cell:
                     case TreatmentTypeEnum.LagoonWithAeration3Cell:
                     case TreatmentTypeEnum.LagoonWithAeration4Cell:
                     case TreatmentTypeEnum.LagoonWithAeration5Cell:
                     case TreatmentTypeEnum.LagoonWithAeration6Cell:
                     case TreatmentTypeEnum.StabalizingPondOnly:
                     case TreatmentTypeEnum.OxidationDitchOnly:
                     case TreatmentTypeEnum.CirculatingFluidizedBed:
                     case TreatmentTypeEnum.TricklingFilter:
                     case TreatmentTypeEnum.RecirculatingSandFilter:
                     case TreatmentTypeEnum.TrashRackRakeOnly:
                     case TreatmentTypeEnum.SepticTank:
                     case TreatmentTypeEnum.Secondary:
                     case TreatmentTypeEnum.Tertiary:
                     case TreatmentTypeEnum.VolumeFermenter:
                     case TreatmentTypeEnum.BioFilmReactor:
                     case TreatmentTypeEnum.BioGreen:
                     case TreatmentTypeEnum.BioDisks:
                     case TreatmentTypeEnum.ChemicalPrimary:
                     case TreatmentTypeEnum.Chromoglass:
                     case TreatmentTypeEnum.Primary:
                     case TreatmentTypeEnum.SequencingBatchReactor:
                     case TreatmentTypeEnum.PeatSystem:
                     case TreatmentTypeEnum.Physicochimique:
                     case TreatmentTypeEnum.RotatingBiologicalContactor:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TreatmentTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TVAuthOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TVAuthEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TVAuthEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVAuthEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TVAuthEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVAuthEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TVAuthEnum), i);

                switch ((TVAuthEnum)i)
                {
                     case TVAuthEnum.NoAccess:
                     case TVAuthEnum.Read:
                     case TVAuthEnum.Write:
                     case TVAuthEnum.Create:
                     case TVAuthEnum.Delete:
                     case TVAuthEnum.Admin:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVAuthEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TVTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(TVTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(TVTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(TVTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(TVTypeEnum), i);

                switch ((TVTypeEnum)i)
                {
                     case TVTypeEnum.Root:
                     case TVTypeEnum.Address:
                     case TVTypeEnum.Area:
                     case TVTypeEnum.ClimateSite:
                     case TVTypeEnum.Contact:
                     case TVTypeEnum.Country:
                     case TVTypeEnum.Email:
                     case TVTypeEnum.File:
                     case TVTypeEnum.HydrometricSite:
                     case TVTypeEnum.Infrastructure:
                     case TVTypeEnum.MikeBoundaryConditionWebTide:
                     case TVTypeEnum.MikeBoundaryConditionMesh:
                     case TVTypeEnum.MikeScenario:
                     case TVTypeEnum.MikeSource:
                     case TVTypeEnum.Municipality:
                     case TVTypeEnum.MWQMSite:
                     case TVTypeEnum.PolSourceSite:
                     case TVTypeEnum.Province:
                     case TVTypeEnum.Sector:
                     case TVTypeEnum.Subsector:
                     case TVTypeEnum.Tel:
                     case TVTypeEnum.TideSite:
                     case TVTypeEnum.MWQMSiteSample:
                     case TVTypeEnum.WasteWaterTreatmentPlant:
                     case TVTypeEnum.LiftStation:
                     case TVTypeEnum.Spill:
                     case TVTypeEnum.BoxModel:
                     case TVTypeEnum.VisualPlumesScenario:
                     case TVTypeEnum.Outfall:
                     case TVTypeEnum.OtherInfrastructure:
                     case TVTypeEnum.MWQMRun:
                     case TVTypeEnum.NoDepuration:
                     case TVTypeEnum.Failed:
                     case TVTypeEnum.Passed:
                     case TVTypeEnum.NoData:
                     case TVTypeEnum.LessThan10:
                     case TVTypeEnum.MeshNode:
                     case TVTypeEnum.WebTideNode:
                     case TVTypeEnum.SamplingPlan:
                     case TVTypeEnum.SeeOtherMunicipality:
                     case TVTypeEnum.LineOverflow:
                     case TVTypeEnum.BoxModelInputs:
                     case TVTypeEnum.BoxModelResults:
                     case TVTypeEnum.ClimateSiteInfo:
                     case TVTypeEnum.ClimateSiteData:
                     case TVTypeEnum.HydrometricSiteInfo:
                     case TVTypeEnum.HydrometricSiteData:
                     case TVTypeEnum.InfrastructureInfo:
                     case TVTypeEnum.LabSheetInfo:
                     case TVTypeEnum.LabSheetDetailInfo:
                     case TVTypeEnum.MapInfo:
                     case TVTypeEnum.MapInfoPoint:
                     case TVTypeEnum.MikeSourceStartEndInfo:
                     case TVTypeEnum.MWQMLookupMPNInfo:
                     case TVTypeEnum.SamplingPlanInfo:
                     case TVTypeEnum.SamplingPlanSubsectorInfo:
                     case TVTypeEnum.SamplingPlanSubsectorSiteInfo:
                     case TVTypeEnum.MWQMSiteStartEndInfo:
                     case TVTypeEnum.MWQMSubsectorInfo:
                     case TVTypeEnum.PolSourceSiteInfo:
                     case TVTypeEnum.PolSourceSiteObsInfo:
                     case TVTypeEnum.HydrometricRatingCurveInfo:
                     case TVTypeEnum.HydrometricRatingCurveDataInfo:
                     case TVTypeEnum.TideLocationInfo:
                     case TVTypeEnum.TideSiteDataInfo:
                     case TVTypeEnum.UseOfSite:
                     case TVTypeEnum.VisualPlumesScenarioInfo:
                     case TVTypeEnum.VisualPlumesScenarioAmbient:
                     case TVTypeEnum.VisualPlumesScenarioResults:
                     case TVTypeEnum.TotalFile:
                     case TVTypeEnum.MikeSourceIsRiver:
                     case TVTypeEnum.MikeSourceIncluded:
                     case TVTypeEnum.MikeSourceNotIncluded:
                     case TVTypeEnum.RainExceedance:
                     case TVTypeEnum.EmailDistributionList:
                     case TVTypeEnum.OpenData:
                     case TVTypeEnum.ProvinceTools:
                     case TVTypeEnum.Classification:
                     case TVTypeEnum.Approved:
                     case TVTypeEnum.Restricted:
                     case TVTypeEnum.Prohibited:
                     case TVTypeEnum.ConditionallyApproved:
                     case TVTypeEnum.ConditionallyRestricted:
                     case TVTypeEnum.OpenDataNational:
                     case TVTypeEnum.PolSourceSiteMikeScenario:
                     case TVTypeEnum.SubsectorTools:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "TVTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ValveTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(ValveTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(ValveTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ValveTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(ValveTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ValveTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(ValveTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(ValveTypeEnum), i);

                switch ((ValveTypeEnum)i)
                {
                     case ValveTypeEnum.Manually:
                     case ValveTypeEnum.Automatically:
                     case ValveTypeEnum.None:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "ValveTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTypeOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(WebTypeEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(WebTypeEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(WebTypeEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(WebTypeEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(WebTypeEnum), i);

                switch ((WebTypeEnum)i)
                {
                     case WebTypeEnum.WebRoot:
                     case WebTypeEnum.WebCountry:
                     case WebTypeEnum.WebProvince:
                     case WebTypeEnum.WebArea:
                     case WebTypeEnum.WebMunicipalities:
                     case WebTypeEnum.WebSector:
                     case WebTypeEnum.WebSubsector:
                     case WebTypeEnum.WebMunicipality:
                     case WebTypeEnum.WebMWQMSample:
                     case WebTypeEnum.WebSamplingPlan:
                     case WebTypeEnum.WebMWQMRun:
                     case WebTypeEnum.WebMWQMSite:
                     case WebTypeEnum.WebContact:
                     case WebTypeEnum.WebClimateSite:
                     case WebTypeEnum.WebHydrometricSite:
                     case WebTypeEnum.WebDrogueRun:
                     case WebTypeEnum.WebMWQMLookupMPN:
                     case WebTypeEnum.WebMikeScenario:
                     case WebTypeEnum.WebClimateDataValue:
                     case WebTypeEnum.WebHydrometricDataValue:
                     case WebTypeEnum.WebHelpDoc:
                     case WebTypeEnum.WebTideLocation:
                     case WebTypeEnum.WebPolSourceSite:
                     case WebTypeEnum.WebPolSourceGrouping:
                     case WebTypeEnum.WebReportType:
                     case WebTypeEnum.WebAllTVItem:
                     case WebTypeEnum.WebPolSourceSiteEffectTerm:
                     case WebTypeEnum.WebAllTVItemLanguage:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTypeYearOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(WebTypeYearEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(WebTypeYearEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeYearEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(WebTypeYearEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeYearEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(WebTypeYearEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(WebTypeYearEnum), i);

                switch ((WebTypeYearEnum)i)
                {
                     case WebTypeYearEnum.Year1980:
                     case WebTypeYearEnum.Year1990:
                     case WebTypeYearEnum.Year2000:
                     case WebTypeYearEnum.Year2010:
                     case WebTypeYearEnum.Year2020:
                     case WebTypeYearEnum.Year2030:
                     case WebTypeYearEnum.Year2040:
                     case WebTypeYearEnum.Year2050:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTypeYearEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTideDataSetOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(WebTideDataSetEnum), i);

                switch ((WebTideDataSetEnum)i)
                {
                     case WebTideDataSetEnum.arctic9:
                     case WebTideDataSetEnum.brador:
                     case WebTideDataSetEnum.HRglobal:
                     case WebTideDataSetEnum.h3o:
                     case WebTideDataSetEnum.hudson:
                     case WebTideDataSetEnum.ne_pac4:
                     case WebTideDataSetEnum.nwatl:
                     case WebTideDataSetEnum.QuatsinoModel14:
                     case WebTideDataSetEnum.sshelf:
                     case WebTideDataSetEnum.flood:
                     case WebTideDataSetEnum.vigf8:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "WebTideDataSetEnum"), retStr);
                        break;
                }
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceObsInfoOK_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            string retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), null);
            Assert.Equal("", retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), -100);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);

            retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), 10000000);
            Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);

            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))
            {
                retStr = enums.EnumTypeOK(typeof(PolSourceObsInfoEnum), i);

                switch ((PolSourceObsInfoEnum)i)
                {
                     case PolSourceObsInfoEnum.SourceStart:
                     case PolSourceObsInfoEnum.SourceHumanLand:
                     case PolSourceObsInfoEnum.SourceHumanMarine:
                     case PolSourceObsInfoEnum.SourceAnimal:
                     case PolSourceObsInfoEnum.SourceEffluentLand:
                     case PolSourceObsInfoEnum.SourceEffluentMarine:
                     case PolSourceObsInfoEnum.HumanPollutionSingleStart:
                     case PolSourceObsInfoEnum.HumanPollutionSingleResidential:
                     case PolSourceObsInfoEnum.HumanPollutionSingleCottage:
                     case PolSourceObsInfoEnum.HumanPollutionSingleTrailer:
                     case PolSourceObsInfoEnum.HumanPollutionSingleWarehouse:
                     case PolSourceObsInfoEnum.HumanPollutionSingleCommerical:
                     case PolSourceObsInfoEnum.HumanPollutionSingleBarn:
                     case PolSourceObsInfoEnum.HumanPollutionSinglePublicBuildings:
                     case PolSourceObsInfoEnum.HumanPollutionSingleSchool:
                     case PolSourceObsInfoEnum.HumanPollutionSingleChurch:
                     case PolSourceObsInfoEnum.HumanPollutionSingleMedicalFacility:
                     case PolSourceObsInfoEnum.HumanPollutionSingleOuthouse:
                     case PolSourceObsInfoEnum.HumanPollutionSinglehotelMotel:
                     case PolSourceObsInfoEnum.HumanPollutionSingleBoatM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleBargeM:
                     case PolSourceObsInfoEnum.HumanPollutionSinglehotelMotelM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleResidentialM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleCottageM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleWarehouseM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleCommericalM:
                     case PolSourceObsInfoEnum.HumanPollutionSingleFishPlant:
                     case PolSourceObsInfoEnum.HumanPollutionSingleBeachPatio:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleStart:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleResidences:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleCottages:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleTrailers:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleWarehouses:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleCommericals:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleBarns:
                     case PolSourceObsInfoEnum.HumanPollutionMultiplePublicBuildings:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleSchools:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleChurches:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleMedicalFacilities:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleOuthouses:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleHotelsMotels:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleBoatsM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleBargesM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleHotelsMotelsM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleResidencesM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleCottagesM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleWarehousesM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleCommericalsM:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleFishPlants:
                     case PolSourceObsInfoEnum.HumanPollutionMultipleBeachPatios:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberStart:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo1:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo2:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo3:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo4:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo5:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo6:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo7:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo8:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo9:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo10:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween11and20:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween21and40:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween41and60:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween61and100:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween101and200:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween201and400:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberGreaterThan400:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo1M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo2M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo3M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo4M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo5M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo6M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo7M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo8M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo9M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberEqualTo10M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween11and20M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween21and40M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween41and60M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween61and100M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween101and200M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberBetween201and400M:
                     case PolSourceObsInfoEnum.HumanPollutionCountNumberGreaterThan400M:
                     case PolSourceObsInfoEnum.HumanLocationStart:
                     case PolSourceObsInfoEnum.HumanLocationRural:
                     case PolSourceObsInfoEnum.HumanLocationUrban:
                     case PolSourceObsInfoEnum.HumanLocationForested:
                     case PolSourceObsInfoEnum.HumanLocationAgricultural:
                     case PolSourceObsInfoEnum.HumanLocationFarm:
                     case PolSourceObsInfoEnum.HumanLocationShorelineMarine:
                     case PolSourceObsInfoEnum.HumanLocationWharfMarine:
                     case PolSourceObsInfoEnum.HumanLocationBarge:
                     case PolSourceObsInfoEnum.HumanLocationIsland:
                     case PolSourceObsInfoEnum.HumanLocationRecreationalArea:
                     case PolSourceObsInfoEnum.HumanLocationSeasonalCottageLot:
                     case PolSourceObsInfoEnum.HumanLocationWetland:
                     case PolSourceObsInfoEnum.HumanLocationWaterCourse:
                     case PolSourceObsInfoEnum.HumanLocationFishPlant:
                     case PolSourceObsInfoEnum.HumanLocationAquacultureSiteMarine:
                     case PolSourceObsInfoEnum.HumanLocationAnchorageMooringSiteMarine:
                     case PolSourceObsInfoEnum.HumanLocationDisposalAtSeaMarine:
                     case PolSourceObsInfoEnum.HumanLocationMarineParkMarine:
                     case PolSourceObsInfoEnum.HumanLocationMarinaMarine:
                     case PolSourceObsInfoEnum.HumanLocationFloatHomeCommunityMarine:
                     case PolSourceObsInfoEnum.HumanLocationMarinaLand:
                     case PolSourceObsInfoEnum.HumanLocationShorelineLand:
                     case PolSourceObsInfoEnum.HumanLocationWharfLand:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeStart:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals10:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals20:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals40:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals60:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals80:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersEquals100:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween101And250:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween251And500:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersBetween501And1000:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersGreaterThan1000:
                     case PolSourceObsInfoEnum.IndustrialAreaSizeMetersInFoRequired:
                     case PolSourceObsInfoEnum.OuthouseStart:
                     case PolSourceObsInfoEnum.OuthouseConcreteTank:
                     case PolSourceObsInfoEnum.OuthouseOnGround:
                     case PolSourceObsInfoEnum.OuthouseOnPortable:
                     case PolSourceObsInfoEnum.IndustrialEffluentStart:
                     case PolSourceObsInfoEnum.IndustrialEffluentForestry:
                     case PolSourceObsInfoEnum.IndustrialEffluentAgricultureFarm:
                     case PolSourceObsInfoEnum.IndustrialEffluentFisheryLand:
                     case PolSourceObsInfoEnum.IndustrialEffluentShorelineStructures:
                     case PolSourceObsInfoEnum.IndustrialEffluentIndustrialTreatment:
                     case PolSourceObsInfoEnum.IndustrialEffluentStorageTank:
                     case PolSourceObsInfoEnum.IndustrialEffluentAirport:
                     case PolSourceObsInfoEnum.IndustrialEffluentLandfill:
                     case PolSourceObsInfoEnum.IndustrialEffluentUrbanRunoff:
                     case PolSourceObsInfoEnum.IndustrialEffluentRecreation:
                     case PolSourceObsInfoEnum.IndustrialEffluentAquacultureSite:
                     case PolSourceObsInfoEnum.IndustrialEffluentAnchorageMooringSite:
                     case PolSourceObsInfoEnum.IndustrialEffluentDisposalAtSea:
                     case PolSourceObsInfoEnum.IndustrialEffluentMarina:
                     case PolSourceObsInfoEnum.IndustrialEffluentRural:
                     case PolSourceObsInfoEnum.IndustrialEffluentShoreline:
                     case PolSourceObsInfoEnum.AgriculturalSourceStart:
                     case PolSourceObsInfoEnum.AgriculturalSourceCrop:
                     case PolSourceObsInfoEnum.AgricultureSourcePasture:
                     case PolSourceObsInfoEnum.AgriculturesourceFeedlot:
                     case PolSourceObsInfoEnum.AriculturalSourcePeatMoss:
                     case PolSourceObsInfoEnum.AgricultureSourceManure:
                     case PolSourceObsInfoEnum.AgriculturalSourceBarn:
                     case PolSourceObsInfoEnum.AgriculturalSoureRunoff:
                     case PolSourceObsInfoEnum.ManureManagementStart:
                     case PolSourceObsInfoEnum.ManureManagementPileSpread:
                     case PolSourceObsInfoEnum.ManureManagementLiqSpread:
                     case PolSourceObsInfoEnum.ManureManagementBoth:
                     case PolSourceObsInfoEnum.FieldLocationStart:
                     case PolSourceObsInfoEnum.FieldLocationOnFarm:
                     case PolSourceObsInfoEnum.FieldLocationOffFarm:
                     case PolSourceObsInfoEnum.FieldLocationBoth:
                     case PolSourceObsInfoEnum.PastureStart:
                     case PolSourceObsInfoEnum.PastureActive:
                     case PolSourceObsInfoEnum.PastureFallow:
                     case PolSourceObsInfoEnum.FeedlotStart:
                     case PolSourceObsInfoEnum.FeedlotActive:
                     case PolSourceObsInfoEnum.FeedlotNotActive:
                     case PolSourceObsInfoEnum.FisheriesSourceStart:
                     case PolSourceObsInfoEnum.FisheriesSourceShellfishProcessing:
                     case PolSourceObsInfoEnum.FisheriesSourceFinfishProcessing:
                     case PolSourceObsInfoEnum.FisheriesSourceBaitFishProcessing:
                     case PolSourceObsInfoEnum.FisheriesSourceLobsterProcessing:
                     case PolSourceObsInfoEnum.FisheriesSourceLobsterAndBaitfishProcessing:
                     case PolSourceObsInfoEnum.FisheriesSourceShellfishLive:
                     case PolSourceObsInfoEnum.FisheriesSourceFinfishLive:
                     case PolSourceObsInfoEnum.FisheriesSourceLobsterLive:
                     case PolSourceObsInfoEnum.FishOperationStart:
                     case PolSourceObsInfoEnum.FishOperationProcessing:
                     case PolSourceObsInfoEnum.FishOperationHoldingTanks:
                     case PolSourceObsInfoEnum.FishOperationPackaging:
                     case PolSourceObsInfoEnum.FishOperationRearing:
                     case PolSourceObsInfoEnum.FishOperationFishMeal:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleStart:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleProcessingPlant:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleHatchery:
                     case PolSourceObsInfoEnum.FishBuildingTypeSinglePond:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleTank:
                     case PolSourceObsInfoEnum.FishBuildingTypeSinglePound:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleAbandoned:
                     case PolSourceObsInfoEnum.FishBuildingTypeSingleWarehouse:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleStart:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleProcessingPlants:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleHatcheries:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultiplePonds:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleTanks:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultiplePounds:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleAbandoned:
                     case PolSourceObsInfoEnum.FishBuildingTypeMultipleWarehouse:
                     case PolSourceObsInfoEnum.FISCountNumberStart:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo1:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo2:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo3:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo4:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo5:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo6:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo7:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo8:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo9:
                     case PolSourceObsInfoEnum.FISCountNumberEqualTo10:
                     case PolSourceObsInfoEnum.FISCountNumberBetween10and25:
                     case PolSourceObsInfoEnum.FISCountNumberBetween25and40:
                     case PolSourceObsInfoEnum.FISCountNumberGreaterThan40:
                     case PolSourceObsInfoEnum.ShorelineSourceStart:
                     case PolSourceObsInfoEnum.ShorelineSourceWharf:
                     case PolSourceObsInfoEnum.ShorelineSourceSeaWall:
                     case PolSourceObsInfoEnum.ShorelineSourceBoatRamp:
                     case PolSourceObsInfoEnum.ShorelineSourceBoatHouse:
                     case PolSourceObsInfoEnum.SlipwayStart:
                     case PolSourceObsInfoEnum.SlipwayPaved:
                     case PolSourceObsInfoEnum.SlipwayRocks:
                     case PolSourceObsInfoEnum.WharfStart:
                     case PolSourceObsInfoEnum.WharfCommercialTransportation:
                     case PolSourceObsInfoEnum.WharfFishing:
                     case PolSourceObsInfoEnum.WharfRecreational:
                     case PolSourceObsInfoEnum.WharfAbandoned:
                     case PolSourceObsInfoEnum.VesselCountStart:
                     case PolSourceObsInfoEnum.VesselCountEquals1:
                     case PolSourceObsInfoEnum.VesselCountEquals2:
                     case PolSourceObsInfoEnum.VesselCountEquals3:
                     case PolSourceObsInfoEnum.VesselCountEquals4:
                     case PolSourceObsInfoEnum.VesselCountEquals5:
                     case PolSourceObsInfoEnum.VesselCountEquals6:
                     case PolSourceObsInfoEnum.VesselCountEquals7:
                     case PolSourceObsInfoEnum.VesselCountEquals8:
                     case PolSourceObsInfoEnum.VesselCountEquals9:
                     case PolSourceObsInfoEnum.VesselCountEquals10:
                     case PolSourceObsInfoEnum.VesselCountBetwee11and25:
                     case PolSourceObsInfoEnum.VesselCountBetween26and50:
                     case PolSourceObsInfoEnum.VesselCountBetween51and100:
                     case PolSourceObsInfoEnum.VesselCountGreaterThan100:
                     case PolSourceObsInfoEnum.VesselCountNotApplicable:
                     case PolSourceObsInfoEnum.WharfTransportationSingleStart:
                     case PolSourceObsInfoEnum.WharfTransportationCommericalSingle:
                     case PolSourceObsInfoEnum.WharfTransportationFerrySingle:
                     case PolSourceObsInfoEnum.WharfTransportationFishingBoatSingle:
                     case PolSourceObsInfoEnum.WharfTransportationBargeSingle:
                     case PolSourceObsInfoEnum.WharfTransportationRecreationActivitySingle:
                     case PolSourceObsInfoEnum.WharfTransportationPleasureBoatSingle:
                     case PolSourceObsInfoEnum.WharfTransportationStart:
                     case PolSourceObsInfoEnum.WharfTransportationCommerical:
                     case PolSourceObsInfoEnum.WharfTransportationFerry:
                     case PolSourceObsInfoEnum.WharfTransportationFishingBoats:
                     case PolSourceObsInfoEnum.WharfTransportationBarges:
                     case PolSourceObsInfoEnum.WharfTransportationRecreationActivities:
                     case PolSourceObsInfoEnum.WharfTransportationPleasureBoats:
                     case PolSourceObsInfoEnum.MarWhfCountNumberStart:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo1:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo2:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo3:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo4:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo5:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo6:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo7:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo8:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo9:
                     case PolSourceObsInfoEnum.MarWhfCountNumberEqualTo10:
                     case PolSourceObsInfoEnum.MarWhfCountNumberBetween11and25:
                     case PolSourceObsInfoEnum.MarWhfCountNumberBetween26and40:
                     case PolSourceObsInfoEnum.MarWhfCountNumberGreaterThan40:
                     case PolSourceObsInfoEnum.RecreationStart:
                     case PolSourceObsInfoEnum.RecreationCampground:
                     case PolSourceObsInfoEnum.RecreationDayUseArea:
                     case PolSourceObsInfoEnum.RecreationSwimmingArea:
                     case PolSourceObsInfoEnum.RecreationGolfCourse:
                     case PolSourceObsInfoEnum.RecreationFishing:
                     case PolSourceObsInfoEnum.RecreationCampgroundSewage:
                     case PolSourceObsInfoEnum.RecreationDayUseAreaSewage:
                     case PolSourceObsInfoEnum.RecreationSwimmingAreaSewage:
                     case PolSourceObsInfoEnum.RecreationGolfCourseSewage:
                     case PolSourceObsInfoEnum.RECCountNumberStart:
                     case PolSourceObsInfoEnum.RECCountNumber10:
                     case PolSourceObsInfoEnum.RECCountNumber30:
                     case PolSourceObsInfoEnum.RECCountNumber50:
                     case PolSourceObsInfoEnum.RECCountNumber100:
                     case PolSourceObsInfoEnum.RECCountNumber200:
                     case PolSourceObsInfoEnum.RECCountNumber300:
                     case PolSourceObsInfoEnum.RECCountNumber500:
                     case PolSourceObsInfoEnum.CampgroundFacilitiesStart:
                     case PolSourceObsInfoEnum.CampgroundNoDumpStn:
                     case PolSourceObsInfoEnum.CampgroundWithDumpStn:
                     case PolSourceObsInfoEnum.CampgroundNoDumpStnSewage:
                     case PolSourceObsInfoEnum.CampgroundWithDumpStnSewage:
                     case PolSourceObsInfoEnum.UrbanStart:
                     case PolSourceObsInfoEnum.UrbanAccumulatedFlow:
                     case PolSourceObsInfoEnum.UrbanWastewaterDumpStation:
                     case PolSourceObsInfoEnum.TankSizeStart:
                     case PolSourceObsInfoEnum.TankSize400:
                     case PolSourceObsInfoEnum.TankSize2000:
                     case PolSourceObsInfoEnum.TankSize4000:
                     case PolSourceObsInfoEnum.TankSize8000:
                     case PolSourceObsInfoEnum.LandfillTypeStart:
                     case PolSourceObsInfoEnum.LandfillTypeResidental:
                     case PolSourceObsInfoEnum.LandfillTypeIndustrial:
                     case PolSourceObsInfoEnum.LandfillTypeWoodwaste:
                     case PolSourceObsInfoEnum.TypesOfAnimalStart:
                     case PolSourceObsInfoEnum.TypesOfAnimalLivestock:
                     case PolSourceObsInfoEnum.TypesOfAnimalWildlife:
                     case PolSourceObsInfoEnum.TypesOfAnimalMarine:
                     case PolSourceObsInfoEnum.TypesOfLivestockStart:
                     case PolSourceObsInfoEnum.TypesOfLivestockHorses:
                     case PolSourceObsInfoEnum.TypesOfLivestockCows:
                     case PolSourceObsInfoEnum.TypesOfLivestockSheep:
                     case PolSourceObsInfoEnum.TypesOfLivestockPigs:
                     case PolSourceObsInfoEnum.TypesOfLivestockMixtureLarge:
                     case PolSourceObsInfoEnum.TypesOfLivestockChickens:
                     case PolSourceObsInfoEnum.TypesOfLivestockTurkeys:
                     case PolSourceObsInfoEnum.TypesOfLivestockDucks:
                     case PolSourceObsInfoEnum.TypesOfLivestockMixtureSmall:
                     case PolSourceObsInfoEnum.TypesOfLivestockFurFarms:
                     case PolSourceObsInfoEnum.TypesOfLivestockDogs:
                     case PolSourceObsInfoEnum.TypesOfWildlifeStart:
                     case PolSourceObsInfoEnum.TypesOfWildlifeCrows:
                     case PolSourceObsInfoEnum.TypesOfWildlifeGulls:
                     case PolSourceObsInfoEnum.TypesOfWildlifeEagle:
                     case PolSourceObsInfoEnum.TypesOfWildlifeUngulate:
                     case PolSourceObsInfoEnum.TypesOfWildlifeCoyote:
                     case PolSourceObsInfoEnum.TypesOfWildlifeGeneral:
                     case PolSourceObsInfoEnum.TypesOfWildlifeBeaver:
                     case PolSourceObsInfoEnum.TypesOfWildlifeMuskrat:
                     case PolSourceObsInfoEnum.TypesOfWildLifeDucksGeese:
                     case PolSourceObsInfoEnum.AnimalLocationStart:
                     case PolSourceObsInfoEnum.AnimalLocationRuralDom:
                     case PolSourceObsInfoEnum.AnimalLocationUrbanDom:
                     case PolSourceObsInfoEnum.AnimalLocationForestedDom:
                     case PolSourceObsInfoEnum.AnimalLocationAgriculturalDom:
                     case PolSourceObsInfoEnum.AnimalLocationFarmDom:
                     case PolSourceObsInfoEnum.AnimalLocationShorelineDom:
                     case PolSourceObsInfoEnum.AnimalLocationWharfDom:
                     case PolSourceObsInfoEnum.AnimalLocationBargeDom:
                     case PolSourceObsInfoEnum.AnimalLocationIslandDom:
                     case PolSourceObsInfoEnum.AnimalLocationRecreationalAreaDom:
                     case PolSourceObsInfoEnum.AnimalLocationCottageLotDom:
                     case PolSourceObsInfoEnum.AnimalLocationWetlandDom:
                     case PolSourceObsInfoEnum.AnimalLocationWaterCourseDom:
                     case PolSourceObsInfoEnum.AnimalLocationFishPlant:
                     case PolSourceObsInfoEnum.AnimalLocationRural:
                     case PolSourceObsInfoEnum.AnimalLocationUrban:
                     case PolSourceObsInfoEnum.AnimalLocationForested:
                     case PolSourceObsInfoEnum.AnimalLocationAgricultural:
                     case PolSourceObsInfoEnum.AnimalLocationFarm:
                     case PolSourceObsInfoEnum.AnimalLocationShoreline:
                     case PolSourceObsInfoEnum.AnimalLocationWharf:
                     case PolSourceObsInfoEnum.AnimalLocationBarge:
                     case PolSourceObsInfoEnum.AnimalLocationIsland:
                     case PolSourceObsInfoEnum.AnimalLocationRecreationalArea:
                     case PolSourceObsInfoEnum.AnimalLocationCottageLot:
                     case PolSourceObsInfoEnum.AnimalLocationWetland:
                     case PolSourceObsInfoEnum.AnimalLocationWaterCourse:
                     case PolSourceObsInfoEnum.AnimalLocationPondLakeDom:
                     case PolSourceObsInfoEnum.AnimalLocationPondLake:
                     case PolSourceObsInfoEnum.AnimalBldgStart:
                     case PolSourceObsInfoEnum.AnimalBldgEquals1:
                     case PolSourceObsInfoEnum.AnimalBldgEquals2:
                     case PolSourceObsInfoEnum.AnimalBldgEquals3:
                     case PolSourceObsInfoEnum.AnimalBldgEquals4:
                     case PolSourceObsInfoEnum.AnimalBldgEquals5:
                     case PolSourceObsInfoEnum.AnimalBldgEquals6:
                     case PolSourceObsInfoEnum.AnimalBldgEquals7:
                     case PolSourceObsInfoEnum.AnimalBldgEquals8:
                     case PolSourceObsInfoEnum.AnimalBldgEquals9:
                     case PolSourceObsInfoEnum.AnimalBldgEquals10:
                     case PolSourceObsInfoEnum.AnimalBldgEqualsNotApplicable:
                     case PolSourceObsInfoEnum.AnimalBldgSingleTypeStart:
                     case PolSourceObsInfoEnum.AnimalBldgSingleCages:
                     case PolSourceObsInfoEnum.AnimalBldgSingleBarn:
                     case PolSourceObsInfoEnum.AnimalBldgSingleBuildings:
                     case PolSourceObsInfoEnum.AnimalBldgMultipleTypeStart:
                     case PolSourceObsInfoEnum.AnimalBldgMultipleCages:
                     case PolSourceObsInfoEnum.AnimalBldgMultipleBarns:
                     case PolSourceObsInfoEnum.AnimalBldgMultipleOtherBuildings:
                     case PolSourceObsInfoEnum.AnimalNumberPresentStart:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox2:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox5:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox10:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox15:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox25:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox50:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox100:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox500:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox1000:
                     case PolSourceObsInfoEnum.NumberAnimalPresentapprox5000:
                     case PolSourceObsInfoEnum.NumberAnimalPresentGreaterThan10000:
                     case PolSourceObsInfoEnum.NumberAnimalPresentGreaterThan20000:
                     case PolSourceObsInfoEnum.NumberAnimalPresentUnknown:
                     case PolSourceObsInfoEnum.BoatStart:
                     case PolSourceObsInfoEnum.BoatCountEquals1:
                     case PolSourceObsInfoEnum.BoatCountEquals2:
                     case PolSourceObsInfoEnum.BoatCountEquals3:
                     case PolSourceObsInfoEnum.BoatCountEquals4:
                     case PolSourceObsInfoEnum.BoatCountEquals5:
                     case PolSourceObsInfoEnum.BoatCountEquals6:
                     case PolSourceObsInfoEnum.BoatCountEquals7:
                     case PolSourceObsInfoEnum.BoatCountEquals8:
                     case PolSourceObsInfoEnum.BoatCountEquals9:
                     case PolSourceObsInfoEnum.BoatCountEquals10:
                     case PolSourceObsInfoEnum.BoatCountBetween11to25:
                     case PolSourceObsInfoEnum.BoatCountBetween26to50:
                     case PolSourceObsInfoEnum.BoatCountBetween51to75:
                     case PolSourceObsInfoEnum.BoatCountBetween76to100:
                     case PolSourceObsInfoEnum.BoatCountGreaterThan100:
                     case PolSourceObsInfoEnum.BoatCountGreaterThan150:
                     case PolSourceObsInfoEnum.BoatCountGreaterThan250:
                     case PolSourceObsInfoEnum.OilDumpingFacilityStart:
                     case PolSourceObsInfoEnum.OilDumpingFacilityPresent:
                     case PolSourceObsInfoEnum.OilDumpingFacilityAbsent:
                     case PolSourceObsInfoEnum.OilDumpingFacilityNotObserved:
                     case PolSourceObsInfoEnum.OilDumpingFacilityNotApplicable:
                     case PolSourceObsInfoEnum.WastewaterDumpingStationStart:
                     case PolSourceObsInfoEnum.WastewaterDumpingStationPresent:
                     case PolSourceObsInfoEnum.WastewaterDumpingStationAbsent:
                     case PolSourceObsInfoEnum.WastewaterDumpingStationNotObserved:
                     case PolSourceObsInfoEnum.WaterAquacultureStart:
                     case PolSourceObsInfoEnum.WaterAquacultureSiteActive:
                     case PolSourceObsInfoEnum.WaterAquacultureSiteFallow:
                     case PolSourceObsInfoEnum.WatAquaCountNumberStart:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo1:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo2:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo3:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo4:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo5:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo6:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo7:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo8:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo9:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo10:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo15:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo20:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo25:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo30:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo40:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo50:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo60:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo70:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo80:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo90:
                     case PolSourceObsInfoEnum.WatAquaCountNumberEqualTo100:
                     case PolSourceObsInfoEnum.WatAquaCountNumberGreaterThan100:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleStart:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleCage:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleFloatingBag:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleSubmergedLine:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleLosterPound:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleBarge:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSingleBoat:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeStart:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeCages:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeFloatingBags:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeSubmergedLines:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeLosterPounds:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeBarges:
                     case PolSourceObsInfoEnum.WaterAquacultureTypeBoats:
                     case PolSourceObsInfoEnum.MarineLocationStart:
                     case PolSourceObsInfoEnum.MarineLocationShoreline:
                     case PolSourceObsInfoEnum.MarineLocationWharf:
                     case PolSourceObsInfoEnum.MarineLocationBarge:
                     case PolSourceObsInfoEnum.MarineLocationIsland:
                     case PolSourceObsInfoEnum.MarineLocationWetland:
                     case PolSourceObsInfoEnum.MarineLocationSandBar:
                     case PolSourceObsInfoEnum.MarineLocationRockOutcrop:
                     case PolSourceObsInfoEnum.MarineLocationAquacultureSite:
                     case PolSourceObsInfoEnum.MarineLocationOffShoreline:
                     case PolSourceObsInfoEnum.MarineLocationMudflat:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeStart:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeShorelineBirds:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeGulls:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeCormorants:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeDucksGeese:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeLoons:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeaducks:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeOther:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeal:
                     case PolSourceObsInfoEnum.WaterTypesOfMarineLifeSeaOtter:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminantStart:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminantRunoff:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminantExcrement:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminantEffluent:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminantEffluentMultiple:
                     case PolSourceObsInfoEnum.MarineSourcesOfContaminanMixedMarine:
                     case PolSourceObsInfoEnum.SourcesOfContaminantStart:
                     case PolSourceObsInfoEnum.SourcesOfContaminantRunoff:
                     case PolSourceObsInfoEnum.SourcesOfContaminantRunoffFromField:
                     case PolSourceObsInfoEnum.SourcesOfContaminantProcessingWater:
                     case PolSourceObsInfoEnum.SourcesOfContaminantTankWater:
                     case PolSourceObsInfoEnum.SourcesOfContaminantSewage:
                     case PolSourceObsInfoEnum.SourcesOfContaminantEffluent:
                     case PolSourceObsInfoEnum.SourcesOfContaminantDomesticExcrement:
                     case PolSourceObsInfoEnum.SourcesOfContaminantMarineWashrooms:
                     case PolSourceObsInfoEnum.SourcesOfContaminantLandMarine:
                     case PolSourceObsInfoEnum.SourcesOfContaminantSpills:
                     case PolSourceObsInfoEnum.SourcesOfContaminantWilldExcrement:
                     case PolSourceObsInfoEnum.SourcesOfContaminantEffluentMarine:
                     case PolSourceObsInfoEnum.SourcesOfContaminantEffluentLocation:
                     case PolSourceObsInfoEnum.SewageStart:
                     case PolSourceObsInfoEnum.SewageRunoffLand:
                     case PolSourceObsInfoEnum.SewageThruConduit:
                     case PolSourceObsInfoEnum.SewageSepticSystemLeachateField:
                     case PolSourceObsInfoEnum.SewageRetentionTank:
                     case PolSourceObsInfoEnum.SewageOpenTank:
                     case PolSourceObsInfoEnum.SewageSystemConstructedWetland:
                     case PolSourceObsInfoEnum.SewageOnSiteSystem:
                     case PolSourceObsInfoEnum.SewageOffSiteSystem:
                     case PolSourceObsInfoEnum.SepticNoInformation:
                     case PolSourceObsInfoEnum.SewageAnimalWasteStorage:
                     case PolSourceObsInfoEnum.SewageAnimalExcrement:
                     case PolSourceObsInfoEnum.SewageRunoffMarine:
                     case PolSourceObsInfoEnum.SewageThruConduitMarine:
                     case PolSourceObsInfoEnum.SewageRetentionTankMarine:
                     case PolSourceObsInfoEnum.SewageMixedMarine:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelStart:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelHigh:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelMed:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelLow:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelHighMarine:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelMedMarine:
                     case PolSourceObsInfoEnum.ObservationHazardousLevelLowMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonStart:
                     case PolSourceObsInfoEnum.ObservationHazReasonVisualH:
                     case PolSourceObsInfoEnum.ObservationHazReasonNumbersH:
                     case PolSourceObsInfoEnum.ObservationHazReasonDiscussH:
                     case PolSourceObsInfoEnum.ObservationHazReasonRainfallH:
                     case PolSourceObsInfoEnum.ObservationHazReasonVisualM:
                     case PolSourceObsInfoEnum.ObservationHazReasonNumbersM:
                     case PolSourceObsInfoEnum.ObservationHazReasonDiscussM:
                     case PolSourceObsInfoEnum.ObservationHazReasonRainfallM:
                     case PolSourceObsInfoEnum.ObservationHazReasonVisualHMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonNumbersHMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonDiscussHMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonRainfallHMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonVisualMMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonNumbersMMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonDiscussMMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonRainfallMMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataH:
                     case PolSourceObsInfoEnum.ObservationHazReasonHIstoricDataM:
                     case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataHMarine:
                     case PolSourceObsInfoEnum.ObservationHazReasonHistoricDataMMarine:
                     case PolSourceObsInfoEnum.PathWayStart:
                     case PolSourceObsInfoEnum.PathwayLandHigh:
                     case PolSourceObsInfoEnum.PathwayLandMed:
                     case PolSourceObsInfoEnum.PathwayLandLow:
                     case PolSourceObsInfoEnum.PathWayMarineHigh:
                     case PolSourceObsInfoEnum.PathWayMarineMed:
                     case PolSourceObsInfoEnum.PathWayMarineLow:
                     case PolSourceObsInfoEnum.PathWayInActive:
                     case PolSourceObsInfoEnum.PathWayNotDetermined:
                     case PolSourceObsInfoEnum.PathwayRouteFirstStart:
                     case PolSourceObsInfoEnum.PathwaySourceFirstCulvert:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPipe:
                     case PolSourceObsInfoEnum.PathwaySourceFirstStream:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDitch:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstCulvertMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPipeMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstStreamMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDitchMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlowMed:
                     case PolSourceObsInfoEnum.PathwaySourceFirstCulvertLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPipeLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstStreamLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDitchLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstSubSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDirectFlowLow:
                     case PolSourceObsInfoEnum.PathwaySourceFirstInActive:
                     case PolSourceObsInfoEnum.PathwaySourceFirstNotDetermined:
                     case PolSourceObsInfoEnum.PathwaySourceFirstMunicipalityONSITE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstDirectMARINE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPipeMARINE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstLandDisposalMARINE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstMunicipalityOFFSITE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstMixesMARINE:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPondLake:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPondLakeMED:
                     case PolSourceObsInfoEnum.PathwaySourceFirstPondLakeLOW:
                     case PolSourceObsInfoEnum.PathwayRouteSecondPipeStart:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeStream:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitch:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeStreamMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitchMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflowMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeStreamLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDitchLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeSubSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondPipeDirectflowLow:
                     case PolSourceObsInfoEnum.PathwayRouteSecondCulvertStart:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStream:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitch:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainage:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStreamMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitchMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainageMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlowMed:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertStreamLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDitchLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertSubSurfaceDrainageLow:
                     case PolSourceObsInfoEnum.PathwaySourceSecondCulvertDirectFlowLow:
                     case PolSourceObsInfoEnum.WidthInMetersStart:
                     case PolSourceObsInfoEnum.WidthInMetersApprox1:
                     case PolSourceObsInfoEnum.WidthInMetersApprox2:
                     case PolSourceObsInfoEnum.WidthInMetersApprox3:
                     case PolSourceObsInfoEnum.WidthInMetersApprox4:
                     case PolSourceObsInfoEnum.WidthInMetersApprox5:
                     case PolSourceObsInfoEnum.WidthInMetersApprox6:
                     case PolSourceObsInfoEnum.WidthInMetersApprox7:
                     case PolSourceObsInfoEnum.WidthInMetersApprox8:
                     case PolSourceObsInfoEnum.WidthInMetersApprox9:
                     case PolSourceObsInfoEnum.WidthInMetersApprox10:
                     case PolSourceObsInfoEnum.WidthInMetersBetween11And25:
                     case PolSourceObsInfoEnum.WidthInMetersBetween26And40:
                     case PolSourceObsInfoEnum.WidthInMetersGreaterThan40:
                     case PolSourceObsInfoEnum.WidthInMetersApprox1Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox2Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox3Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox4Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox5Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox6Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox7Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox8Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox9Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox10Med:
                     case PolSourceObsInfoEnum.WidthInMetersBetween11And25Med:
                     case PolSourceObsInfoEnum.WidthInMetersBetween26And40Med:
                     case PolSourceObsInfoEnum.WidthInMetersGreaterThan40Med:
                     case PolSourceObsInfoEnum.WidthInMetersApprox1Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox2Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox3Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox4Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox5Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox6Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox7Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox8Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox9Low:
                     case PolSourceObsInfoEnum.WidthInMetersApprox10Low:
                     case PolSourceObsInfoEnum.WidthInMetersBetween11And25Low:
                     case PolSourceObsInfoEnum.WidthInMetersBetween26And40Low:
                     case PolSourceObsInfoEnum.WidthInMetersGreaterThan40Low:
                     case PolSourceObsInfoEnum.AreaSlopeStart:
                     case PolSourceObsInfoEnum.AreaSlopeLow:
                     case PolSourceObsInfoEnum.AreaSlopeMedium:
                     case PolSourceObsInfoEnum.AreaSlopeHigh:
                     case PolSourceObsInfoEnum.AreaSlopeNA:
                     case PolSourceObsInfoEnum.AreaSlopeLowMed:
                     case PolSourceObsInfoEnum.AreaSlopeMediumMed:
                     case PolSourceObsInfoEnum.AreaSlopeHighMed:
                     case PolSourceObsInfoEnum.AreaSlopeNAMed:
                     case PolSourceObsInfoEnum.AreaSlopeLowLow:
                     case PolSourceObsInfoEnum.AreaSlopeMediumLow:
                     case PolSourceObsInfoEnum.AreaSlopeHighLow:
                     case PolSourceObsInfoEnum.AreaSlopeNALow:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeStart:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowHigh:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumHigh:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighHigh:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeNAHigh:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowMed:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumMed:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighMed:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeNAMed:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeLowLow:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeMediumLow:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeHighLow:
                     case PolSourceObsInfoEnum.WaterCourseAreaSlopeNALow:
                     case PolSourceObsInfoEnum.ShorelineRiparionZoneStart:
                     case PolSourceObsInfoEnum.ShorelineRiparianZonePresentHigh:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentHigh:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoHigh:
                     case PolSourceObsInfoEnum.ShorelineRiparianZonePresentMed:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentMed:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoMed:
                     case PolSourceObsInfoEnum.ShorelineRiparianZonePresentLow:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneAbsentLow:
                     case PolSourceObsInfoEnum.ShorelineRiparianZoneNoInfoLow:
                     case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentHigh:
                     case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentMed:
                     case PolSourceObsInfoEnum.ShorelineRiparianGrassedZonePresentLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureStart:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructurePipeHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandHigh:
                     case PolSourceObsInfoEnum.FlowThroughNoStructureHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertMed:
                     case PolSourceObsInfoEnum.FlowThroughStructurePipeMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandMed:
                     case PolSourceObsInfoEnum.FlowThroughNoStructureMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertLow:
                     case PolSourceObsInfoEnum.FlowThroughStructurePipeLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandLow:
                     case PolSourceObsInfoEnum.FlowThroughNoStructureLow:
                     case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshHigh:
                     case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshMed:
                     case PolSourceObsInfoEnum.FlowThroughSaltwaterMarshLow:
                     case PolSourceObsInfoEnum.FlowThroughBeaverDamHigh:
                     case PolSourceObsInfoEnum.FlowThroughBeaverDamMed:
                     case PolSourceObsInfoEnum.FlowThroughBeaverDamLow:
                     case PolSourceObsInfoEnum.FlowThroughWaterCourseStart:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseHigh:
                     case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseMed:
                     case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureCulvertWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureBridgeWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureBermWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureWetlandWaterCourseLow:
                     case PolSourceObsInfoEnum.StructureInRoadNoStructureWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWatercourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureSaltMarshWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWatercourseHigh:
                     case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowThroughStructureBeaverDamWaterCourseLow:
                     case PolSourceObsInfoEnum.WaterCourseDistStart:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetersGreaterThan1000HighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetersInfoRequiredHighW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000MedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqMedW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000LowW:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqLowW:
                     case PolSourceObsInfoEnum.PipeCountNumberStart:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo1High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo2High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo3High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo4High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo5High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo6High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo7High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo8High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo9High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo10High:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo1Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo2Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo3Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo4Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo5Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo6Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo7Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo8Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo9Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo10Med:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo1Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo2Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo3Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo4Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo5Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo6Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo7Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo8Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo9Low:
                     case PolSourceObsInfoEnum.PipeCountNumberEqualTo10Low:
                     case PolSourceObsInfoEnum.PipeCountNumbeNoInformation:
                     case PolSourceObsInfoEnum.DiameterInCentimetersStart:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual15High:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual30High:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmHigh:
                     case PolSourceObsInfoEnum.DiameterNoInformationHigh:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual15Med:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual30Med:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmMed:
                     case PolSourceObsInfoEnum.DiameterNoInformationMed:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual15Low:
                     case PolSourceObsInfoEnum.DiameterInCentimetersEqual30Low:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween31and50cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween51and100cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween101and200cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween201and300cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween301and400cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersBetween401and500cmLow:
                     case PolSourceObsInfoEnum.DiameterInCentimetersGreaterThan500cmLow:
                     case PolSourceObsInfoEnum.DiameterNoInformationLow:
                     case PolSourceObsInfoEnum.DitchStart:
                     case PolSourceObsInfoEnum.DitchAlongRoadHigh:
                     case PolSourceObsInfoEnum.DitchAcrossPropertiesHigh:
                     case PolSourceObsInfoEnum.DitchAlongRoadMed:
                     case PolSourceObsInfoEnum.DitchAcrossPropertiesMed:
                     case PolSourceObsInfoEnum.DitchAlongRoadLow:
                     case PolSourceObsInfoEnum.DitchAcrossPropertiesLow:
                     case PolSourceObsInfoEnum.DrainageStart:
                     case PolSourceObsInfoEnum.DrainagePavedSurfacesHigh:
                     case PolSourceObsInfoEnum.DrainageVegetatedSurfacesHigh:
                     case PolSourceObsInfoEnum.DrainageBareSoilSurfacesHigh:
                     case PolSourceObsInfoEnum.DrainagePavedSurfacesMed:
                     case PolSourceObsInfoEnum.DrainageVegetatedSurfacesMed:
                     case PolSourceObsInfoEnum.DrainageBareSoilSurfacesMed:
                     case PolSourceObsInfoEnum.DrainagePavedSurfacesLow:
                     case PolSourceObsInfoEnum.DrainageVegetatedSurfacesLow:
                     case PolSourceObsInfoEnum.DrainageBareSoilSurfacesLow:
                     case PolSourceObsInfoEnum.FlowLevelStart:
                     case PolSourceObsInfoEnum.FlowLevelHiHigh:
                     case PolSourceObsInfoEnum.FlowLevelMedHigh:
                     case PolSourceObsInfoEnum.FlowLevelLoHigh:
                     case PolSourceObsInfoEnum.FlowLevelRainHigh:
                     case PolSourceObsInfoEnum.FlowLevelHighMed:
                     case PolSourceObsInfoEnum.FlowLevelMediumMed:
                     case PolSourceObsInfoEnum.FlowLevelLowMed:
                     case PolSourceObsInfoEnum.FlowLevelRainfallMed:
                     case PolSourceObsInfoEnum.FlowLevelHighLow:
                     case PolSourceObsInfoEnum.FlowLevelMediumLow:
                     case PolSourceObsInfoEnum.FlowLevelLowLow:
                     case PolSourceObsInfoEnum.FlowLevelRainfallLow:
                     case PolSourceObsInfoEnum.FlowLevelHighWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowLevelLowWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseHigh:
                     case PolSourceObsInfoEnum.FlowLevelHighWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowLevelLowWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseMed:
                     case PolSourceObsInfoEnum.FlowLevelHighWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowLevelMediumWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowLevelLowWaterCourseLow:
                     case PolSourceObsInfoEnum.FlowLevelRainfallWaterCourseLow:
                     case PolSourceObsInfoEnum.PipeFlowStart:
                     case PolSourceObsInfoEnum.PipeFlowlHighHigh:
                     case PolSourceObsInfoEnum.PipeFlowMediumHigh:
                     case PolSourceObsInfoEnum.PipeFlowLowHigh:
                     case PolSourceObsInfoEnum.PipeFlowRainfallHigh:
                     case PolSourceObsInfoEnum.PipeFlowNAHigh:
                     case PolSourceObsInfoEnum.PipeFlowlHighMed:
                     case PolSourceObsInfoEnum.PipeFlowMediumMed:
                     case PolSourceObsInfoEnum.PipeFlowLowMed:
                     case PolSourceObsInfoEnum.PipeFlowRainfallMed:
                     case PolSourceObsInfoEnum.PipeFlowNAMed:
                     case PolSourceObsInfoEnum.PipeFlowlHighLow:
                     case PolSourceObsInfoEnum.PipeFlowMediumLow:
                     case PolSourceObsInfoEnum.PipeFlowLowLow:
                     case PolSourceObsInfoEnum.PipeFlowRainfallLow:
                     case PolSourceObsInfoEnum.PipeFlowNALow:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetersStart:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetersGreaterThan1000High:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetersInfoRequiredHigh:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000Med:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqMed:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters0Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters5Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters10Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters20Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters30Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters40Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters50Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters75Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters100Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters150Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters200Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters300Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters400Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters600Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters800Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMeters1000Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetGrThan1000Low:
                     case PolSourceObsInfoEnum.DistanceToWaterInMetInfoReqLow:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelStart:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelHighIndirect:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelMedIndirect:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelLowIndirect:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelHighDirect:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelMedDirect:
                     case PolSourceObsInfoEnum.SecondaryHazardousLevelLowDirect:
                     case PolSourceObsInfoEnum.ImpactRatingStart:
                     case PolSourceObsInfoEnum.ImpactRatingDirectHighHaz:
                     case PolSourceObsInfoEnum.ImpactRatingindirectHighHaz:
                     case PolSourceObsInfoEnum.ImpactRatingDirectMedHaz:
                     case PolSourceObsInfoEnum.ImpactRatingindirectMedHaz:
                     case PolSourceObsInfoEnum.ImpactRatingDirectLowHaz:
                     case PolSourceObsInfoEnum.ImpactRatingindirectLowHaz:
                     case PolSourceObsInfoEnum.ImpactRatingNone:
                     case PolSourceObsInfoEnum.StatusStart:
                     case PolSourceObsInfoEnum.StatusDefiniteHi:
                     case PolSourceObsInfoEnum.StatusPotentialHi:
                     case PolSourceObsInfoEnum.StatusDefiniteMed:
                     case PolSourceObsInfoEnum.StatusPotentialMed:
                     case PolSourceObsInfoEnum.StatusDefiniteLo:
                     case PolSourceObsInfoEnum.StatusPotentialLo:
                     case PolSourceObsInfoEnum.StatusNonPollutionSource:
                     case PolSourceObsInfoEnum.StatusNotDetermined:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesStart:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectHighYes:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectHighNo:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectHighYes:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectHighNo:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectMedYes:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesDirectMedNo:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectMedYes:
                     case PolSourceObsInfoEnum.ConductDilutionAnalysesIndirectMedNo:
                     case PolSourceObsInfoEnum.SuggestedRiskStart:
                     case PolSourceObsInfoEnum.SuggestedRiskLow:
                     case PolSourceObsInfoEnum.SuggestedRiskModerate:
                     case PolSourceObsInfoEnum.SuggestedRiskHigh:
                     case PolSourceObsInfoEnum.SuggestedRiskInfoRequired:
                     case PolSourceObsInfoEnum.RiskStart:
                     case PolSourceObsInfoEnum.RiskLow:
                     case PolSourceObsInfoEnum.RiskModerate:
                     case PolSourceObsInfoEnum.RiskHigh:
                     case PolSourceObsInfoEnum.RiskNotDetermined:
                     case PolSourceObsInfoEnum.RiskConfirmationStart:
                     case PolSourceObsInfoEnum.RiskConfirmationNotConfirmed:
                     case PolSourceObsInfoEnum.RiskConfirmationConfirmedVisual:
                     case PolSourceObsInfoEnum.RiskConfirmationConfirmedWater:
                     case PolSourceObsInfoEnum.FollowUpStart:
                     case PolSourceObsInfoEnum.FollowupRequired:
                     case PolSourceObsInfoEnum.FollowupCompleted:
                     case PolSourceObsInfoEnum.TypeOfSourceStart:
                     case PolSourceObsInfoEnum.TypeOfSourceCircular:
                     case PolSourceObsInfoEnum.TypeOfSourceWaterWays:
                     case PolSourceObsInfoEnum.WaterwayWidthInMetersStart:
                     case PolSourceObsInfoEnum.WaterwayWidthInMetersApprox1:
                     case PolSourceObsInfoEnum.WaterwayWidthInMetersApprox2:
                     case PolSourceObsInfoEnum.AverageDepthStart:
                     case PolSourceObsInfoEnum.AverageDepthApprox50cm1:
                     case PolSourceObsInfoEnum.AverageDepthApprox1m1:
                     case PolSourceObsInfoEnum.AverageDepthApprox50cm2:
                     case PolSourceObsInfoEnum.AverageDepthApprox1m2:
                     case PolSourceObsInfoEnum.StreamVolSqMeterStart:
                     case PolSourceObsInfoEnum.StreamVolSqMeterEquals05m2:
                     case PolSourceObsInfoEnum.StreamVolSqMeterEquals1m2:
                     case PolSourceObsInfoEnum.StreamVolSqMeterEquals3m2:
                     case PolSourceObsInfoEnum.TimeToFloat10mStart:
                     case PolSourceObsInfoEnum.TimeToFloat30SecondsHalf:
                     case PolSourceObsInfoEnum.TimeToFloat1MinuteHalf:
                     case PolSourceObsInfoEnum.TimeToFloat2MinutesHalf:
                     case PolSourceObsInfoEnum.TimeToFloat30SecondsOne:
                     case PolSourceObsInfoEnum.TimeToFloat1MinuteOne:
                     case PolSourceObsInfoEnum.TimeToFloat2MinutesOne:
                     case PolSourceObsInfoEnum.TimeToFloat30SecondsThree:
                     case PolSourceObsInfoEnum.TimeToFloat1MinuteThree:
                     case PolSourceObsInfoEnum.TimeToFloat2MinutesThree:
                     case PolSourceObsInfoEnum.StructureDiameterStart:
                     case PolSourceObsInfoEnum.StructureDiameter50cm:
                     case PolSourceObsInfoEnum.StructureDiameter1m:
                     case PolSourceObsInfoEnum.HeigthOfFlowStart:
                     case PolSourceObsInfoEnum.HeigthOfFlowApprox50Percent50cm:
                     case PolSourceObsInfoEnum.HeigthOfFlowApprox75Percent50cm:
                     case PolSourceObsInfoEnum.HeigthOfFlowApprox25Percent1m:
                     case PolSourceObsInfoEnum.HeigthOfFlowApprox50Percent1m:
                     case PolSourceObsInfoEnum.HeigthOfFlowApprox75Percent1m:
                     case PolSourceObsInfoEnum.DischargeM3DayStart:
                     case PolSourceObsInfoEnum.DischargeM3Day1:
                     case PolSourceObsInfoEnum.DischargeM3Day2:
                     case PolSourceObsInfoEnum.DischargeM3Day3:
                     case PolSourceObsInfoEnum.DischargeM3Day4:
                     case PolSourceObsInfoEnum.DischargeM3Day5:
                     case PolSourceObsInfoEnum.DischargeM3Day6:
                     case PolSourceObsInfoEnum.SampleFecalCountStart:
                     case PolSourceObsInfoEnum.SampleFecalCount500For4320:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For4320:
                     case PolSourceObsInfoEnum.SampleFecalCount500For8640:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For8640:
                     case PolSourceObsInfoEnum.SampleFecalCount500For17280:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For17280:
                     case PolSourceObsInfoEnum.SampleFecalCount500For25920:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For25920:
                     case PolSourceObsInfoEnum.SampleFecalCount500For43200:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For43200:
                     case PolSourceObsInfoEnum.SampleFecalCount500For64800:
                     case PolSourceObsInfoEnum.SampleFecalCoun1000For64800:
                     case PolSourceObsInfoEnum.LoadinPerDayStart:
                     case PolSourceObsInfoEnum.LoadPerDayA:
                     case PolSourceObsInfoEnum.LoadPerDayB:
                     case PolSourceObsInfoEnum.LoadPerDayC:
                     case PolSourceObsInfoEnum.LoadPerDayD:
                     case PolSourceObsInfoEnum.LoadPerDayE:
                     case PolSourceObsInfoEnum.LoadPerDayF:
                     case PolSourceObsInfoEnum.LoadPerDayG:
                     case PolSourceObsInfoEnum.LoadPerDayH:
                     case PolSourceObsInfoEnum.DilutionVolumeToTarget14Start:
                     case PolSourceObsInfoEnum.DilutionVolumeA:
                     case PolSourceObsInfoEnum.DilutionVolumeB:
                     case PolSourceObsInfoEnum.DilutionVolumeC:
                     case PolSourceObsInfoEnum.DilutionVolumeD:
                     case PolSourceObsInfoEnum.DilutionVolumeE:
                     case PolSourceObsInfoEnum.DilutionVolumeF:
                     case PolSourceObsInfoEnum.DilutionVolumeG:
                     case PolSourceObsInfoEnum.DilutionVolumeH:
                     case PolSourceObsInfoEnum.RegionStart:
                     case PolSourceObsInfoEnum.RegionNewBrunswick2E5:
                     case PolSourceObsInfoEnum.RegionNovaScotia2E5:
                     case PolSourceObsInfoEnum.RegionPEI2E5:
                     case PolSourceObsInfoEnum.RegionNewfoundland2E5:
                     case PolSourceObsInfoEnum.RegionQuebec2E5:
                     case PolSourceObsInfoEnum.RegionBritishC2E5:
                     case PolSourceObsInfoEnum.RegionNewBrunswick3E5:
                     case PolSourceObsInfoEnum.RegionNovaScotiak3E5:
                     case PolSourceObsInfoEnum.RegionPEIk3E5:
                     case PolSourceObsInfoEnum.RegionNewfoundlandk3E5:
                     case PolSourceObsInfoEnum.RegionQuebeck3E5:
                     case PolSourceObsInfoEnum.RegionBritishCk3E5:
                     case PolSourceObsInfoEnum.RegionNewBrunswick6E5:
                     case PolSourceObsInfoEnum.RegionNovaScotia6E5:
                     case PolSourceObsInfoEnum.RegionPEI6E5:
                     case PolSourceObsInfoEnum.RegionNewfoundland6E5:
                     case PolSourceObsInfoEnum.RegionQuebec6E5:
                     case PolSourceObsInfoEnum.RegionBritishC6E5:
                     case PolSourceObsInfoEnum.RegionNewBrunswick9E5:
                     case PolSourceObsInfoEnum.RegionNovaScotiak39E5:
                     case PolSourceObsInfoEnum.RegionPEIk9E5:
                     case PolSourceObsInfoEnum.RegionNewfoundlandk9E5:
                     case PolSourceObsInfoEnum.RegionQuebeck9E5:
                     case PolSourceObsInfoEnum.RegionBritishCk9E5:
                     case PolSourceObsInfoEnum.RegionNewBrunswick1E6:
                     case PolSourceObsInfoEnum.RegionNovaScotia1E6:
                     case PolSourceObsInfoEnum.RegionPEI1E6:
                     case PolSourceObsInfoEnum.RegionNewfoundland1E6:
                     case PolSourceObsInfoEnum.RegionQuebec1E6:
                     case PolSourceObsInfoEnum.RegionBritishC1E6:
                     case PolSourceObsInfoEnum.RegionNewBrunswick2E6:
                     case PolSourceObsInfoEnum.RegionNovaScotiak2E6:
                     case PolSourceObsInfoEnum.RegionPEIk2E6:
                     case PolSourceObsInfoEnum.RegionNewfoundland2E6:
                     case PolSourceObsInfoEnum.RegionQuebec2E6:
                     case PolSourceObsInfoEnum.RegionBritishC2E6:
                     case PolSourceObsInfoEnum.RegionNewBrunswick3E6:
                     case PolSourceObsInfoEnum.RegionNovaScotia3E6:
                     case PolSourceObsInfoEnum.RegionPEI3E6:
                     case PolSourceObsInfoEnum.RegionNewfoundland3E6:
                     case PolSourceObsInfoEnum.RegionQuebec3E6:
                     case PolSourceObsInfoEnum.RegionBritishC3E6:
                     case PolSourceObsInfoEnum.RegionNewBrunswick5E6:
                     case PolSourceObsInfoEnum.RegionNovaScotia5E6:
                     case PolSourceObsInfoEnum.RegionPEI5E6:
                     case PolSourceObsInfoEnum.RegionNewfoundland5E6:
                     case PolSourceObsInfoEnum.RegionQuebec5E6:
                     case PolSourceObsInfoEnum.RegionBritishC5E6:
                     case PolSourceObsInfoEnum.SectorsInNBStart:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V2E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V2E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V2E5:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V3E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V3E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V3E5:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V6E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V6E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V6E5:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V9E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V9E5:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V9E5:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V1E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V1E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V1E6:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V2E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V2E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V2E6:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V3E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V3E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V3E6:
                     case PolSourceObsInfoEnum.SectorsInNB1To2V5E6:
                     case PolSourceObsInfoEnum.SectorsInNB3To4V5E6:
                     case PolSourceObsInfoEnum.SectorsInNB5To7V5E6:
                     case PolSourceObsInfoEnum.SectorsInNB9To12V5E6:
                     case PolSourceObsInfoEnum.SectorsInNB13To15V5E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals16V5E6:
                     case PolSourceObsInfoEnum.SectorsInNB17To18V5E6:
                     case PolSourceObsInfoEnum.SectorsInNBEquals19V5E6:
                     case PolSourceObsInfoEnum.SectorsInNSStart:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V2E5:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V2E5:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V2E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V2E5:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V2E5:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V2E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V2E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V2E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V2E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V3E5:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V3E5:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V3E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V3E5:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V3E5:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V3E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V3E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V3E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V3E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V6E5:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V6E5:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V6E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V6E5:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V6E5:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V6E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V6E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V6E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V6E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V9E5:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V9E5:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V9E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V9E5:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V9E5:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V9E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V9E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V9E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V9E5:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V1E6:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V1E6:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V1E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V1E6:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V1E6:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V1E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V1E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V1E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V1E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V2E6:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V2E6:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V2E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V2E6:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V2E6:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V2E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V2E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V2E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V2E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V3E6:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V3E6:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V3E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V3E6:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V3E6:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V3E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V3E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V3E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V3E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals1V5E6:
                     case PolSourceObsInfoEnum.SectorsInNS2To3V5E6:
                     case PolSourceObsInfoEnum.SectorsInNS4To6V5E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals7V5E6:
                     case PolSourceObsInfoEnum.SectorsInNS8To14V5E6:
                     case PolSourceObsInfoEnum.SectorsInNEquals15V5E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals16V5E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals18V5E6:
                     case PolSourceObsInfoEnum.SectorsInNSEquals20V5E6:
                     case PolSourceObsInfoEnum.SectorsInPEIStart:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V2E5:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V2E5:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V2E5:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V3E5:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V3E5:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V3E5:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V6E5:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V6E5:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V6E5:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V9E5:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V9E5:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V9E5:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V1E6:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V1E6:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V1E6:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V2E6:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V2E6:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V2E6:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V3E6:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V3E6:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V3E6:
                     case PolSourceObsInfoEnum.SectorsInPEI1To4Plus9V5E6:
                     case PolSourceObsInfoEnum.SectorsInPEI5To6V5E6:
                     case PolSourceObsInfoEnum.SectorsInPEI7To8V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldStart:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V2E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V3E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V6E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V9E5:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V1E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V2E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V3E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual2V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfld6To7V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual15V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual29V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual30V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual35V5E6:
                     case PolSourceObsInfoEnum.SectorsInNfldEqual43V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecStart:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualAGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualGGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecTandPandNGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecLandKandSandPGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualBGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ01GP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ02GP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ03GP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInQuebecEqualZ04GP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInBCStart:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V2E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V3E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V6E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V9E5:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V1E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V2E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V3E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBEGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualGBWGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualNCQCGP1V5E6:
                     case PolSourceObsInfoEnum.SectorsInBCEqualWCVIGP1V5E6:
                     case PolSourceObsInfoEnum.DepthOfWaterStart:
                     case PolSourceObsInfoEnum.DepthOfWater1mV2E5:
                     case PolSourceObsInfoEnum.DepthOfWater2mV2E5:
                     case PolSourceObsInfoEnum.DepthOfWater5mV2E5:
                     case PolSourceObsInfoEnum.DepthOfWater8mV2E5:
                     case PolSourceObsInfoEnum.DepthOfWater14mV2E5:
                     case PolSourceObsInfoEnum.DepthOfWater1mV3E5:
                     case PolSourceObsInfoEnum.DepthOfWater2mV3E5:
                     case PolSourceObsInfoEnum.DepthOfWater5mV3E5:
                     case PolSourceObsInfoEnum.DepthOfWater8mV3E5:
                     case PolSourceObsInfoEnum.DepthOfWater14mV3E5:
                     case PolSourceObsInfoEnum.DepthOfWater1mV6E5:
                     case PolSourceObsInfoEnum.DepthOfWater2mV6E5:
                     case PolSourceObsInfoEnum.DepthOfWater5mV6E5:
                     case PolSourceObsInfoEnum.DepthOfWater8mV6E5:
                     case PolSourceObsInfoEnum.DepthOfWater14mV6E5:
                     case PolSourceObsInfoEnum.DepthOfWater1mV9E5:
                     case PolSourceObsInfoEnum.DepthOfWater2mV9E5:
                     case PolSourceObsInfoEnum.DepthOfWater5mV9E5:
                     case PolSourceObsInfoEnum.DepthOfWater8mV9E5:
                     case PolSourceObsInfoEnum.DepthOfWater14mV9E5:
                     case PolSourceObsInfoEnum.DepthOfWater1mV1E6:
                     case PolSourceObsInfoEnum.DepthOfWater2mV1E6:
                     case PolSourceObsInfoEnum.DepthOfWater5mV1E6:
                     case PolSourceObsInfoEnum.DepthOfWater8mV1E6:
                     case PolSourceObsInfoEnum.DepthOfWater14mV1E6:
                     case PolSourceObsInfoEnum.DepthOfWater1mV2E6:
                     case PolSourceObsInfoEnum.DepthOfWater2mV2E6:
                     case PolSourceObsInfoEnum.DepthOfWater5mV2E6:
                     case PolSourceObsInfoEnum.DepthOfWater8mV2E6:
                     case PolSourceObsInfoEnum.DepthOfWater14mV2E6:
                     case PolSourceObsInfoEnum.DepthOfWater1mV3E6:
                     case PolSourceObsInfoEnum.DepthOfWater2mV3E6:
                     case PolSourceObsInfoEnum.DepthOfWater5mV3E6:
                     case PolSourceObsInfoEnum.DepthOfWater8mV3E6:
                     case PolSourceObsInfoEnum.DepthOfWater14mV3E6:
                     case PolSourceObsInfoEnum.DepthOfWater1mV5E6:
                     case PolSourceObsInfoEnum.DepthOfWater2mV5E6:
                     case PolSourceObsInfoEnum.DepthOfWater5mV5E6:
                     case PolSourceObsInfoEnum.DepthOfWater8mV5E6:
                     case PolSourceObsInfoEnum.DepthOfWater14mV5E5:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadiusStart:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5Two3E5Two:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5eight:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5eight:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E5fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E5five6E5one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5two:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E5eight:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius6E59E5fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5two:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius9E5eight:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6two:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6Eight2E6Eight3E6eight:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius1E6fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6two:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6Five3E6Five5E6five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius2E6fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E6Two5E6Two2E5five:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E6one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius3E65E6fourteen:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius5E6one:
                     case PolSourceObsInfoEnum.SurfaceAreaImpactRadius5E6eight:
                     case PolSourceObsInfoEnum.ImpactZoneStart:
                     case PolSourceObsInfoEnum.ImpactZoneYes:
                     case PolSourceObsInfoEnum.ImpactZonePotential:
                     case PolSourceObsInfoEnum.ImpactZoneNo:
                     case PolSourceObsInfoEnum.ImpactZoneNotSure:
                     case PolSourceObsInfoEnum.DistanceToShoreStart:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters0W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters5W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters10W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters20W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters30W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters40W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters50W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters75W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters100W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters150W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters200W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters300W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters400W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters600W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters800W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters1000W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000W:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters5WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters10WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters20WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters30WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters40WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters50WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters75WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters100WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters150WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters200WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters300WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters400WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters600WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters800WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters1000WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000WAnchor:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters5WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters10WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters20WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters30WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters40WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters50WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters75WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters100WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters150WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters200WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters300WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters400WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters600WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters800WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMeters1000WDisposal:
                     case PolSourceObsInfoEnum.DistanceToShoreInMetersGreaterThan1000WDisposal:
                        Assert.Equal("", retStr);
                        break;
                    default:
                        Assert.Equal(string.Format(CSSPCultureEnumsRes._IsRequired, "PolSourceObsInfoEnum"), retStr);
                        break;
                }
            }
        }

        #endregion Testing Method EnumTypeOK for each Enum value name

        #region Testing Method GetEnumTextOrderedList for each Enum value name
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ActionDBTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ActionDBTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ActionDBTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ActionDBTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AddContactTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AddContactTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AddContactTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AddContactTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_EntityQueryTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(EntityQueryTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(EntityQueryTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(EntityQueryTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceObsInfoTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceObsInfoTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AddressTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AddressTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AddressTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AddressTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AreaSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AreaSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AreaSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AreaSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AerationTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AerationTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AerationTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AerationTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AlarmSystemTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AlarmSystemTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AlarmSystemTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AlarmSystemTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalysisCalculationTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AnalysisCalculationTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalysisCalculationTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalysisCalculationTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalysisReportExportCommandEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AnalysisReportExportCommandEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalysisReportExportCommandEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalysisReportExportCommandEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AnalyzeMethodEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AnalyzeMethodEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AnalyzeMethodEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AnalyzeMethodEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AppTaskCommandEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AppTaskCommandEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AppTaskCommandEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AppTaskCommandEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AppTaskStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AppTaskStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AppTaskStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AppTaskStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_AscDescEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(AscDescEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(AscDescEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(AscDescEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_BeaufortScaleEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(BeaufortScaleEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(BeaufortScaleEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(BeaufortScaleEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_BoxModelResultTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(BoxModelResultTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(BoxModelResultTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(BoxModelResultTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CanOverflowTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(CanOverflowTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CanOverflowTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CanOverflowTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ClassificationTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ClassificationTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ClassificationTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ClassificationTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CollectionSystemTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(CollectionSystemTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CollectionSystemTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CollectionSystemTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ContactTitleEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ContactTitleEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ContactTitleEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ContactTitleEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ContentSizeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ContentSizeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ContentSizeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ContentSizeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CountrySubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(CountrySubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CountrySubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CountrySubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CSSPWQInputSheetTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(CSSPWQInputSheetTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CSSPWQInputSheetTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CSSPWQInputSheetTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_CSSPWQInputTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(CSSPWQInputTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(CSSPWQInputTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(CSSPWQInputTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DBLocationEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(DBLocationEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DBLocationEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DBLocationEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DailyOrHourlyDataEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(DailyOrHourlyDataEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DailyOrHourlyDataEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DailyOrHourlyDataEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DisinfectionTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(DisinfectionTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DisinfectionTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DisinfectionTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_DrogueTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(DrogueTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(DrogueTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(DrogueTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_EmailTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(EmailTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(EmailTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(EmailTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ExcelExportShowDataTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ExcelExportShowDataTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ExcelExportShowDataTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ExcelExportShowDataTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FacilityTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(FacilityTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FacilityTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FacilityTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FilePurposeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(FilePurposeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FilePurposeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FilePurposeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FilesSortPropEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(FilesSortPropEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FilesSortPropEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FilesSortPropEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FileStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(FileStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FileStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FileStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_FileTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(FileTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(FileTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(FileTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_InfrastructureTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(InfrastructureTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(InfrastructureTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(InfrastructureTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_KMZActionEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(KMZActionEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(KMZActionEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(KMZActionEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LaboratoryEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LaboratoryEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LaboratoryEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LaboratoryEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LabSheetStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LabSheetStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LabSheetStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LabSheetStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LabSheetTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LabSheetTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LabSheetTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LabSheetTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LanguageEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LanguageEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LanguageEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LanguageEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LocalDBCommandEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LocalDBCommandEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LocalDBCommandEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LocalDBCommandEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_LogCommandEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(LogCommandEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(LogCommandEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(LogCommandEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MapInfoDrawTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MapInfoDrawTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MapInfoDrawTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MapInfoDrawTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MapSizeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MapSizeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MapSizeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MapSizeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeBoundaryConditionLevelOrVelocityEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MikeBoundaryConditionLevelOrVelocityEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MikeBoundaryConditionLevelOrVelocityEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MikeBoundaryConditionLevelOrVelocityEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeScenarioSpecialResultKMLTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MikeScenarioSpecialResultKMLTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MikeScenarioSpecialResultKMLTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MikeScenarioSpecialResultKMLTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MikeScenarioSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MikeScenarioSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MikeScenarioSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MikeScenarioSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMRunSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MWQMRunSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MWQMRunSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MWQMRunSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMSiteLatestClassificationEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MWQMSiteLatestClassificationEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MWQMSiteLatestClassificationEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MWQMSiteLatestClassificationEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MWQMSiteSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MWQMSiteSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MWQMSiteSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MWQMSiteSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_MunicipalitySubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(MunicipalitySubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(MunicipalitySubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(MunicipalitySubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceInactiveReasonEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PolSourceInactiveReasonEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceInactiveReasonEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceInactiveReasonEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceIssueRiskEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PolSourceIssueRiskEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceIssueRiskEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceIssueRiskEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceSiteSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PolSourceSiteSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceSiteSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceSiteSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PositionEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PositionEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PositionEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PositionEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PreliminaryTreatmentTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PreliminaryTreatmentTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PreliminaryTreatmentTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PreliminaryTreatmentTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PrimaryTreatmentTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PrimaryTreatmentTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PrimaryTreatmentTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PrimaryTreatmentTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PropertyTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PropertyTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PropertyTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PropertyTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ProvinceSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ProvinceSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ProvinceSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ProvinceSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportConditionEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportConditionEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportConditionEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportConditionEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFieldTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportFieldTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFieldTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFieldTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFileTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportFileTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFileTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFileTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFormatingDateEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportFormatingDateEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFormatingDateEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFormatingDateEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportFormatingNumberEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportFormatingNumberEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportFormatingNumberEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportFormatingNumberEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportGenerateObjectsKeywordEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportGenerateObjectsKeywordEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportGenerateObjectsKeywordEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportGenerateObjectsKeywordEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportSortingEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportSortingEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportSortingEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportSortingEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportTreeNodeSubTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeSubTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeSubTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportTreeNodeSubTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ReportTreeNodeTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ReportTreeNodeTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ReportTreeNodeTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ReportTreeNodeTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_RootSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(RootSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(RootSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(RootSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_RunningOnEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(RunningOnEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(RunningOnEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(RunningOnEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SameDayNextDayEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SameDayNextDayEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SameDayNextDayEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SameDayNextDayEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleMatrixEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SampleMatrixEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleMatrixEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleMatrixEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SampleStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SampleTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SampleTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SampleTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SampleTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SamplingPlanTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SamplingPlanTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SamplingPlanTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SamplingPlanTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ScenarioStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ScenarioStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ScenarioStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ScenarioStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SearchTagEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SearchTagEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SearchTagEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SearchTagEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SecondaryTreatmentTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SecondaryTreatmentTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SecondaryTreatmentTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SecondaryTreatmentTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SectorSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SectorSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SectorSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SectorSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ShellSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ShellSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ShellSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ShellSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SiteTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SiteTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SiteTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SiteTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SortOrderAngularEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SortOrderAngularEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SortOrderAngularEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SortOrderAngularEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SpecialTableTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SpecialTableTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SpecialTableTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SpecialTableTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_StorageDataTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(StorageDataTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(StorageDataTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(StorageDataTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_StreetTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(StreetTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(StreetTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(StreetTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_SubsectorSubComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(SubsectorSubComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(SubsectorSubComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(SubsectorSubComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TelTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TelTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TelTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TelTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TertiaryTreatmentTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TertiaryTreatmentTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TertiaryTreatmentTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TertiaryTreatmentTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TideDataTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TideDataTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TideDataTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TideDataTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TideTextEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TideTextEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TideTextEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TideTextEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TopComponentEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TopComponentEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TopComponentEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TopComponentEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TranslationStatusEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TranslationStatusEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TranslationStatusEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TranslationStatusEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TreatmentTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TreatmentTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TreatmentTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TreatmentTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TVAuthEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TVAuthEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TVAuthEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TVAuthEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_TVTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(TVTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(TVTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(TVTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_ValveTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(ValveTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(ValveTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(ValveTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTypeEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(WebTypeEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(WebTypeEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(WebTypeEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTypeYearEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(WebTypeYearEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(WebTypeYearEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(WebTypeYearEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_WebTideDataSetEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(WebTideDataSetEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(WebTideDataSetEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(WebTideDataSetEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Enums_PolSourceObsInfoEnumTextOrdered_Test(string culture)
        {
            Assert.True(await SetupTest(culture));

            List<EnumIDAndText> enumTextOrderedList = new List<EnumIDAndText>();
            foreach (int i in Enum.GetValues(typeof(PolSourceObsInfoEnum)))
            {
                enumTextOrderedList.Add(new EnumIDAndText() { EnumID = i, EnumText = enums.GetResValueForTypeAndID(typeof(PolSourceObsInfoEnum), i) });
            }
            enumTextOrderedList = enumTextOrderedList.OrderBy(c => c.EnumText).ToList();

            List<EnumIDAndText> enumTextOrderedList2 = enums.GetEnumTextOrderedList(typeof(PolSourceObsInfoEnum));
            Assert.Equal(enumTextOrderedList.Count, enumTextOrderedList2.Count);

            EnumIDAndText enumTextOrdered = new EnumIDAndText();
            Assert.NotNull(enumTextOrdered);

            for (int i = 0, count = enumTextOrderedList.Count; i < count; i++)
            {
                Assert.Equal(enumTextOrderedList[i].EnumText, enumTextOrderedList2[i].EnumText);
                Assert.Equal(enumTextOrderedList[i].EnumID, enumTextOrderedList2[i].EnumID);
            }
        }

        #endregion Testing Method GetEnumTextOrderedList for each Enum value name
    }
}
