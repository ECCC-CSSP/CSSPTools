/* Auto generated from C:\CSSPTools\src\codegen\_package\net5.0\GenerateCSSPHelperServices_Tests.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPHelperModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;
using CSSPHelperServices.Tests;

namespace CSSPHelperServices.Tests
{
    [Collection("Sequential")]
    public partial class NodeServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Configuration { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private IEnums enums { get; set; }
        private INodeService NodeService { get; set; }
        #endregion Properties

        #region Constructors
        public NodeServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Constructors
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task AppTaskParameter_Constructor_Test(string culture)
        {
            Assert.True(await Setup(culture));
            Assert.NotNull(CSSPCultureService);
            Assert.NotNull(enums);
        }
        #endregion Tests Generated Constructors

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA")]
        //[InlineData("fr-CA")]
        public async Task Node_Properties_Test(string culture)
        {
            Assert.True(await Setup(culture));

            Node node = GetFilledRandomNode("");


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(1, 1000000)]
            // node.ID   (Int32)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.ID = 0;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ID", "1", "1000000"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.ID = 1000001;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "ID", "1", "1000000"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // node.X   (Double)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.X = -181.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "X", "-180", "180"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.X = 181.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "X", "-180", "180"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // node.Y   (Double)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.Y = -91.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Y", "-90", "90"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.Y = 91.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Y", "-90", "90"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-100000, 100000)]
            // node.Z   (Double)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.Z = -100001.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Z", "-100000", "100000"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.Z = 100001.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Z", "-100000", "100000"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 20)]
            // node.Code   (Int32)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.Code = -1;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Code", "0", "20"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.Code = 21;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Code", "0", "20"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-1, -1)]
            // node.Value   (Double)
            // -----------------------------------


            node = null;
            node = GetFilledRandomNode("");
            node.Value = -2.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Value", "-1", "-1"))).Any());

            node = null;
            node = GetFilledRandomNode("");
            node.Value = 0.0D;
            NodeService.Validate(new ValidationContext(node));
            Assert.True(NodeService.ValidationResults.Count() > 0);
            Assert.True(NodeService.ValidationResults.Where(c => c.ErrorMessage.Contains(string.Format(CSSPCultureServicesRes._ValueShouldBeBetween_And_, "Value", "-1", "-1"))).Any());

            // -----------------------------------
            // Is NOT Nullable
            // node.ElementList   (Element)
            // -----------------------------------

            //CSSPError: Type not implemented [ElementList]

            //CSSPError: Type not implemented [ElementList]


            // -----------------------------------
            // Is NOT Nullable
            // node.ConnectNodeList   (Node)
            // -----------------------------------

            //CSSPError: Type not implemented [ConnectNodeList]

            //CSSPError: Type not implemented [ConnectNodeList]

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Configuration = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_cssphelperservicestests.json")
               .AddUserSecrets("a79b4a81-ba75-4dfc-8d95-46259f73f055")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Configuration);

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<INodeService, NodeService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            enums = Provider.GetService<IEnums>();
            Assert.NotNull(enums);

            NodeService = Provider.GetService<INodeService>();
            Assert.NotNull(NodeService);

            return await Task.FromResult(true);
        }
        private Node GetFilledRandomNode(string OmitPropName)
        {
            Node node = new Node();

            if (OmitPropName != "ID") node.ID = GetRandomInt(1, 1000000);
            if (OmitPropName != "X") node.X = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "Y") node.Y = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Z") node.Z = GetRandomDouble(-100000.0D, 100000.0D);
            if (OmitPropName != "Code") node.Code = GetRandomInt(0, 20);
            if (OmitPropName != "Value") node.Value = GetRandomDouble(-1.0D, -1.0D);
            //CSSPError: property [ElementList] and type [Node] is  not implemented
            //CSSPError: property [ConnectNodeList] and type [Node] is  not implemented

            return node;
        }

        #endregion Functions private
    }
}
