/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ModelsModelClassNameTestGenerated_cs.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    public partial class AspNetUserTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private AspNetUser aspNetUser { get; set; }
        #endregion Properties

        #region Constructors
        public AspNetUserTest()
        {
            aspNetUser = new AspNetUser();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void AspNetUser_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "Id", "Email", "EmailConfirmed", "PasswordHash", "SecurityStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEndDateUtc", "LockoutEnabled", "AccessFailedCount", "UserName", "NormalizedUserName", "NormalizedEmail", "ConcurrencyStamp", "LockoutEnd",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.Equal(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.Equal(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                    }
                }
            }


        }
        [Fact]
        public void AspNetUser_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameExist = foreignNameList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    bool foreignNameCollectionExist = foreignNameCollectionList.Contains(propertyInfo.Name);
                    Assert.True(foreignNameCollectionExist);
                    index += 1;
                }
            }

            Assert.Equal(foreignNameCollectionList.Count, index);

        }
        [Fact]
        public void AspNetUser_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               aspNetUser.Id = val1;
               Assert.Equal(val1, aspNetUser.Id);
               string val2 = "Some text";
               aspNetUser.Email = val2;
               Assert.Equal(val2, aspNetUser.Email);
               bool val3 = true;
               aspNetUser.EmailConfirmed = val3;
               Assert.Equal(val3, aspNetUser.EmailConfirmed);
               string val4 = "Some text";
               aspNetUser.PasswordHash = val4;
               Assert.Equal(val4, aspNetUser.PasswordHash);
               string val5 = "Some text";
               aspNetUser.SecurityStamp = val5;
               Assert.Equal(val5, aspNetUser.SecurityStamp);
               string val6 = "Some text";
               aspNetUser.PhoneNumber = val6;
               Assert.Equal(val6, aspNetUser.PhoneNumber);
               bool val7 = true;
               aspNetUser.PhoneNumberConfirmed = val7;
               Assert.Equal(val7, aspNetUser.PhoneNumberConfirmed);
               bool val8 = true;
               aspNetUser.TwoFactorEnabled = val8;
               Assert.Equal(val8, aspNetUser.TwoFactorEnabled);
               DateTime val9 = new DateTime(2010, 3, 4);
               aspNetUser.LockoutEndDateUtc = val9;
               Assert.Equal(val9, aspNetUser.LockoutEndDateUtc);
               bool val10 = true;
               aspNetUser.LockoutEnabled = val10;
               Assert.Equal(val10, aspNetUser.LockoutEnabled);
               int val11 = 45;
               aspNetUser.AccessFailedCount = val11;
               Assert.Equal(val11, aspNetUser.AccessFailedCount);
               string val12 = "Some text";
               aspNetUser.UserName = val12;
               Assert.Equal(val12, aspNetUser.UserName);
               string val13 = "Some text";
               aspNetUser.NormalizedUserName = val13;
               Assert.Equal(val13, aspNetUser.NormalizedUserName);
               string val14 = "Some text";
               aspNetUser.NormalizedEmail = val14;
               Assert.Equal(val14, aspNetUser.NormalizedEmail);
               string val15 = "Some text";
               aspNetUser.ConcurrencyStamp = val15;
               Assert.Equal(val15, aspNetUser.ConcurrencyStamp);
               DateTime val16 = new DateTime(2010, 3, 4);
               aspNetUser.LockoutEnd = val16;
               Assert.Equal(val16, aspNetUser.LockoutEnd);
        }
        #endregion Tests Functions public
    }
}
