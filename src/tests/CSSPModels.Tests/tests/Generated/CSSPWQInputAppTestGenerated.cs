/*
 * Auto generated from C:\CSSPTools\src\codegen\ModelsModelClassNameTestGenerated_cs\bin\Debug\netcoreapp3.1\ModelsModelClassNameTestGenerated_cs.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    public partial class CSSPWQInputAppTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPWQInputApp cSSPWQInputApp { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPWQInputAppTest()
        {
            cSSPWQInputApp = new CSSPWQInputApp();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void CSSPWQInputApp_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "AccessCode", "ActiveYear", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "ApprovalDate", "HasErrors",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPWQInputApp).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.Equal(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.Equal(propNameList.Count, index);
        }
        [Fact]
        public void CSSPWQInputApp_Has_ValidationResults_Test()
        {
             Assert.True(typeof(CSSPWQInputApp).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [Fact]
        public void CSSPWQInputApp_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               cSSPWQInputApp.AccessCode = val1;
               Assert.Equal(val1, cSSPWQInputApp.AccessCode);
               string val2 = "Some text";
               cSSPWQInputApp.ActiveYear = val2;
               Assert.Equal(val2, cSSPWQInputApp.ActiveYear);
               double val3 = 87.9D;
               cSSPWQInputApp.DailyDuplicatePrecisionCriteria = val3;
               Assert.Equal(val3, cSSPWQInputApp.DailyDuplicatePrecisionCriteria);
               double val4 = 87.9D;
               cSSPWQInputApp.IntertechDuplicatePrecisionCriteria = val4;
               Assert.Equal(val4, cSSPWQInputApp.IntertechDuplicatePrecisionCriteria);
               bool val5 = true;
               cSSPWQInputApp.IncludeLaboratoryQAQC = val5;
               Assert.Equal(val5, cSSPWQInputApp.IncludeLaboratoryQAQC);
               string val6 = "Some text";
               cSSPWQInputApp.ApprovalCode = val6;
               Assert.Equal(val6, cSSPWQInputApp.ApprovalCode);
               DateTime val7 = new DateTime(2010, 3, 4);
               cSSPWQInputApp.ApprovalDate = val7;
               Assert.Equal(val7, cSSPWQInputApp.ApprovalDate);
               bool val8 = true;
               cSSPWQInputApp.HasErrors = val8;
               Assert.Equal(val8, cSSPWQInputApp.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               cSSPWQInputApp.ValidationResults = val27;
               Assert.Equal(val27, cSSPWQInputApp.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
