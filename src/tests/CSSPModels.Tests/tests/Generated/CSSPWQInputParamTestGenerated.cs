/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Xunit;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    public partial class CSSPWQInputParamTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPWQInputParam cSSPWQInputParam { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPWQInputParamTest()
        {
            cSSPWQInputParam = new CSSPWQInputParam();
        }
        #endregion Constructors

        #region Tests Functions public
        [Fact]
        public void CSSPWQInputParam_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "CSSPWQInputType", "Name", "TVItemID", "CSSPWQInputTypeText", "sidList", "MWQMSiteList", "MWQMSiteTVItemIDList", "DailyDuplicateMWQMSiteList", "DailyDuplicateMWQMSiteTVItemIDList", "InfrastructureList", "InfrastructureTVItemIDList",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPWQInputParam).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.Equal(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.Equal(propNameList.Count, index);
        }
        [Fact]
        public void CSSPWQInputParam_Every_Property_Has_Get_Set_Test()
        {
               CSSPWQInputTypeEnum val1 = (CSSPWQInputTypeEnum)3;
               cSSPWQInputParam.CSSPWQInputType = val1;
               Assert.Equal(val1, cSSPWQInputParam.CSSPWQInputType);
               string val2 = "Some text";
               cSSPWQInputParam.Name = val2;
               Assert.Equal(val2, cSSPWQInputParam.Name);
               int val3 = 45;
               cSSPWQInputParam.TVItemID = val3;
               Assert.Equal(val3, cSSPWQInputParam.TVItemID);
               string val4 = "Some text";
               cSSPWQInputParam.CSSPWQInputTypeText = val4;
               Assert.Equal(val4, cSSPWQInputParam.CSSPWQInputTypeText);
               List<string> val5 = new List<string>() { "testing", "Bonjour Allo" };
               cSSPWQInputParam.sidList = val5;
               Assert.Equal(val5, cSSPWQInputParam.sidList);
               List<string> val6 = new List<string>() { "testing", "Bonjour Allo" };
               cSSPWQInputParam.MWQMSiteList = val6;
               Assert.Equal(val6, cSSPWQInputParam.MWQMSiteList);
               List<int> val7 = new List<int>() { 34, 45, 56 };
               cSSPWQInputParam.MWQMSiteTVItemIDList = val7;
               Assert.Equal(val7, cSSPWQInputParam.MWQMSiteTVItemIDList);
               List<string> val8 = new List<string>() { "testing", "Bonjour Allo" };
               cSSPWQInputParam.DailyDuplicateMWQMSiteList = val8;
               Assert.Equal(val8, cSSPWQInputParam.DailyDuplicateMWQMSiteList);
               List<int> val9 = new List<int>() { 34, 45, 56 };
               cSSPWQInputParam.DailyDuplicateMWQMSiteTVItemIDList = val9;
               Assert.Equal(val9, cSSPWQInputParam.DailyDuplicateMWQMSiteTVItemIDList);
               List<string> val10 = new List<string>() { "testing", "Bonjour Allo" };
               cSSPWQInputParam.InfrastructureList = val10;
               Assert.Equal(val10, cSSPWQInputParam.InfrastructureList);
               List<int> val11 = new List<int>() { 34, 45, 56 };
               cSSPWQInputParam.InfrastructureTVItemIDList = val11;
               Assert.Equal(val11, cSSPWQInputParam.InfrastructureTVItemIDList);
        }
        #endregion Tests Functions public
    }
}
