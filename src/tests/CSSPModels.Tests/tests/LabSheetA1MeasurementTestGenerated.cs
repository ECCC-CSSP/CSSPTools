/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class LabSheetA1MeasurementTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private LabSheetA1Measurement labSheetA1Measurement { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetA1MeasurementTest()
        {
            labSheetA1Measurement = new LabSheetA1Measurement();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void LabSheetA1Measurement_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "Site", "TVItemID", "Time", "MPN", "Tube10", "Tube1_0", "Tube0_1", "Salinity", "Temperature", "ProcessedBy", "SampleType", "SiteComment", "SampleTypeText", "HasErrors",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(LabSheetA1Measurement).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.AreEqual(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.AreEqual(propNameList.Count, index);
        }
        [TestMethod]
        public void LabSheetA1Measurement_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(LabSheetA1Measurement).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void LabSheetA1Measurement_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               labSheetA1Measurement.Site = val1;
               Assert.AreEqual(val1, labSheetA1Measurement.Site);
               int val2 = 45;
               labSheetA1Measurement.TVItemID = val2;
               Assert.AreEqual(val2, labSheetA1Measurement.TVItemID);
               DateTime val3 = new DateTime(2010, 3, 4);
               labSheetA1Measurement.Time = val3;
               Assert.AreEqual(val3, labSheetA1Measurement.Time);
               int val4 = 45;
               labSheetA1Measurement.MPN = val4;
               Assert.AreEqual(val4, labSheetA1Measurement.MPN);
               int val5 = 45;
               labSheetA1Measurement.Tube10 = val5;
               Assert.AreEqual(val5, labSheetA1Measurement.Tube10);
               int val6 = 45;
               labSheetA1Measurement.Tube1_0 = val6;
               Assert.AreEqual(val6, labSheetA1Measurement.Tube1_0);
               int val7 = 45;
               labSheetA1Measurement.Tube0_1 = val7;
               Assert.AreEqual(val7, labSheetA1Measurement.Tube0_1);
               double val8 = 87.9D;
               labSheetA1Measurement.Salinity = val8;
               Assert.AreEqual(val8, labSheetA1Measurement.Salinity);
               double val9 = 87.9D;
               labSheetA1Measurement.Temperature = val9;
               Assert.AreEqual(val9, labSheetA1Measurement.Temperature);
               string val10 = "Some text";
               labSheetA1Measurement.ProcessedBy = val10;
               Assert.AreEqual(val10, labSheetA1Measurement.ProcessedBy);
               SampleTypeEnum val11 = (SampleTypeEnum)3;
               labSheetA1Measurement.SampleType = val11;
               Assert.AreEqual(val11, labSheetA1Measurement.SampleType);
               string val12 = "Some text";
               labSheetA1Measurement.SiteComment = val12;
               Assert.AreEqual(val12, labSheetA1Measurement.SiteComment);
               string val13 = "Some text";
               labSheetA1Measurement.SampleTypeText = val13;
               Assert.AreEqual(val13, labSheetA1Measurement.SampleTypeText);
               bool val14 = true;
               labSheetA1Measurement.HasErrors = val14;
               Assert.AreEqual(val14, labSheetA1Measurement.HasErrors);
               IEnumerable<ValidationResult> val45 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               labSheetA1Measurement.ValidationResults = val45;
               Assert.AreEqual(val45, labSheetA1Measurement.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
