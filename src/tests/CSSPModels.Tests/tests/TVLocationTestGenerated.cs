/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TVLocationTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private TVLocation tVLocation { get; set; }
        #endregion Properties

        #region Constructors
        public TVLocationTest()
        {
            tVLocation = new TVLocation();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void TVLocation_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TVItemID", "TVText", "TVType", "SubTVType", "TVTypeText", "SubTVTypeText", "MapObjList", "HasErrors",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVLocation).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.AreEqual(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.AreEqual(propNameList.Count, index);
        }
        [TestMethod]
        public void TVLocation_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TVLocation).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TVLocation_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tVLocation.TVItemID = val1;
               Assert.AreEqual(val1, tVLocation.TVItemID);
               string val2 = "Some text";
               tVLocation.TVText = val2;
               Assert.AreEqual(val2, tVLocation.TVText);
               TVTypeEnum val3 = (TVTypeEnum)3;
               tVLocation.TVType = val3;
               Assert.AreEqual(val3, tVLocation.TVType);
               TVTypeEnum val4 = (TVTypeEnum)3;
               tVLocation.SubTVType = val4;
               Assert.AreEqual(val4, tVLocation.SubTVType);
               string val5 = "Some text";
               tVLocation.TVTypeText = val5;
               Assert.AreEqual(val5, tVLocation.TVTypeText);
               string val6 = "Some text";
               tVLocation.SubTVTypeText = val6;
               Assert.AreEqual(val6, tVLocation.SubTVTypeText);
               List<MapObj> val7 = new List<MapObj>() { new MapObj(), new MapObj() };
               tVLocation.MapObjList = val7;
               Assert.AreEqual(val7, tVLocation.MapObjList);
               bool val8 = true;
               tVLocation.HasErrors = val8;
               Assert.AreEqual(val8, tVLocation.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               tVLocation.ValidationResults = val27;
               Assert.AreEqual(val27, tVLocation.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
