 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class ContactServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private ContactService contactService { get; set; }
        #endregion Properties

        #region Constructors
        public ContactServiceTest() : base()
        {
            //contactService = new ContactService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void Contact_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    Contact contact = GetFilledRandomContact("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = contactService.GetContactList().Count();

                    Assert.Equal(count, (from c in dbTestDB.Contacts select c).Count());

                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    if (contact.HasErrors)
                    {
                        Assert.Equal("", contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(contactService.GetContactList().Where(c => c == contact).Any());
                    contactService.Update(contact);
                    if (contact.HasErrors)
                    {
                        Assert.Equal("", contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, contactService.GetContactList().Count());
                    contactService.Delete(contact);
                    if (contact.HasErrors)
                    {
                        Assert.Equal("", contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, contactService.GetContactList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void Contact_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = contactService.GetContactList().Count();

                    Contact contact = GetFilledRandomContact("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // contact.ContactID   (Int32)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.ContactID = 0;
                    contactService.Update(contact);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "ContactID"), contact.ValidationResults.FirstOrDefault().ErrorMessage);

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.ContactID = 10000000;
                    contactService.Update(contact);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "Contact", "ContactID", contact.ContactID.ToString()), contact.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "AspNetUser", ExistPlurial = "s", ExistFieldID = "Id", AllowableTVtypeList = )]
                    // [StringLength(128))]
                    // contact.Id   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("Id");
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.LoggedIn));
                    Assert.Equal(2, contact.ValidationResults.Count());
                    Assert.True(contact.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Id")).Any());
                    Assert.Null(contact.Id);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.Id = GetRandomString("", 129);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "Id", "128"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // contact.ContactTVItemID   (Int32)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.ContactTVItemID = 0;
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "ContactTVItemID", contact.ContactTVItemID.ToString()), contact.ValidationResults.FirstOrDefault().ErrorMessage);

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.ContactTVItemID = 1;
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "ContactTVItemID", "Contact"), contact.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [DataType(DataType.EmailAddress)]
                    // [StringLength(255, MinimumLength = 6)]
                    // contact.LoginEmail   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("LoginEmail");
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.LoggedIn));
                    Assert.Equal(1, contact.ValidationResults.Count());
                    Assert.True(contact.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "LoginEmail")).Any());
                    Assert.Null(contact.LoginEmail);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LoginEmail = GetRandomString("", 5);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._LengthShouldBeBetween_And_, "LoginEmail", "6", "255"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());
                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LoginEmail = GetRandomString("", 256);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._LengthShouldBeBetween_And_, "LoginEmail", "6", "255"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // contact.FirstName   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("FirstName");
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.LoggedIn));
                    Assert.Equal(1, contact.ValidationResults.Count());
                    Assert.True(contact.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "FirstName")).Any());
                    Assert.Null(contact.FirstName);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.FirstName = GetRandomString("", 101);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "FirstName", "100"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // contact.LastName   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("LastName");
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.LoggedIn));
                    Assert.Equal(1, contact.ValidationResults.Count());
                    Assert.True(contact.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "LastName")).Any());
                    Assert.Null(contact.LastName);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LastName = GetRandomString("", 101);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "LastName", "100"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [StringLength(50))]
                    // contact.Initial   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.Initial = GetRandomString("", 51);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "Initial", "50"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // contact.WebName   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("WebName");
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.LoggedIn));
                    Assert.Equal(1, contact.ValidationResults.Count());
                    Assert.True(contact.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "WebName")).Any());
                    Assert.Null(contact.WebName);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.WebName = GetRandomString("", 101);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "WebName", "100"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // contact.ContactTitle   (ContactTitleEnum)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.ContactTitle = (ContactTitleEnum)1000000;
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "ContactTitle"), contact.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // contact.IsAdmin   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // contact.EmailValidated   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // contact.Disabled   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // contact.IsNew   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is Nullable
                    // [StringLength(200))]
                    // contact.SamplingPlanner_ProvincesTVItemID   (String)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.SamplingPlanner_ProvincesTVItemID = GetRandomString("", 201);
                    Assert.False(contactService.Add(contact, AddContactTypeEnum.First));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "SamplingPlanner_ProvincesTVItemID", "200"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, contactService.GetContactList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // contact.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LastUpdateDate_UTC = new DateTime();
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), contact.ValidationResults.FirstOrDefault().ErrorMessage);
                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), contact.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // contact.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LastUpdateContactTVItemID = 0;
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", contact.LastUpdateContactTVItemID.ToString()), contact.ValidationResults.FirstOrDefault().ErrorMessage);

                    contact = null;
                    contact = GetFilledRandomContact("");
                    contact.LastUpdateContactTVItemID = 1;
                    contactService.Add(contact, AddContactTypeEnum.LoggedIn);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), contact.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // contact.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // contact.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetContactWithContactID(contact.ContactID)
        [Fact]
        public void GetContactWithContactID__contact_ContactID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Contact contact = (from c in dbTestDB.Contacts select c).FirstOrDefault();
                    Assert.NotNull(contact);

                }
            }
        }
        #endregion Tests Generated for GetContactWithContactID(contact.ContactID)

        #region Tests Generated for GetContactList()
        [Fact]
        public void GetContactList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Contact contact = (from c in dbTestDB.Contacts select c).FirstOrDefault();
                    Assert.NotNull(contact);

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetContactList()

        #region Tests Generated for GetContactList() Skip Take
        [Fact]
        public void GetContactList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Skip(1).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take

        #region Tests Generated for GetContactList() Skip Take Asc
        [Fact]
        public void GetContactList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 1, 1,  "ContactID", "", "");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).OrderBy(c => c.ContactID).Skip(1).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Asc

        #region Tests Generated for GetContactList() Skip Take 2 Asc
        [Fact]
        public void GetContactList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 1, 1, "ContactID,Id", "", "");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).OrderBy(c => c.ContactID).ThenBy(c => c.Id).Skip(1).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take 2 Asc

        #region Tests Generated for GetContactList() Skip Take Asc Where
        [Fact]
        public void GetContactList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 0, 1, "ContactID", "", "ContactID,EQ,4");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Where(c => c.ContactID == 4).OrderBy(c => c.ContactID).Skip(0).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Asc Where

        #region Tests Generated for GetContactList() Skip Take Asc 2 Where
        [Fact]
        public void GetContactList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 0, 1, "ContactID", "", "ContactID,GT,2|ContactID,LT,5");

                     List<Contact> contactDirectQueryList = new List<Contact>();
                     contactDirectQueryList = (from c in dbTestDB.Contacts select c).Where(c => c.ContactID > 2 && c.ContactID < 5).Skip(0).Take(1).OrderBy(c => c.ContactID).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Asc 2 Where

        #region Tests Generated for GetContactList() Skip Take Desc
        [Fact]
        public void GetContactList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 1, 1, "", "ContactID", "");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).OrderByDescending(c => c.ContactID).Skip(1).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Desc

        #region Tests Generated for GetContactList() Skip Take 2 Desc
        [Fact]
        public void GetContactList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 1, 1, "", "ContactID,Id", "");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).OrderByDescending(c => c.ContactID).ThenByDescending(c => c.Id).Skip(1).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take 2 Desc

        #region Tests Generated for GetContactList() Skip Take Desc Where
        [Fact]
        public void GetContactList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 0, 1, "ContactID", "", "ContactID,EQ,4");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Where(c => c.ContactID == 4).OrderByDescending(c => c.ContactID).Skip(0).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Desc Where

        #region Tests Generated for GetContactList() Skip Take Desc 2 Where
        [Fact]
        public void GetContactList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 0, 1, "", "ContactID", "ContactID,GT,2|ContactID,LT,5");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Where(c => c.ContactID > 2 && c.ContactID < 5).OrderByDescending(c => c.ContactID).Skip(0).Take(1).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() Skip Take Desc 2 Where

        #region Tests Generated for GetContactList() 2 Where
        [Fact]
        public void GetContactList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ContactService contactService = new ContactService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    contactService.Query = contactService.FillQuery(typeof(Contact), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "ContactID,GT,2|ContactID,LT,5");

                    List<Contact> contactDirectQueryList = new List<Contact>();
                    contactDirectQueryList = (from c in dbTestDB.Contacts select c).Where(c => c.ContactID > 2 && c.ContactID < 5).ToList();

                        List<Contact> contactList = new List<Contact>();
                        contactList = contactService.GetContactList().ToList();
                        CheckContactFields(contactList);
                        Assert.Equal(contactDirectQueryList[0].ContactID, contactList[0].ContactID);
                }
            }
        }
        #endregion Tests Generated for GetContactList() 2 Where

        #region Functions private
        private void CheckContactFields(List<Contact> contactList)
        {
            Assert.NotNull(contactList[0].ContactID);
            Assert.False(string.IsNullOrWhiteSpace(contactList[0].Id));
            Assert.NotNull(contactList[0].ContactTVItemID);
            Assert.False(string.IsNullOrWhiteSpace(contactList[0].LoginEmail));
            Assert.False(string.IsNullOrWhiteSpace(contactList[0].FirstName));
            Assert.False(string.IsNullOrWhiteSpace(contactList[0].LastName));
            if (!string.IsNullOrWhiteSpace(contactList[0].Initial))
            {
                Assert.False(string.IsNullOrWhiteSpace(contactList[0].Initial));
            }
            Assert.False(string.IsNullOrWhiteSpace(contactList[0].WebName));
            if (contactList[0].ContactTitle != null)
            {
                Assert.NotNull(contactList[0].ContactTitle);
            }
            Assert.NotNull(contactList[0].IsAdmin);
            Assert.NotNull(contactList[0].EmailValidated);
            Assert.NotNull(contactList[0].Disabled);
            Assert.NotNull(contactList[0].IsNew);
            if (!string.IsNullOrWhiteSpace(contactList[0].SamplingPlanner_ProvincesTVItemID))
            {
                Assert.False(string.IsNullOrWhiteSpace(contactList[0].SamplingPlanner_ProvincesTVItemID));
            }
            Assert.NotNull(contactList[0].LastUpdateDate_UTC);
            Assert.NotNull(contactList[0].LastUpdateContactTVItemID);
            Assert.NotNull(contactList[0].HasErrors);
        }
        private Contact GetFilledRandomContact(string OmitPropName)
        {
            Contact contact = new Contact();

            if (OmitPropName != "Id") contact.Id = "023566a4-4a25-4484-88f5-584aa8e1da38";
            if (OmitPropName != "ContactTVItemID") contact.ContactTVItemID = 2;
            if (OmitPropName != "LoginEmail") contact.LoginEmail = GetRandomEmail();
            if (OmitPropName != "FirstName") contact.FirstName = GetRandomString("", 5);
            if (OmitPropName != "LastName") contact.LastName = GetRandomString("", 5);
            if (OmitPropName != "Initial") contact.Initial = GetRandomString("", 5);
            if (OmitPropName != "WebName") contact.WebName = GetRandomString("", 5);
            if (OmitPropName != "ContactTitle") contact.ContactTitle = (ContactTitleEnum)GetRandomEnumType(typeof(ContactTitleEnum));
            if (OmitPropName != "IsAdmin") contact.IsAdmin = true;
            if (OmitPropName != "EmailValidated") contact.EmailValidated = true;
            if (OmitPropName != "Disabled") contact.Disabled = true;
            if (OmitPropName != "IsNew") contact.IsNew = true;
            if (OmitPropName != "SamplingPlanner_ProvincesTVItemID") contact.SamplingPlanner_ProvincesTVItemID = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") contact.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") contact.LastUpdateContactTVItemID = 2;

            return contact;
        }
        #endregion Functions private
    }
}
