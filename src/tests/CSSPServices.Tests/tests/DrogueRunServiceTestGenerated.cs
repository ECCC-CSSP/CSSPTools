 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class DrogueRunServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private DrogueRunService drogueRunService { get; set; }
        #endregion Properties

        #region Constructors
        public DrogueRunServiceTest() : base()
        {
            //drogueRunService = new DrogueRunService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void DrogueRun_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    DrogueRun drogueRun = GetFilledRandomDrogueRun("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = drogueRunService.GetDrogueRunList().Count();

                    Assert.Equal(count, (from c in dbTestDB.DrogueRuns select c).Count());

                    drogueRunService.Add(drogueRun);
                    if (drogueRun.HasErrors)
                    {
                        Assert.Equal("", drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(drogueRunService.GetDrogueRunList().Where(c => c == drogueRun).Any());
                    drogueRunService.Update(drogueRun);
                    if (drogueRun.HasErrors)
                    {
                        Assert.Equal("", drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, drogueRunService.GetDrogueRunList().Count());
                    drogueRunService.Delete(drogueRun);
                    if (drogueRun.HasErrors)
                    {
                        Assert.Equal("", drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, drogueRunService.GetDrogueRunList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void DrogueRun_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = drogueRunService.GetDrogueRunList().Count();

                    DrogueRun drogueRun = GetFilledRandomDrogueRun("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // drogueRun.DrogueRunID   (Int32)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.DrogueRunID = 0;
                    drogueRunService.Update(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "DrogueRunID"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.DrogueRunID = 10000000;
                    drogueRunService.Update(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "DrogueRun", "DrogueRunID", drogueRun.DrogueRunID.ToString()), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
                    // drogueRun.SubsectorTVItemID   (Int32)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.SubsectorTVItemID = 0;
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "SubsectorTVItemID", drogueRun.SubsectorTVItemID.ToString()), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.SubsectorTVItemID = 1;
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 100)]
                    // drogueRun.DrogueNumber   (Int32)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.DrogueNumber = -1;
                    Assert.False(drogueRunService.Add(drogueRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "DrogueNumber", "0", "100"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunService.GetDrogueRunList().Count());
                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.DrogueNumber = 101;
                    Assert.False(drogueRunService.Add(drogueRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "DrogueNumber", "0", "100"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunService.GetDrogueRunList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // drogueRun.DrogueType   (DrogueTypeEnum)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.DrogueType = (DrogueTypeEnum)1000000;
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "DrogueType"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // drogueRun.RunStartDateTime   (DateTime)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.RunStartDateTime = new DateTime();
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "RunStartDateTime"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.RunStartDateTime = new DateTime(1979, 1, 1);
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "RunStartDateTime", "1980"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // drogueRun.IsRisingTide   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // drogueRun.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.LastUpdateDate_UTC = new DateTime();
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // drogueRun.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.LastUpdateContactTVItemID = 0;
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", drogueRun.LastUpdateContactTVItemID.ToString()), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    drogueRun = null;
                    drogueRun = GetFilledRandomDrogueRun("");
                    drogueRun.LastUpdateContactTVItemID = 1;
                    drogueRunService.Add(drogueRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), drogueRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // drogueRun.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // drogueRun.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetDrogueRunWithDrogueRunID(drogueRun.DrogueRunID)
        [Fact]
        public void GetDrogueRunWithDrogueRunID__drogueRun_DrogueRunID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    DrogueRun drogueRun = (from c in dbTestDB.DrogueRuns select c).FirstOrDefault();
                    Assert.NotNull(drogueRun);

                }
            }
        }
        #endregion Tests Generated for GetDrogueRunWithDrogueRunID(drogueRun.DrogueRunID)

        #region Tests Generated for GetDrogueRunList()
        [Fact]
        public void GetDrogueRunList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    DrogueRun drogueRun = (from c in dbTestDB.DrogueRuns select c).FirstOrDefault();
                    Assert.NotNull(drogueRun);

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList()

        #region Tests Generated for GetDrogueRunList() Skip Take
        [Fact]
        public void GetDrogueRunList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Skip(1).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take

        #region Tests Generated for GetDrogueRunList() Skip Take Asc
        [Fact]
        public void GetDrogueRunList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 1, 1,  "DrogueRunID", "", "");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).OrderBy(c => c.DrogueRunID).Skip(1).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Asc

        #region Tests Generated for GetDrogueRunList() Skip Take 2 Asc
        [Fact]
        public void GetDrogueRunList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 1, 1, "DrogueRunID,SubsectorTVItemID", "", "");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).OrderBy(c => c.DrogueRunID).ThenBy(c => c.SubsectorTVItemID).Skip(1).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take 2 Asc

        #region Tests Generated for GetDrogueRunList() Skip Take Asc Where
        [Fact]
        public void GetDrogueRunList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunID", "", "DrogueRunID,EQ,4");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Where(c => c.DrogueRunID == 4).OrderBy(c => c.DrogueRunID).Skip(0).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Asc Where

        #region Tests Generated for GetDrogueRunList() Skip Take Asc 2 Where
        [Fact]
        public void GetDrogueRunList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunID", "", "DrogueRunID,GT,2|DrogueRunID,LT,5");

                     List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                     drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Where(c => c.DrogueRunID > 2 && c.DrogueRunID < 5).Skip(0).Take(1).OrderBy(c => c.DrogueRunID).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Asc 2 Where

        #region Tests Generated for GetDrogueRunList() Skip Take Desc
        [Fact]
        public void GetDrogueRunList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 1, 1, "", "DrogueRunID", "");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).OrderByDescending(c => c.DrogueRunID).Skip(1).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Desc

        #region Tests Generated for GetDrogueRunList() Skip Take 2 Desc
        [Fact]
        public void GetDrogueRunList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 1, 1, "", "DrogueRunID,SubsectorTVItemID", "");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).OrderByDescending(c => c.DrogueRunID).ThenByDescending(c => c.SubsectorTVItemID).Skip(1).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take 2 Desc

        #region Tests Generated for GetDrogueRunList() Skip Take Desc Where
        [Fact]
        public void GetDrogueRunList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunID", "", "DrogueRunID,EQ,4");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Where(c => c.DrogueRunID == 4).OrderByDescending(c => c.DrogueRunID).Skip(0).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Desc Where

        #region Tests Generated for GetDrogueRunList() Skip Take Desc 2 Where
        [Fact]
        public void GetDrogueRunList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 0, 1, "", "DrogueRunID", "DrogueRunID,GT,2|DrogueRunID,LT,5");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Where(c => c.DrogueRunID > 2 && c.DrogueRunID < 5).OrderByDescending(c => c.DrogueRunID).Skip(0).Take(1).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() Skip Take Desc 2 Where

        #region Tests Generated for GetDrogueRunList() 2 Where
        [Fact]
        public void GetDrogueRunList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunService drogueRunService = new DrogueRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunService.Query = drogueRunService.FillQuery(typeof(DrogueRun), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "DrogueRunID,GT,2|DrogueRunID,LT,5");

                    List<DrogueRun> drogueRunDirectQueryList = new List<DrogueRun>();
                    drogueRunDirectQueryList = (from c in dbTestDB.DrogueRuns select c).Where(c => c.DrogueRunID > 2 && c.DrogueRunID < 5).ToList();

                        List<DrogueRun> drogueRunList = new List<DrogueRun>();
                        drogueRunList = drogueRunService.GetDrogueRunList().ToList();
                        CheckDrogueRunFields(drogueRunList);
                        Assert.Equal(drogueRunDirectQueryList[0].DrogueRunID, drogueRunList[0].DrogueRunID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunList() 2 Where

        #region Functions private
        private void CheckDrogueRunFields(List<DrogueRun> drogueRunList)
        {
        }
        private DrogueRun GetFilledRandomDrogueRun(string OmitPropName)
        {
            DrogueRun drogueRun = new DrogueRun();

            if (OmitPropName != "SubsectorTVItemID") drogueRun.SubsectorTVItemID = 11;
            if (OmitPropName != "DrogueNumber") drogueRun.DrogueNumber = GetRandomInt(0, 100);
            if (OmitPropName != "DrogueType") drogueRun.DrogueType = (DrogueTypeEnum)GetRandomEnumType(typeof(DrogueTypeEnum));
            if (OmitPropName != "RunStartDateTime") drogueRun.RunStartDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "IsRisingTide") drogueRun.IsRisingTide = true;
            if (OmitPropName != "LastUpdateDate_UTC") drogueRun.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") drogueRun.LastUpdateContactTVItemID = 2;

            return drogueRun;
        }
        #endregion Functions private
    }
}
