 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class EmailDistributionListContactLanguageServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private EmailDistributionListContactLanguageService emailDistributionListContactLanguageService { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListContactLanguageServiceTest() : base()
        {
            //emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void EmailDistributionListContactLanguage_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    EmailDistributionListContactLanguage emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count();

                    Assert.Equal(count, (from c in dbTestDB.EmailDistributionListContactLanguages select c).Count());

                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    if (emailDistributionListContactLanguage.HasErrors)
                    {
                        Assert.Equal("", emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Where(c => c == emailDistributionListContactLanguage).Any());
                    emailDistributionListContactLanguageService.Update(emailDistributionListContactLanguage);
                    if (emailDistributionListContactLanguage.HasErrors)
                    {
                        Assert.Equal("", emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count());
                    emailDistributionListContactLanguageService.Delete(emailDistributionListContactLanguage);
                    if (emailDistributionListContactLanguage.HasErrors)
                    {
                        Assert.Equal("", emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void EmailDistributionListContactLanguage_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count();

                    EmailDistributionListContactLanguage emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // emailDistributionListContactLanguage.EmailDistributionListContactLanguageID   (Int32)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.EmailDistributionListContactLanguageID = 0;
                    emailDistributionListContactLanguageService.Update(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "EmailDistributionListContactLanguageID"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.EmailDistributionListContactLanguageID = 10000000;
                    emailDistributionListContactLanguageService.Update(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "EmailDistributionListContactLanguage", "EmailDistributionListContactLanguageID", emailDistributionListContactLanguage.EmailDistributionListContactLanguageID.ToString()), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "EmailDistributionListContact", ExistPlurial = "s", ExistFieldID = "EmailDistributionListContactID", AllowableTVtypeList = )]
                    // emailDistributionListContactLanguage.EmailDistributionListContactID   (Int32)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.EmailDistributionListContactID = 0;
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "EmailDistributionListContact", "EmailDistributionListContactID", emailDistributionListContactLanguage.EmailDistributionListContactID.ToString()), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // emailDistributionListContactLanguage.Language   (LanguageEnum)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.Language = (LanguageEnum)1000000;
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Language"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100, MinimumLength = 1)]
                    // emailDistributionListContactLanguage.Agency   (String)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("Agency");
                    Assert.False(emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage));
                    Assert.Equal(1, emailDistributionListContactLanguage.ValidationResults.Count());
                    Assert.True(emailDistributionListContactLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Agency")).Any());
                    Assert.Null(emailDistributionListContactLanguage.Agency);
                    Assert.Equal(count, emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count());

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.Agency = GetRandomString("", 101);
                    Assert.False(emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage));
                    Assert.Equal(string.Format(CSSPServicesRes._LengthShouldBeBetween_And_, "Agency", "1", "100"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // emailDistributionListContactLanguage.TranslationStatus   (TranslationStatusEnum)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.TranslationStatus = (TranslationStatusEnum)1000000;
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TranslationStatus"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // emailDistributionListContactLanguage.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime();
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // emailDistributionListContactLanguage.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.LastUpdateContactTVItemID = 0;
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", emailDistributionListContactLanguage.LastUpdateContactTVItemID.ToString()), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    emailDistributionListContactLanguage = null;
                    emailDistributionListContactLanguage = GetFilledRandomEmailDistributionListContactLanguage("");
                    emailDistributionListContactLanguage.LastUpdateContactTVItemID = 1;
                    emailDistributionListContactLanguageService.Add(emailDistributionListContactLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), emailDistributionListContactLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // emailDistributionListContactLanguage.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // emailDistributionListContactLanguage.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetEmailDistributionListContactLanguageWithEmailDistributionListContactLanguageID(emailDistributionListContactLanguage.EmailDistributionListContactLanguageID)
        [Fact]
        public void GetEmailDistributionListContactLanguageWithEmailDistributionListContactLanguageID__emailDistributionListContactLanguage_EmailDistributionListContactLanguageID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    EmailDistributionListContactLanguage emailDistributionListContactLanguage = (from c in dbTestDB.EmailDistributionListContactLanguages select c).FirstOrDefault();
                    Assert.NotNull(emailDistributionListContactLanguage);

                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageWithEmailDistributionListContactLanguageID(emailDistributionListContactLanguage.EmailDistributionListContactLanguageID)

        #region Tests Generated for GetEmailDistributionListContactLanguageList()
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    EmailDistributionListContactLanguage emailDistributionListContactLanguage = (from c in dbTestDB.EmailDistributionListContactLanguages select c).FirstOrDefault();
                    Assert.NotNull(emailDistributionListContactLanguage);

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList()

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Skip(1).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 1, 1,  "EmailDistributionListContactLanguageID", "", "");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).OrderBy(c => c.EmailDistributionListContactLanguageID).Skip(1).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take 2 Asc
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 1, 1, "EmailDistributionListContactLanguageID,EmailDistributionListContactID", "", "");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).OrderBy(c => c.EmailDistributionListContactLanguageID).ThenBy(c => c.EmailDistributionListContactID).Skip(1).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take 2 Asc

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc Where
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 0, 1, "EmailDistributionListContactLanguageID", "", "EmailDistributionListContactLanguageID,EQ,4");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Where(c => c.EmailDistributionListContactLanguageID == 4).OrderBy(c => c.EmailDistributionListContactLanguageID).Skip(0).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc Where

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc 2 Where
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 0, 1, "EmailDistributionListContactLanguageID", "", "EmailDistributionListContactLanguageID,GT,2|EmailDistributionListContactLanguageID,LT,5");

                     List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                     emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Where(c => c.EmailDistributionListContactLanguageID > 2 && c.EmailDistributionListContactLanguageID < 5).Skip(0).Take(1).OrderBy(c => c.EmailDistributionListContactLanguageID).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Asc 2 Where

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "EmailDistributionListContactLanguageID", "");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).OrderByDescending(c => c.EmailDistributionListContactLanguageID).Skip(1).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take 2 Desc
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "EmailDistributionListContactLanguageID,EmailDistributionListContactID", "");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).OrderByDescending(c => c.EmailDistributionListContactLanguageID).ThenByDescending(c => c.EmailDistributionListContactID).Skip(1).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take 2 Desc

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc Where
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 0, 1, "EmailDistributionListContactLanguageID", "", "EmailDistributionListContactLanguageID,EQ,4");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Where(c => c.EmailDistributionListContactLanguageID == 4).OrderByDescending(c => c.EmailDistributionListContactLanguageID).Skip(0).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc Where

        #region Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc 2 Where
        [Fact]
        public void GetEmailDistributionListContactLanguageList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 0, 1, "", "EmailDistributionListContactLanguageID", "EmailDistributionListContactLanguageID,GT,2|EmailDistributionListContactLanguageID,LT,5");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Where(c => c.EmailDistributionListContactLanguageID > 2 && c.EmailDistributionListContactLanguageID < 5).OrderByDescending(c => c.EmailDistributionListContactLanguageID).Skip(0).Take(1).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() Skip Take Desc 2 Where

        #region Tests Generated for GetEmailDistributionListContactLanguageList() 2 Where
        [Fact]
        public void GetEmailDistributionListContactLanguageList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    EmailDistributionListContactLanguageService emailDistributionListContactLanguageService = new EmailDistributionListContactLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    emailDistributionListContactLanguageService.Query = emailDistributionListContactLanguageService.FillQuery(typeof(EmailDistributionListContactLanguage), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "EmailDistributionListContactLanguageID,GT,2|EmailDistributionListContactLanguageID,LT,5");

                    List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageDirectQueryList = new List<EmailDistributionListContactLanguage>();
                    emailDistributionListContactLanguageDirectQueryList = (from c in dbTestDB.EmailDistributionListContactLanguages select c).Where(c => c.EmailDistributionListContactLanguageID > 2 && c.EmailDistributionListContactLanguageID < 5).ToList();

                        List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList = new List<EmailDistributionListContactLanguage>();
                        emailDistributionListContactLanguageList = emailDistributionListContactLanguageService.GetEmailDistributionListContactLanguageList().ToList();
                        CheckEmailDistributionListContactLanguageFields(emailDistributionListContactLanguageList);
                        Assert.Equal(emailDistributionListContactLanguageDirectQueryList[0].EmailDistributionListContactLanguageID, emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetEmailDistributionListContactLanguageList() 2 Where

        #region Functions private
        private void CheckEmailDistributionListContactLanguageFields(List<EmailDistributionListContactLanguage> emailDistributionListContactLanguageList)
        {
            Assert.NotNull(emailDistributionListContactLanguageList[0].EmailDistributionListContactLanguageID);
            Assert.NotNull(emailDistributionListContactLanguageList[0].EmailDistributionListContactID);
            Assert.NotNull(emailDistributionListContactLanguageList[0].Language);
            Assert.False(string.IsNullOrWhiteSpace(emailDistributionListContactLanguageList[0].Agency));
            Assert.NotNull(emailDistributionListContactLanguageList[0].TranslationStatus);
            Assert.NotNull(emailDistributionListContactLanguageList[0].LastUpdateDate_UTC);
            Assert.NotNull(emailDistributionListContactLanguageList[0].LastUpdateContactTVItemID);
            Assert.NotNull(emailDistributionListContactLanguageList[0].HasErrors);
        }
        private EmailDistributionListContactLanguage GetFilledRandomEmailDistributionListContactLanguage(string OmitPropName)
        {
            EmailDistributionListContactLanguage emailDistributionListContactLanguage = new EmailDistributionListContactLanguage();

            if (OmitPropName != "EmailDistributionListContactID") emailDistributionListContactLanguage.EmailDistributionListContactID = 1;
            if (OmitPropName != "Language") emailDistributionListContactLanguage.Language = LanguageRequest;
            if (OmitPropName != "Agency") emailDistributionListContactLanguage.Agency = GetRandomString("", 6);
            if (OmitPropName != "TranslationStatus") emailDistributionListContactLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionListContactLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionListContactLanguage.LastUpdateContactTVItemID = 2;

            return emailDistributionListContactLanguage;
        }
        #endregion Functions private
    }
}
