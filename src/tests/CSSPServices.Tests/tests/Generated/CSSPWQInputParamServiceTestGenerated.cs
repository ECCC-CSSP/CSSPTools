///* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
// *
// * Do not edit this file.
// *
// */ 

//using CSSPEnums;
//using CSSPModels;
//using CSSPCultureServices.Services;
//using Microsoft.AspNetCore.Mvc;
//using Microsoft.EntityFrameworkCore;
//using Microsoft.Extensions.Configuration;
//using Microsoft.Extensions.DependencyInjection;
//using System;
//using System.Collections.Generic;
//using System.Globalization;
//using System.IO;
//using System.Linq;
//using System.Threading.Tasks;
//using System.Transactions;
//using Xunit;
//using System.ComponentModel.DataAnnotations;

//namespace CSSPServices.Tests
//{
//    public partial class CSSPWQInputParamServiceTest : TestHelper
//    {
//        #region Variables
//        #endregion Variables

//        #region Properties
//        private IConfiguration Config { get; set; }
//        private IServiceProvider Provider { get; set; }
//        private IServiceCollection Services { get; set; }
//        private ICSSPCultureService CSSPCultureService { get; set; }
//        private ICSSPWQInputParamService CSSPWQInputParamService { get; set; }
//        private CSSPWQInputParam cSSPWQInputParam { get; set; }
//        #endregion Properties

//        #region Constructors
//        public CSSPWQInputParamServiceTest() : base()
//        {

//        }
//        #endregion Constructors

//        #region Tests Generated Basic Test Not Mapped
//        [Theory]
//        [InlineData("en-CA")]
//        [InlineData("fr-CA")]
//        public async Task CSSPWQInputParamService_Good_Test(string culture)
//        {
//            Assert.True(await Setup(culture));

//            cSSPWQInputParam = GetFilledRandomCSSPWQInputParam("");

//            List<ValidationResult> ValidationResultsList = CSSPWQInputParamService.Validate(new ValidationContext(cSSPWQInputParam)).ToList();
//            Assert.True(ValidationResultsList.Count == 0);
//        }
//        #endregion Tests Generated Basic Test Not Mapped

//        #region Functions private
//        private async Task<bool> Setup(string culture)
//        {
//            Config = new ConfigurationBuilder()
//               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
//               .AddJsonFile("appsettings_csspservices.json")
//               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
//               .Build();

//            Services = new ServiceCollection();

//            Services.AddSingleton<IConfiguration>(Config);

//            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
//            Services.AddSingleton<IEnums, Enums>();
//            Services.AddSingleton<ICSSPWQInputParamService, CSSPWQInputParamService>();

//            Provider = Services.BuildServiceProvider();
//            Assert.NotNull(Provider);

//            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
//            Assert.NotNull(CSSPCultureService);

//            CSSPCultureService.SetCulture(culture);

//            CSSPWQInputParamService = Provider.GetService<ICSSPWQInputParamService>();
//            Assert.NotNull(CSSPWQInputParamService);

//            return await Task.FromResult(true);
//        }
//        private CSSPWQInputParam GetFilledRandomCSSPWQInputParam(string OmitPropName)
//        {
//            CSSPWQInputParam cSSPWQInputParam = new CSSPWQInputParam();

//            if (OmitPropName != "CSSPWQInputType") cSSPWQInputParam.CSSPWQInputType = (CSSPWQInputTypeEnum)GetRandomEnumType(typeof(CSSPWQInputTypeEnum));
//            if (OmitPropName != "Name") cSSPWQInputParam.Name = GetRandomString("", 6);
//            if (OmitPropName != "TVItemID") cSSPWQInputParam.TVItemID = GetRandomInt(1, 11);
//            if (OmitPropName != "CSSPWQInputTypeText") cSSPWQInputParam.CSSPWQInputTypeText = GetRandomString("", 5);
//            if (OmitPropName != "sidList") cSSPWQInputParam.sidList = new List<string>() { GetRandomString("", 20), GetRandomString("", 20) };
//            if (OmitPropName != "MWQMSiteList") cSSPWQInputParam.MWQMSiteList = new List<string>() { GetRandomString("", 20), GetRandomString("", 20) };
//            // should implement a Range for the property MWQMSiteTVItemIDList and type CSSPWQInputParam
//            if (OmitPropName != "DailyDuplicateMWQMSiteList") cSSPWQInputParam.DailyDuplicateMWQMSiteList = new List<string>() { GetRandomString("", 20), GetRandomString("", 20) };
//            // should implement a Range for the property DailyDuplicateMWQMSiteTVItemIDList and type CSSPWQInputParam
//            if (OmitPropName != "InfrastructureList") cSSPWQInputParam.InfrastructureList = new List<string>() { GetRandomString("", 20), GetRandomString("", 20) };
//            // should implement a Range for the property InfrastructureTVItemIDList and type CSSPWQInputParam

//            return cSSPWQInputParam;
//        }
//        private void CheckCSSPWQInputParamFields(List<CSSPWQInputParam> cSSPWQInputParamList)
//        {
//            Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].Name));
//            if (!string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].CSSPWQInputTypeText))
//            {
//                Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].CSSPWQInputTypeText));
//            }
//            Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].sidList));
//            Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].MWQMSiteList));
//            Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].DailyDuplicateMWQMSiteList));
//            Assert.False(string.IsNullOrWhiteSpace(cSSPWQInputParamList[0].InfrastructureList));
//        }
//        #endregion Functions private
//    }
//}
