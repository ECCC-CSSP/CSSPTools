/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class ContactPreferenceServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IContactPreferenceService contactPreferenceService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public ContactPreferenceServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task ContactPreference_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            ContactPreference contactPreference = GetFilledRandomContactPreference(""); 

            // List<ContactPreference>
            var actionContactPreferenceList = await contactPreferenceService.GetContactPreferenceList();
            Assert.Equal(200, ((ObjectResult)actionContactPreferenceList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionContactPreferenceList.Result).Value);
            List<ContactPreference> contactPreferenceList = (List<ContactPreference>)(((OkObjectResult)actionContactPreferenceList.Result).Value);

            int count = ((List<ContactPreference>)((OkObjectResult)actionContactPreferenceList.Result).Value).Count();
            Assert.True(count > 0);

            // Add ContactPreference
            var actionContactPreferenceAdded = await contactPreferenceService.Add(contactPreference);
            Assert.Equal(200, ((ObjectResult)actionContactPreferenceAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionContactPreferenceAdded.Result).Value);
            ContactPreference contactPreferenceAdded = (ContactPreference)(((OkObjectResult)actionContactPreferenceAdded.Result).Value);
            Assert.NotNull(contactPreferenceAdded);

            // Update ContactPreference
            var actionContactPreferenceUpdated = await contactPreferenceService.Update(contactPreference);
            Assert.Equal(200, ((ObjectResult)actionContactPreferenceUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionContactPreferenceUpdated.Result).Value);
            ContactPreference contactPreferenceUpdated = (ContactPreference)(((OkObjectResult)actionContactPreferenceUpdated.Result).Value);
            Assert.NotNull(contactPreferenceUpdated);

            // Delete ContactPreference
            var actionContactPreferenceDeleted = await contactPreferenceService.Delete(contactPreference);
            Assert.Equal(200, ((ObjectResult)actionContactPreferenceDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionContactPreferenceDeleted.Result).Value);
            ContactPreference contactPreferenceDeleted = (ContactPreference)(((OkObjectResult)actionContactPreferenceDeleted.Result).Value);
            Assert.NotNull(contactPreferenceDeleted);
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IContactPreferenceService, ContactPreferenceService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            contactPreferenceService = Provider.GetService<IContactPreferenceService>();
            Assert.NotNull(contactPreferenceService);
        
            await contactPreferenceService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private ContactPreference GetFilledRandomContactPreference(string OmitPropName)
        {
            ContactPreference contactPreference = new ContactPreference();

            if (OmitPropName != "ContactID") contactPreference.ContactID = 1;
            if (OmitPropName != "TVType") contactPreference.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "MarkerSize") contactPreference.MarkerSize = GetRandomInt(1, 1000);
            if (OmitPropName != "LastUpdateDate_UTC") contactPreference.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") contactPreference.LastUpdateContactTVItemID = 2;

            return contactPreference;
        }
        #endregion Functions private
    }
}
