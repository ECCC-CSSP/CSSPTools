/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class DocTemplateServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IDocTemplateService docTemplateService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public DocTemplateServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task DocTemplate_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               DocTemplate docTemplate = GetFilledRandomDocTemplate(""); 

               // List<DocTemplate>
               var actionDocTemplateList = await docTemplateService.GetDocTemplateList();
               Assert.Equal(200, ((ObjectResult)actionDocTemplateList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionDocTemplateList.Result).Value);
               List<DocTemplate> docTemplateList = (List<DocTemplate>)((OkObjectResult)actionDocTemplateList.Result).Value;

               int count = ((List<DocTemplate>)((OkObjectResult)actionDocTemplateList.Result).Value).Count();
                Assert.True(count > 0);

               // Add DocTemplate
               var actionDocTemplateAdded = await docTemplateService.Add(docTemplate);
               Assert.Equal(200, ((ObjectResult)actionDocTemplateAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionDocTemplateAdded.Result).Value);
               DocTemplate docTemplateAdded = (DocTemplate)((OkObjectResult)actionDocTemplateAdded.Result).Value;
               Assert.NotNull(docTemplateAdded);

               // Update DocTemplate
               var actionDocTemplateUpdated = await docTemplateService.Update(docTemplate);
               Assert.Equal(200, ((ObjectResult)actionDocTemplateUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionDocTemplateUpdated.Result).Value);
               DocTemplate docTemplateUpdated = (DocTemplate)((OkObjectResult)actionDocTemplateUpdated.Result).Value;
               Assert.NotNull(docTemplateUpdated);

               // Delete DocTemplate
               var actionDocTemplateDeleted = await docTemplateService.Delete(docTemplate.DocTemplateID);
               Assert.Equal(200, ((ObjectResult)actionDocTemplateDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionDocTemplateDeleted.Result).Value);
               bool retBool = (bool)((OkObjectResult)actionDocTemplateDeleted.Result).Value;
               Assert.True(retBool);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IDocTemplateService, DocTemplateService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            docTemplateService = Provider.GetService<IDocTemplateService>();
            Assert.NotNull(docTemplateService);
        
            await docTemplateService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private DocTemplate GetFilledRandomDocTemplate(string OmitPropName)
        {
            DocTemplate docTemplate = new DocTemplate();

            if (OmitPropName != "Language") docTemplate.Language = LanguageRequest;
            if (OmitPropName != "TVType") docTemplate.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "TVFileTVItemID") docTemplate.TVFileTVItemID = 42;
            if (OmitPropName != "FileName") docTemplate.FileName = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") docTemplate.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") docTemplate.LastUpdateContactTVItemID = 2;

            return docTemplate;
        }
        #endregion Functions private
    }
}
