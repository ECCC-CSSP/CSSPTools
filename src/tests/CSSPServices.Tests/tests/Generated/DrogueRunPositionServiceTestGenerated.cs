 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\Generated\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class DrogueRunPositionServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private DrogueRunPositionService drogueRunPositionService { get; set; }
        #endregion Properties

        #region Constructors
        public DrogueRunPositionServiceTest() : base()
        {
            //drogueRunPositionService = new DrogueRunPositionService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void DrogueRunPosition_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    DrogueRunPosition drogueRunPosition = GetFilledRandomDrogueRunPosition("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = drogueRunPositionService.GetDrogueRunPositionList().Count();

                    Assert.Equal(count, (from c in dbTestDB.DrogueRunPositions select c).Count());

                    drogueRunPositionService.Add(drogueRunPosition);
                    if (drogueRunPosition.HasErrors)
                    {
                        Assert.Equal("", drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(drogueRunPositionService.GetDrogueRunPositionList().Where(c => c == drogueRunPosition).Any());
                    drogueRunPositionService.Update(drogueRunPosition);
                    if (drogueRunPosition.HasErrors)
                    {
                        Assert.Equal("", drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPositionService.Delete(drogueRunPosition);
                    if (drogueRunPosition.HasErrors)
                    {
                        Assert.Equal("", drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, drogueRunPositionService.GetDrogueRunPositionList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void DrogueRunPosition_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = drogueRunPositionService.GetDrogueRunPositionList().Count();

                    DrogueRunPosition drogueRunPosition = GetFilledRandomDrogueRunPosition("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // drogueRunPosition.DrogueRunPositionID   (Int32)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.DrogueRunPositionID = 0;
                    drogueRunPositionService.Update(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "DrogueRunPositionID"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.DrogueRunPositionID = 10000000;
                    drogueRunPositionService.Update(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "DrogueRunPosition", "DrogueRunPositionID", drogueRunPosition.DrogueRunPositionID.ToString()), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "DrogueRun", ExistPlurial = "s", ExistFieldID = "DrogueRunID", AllowableTVtypeList = )]
                    // drogueRunPosition.DrogueRunID   (Int32)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.DrogueRunID = 0;
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "DrogueRun", "DrogueRunID", drogueRunPosition.DrogueRunID.ToString()), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 100000)]
                    // drogueRunPosition.Ordinal   (Int32)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.Ordinal = -1;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "100000"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.Ordinal = 100001;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Ordinal", "0", "100000"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(-180, 180)]
                    // drogueRunPosition.StepLat   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [StepLat]

                    //CSSPError: Type not implemented [StepLat]

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepLat = -181.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLat", "-180", "180"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepLat = 181.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLat", "-180", "180"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(-90, 90)]
                    // drogueRunPosition.StepLng   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [StepLng]

                    //CSSPError: Type not implemented [StepLng]

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepLng = -91.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLng", "-90", "90"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepLng = 91.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StepLng", "-90", "90"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // drogueRunPosition.StepDateTime_Local   (DateTime)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepDateTime_Local = new DateTime();
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "StepDateTime_Local"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.StepDateTime_Local = new DateTime(1979, 1, 1);
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "StepDateTime_Local", "1980"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 10)]
                    // drogueRunPosition.CalculatedSpeed_m_s   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [CalculatedSpeed_m_s]

                    //CSSPError: Type not implemented [CalculatedSpeed_m_s]

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.CalculatedSpeed_m_s = -1.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedSpeed_m_s", "0", "10"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.CalculatedSpeed_m_s = 11.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedSpeed_m_s", "0", "10"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 360)]
                    // drogueRunPosition.CalculatedDirection_deg   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [CalculatedDirection_deg]

                    //CSSPError: Type not implemented [CalculatedDirection_deg]

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.CalculatedDirection_deg = -1.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedDirection_deg", "0", "360"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.CalculatedDirection_deg = 361.0D;
                    Assert.False(drogueRunPositionService.Add(drogueRunPosition));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "CalculatedDirection_deg", "0", "360"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)drogueRunPositionService.GetDrogueRunPositionList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // drogueRunPosition.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.LastUpdateDate_UTC = new DateTime();
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);
                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // drogueRunPosition.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.LastUpdateContactTVItemID = 0;
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", drogueRunPosition.LastUpdateContactTVItemID.ToString()), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);

                    drogueRunPosition = null;
                    drogueRunPosition = GetFilledRandomDrogueRunPosition("");
                    drogueRunPosition.LastUpdateContactTVItemID = 1;
                    drogueRunPositionService.Add(drogueRunPosition);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), drogueRunPosition.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // drogueRunPosition.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // drogueRunPosition.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetDrogueRunPositionWithDrogueRunPositionID(drogueRunPosition.DrogueRunPositionID)
        [Fact]
        public void GetDrogueRunPositionWithDrogueRunPositionID__drogueRunPosition_DrogueRunPositionID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    DrogueRunPosition drogueRunPosition = (from c in dbTestDB.DrogueRunPositions select c).FirstOrDefault();
                    Assert.NotNull(drogueRunPosition);

                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionWithDrogueRunPositionID(drogueRunPosition.DrogueRunPositionID)

        #region Tests Generated for GetDrogueRunPositionList()
        [Fact]
        public void GetDrogueRunPositionList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    DrogueRunPosition drogueRunPosition = (from c in dbTestDB.DrogueRunPositions select c).FirstOrDefault();
                    Assert.NotNull(drogueRunPosition);

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList()

        #region Tests Generated for GetDrogueRunPositionList() Skip Take
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Skip(1).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Asc
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 1, 1,  "DrogueRunPositionID", "", "");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).OrderBy(c => c.DrogueRunPositionID).Skip(1).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Asc

        #region Tests Generated for GetDrogueRunPositionList() Skip Take 2 Asc
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 1, 1, "DrogueRunPositionID,DrogueRunID", "", "");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).OrderBy(c => c.DrogueRunPositionID).ThenBy(c => c.DrogueRunID).Skip(1).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take 2 Asc

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Asc Where
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunPositionID", "", "DrogueRunPositionID,EQ,4");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID == 4).OrderBy(c => c.DrogueRunPositionID).Skip(0).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Asc Where

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Asc 2 Where
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunPositionID", "", "DrogueRunPositionID,GT,2|DrogueRunPositionID,LT,5");

                     List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                     drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID > 2 && c.DrogueRunPositionID < 5).Skip(0).Take(1).OrderBy(c => c.DrogueRunPositionID).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Asc 2 Where

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Desc
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 1, 1, "", "DrogueRunPositionID", "");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).OrderByDescending(c => c.DrogueRunPositionID).Skip(1).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Desc

        #region Tests Generated for GetDrogueRunPositionList() Skip Take 2 Desc
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 1, 1, "", "DrogueRunPositionID,DrogueRunID", "");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).OrderByDescending(c => c.DrogueRunPositionID).ThenByDescending(c => c.DrogueRunID).Skip(1).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take 2 Desc

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Desc Where
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 0, 1, "DrogueRunPositionID", "", "DrogueRunPositionID,EQ,4");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID == 4).OrderByDescending(c => c.DrogueRunPositionID).Skip(0).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Desc Where

        #region Tests Generated for GetDrogueRunPositionList() Skip Take Desc 2 Where
        [Fact]
        public void GetDrogueRunPositionList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 0, 1, "", "DrogueRunPositionID", "DrogueRunPositionID,GT,2|DrogueRunPositionID,LT,5");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID > 2 && c.DrogueRunPositionID < 5).OrderByDescending(c => c.DrogueRunPositionID).Skip(0).Take(1).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() Skip Take Desc 2 Where

        #region Tests Generated for GetDrogueRunPositionList() 2 Where
        [Fact]
        public void GetDrogueRunPositionList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    DrogueRunPositionService drogueRunPositionService = new DrogueRunPositionService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    drogueRunPositionService.Query = drogueRunPositionService.FillQuery(typeof(DrogueRunPosition), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "DrogueRunPositionID,GT,2|DrogueRunPositionID,LT,5");

                    List<DrogueRunPosition> drogueRunPositionDirectQueryList = new List<DrogueRunPosition>();
                    drogueRunPositionDirectQueryList = (from c in dbTestDB.DrogueRunPositions select c).Where(c => c.DrogueRunPositionID > 2 && c.DrogueRunPositionID < 5).ToList();

                        List<DrogueRunPosition> drogueRunPositionList = new List<DrogueRunPosition>();
                        drogueRunPositionList = drogueRunPositionService.GetDrogueRunPositionList().ToList();
                        CheckDrogueRunPositionFields(drogueRunPositionList);
                        Assert.Equal(drogueRunPositionDirectQueryList[0].DrogueRunPositionID, drogueRunPositionList[0].DrogueRunPositionID);
                }
            }
        }
        #endregion Tests Generated for GetDrogueRunPositionList() 2 Where

        #region Functions private
        private void CheckDrogueRunPositionFields(List<DrogueRunPosition> drogueRunPositionList)
        {
        }
        private DrogueRunPosition GetFilledRandomDrogueRunPosition(string OmitPropName)
        {
            DrogueRunPosition drogueRunPosition = new DrogueRunPosition();

            if (OmitPropName != "DrogueRunID") drogueRunPosition.DrogueRunID = 1;
            if (OmitPropName != "Ordinal") drogueRunPosition.Ordinal = GetRandomInt(0, 100000);
            if (OmitPropName != "StepLat") drogueRunPosition.StepLat = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "StepLng") drogueRunPosition.StepLng = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "StepDateTime_Local") drogueRunPosition.StepDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "CalculatedSpeed_m_s") drogueRunPosition.CalculatedSpeed_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "CalculatedDirection_deg") drogueRunPosition.CalculatedDirection_deg = GetRandomDouble(0.0D, 360.0D);
            if (OmitPropName != "LastUpdateDate_UTC") drogueRunPosition.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") drogueRunPosition.LastUpdateContactTVItemID = 2;

            return drogueRunPosition;
        }
        #endregion Functions private
    }
}
