/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class EmailDistributionListLanguageServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IEmailDistributionListLanguageService emailDistributionListLanguageService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListLanguageServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task EmailDistributionListLanguage_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               EmailDistributionListLanguage emailDistributionListLanguage = GetFilledRandomEmailDistributionListLanguage(""); 

               // List<EmailDistributionListLanguage>
               var actionEmailDistributionListLanguageList = await emailDistributionListLanguageService.GetEmailDistributionListLanguageList();
               Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value);
               List<EmailDistributionListLanguage> emailDistributionListLanguageList = (List<EmailDistributionListLanguage>)(((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value);

               int count = ((List<EmailDistributionListLanguage>)((OkObjectResult)actionEmailDistributionListLanguageList.Result).Value).Count();
                Assert.True(count > 0);

               // Add EmailDistributionListLanguage
               var actionEmailDistributionListLanguageAdded = await emailDistributionListLanguageService.Add(emailDistributionListLanguage);
               Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageAdded.Result).Value);
               EmailDistributionListLanguage emailDistributionListLanguageAdded = (EmailDistributionListLanguage)(((OkObjectResult)actionEmailDistributionListLanguageAdded.Result).Value);
               Assert.NotNull(emailDistributionListLanguageAdded);

               // Update EmailDistributionListLanguage
               var actionEmailDistributionListLanguageUpdated = await emailDistributionListLanguageService.Update(emailDistributionListLanguage);
               Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageUpdated.Result).Value);
               EmailDistributionListLanguage emailDistributionListLanguageUpdated = (EmailDistributionListLanguage)(((OkObjectResult)actionEmailDistributionListLanguageUpdated.Result).Value);
               Assert.NotNull(emailDistributionListLanguageUpdated);

               // Delete EmailDistributionListLanguage
               var actionEmailDistributionListLanguageDeleted = await emailDistributionListLanguageService.Delete(emailDistributionListLanguage);
               Assert.Equal(200, ((ObjectResult)actionEmailDistributionListLanguageDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailDistributionListLanguageDeleted.Result).Value);
               EmailDistributionListLanguage emailDistributionListLanguageDeleted = (EmailDistributionListLanguage)(((OkObjectResult)actionEmailDistributionListLanguageDeleted.Result).Value);
               Assert.NotNull(emailDistributionListLanguageDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailDistributionListLanguageService, EmailDistributionListLanguageService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            emailDistributionListLanguageService = Provider.GetService<IEmailDistributionListLanguageService>();
            Assert.NotNull(emailDistributionListLanguageService);
        
            await emailDistributionListLanguageService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private EmailDistributionListLanguage GetFilledRandomEmailDistributionListLanguage(string OmitPropName)
        {
            EmailDistributionListLanguage emailDistributionListLanguage = new EmailDistributionListLanguage();

            if (OmitPropName != "EmailDistributionListID") emailDistributionListLanguage.EmailDistributionListID = 1;
            if (OmitPropName != "Language") emailDistributionListLanguage.Language = LanguageRequest;
            if (OmitPropName != "EmailListName") emailDistributionListLanguage.EmailListName = GetRandomString("", 6);
            if (OmitPropName != "TranslationStatus") emailDistributionListLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") emailDistributionListLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") emailDistributionListLanguage.LastUpdateContactTVItemID = 2;

            return emailDistributionListLanguage;
        }
        #endregion Functions private
    }
}
