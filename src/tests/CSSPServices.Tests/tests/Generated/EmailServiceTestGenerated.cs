/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class EmailServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICultureService CultureService { get; set; }
        private IEmailService EmailService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public EmailServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task Email_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               Email email = GetFilledRandomEmail(""); 

               // List<Email>
               var actionEmailList = await EmailService.GetEmailList();
               Assert.Equal(200, ((ObjectResult)actionEmailList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailList.Result).Value);
               List<Email> emailList = (List<Email>)((OkObjectResult)actionEmailList.Result).Value;

               int count = ((List<Email>)((OkObjectResult)actionEmailList.Result).Value).Count();
                Assert.True(count > 0);

               // Post Email
               var actionEmailAdded = await EmailService.Post(email);
               Assert.Equal(200, ((ObjectResult)actionEmailAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailAdded.Result).Value);
               Email emailAdded = (Email)((OkObjectResult)actionEmailAdded.Result).Value;
               Assert.NotNull(emailAdded);

               // Put Email
               var actionEmailUpdated = await EmailService.Put(email);
               Assert.Equal(200, ((ObjectResult)actionEmailUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailUpdated.Result).Value);
               Email emailUpdated = (Email)((OkObjectResult)actionEmailUpdated.Result).Value;
               Assert.NotNull(emailUpdated);

               // Delete Email
               var actionEmailDeleted = await EmailService.Delete(email.EmailID);
               Assert.Equal(200, ((ObjectResult)actionEmailDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionEmailDeleted.Result).Value);
               bool retBool = (bool)((OkObjectResult)actionEmailDeleted.Result).Value;
               Assert.True(retBool);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddSingleton<ICultureService, CultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IEmailService, EmailService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CultureService = Provider.GetService<ICultureService>();
            Assert.NotNull(CultureService);

            CultureService.SetCulture(culture);

            EmailService = Provider.GetService<IEmailService>();
            Assert.NotNull(EmailService);

            return await Task.FromResult(true);
        }
        private Email GetFilledRandomEmail(string OmitPropName)
        {
            Email email = new Email();

            if (OmitPropName != "EmailTVItemID") email.EmailTVItemID = 54;
            if (OmitPropName != "EmailAddress") email.EmailAddress = GetRandomEmail();
            if (OmitPropName != "EmailType") email.EmailType = (EmailTypeEnum)GetRandomEnumType(typeof(EmailTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") email.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") email.LastUpdateContactTVItemID = 2;

            return email;
        }
        #endregion Functions private
    }
}
