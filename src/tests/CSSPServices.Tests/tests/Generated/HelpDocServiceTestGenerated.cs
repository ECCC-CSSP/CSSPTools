 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\Generated\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class HelpDocServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private HelpDocService helpDocService { get; set; }
        #endregion Properties

        #region Constructors
        public HelpDocServiceTest() : base()
        {
            //helpDocService = new HelpDocService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void HelpDoc_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    HelpDoc helpDoc = GetFilledRandomHelpDoc("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = helpDocService.GetHelpDocList().Count();

                    Assert.Equal(count, (from c in dbTestDB.HelpDocs select c).Count());

                    helpDocService.Add(helpDoc);
                    if (helpDoc.HasErrors)
                    {
                        Assert.Equal("", helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(helpDocService.GetHelpDocList().Where(c => c == helpDoc).Any());
                    helpDocService.Update(helpDoc);
                    if (helpDoc.HasErrors)
                    {
                        Assert.Equal("", helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, helpDocService.GetHelpDocList().Count());
                    helpDocService.Delete(helpDoc);
                    if (helpDoc.HasErrors)
                    {
                        Assert.Equal("", helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, helpDocService.GetHelpDocList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void HelpDoc_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = helpDocService.GetHelpDocList().Count();

                    HelpDoc helpDoc = GetFilledRandomHelpDoc("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // helpDoc.HelpDocID   (Int32)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.HelpDocID = 0;
                    helpDocService.Update(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "HelpDocID"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.HelpDocID = 10000000;
                    helpDocService.Update(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "HelpDoc", "HelpDocID", helpDoc.HelpDocID.ToString()), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // helpDoc.DocKey   (String)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("DocKey");
                    Assert.False(helpDocService.Add(helpDoc));
                    Assert.Equal(1, (int)helpDoc.ValidationResults.Count());
                    Assert.True(helpDoc.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "DocKey")).Any());
                    Assert.Null(helpDoc.DocKey);
                    Assert.Equal(count, (int)helpDocService.GetHelpDocList().Count());

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.DocKey = GetRandomString("", 101);
                    Assert.False(helpDocService.Add(helpDoc));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "DocKey", "100"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)helpDocService.GetHelpDocList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // helpDoc.Language   (LanguageEnum)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.Language = (LanguageEnum)1000000;
                    helpDocService.Add(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Language"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100000))]
                    // helpDoc.DocHTMLText   (String)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("DocHTMLText");
                    Assert.False(helpDocService.Add(helpDoc));
                    Assert.Equal(1, (int)helpDoc.ValidationResults.Count());
                    Assert.True(helpDoc.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "DocHTMLText")).Any());
                    Assert.Null(helpDoc.DocHTMLText);
                    Assert.Equal(count, (int)helpDocService.GetHelpDocList().Count());

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.DocHTMLText = GetRandomString("", 100001);
                    Assert.False(helpDocService.Add(helpDoc));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "DocHTMLText", "100000"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)helpDocService.GetHelpDocList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // helpDoc.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.LastUpdateDate_UTC = new DateTime();
                    helpDocService.Add(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);
                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    helpDocService.Add(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // helpDoc.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.LastUpdateContactTVItemID = 0;
                    helpDocService.Add(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", helpDoc.LastUpdateContactTVItemID.ToString()), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);

                    helpDoc = null;
                    helpDoc = GetFilledRandomHelpDoc("");
                    helpDoc.LastUpdateContactTVItemID = 1;
                    helpDocService.Add(helpDoc);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), helpDoc.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // helpDoc.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // helpDoc.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetHelpDocWithHelpDocID(helpDoc.HelpDocID)
        [Fact]
        public void GetHelpDocWithHelpDocID__helpDoc_HelpDocID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    HelpDoc helpDoc = (from c in dbTestDB.HelpDocs select c).FirstOrDefault();
                    Assert.NotNull(helpDoc);

                }
            }
        }
        #endregion Tests Generated for GetHelpDocWithHelpDocID(helpDoc.HelpDocID)

        #region Tests Generated for GetHelpDocList()
        [Fact]
        public void GetHelpDocList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    HelpDoc helpDoc = (from c in dbTestDB.HelpDocs select c).FirstOrDefault();
                    Assert.NotNull(helpDoc);

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetHelpDocList()

        #region Tests Generated for GetHelpDocList() Skip Take
        [Fact]
        public void GetHelpDocList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Skip(1).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take

        #region Tests Generated for GetHelpDocList() Skip Take Asc
        [Fact]
        public void GetHelpDocList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 1, 1,  "HelpDocID", "", "");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).OrderBy(c => c.HelpDocID).Skip(1).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Asc

        #region Tests Generated for GetHelpDocList() Skip Take 2 Asc
        [Fact]
        public void GetHelpDocList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 1, 1, "HelpDocID,DocKey", "", "");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).OrderBy(c => c.HelpDocID).ThenBy(c => c.DocKey).Skip(1).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take 2 Asc

        #region Tests Generated for GetHelpDocList() Skip Take Asc Where
        [Fact]
        public void GetHelpDocList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 0, 1, "HelpDocID", "", "HelpDocID,EQ,4");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Where(c => c.HelpDocID == 4).OrderBy(c => c.HelpDocID).Skip(0).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Asc Where

        #region Tests Generated for GetHelpDocList() Skip Take Asc 2 Where
        [Fact]
        public void GetHelpDocList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 0, 1, "HelpDocID", "", "HelpDocID,GT,2|HelpDocID,LT,5");

                     List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                     helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Where(c => c.HelpDocID > 2 && c.HelpDocID < 5).Skip(0).Take(1).OrderBy(c => c.HelpDocID).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Asc 2 Where

        #region Tests Generated for GetHelpDocList() Skip Take Desc
        [Fact]
        public void GetHelpDocList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 1, 1, "", "HelpDocID", "");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).OrderByDescending(c => c.HelpDocID).Skip(1).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Desc

        #region Tests Generated for GetHelpDocList() Skip Take 2 Desc
        [Fact]
        public void GetHelpDocList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 1, 1, "", "HelpDocID,DocKey", "");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).OrderByDescending(c => c.HelpDocID).ThenByDescending(c => c.DocKey).Skip(1).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take 2 Desc

        #region Tests Generated for GetHelpDocList() Skip Take Desc Where
        [Fact]
        public void GetHelpDocList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 0, 1, "HelpDocID", "", "HelpDocID,EQ,4");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Where(c => c.HelpDocID == 4).OrderByDescending(c => c.HelpDocID).Skip(0).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Desc Where

        #region Tests Generated for GetHelpDocList() Skip Take Desc 2 Where
        [Fact]
        public void GetHelpDocList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 0, 1, "", "HelpDocID", "HelpDocID,GT,2|HelpDocID,LT,5");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Where(c => c.HelpDocID > 2 && c.HelpDocID < 5).OrderByDescending(c => c.HelpDocID).Skip(0).Take(1).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() Skip Take Desc 2 Where

        #region Tests Generated for GetHelpDocList() 2 Where
        [Fact]
        public void GetHelpDocList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    HelpDocService helpDocService = new HelpDocService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    helpDocService.Query = helpDocService.FillQuery(typeof(HelpDoc), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "HelpDocID,GT,2|HelpDocID,LT,5");

                    List<HelpDoc> helpDocDirectQueryList = new List<HelpDoc>();
                    helpDocDirectQueryList = (from c in dbTestDB.HelpDocs select c).Where(c => c.HelpDocID > 2 && c.HelpDocID < 5).ToList();

                        List<HelpDoc> helpDocList = new List<HelpDoc>();
                        helpDocList = helpDocService.GetHelpDocList().ToList();
                        CheckHelpDocFields(helpDocList);
                        Assert.Equal(helpDocDirectQueryList[0].HelpDocID, helpDocList[0].HelpDocID);
                }
            }
        }
        #endregion Tests Generated for GetHelpDocList() 2 Where

        #region Functions private
        private void CheckHelpDocFields(List<HelpDoc> helpDocList)
        {
            Assert.False(string.IsNullOrWhiteSpace(helpDocList[0].DocKey));
            Assert.False(string.IsNullOrWhiteSpace(helpDocList[0].DocHTMLText));
        }
        private HelpDoc GetFilledRandomHelpDoc(string OmitPropName)
        {
            HelpDoc helpDoc = new HelpDoc();

            if (OmitPropName != "DocKey") helpDoc.DocKey = GetRandomString("", 5);
            if (OmitPropName != "Language") helpDoc.Language = LanguageRequest;
            if (OmitPropName != "DocHTMLText") helpDoc.DocHTMLText = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") helpDoc.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") helpDoc.LastUpdateContactTVItemID = 2;

            return helpDoc;
        }
        #endregion Functions private
    }
}
