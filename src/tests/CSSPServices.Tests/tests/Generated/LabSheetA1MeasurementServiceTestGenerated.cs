/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;

namespace CSSPServices.Tests
{
    public partial class LabSheetA1MeasurementServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILabSheetA1MeasurementService LabSheetA1MeasurementService { get; set; }
        private LabSheetA1Measurement labSheetA1Measurement { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetA1MeasurementServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Basic Test Not Mapped
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task LabSheetA1MeasurementService_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            labSheetA1Measurement = GetFilledRandomLabSheetA1Measurement("");

            List<ValidationResult> ValidationResultsList = LabSheetA1MeasurementService.Validate(new ValidationContext(labSheetA1Measurement)).ToList();
            Assert.True(ValidationResultsList.Count == 0);
        }
        #endregion Tests Generated Basic Test Not Mapped

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILabSheetA1MeasurementService, LabSheetA1MeasurementService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LabSheetA1MeasurementService = Provider.GetService<ILabSheetA1MeasurementService>();
            Assert.NotNull(LabSheetA1MeasurementService);

            return await Task.FromResult(true);
        }
        private LabSheetA1Measurement GetFilledRandomLabSheetA1Measurement(string OmitPropName)
        {
            LabSheetA1Measurement labSheetA1Measurement = new LabSheetA1Measurement();

            if (OmitPropName != "Site") labSheetA1Measurement.Site = GetRandomString("", 20);
            if (OmitPropName != "TVItemID") labSheetA1Measurement.TVItemID = GetRandomInt(1, 11);
            if (OmitPropName != "Time") labSheetA1Measurement.Time = new DateTime(2005, 3, 6);
            // should implement a Range for the property MPN and type LabSheetA1Measurement
            // should implement a Range for the property Tube10 and type LabSheetA1Measurement
            // should implement a Range for the property Tube1_0 and type LabSheetA1Measurement
            // should implement a Range for the property Tube0_1 and type LabSheetA1Measurement
            // should implement a Range for the property Salinity and type LabSheetA1Measurement
            // should implement a Range for the property Temperature and type LabSheetA1Measurement
            if (OmitPropName != "ProcessedBy") labSheetA1Measurement.ProcessedBy = GetRandomString("", 20);
            if (OmitPropName != "SampleType") labSheetA1Measurement.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "SiteComment") labSheetA1Measurement.SiteComment = GetRandomString("", 20);
            if (OmitPropName != "SampleTypeText") labSheetA1Measurement.SampleTypeText = GetRandomString("", 5);

            return labSheetA1Measurement;
        }
        private void CheckLabSheetA1MeasurementFields(List<LabSheetA1Measurement> labSheetA1MeasurementList)
        {
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].Site));
            if (labSheetA1MeasurementList[0].Time != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].Time);
            }
            if (labSheetA1MeasurementList[0].MPN != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].MPN);
            }
            if (labSheetA1MeasurementList[0].Tube10 != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].Tube10);
            }
            if (labSheetA1MeasurementList[0].Tube1_0 != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].Tube1_0);
            }
            if (labSheetA1MeasurementList[0].Tube0_1 != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].Tube0_1);
            }
            if (labSheetA1MeasurementList[0].Salinity != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].Salinity);
            }
            if (!string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].ProcessedBy))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].ProcessedBy));
            }
            if (labSheetA1MeasurementList[0].SampleType != null)
            {
                Assert.NotNull(labSheetA1MeasurementList[0].SampleType);
            }
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].SiteComment));
            if (!string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].SampleTypeText))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetA1MeasurementList[0].SampleTypeText));
            }
        }
        #endregion Functions private
    }
}
