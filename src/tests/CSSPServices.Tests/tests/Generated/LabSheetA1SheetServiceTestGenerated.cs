/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;

namespace CSSPServices.Tests
{
    public partial class LabSheetA1SheetServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILabSheetA1SheetService LabSheetA1SheetService { get; set; }
        private LabSheetA1Sheet labSheetA1Sheet { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetA1SheetServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Basic Test Not Mapped
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task LabSheetA1SheetService_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            labSheetA1Sheet = GetFilledRandomLabSheetA1Sheet("");

            List<ValidationResult> ValidationResultsList = LabSheetA1SheetService.Validate(new ValidationContext(labSheetA1Sheet)).ToList();
            Assert.True(ValidationResultsList.Count == 0);
        }
        #endregion Tests Generated Basic Test Not Mapped

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ILabSheetA1SheetService, LabSheetA1SheetService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LabSheetA1SheetService = Provider.GetService<ILabSheetA1SheetService>();
            Assert.NotNull(LabSheetA1SheetService);

            return await Task.FromResult(true);
        }
        private LabSheetA1Sheet GetFilledRandomLabSheetA1Sheet(string OmitPropName)
        {
            LabSheetA1Sheet labSheetA1Sheet = new LabSheetA1Sheet();

            if (OmitPropName != "Version") labSheetA1Sheet.Version = GetRandomInt(1, 100);
            if (OmitPropName != "SamplingPlanType") labSheetA1Sheet.SamplingPlanType = (SamplingPlanTypeEnum)GetRandomEnumType(typeof(SamplingPlanTypeEnum));
            if (OmitPropName != "SampleType") labSheetA1Sheet.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "LabSheetType") labSheetA1Sheet.LabSheetType = (LabSheetTypeEnum)GetRandomEnumType(typeof(LabSheetTypeEnum));
            if (OmitPropName != "SubsectorName") labSheetA1Sheet.SubsectorName = GetRandomString("", 20);
            if (OmitPropName != "SubsectorLocation") labSheetA1Sheet.SubsectorLocation = GetRandomString("", 20);
            // should implement a Range for the property SubsectorTVItemID and type LabSheetA1Sheet
            if (OmitPropName != "RunYear") labSheetA1Sheet.RunYear = GetRandomString("", 20);
            if (OmitPropName != "RunMonth") labSheetA1Sheet.RunMonth = GetRandomString("", 20);
            if (OmitPropName != "RunDay") labSheetA1Sheet.RunDay = GetRandomString("", 20);
            // should implement a Range for the property RunNumber and type LabSheetA1Sheet
            if (OmitPropName != "Tides") labSheetA1Sheet.Tides = GetRandomString("", 20);
            if (OmitPropName != "SampleCrewInitials") labSheetA1Sheet.SampleCrewInitials = GetRandomString("", 20);
            if (OmitPropName != "IncubationStartSameDay") labSheetA1Sheet.IncubationStartSameDay = GetRandomString("", 20);
            // should implement a Range for the property WaterBathCount and type LabSheetA1Sheet
            if (OmitPropName != "IncubationBath1StartTime") labSheetA1Sheet.IncubationBath1StartTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath2StartTime") labSheetA1Sheet.IncubationBath2StartTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath3StartTime") labSheetA1Sheet.IncubationBath3StartTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath1EndTime") labSheetA1Sheet.IncubationBath1EndTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath2EndTime") labSheetA1Sheet.IncubationBath2EndTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath3EndTime") labSheetA1Sheet.IncubationBath3EndTime = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath1TimeCalculated") labSheetA1Sheet.IncubationBath1TimeCalculated = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath2TimeCalculated") labSheetA1Sheet.IncubationBath2TimeCalculated = GetRandomString("", 20);
            if (OmitPropName != "IncubationBath3TimeCalculated") labSheetA1Sheet.IncubationBath3TimeCalculated = GetRandomString("", 20);
            if (OmitPropName != "WaterBath1") labSheetA1Sheet.WaterBath1 = GetRandomString("", 20);
            if (OmitPropName != "WaterBath2") labSheetA1Sheet.WaterBath2 = GetRandomString("", 20);
            if (OmitPropName != "WaterBath3") labSheetA1Sheet.WaterBath3 = GetRandomString("", 20);
            if (OmitPropName != "TCField1") labSheetA1Sheet.TCField1 = GetRandomString("", 20);
            if (OmitPropName != "TCLab1") labSheetA1Sheet.TCLab1 = GetRandomString("", 20);
            if (OmitPropName != "TCHas2Coolers") labSheetA1Sheet.TCHas2Coolers = GetRandomString("", 20);
            if (OmitPropName != "TCField2") labSheetA1Sheet.TCField2 = GetRandomString("", 20);
            if (OmitPropName != "TCLab2") labSheetA1Sheet.TCLab2 = GetRandomString("", 20);
            if (OmitPropName != "TCFirst") labSheetA1Sheet.TCFirst = GetRandomString("", 20);
            if (OmitPropName != "TCAverage") labSheetA1Sheet.TCAverage = GetRandomString("", 20);
            if (OmitPropName != "ControlLot") labSheetA1Sheet.ControlLot = GetRandomString("", 20);
            if (OmitPropName != "Positive35") labSheetA1Sheet.Positive35 = GetRandomString("", 20);
            if (OmitPropName != "NonTarget35") labSheetA1Sheet.NonTarget35 = GetRandomString("", 20);
            if (OmitPropName != "Negative35") labSheetA1Sheet.Negative35 = GetRandomString("", 20);
            if (OmitPropName != "Bath1Positive44_5") labSheetA1Sheet.Bath1Positive44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath2Positive44_5") labSheetA1Sheet.Bath2Positive44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath3Positive44_5") labSheetA1Sheet.Bath3Positive44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath1NonTarget44_5") labSheetA1Sheet.Bath1NonTarget44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath2NonTarget44_5") labSheetA1Sheet.Bath2NonTarget44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath3NonTarget44_5") labSheetA1Sheet.Bath3NonTarget44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath1Negative44_5") labSheetA1Sheet.Bath1Negative44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath2Negative44_5") labSheetA1Sheet.Bath2Negative44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath3Negative44_5") labSheetA1Sheet.Bath3Negative44_5 = GetRandomString("", 20);
            if (OmitPropName != "Blank35") labSheetA1Sheet.Blank35 = GetRandomString("", 20);
            if (OmitPropName != "Bath1Blank44_5") labSheetA1Sheet.Bath1Blank44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath2Blank44_5") labSheetA1Sheet.Bath2Blank44_5 = GetRandomString("", 20);
            if (OmitPropName != "Bath3Blank44_5") labSheetA1Sheet.Bath3Blank44_5 = GetRandomString("", 20);
            if (OmitPropName != "Lot35") labSheetA1Sheet.Lot35 = GetRandomString("", 20);
            if (OmitPropName != "Lot44_5") labSheetA1Sheet.Lot44_5 = GetRandomString("", 20);
            if (OmitPropName != "RunComment") labSheetA1Sheet.RunComment = GetRandomString("", 20);
            if (OmitPropName != "RunWeatherComment") labSheetA1Sheet.RunWeatherComment = GetRandomString("", 20);
            if (OmitPropName != "SampleBottleLotNumber") labSheetA1Sheet.SampleBottleLotNumber = GetRandomString("", 20);
            if (OmitPropName != "SalinitiesReadBy") labSheetA1Sheet.SalinitiesReadBy = GetRandomString("", 20);
            if (OmitPropName != "SalinitiesReadYear") labSheetA1Sheet.SalinitiesReadYear = GetRandomString("", 20);
            if (OmitPropName != "SalinitiesReadMonth") labSheetA1Sheet.SalinitiesReadMonth = GetRandomString("", 20);
            if (OmitPropName != "SalinitiesReadDay") labSheetA1Sheet.SalinitiesReadDay = GetRandomString("", 20);
            if (OmitPropName != "ResultsReadBy") labSheetA1Sheet.ResultsReadBy = GetRandomString("", 20);
            if (OmitPropName != "ResultsReadYear") labSheetA1Sheet.ResultsReadYear = GetRandomString("", 20);
            if (OmitPropName != "ResultsReadMonth") labSheetA1Sheet.ResultsReadMonth = GetRandomString("", 20);
            if (OmitPropName != "ResultsReadDay") labSheetA1Sheet.ResultsReadDay = GetRandomString("", 20);
            if (OmitPropName != "ResultsRecordedBy") labSheetA1Sheet.ResultsRecordedBy = GetRandomString("", 20);
            if (OmitPropName != "ResultsRecordedYear") labSheetA1Sheet.ResultsRecordedYear = GetRandomString("", 20);
            if (OmitPropName != "ResultsRecordedMonth") labSheetA1Sheet.ResultsRecordedMonth = GetRandomString("", 20);
            if (OmitPropName != "ResultsRecordedDay") labSheetA1Sheet.ResultsRecordedDay = GetRandomString("", 20);
            if (OmitPropName != "DailyDuplicateRLog") labSheetA1Sheet.DailyDuplicateRLog = GetRandomString("", 20);
            if (OmitPropName != "DailyDuplicatePrecisionCriteria") labSheetA1Sheet.DailyDuplicatePrecisionCriteria = GetRandomString("", 20);
            if (OmitPropName != "DailyDuplicateAcceptableOrUnacceptable") labSheetA1Sheet.DailyDuplicateAcceptableOrUnacceptable = GetRandomString("", 20);
            if (OmitPropName != "IntertechDuplicateRLog") labSheetA1Sheet.IntertechDuplicateRLog = GetRandomString("", 20);
            if (OmitPropName != "IntertechDuplicatePrecisionCriteria") labSheetA1Sheet.IntertechDuplicatePrecisionCriteria = GetRandomString("", 20);
            if (OmitPropName != "IntertechDuplicateAcceptableOrUnacceptable") labSheetA1Sheet.IntertechDuplicateAcceptableOrUnacceptable = GetRandomString("", 20);
            if (OmitPropName != "IntertechReadAcceptableOrUnacceptable") labSheetA1Sheet.IntertechReadAcceptableOrUnacceptable = GetRandomString("", 20);
            if (OmitPropName != "ApprovalYear") labSheetA1Sheet.ApprovalYear = GetRandomString("", 20);
            if (OmitPropName != "ApprovalMonth") labSheetA1Sheet.ApprovalMonth = GetRandomString("", 20);
            if (OmitPropName != "ApprovalDay") labSheetA1Sheet.ApprovalDay = GetRandomString("", 20);
            if (OmitPropName != "ApprovedBySupervisorInitials") labSheetA1Sheet.ApprovedBySupervisorInitials = GetRandomString("", 20);
            if (OmitPropName != "IncludeLaboratoryQAQC") labSheetA1Sheet.IncludeLaboratoryQAQC = true;
            if (OmitPropName != "BackupDirectory") labSheetA1Sheet.BackupDirectory = GetRandomString("", 20);
            if (OmitPropName != "Log") labSheetA1Sheet.Log = GetRandomString("", 20);
            if (OmitPropName != "SamplingPlanTypeText") labSheetA1Sheet.SamplingPlanTypeText = GetRandomString("", 5);
            if (OmitPropName != "SampleTypeText") labSheetA1Sheet.SampleTypeText = GetRandomString("", 5);
            if (OmitPropName != "LabSheetTypeText") labSheetA1Sheet.LabSheetTypeText = GetRandomString("", 5);
            //CSSPError: property [LabSheetA1MeasurementList] and type [LabSheetA1Sheet] is  not implemented

            return labSheetA1Sheet;
        }
        private void CheckLabSheetA1SheetFields(List<LabSheetA1Sheet> labSheetA1SheetList)
        {
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SubsectorName));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SubsectorLocation));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].RunYear));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].RunMonth));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].RunDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Tides));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SampleCrewInitials));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationStartSameDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath1StartTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath2StartTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath3StartTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath1EndTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath2EndTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath3EndTime));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath1TimeCalculated));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath2TimeCalculated));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IncubationBath3TimeCalculated));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].WaterBath1));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].WaterBath2));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].WaterBath3));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCField1));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCLab1));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCHas2Coolers));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCField2));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCLab2));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCFirst));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].TCAverage));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ControlLot));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Positive35));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].NonTarget35));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Negative35));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath1Positive44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath2Positive44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath3Positive44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath1NonTarget44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath2NonTarget44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath3NonTarget44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath1Negative44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath2Negative44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath3Negative44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Blank35));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath1Blank44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath2Blank44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Bath3Blank44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Lot35));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Lot44_5));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].RunComment));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].RunWeatherComment));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SampleBottleLotNumber));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SalinitiesReadBy));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SalinitiesReadYear));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SalinitiesReadMonth));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SalinitiesReadDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsReadBy));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsReadYear));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsReadMonth));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsReadDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsRecordedBy));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsRecordedYear));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsRecordedMonth));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ResultsRecordedDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].DailyDuplicateRLog));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].DailyDuplicatePrecisionCriteria));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].DailyDuplicateAcceptableOrUnacceptable));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IntertechDuplicateRLog));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IntertechDuplicatePrecisionCriteria));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IntertechDuplicateAcceptableOrUnacceptable));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].IntertechReadAcceptableOrUnacceptable));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ApprovalYear));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ApprovalMonth));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ApprovalDay));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].ApprovedBySupervisorInitials));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].BackupDirectory));
            Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].Log));
            if (!string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SamplingPlanTypeText))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SamplingPlanTypeText));
            }
            if (!string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SampleTypeText))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].SampleTypeText));
            }
            if (!string.IsNullOrWhiteSpace(labSheetA1SheetList[0].LabSheetTypeText))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetA1SheetList[0].LabSheetTypeText));
            }
        }
        #endregion Functions private
    }
}
