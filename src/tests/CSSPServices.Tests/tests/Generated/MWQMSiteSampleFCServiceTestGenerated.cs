/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;

namespace CSSPServices.Tests
{
    public partial class MWQMSiteSampleFCServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private IMWQMSiteSampleFCService MWQMSiteSampleFCService { get; set; }
        private MWQMSiteSampleFC mwqmSiteSampleFC { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSiteSampleFCServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated Basic Test Not Mapped
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task MWQMSiteSampleFCService_Good_Test(string culture)
        {
            Assert.True(await Setup(culture));

            mwqmSiteSampleFC = GetFilledRandomMWQMSiteSampleFC("");

            List<ValidationResult> ValidationResultsList = MWQMSiteSampleFCService.Validate(new ValidationContext(mwqmSiteSampleFC)).ToList();
            Assert.True(ValidationResultsList.Count == 0);
        }
        #endregion Tests Generated Basic Test Not Mapped

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMWQMSiteSampleFCService, MWQMSiteSampleFCService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            MWQMSiteSampleFCService = Provider.GetService<IMWQMSiteSampleFCService>();
            Assert.NotNull(MWQMSiteSampleFCService);

            return await Task.FromResult(true);
        }
        private MWQMSiteSampleFC GetFilledRandomMWQMSiteSampleFC(string OmitPropName)
        {
            MWQMSiteSampleFC mwqmSiteSampleFC = new MWQMSiteSampleFC();

            if (OmitPropName != "SampleDate") mwqmSiteSampleFC.SampleDate = new DateTime(2005, 3, 6);
            if (OmitPropName != "FC") mwqmSiteSampleFC.FC = GetRandomInt(1, 100000000);
            // should implement a Range for the property Sal and type MWQMSiteSampleFC
            // should implement a Range for the property Temp and type MWQMSiteSampleFC
            // should implement a Range for the property PH and type MWQMSiteSampleFC
            // should implement a Range for the property DO and type MWQMSiteSampleFC
            // should implement a Range for the property Depth and type MWQMSiteSampleFC
            // should implement a Range for the property SampCount and type MWQMSiteSampleFC
            // should implement a Range for the property MinFC and type MWQMSiteSampleFC
            // should implement a Range for the property MaxFC and type MWQMSiteSampleFC
            // should implement a Range for the property GeoMean and type MWQMSiteSampleFC
            // should implement a Range for the property Median and type MWQMSiteSampleFC
            // should implement a Range for the property P90 and type MWQMSiteSampleFC
            // should implement a Range for the property PercOver43 and type MWQMSiteSampleFC
            // should implement a Range for the property PercOver260 and type MWQMSiteSampleFC

            return mwqmSiteSampleFC;
        }
        private void CheckMWQMSiteSampleFCFields(List<MWQMSiteSampleFC> mwqmSiteSampleFCList)
        {
            if (mwqmSiteSampleFCList[0].FC != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].FC);
            }
            if (mwqmSiteSampleFCList[0].Sal != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].Sal);
            }
            if (mwqmSiteSampleFCList[0].Temp != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].Temp);
            }
            if (mwqmSiteSampleFCList[0].PH != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].PH);
            }
            if (mwqmSiteSampleFCList[0].DO != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].DO);
            }
            if (mwqmSiteSampleFCList[0].Depth != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].Depth);
            }
            if (mwqmSiteSampleFCList[0].SampCount != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].SampCount);
            }
            if (mwqmSiteSampleFCList[0].MinFC != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].MinFC);
            }
            if (mwqmSiteSampleFCList[0].MaxFC != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].MaxFC);
            }
            if (mwqmSiteSampleFCList[0].GeoMean != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].GeoMean);
            }
            if (mwqmSiteSampleFCList[0].Median != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].Median);
            }
            if (mwqmSiteSampleFCList[0].P90 != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].P90);
            }
            if (mwqmSiteSampleFCList[0].PercOver43 != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].PercOver43);
            }
            if (mwqmSiteSampleFCList[0].PercOver260 != null)
            {
                Assert.NotNull(mwqmSiteSampleFCList[0].PercOver260);
            }
        }
        #endregion Functions private
    }
}
