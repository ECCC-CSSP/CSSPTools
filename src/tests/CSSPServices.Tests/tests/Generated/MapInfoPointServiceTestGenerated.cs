/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;

namespace CSSPServices.Tests
{
    [Collection("Sequential")]
    public partial class MapInfoPointServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IMapInfoPointService MapInfoPointService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbIM { get; set; }
        private MapInfoPoint mapInfoPoint { get; set; }
        #endregion Properties

        #region Constructors
        public MapInfoPointServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task MapInfoPoint_CRUD_Good_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            mapInfoPoint = GetFilledRandomMapInfoPoint("");

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                await DoCRUDTest();
            }
            else
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    await DoCRUDTest();
                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task MapInfoPoint_Properties_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // Properties testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionMapInfoPointList = await MapInfoPointService.GetMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointList.Result).Value);
            List<MapInfoPoint> mapInfoPointList = (List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value;

            count = mapInfoPointList.Count();

            MapInfoPoint mapInfoPoint = GetFilledRandomMapInfoPoint("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // mapInfoPoint.MapInfoPointID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoPointID = 0;

            var actionMapInfoPoint = await MapInfoPointService.Put(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoPointID = 10000000;
            actionMapInfoPoint = await MapInfoPointService.Put(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "MapInfo", ExistPlurial = "s", ExistFieldID = "MapInfoID", AllowableTVtypeList = )]
            // mapInfoPoint.MapInfoID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.MapInfoID = 0;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, -1)]
            // mapInfoPoint.Ordinal   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Ordinal = -1;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-90, 90)]
            // mapInfoPoint.Lat   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lat]

            //CSSPError: Type not implemented [Lat]

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lat = -91.0D;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lat = 91.0D;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(-180, 180)]
            // mapInfoPoint.Lng   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Lng]

            //CSSPError: Type not implemented [Lng]

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lng = -181.0D;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.Lng = 181.0D;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            //Assert.AreEqual(count, mapInfoPointService.GetMapInfoPointList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // mapInfoPoint.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateDate_UTC = new DateTime();
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);
            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // mapInfoPoint.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateContactTVItemID = 0;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

            mapInfoPoint = null;
            mapInfoPoint = GetFilledRandomMapInfoPoint("");
            mapInfoPoint.LastUpdateContactTVItemID = 1;
            actionMapInfoPoint = await MapInfoPointService.Post(mapInfoPoint);
            Assert.IsType<BadRequestObjectResult>(actionMapInfoPoint.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDTest()
        {
            // Post MapInfoPoint
            var actionMapInfoPointAdded = await MapInfoPointService.Post(mapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointAdded.Result).Value);
            MapInfoPoint mapInfoPointAdded = (MapInfoPoint)((OkObjectResult)actionMapInfoPointAdded.Result).Value;
            Assert.NotNull(mapInfoPointAdded);

            // List<MapInfoPoint>
            var actionMapInfoPointList = await MapInfoPointService.GetMapInfoPointList();
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointList.Result).Value);
            List<MapInfoPoint> mapInfoPointList = (List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value;

            int count = ((List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointList.Result).Value).Count();
            Assert.True(count > 0);

            if (LoggedInService.DBLocation == DBLocationEnum.Server)
            {
                // List<MapInfoPoint> with skip and take
                var actionMapInfoPointListSkipAndTake = await MapInfoPointService.GetMapInfoPointList(1, 1);
                Assert.Equal(200, ((ObjectResult)actionMapInfoPointListSkipAndTake.Result).StatusCode);
                Assert.NotNull(((OkObjectResult)actionMapInfoPointListSkipAndTake.Result).Value);
                List<MapInfoPoint> mapInfoPointListSkipAndTake = (List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointListSkipAndTake.Result).Value;

                int countSkipAndTake = ((List<MapInfoPoint>)((OkObjectResult)actionMapInfoPointListSkipAndTake.Result).Value).Count();
                Assert.True(countSkipAndTake == 1);

                Assert.False(mapInfoPointList[0].MapInfoPointID == mapInfoPointListSkipAndTake[0].MapInfoPointID);
            }

            // Get MapInfoPoint With MapInfoPointID
            var actionMapInfoPointGet = await MapInfoPointService.GetMapInfoPointWithMapInfoPointID(mapInfoPointList[0].MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointGet.Result).Value);
            MapInfoPoint mapInfoPointGet = (MapInfoPoint)((OkObjectResult)actionMapInfoPointGet.Result).Value;
            Assert.NotNull(mapInfoPointGet);
            Assert.Equal(mapInfoPointGet.MapInfoPointID, mapInfoPointList[0].MapInfoPointID);

            // Put MapInfoPoint
            var actionMapInfoPointUpdated = await MapInfoPointService.Put(mapInfoPoint);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointUpdated.Result).Value);
            MapInfoPoint mapInfoPointUpdated = (MapInfoPoint)((OkObjectResult)actionMapInfoPointUpdated.Result).Value;
            Assert.NotNull(mapInfoPointUpdated);

            // Delete MapInfoPoint
            var actionMapInfoPointDeleted = await MapInfoPointService.Delete(mapInfoPoint.MapInfoPointID);
            Assert.Equal(200, ((ObjectResult)actionMapInfoPointDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionMapInfoPointDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionMapInfoPointDeleted.Result).Value;
            Assert.True(retBool);
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            string TestDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(TestDBConnString);
            });

            FileInfo fiAppDataPath = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiAppDataPath.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMapInfoPointService, MapInfoPointService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            LoggedInService.DBLocation = DBLocationEnum.Local;

            dbIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbIM);

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            MapInfoPointService = Provider.GetService<IMapInfoPointService>();
            Assert.NotNull(MapInfoPointService);

            return await Task.FromResult(true);
        }
        private MapInfoPoint GetFilledRandomMapInfoPoint(string OmitPropName)
        {
            List<MapInfoPoint> mapInfoPointListToDelete = (from c in dbLocal.MapInfoPoints
                                                               select c).ToList(); 
            
            dbLocal.MapInfoPoints.RemoveRange(mapInfoPointListToDelete);
            try
            {
                dbLocal.SaveChanges();
            }
            catch (Exception ex)
            {
                Assert.True(false, ex.Message);
            }
            
            dbIM.Database.EnsureDeleted();

            MapInfoPoint mapInfoPoint = new MapInfoPoint();

            if (OmitPropName != "MapInfoID") mapInfoPoint.MapInfoID = 1;
            if (OmitPropName != "Ordinal") mapInfoPoint.Ordinal = GetRandomInt(0, 10);
            if (OmitPropName != "Lat") mapInfoPoint.Lat = GetRandomDouble(-90.0D, 90.0D);
            if (OmitPropName != "Lng") mapInfoPoint.Lng = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "LastUpdateDate_UTC") mapInfoPoint.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mapInfoPoint.LastUpdateContactTVItemID = 2;

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                if (OmitPropName != "MapInfoPointID") mapInfoPoint.MapInfoPointID = 10000000;

                try
                {
                    dbIM.MapInfos.Add(new MapInfo() { MapInfoID = 1, TVItemID = 5, TVType = (TVTypeEnum)6, LatMin = 49.999000549316406, LatMax = 50.000999450683594, LngMax = -89.9990005493164, MapInfoDrawType = (MapInfoDrawTypeEnum)1, LastUpdateDate_UTC = new DateTime(2017, 11, 10, 16, 23, 48), LastUpdateContactTVItemID = 2 });
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
            }

            return mapInfoPoint;
        }
        private void CheckMapInfoPointFields(List<MapInfoPoint> mapInfoPointList)
        {
        }
        #endregion Functions private
    }
}
