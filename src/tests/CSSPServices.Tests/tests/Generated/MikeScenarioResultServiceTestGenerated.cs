/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class MikeScenarioResultServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IMikeScenarioResultService mikeScenarioResultService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public MikeScenarioResultServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task MikeScenarioResult_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               MikeScenarioResult mikeScenarioResult = GetFilledRandomMikeScenarioResult(""); 

               // List<MikeScenarioResult>
               var actionMikeScenarioResultList = await mikeScenarioResultService.GetMikeScenarioResultList();
               Assert.Equal(200, ((ObjectResult)actionMikeScenarioResultList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeScenarioResultList.Result).Value);
               List<MikeScenarioResult> mikeScenarioResultList = (List<MikeScenarioResult>)(((OkObjectResult)actionMikeScenarioResultList.Result).Value);

               int count = ((List<MikeScenarioResult>)((OkObjectResult)actionMikeScenarioResultList.Result).Value).Count();
                Assert.True(count > 0);

               // Add MikeScenarioResult
               var actionMikeScenarioResultAdded = await mikeScenarioResultService.Add(mikeScenarioResult);
               Assert.Equal(200, ((ObjectResult)actionMikeScenarioResultAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeScenarioResultAdded.Result).Value);
               MikeScenarioResult mikeScenarioResultAdded = (MikeScenarioResult)(((OkObjectResult)actionMikeScenarioResultAdded.Result).Value);
               Assert.NotNull(mikeScenarioResultAdded);

               // Update MikeScenarioResult
               var actionMikeScenarioResultUpdated = await mikeScenarioResultService.Update(mikeScenarioResult);
               Assert.Equal(200, ((ObjectResult)actionMikeScenarioResultUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeScenarioResultUpdated.Result).Value);
               MikeScenarioResult mikeScenarioResultUpdated = (MikeScenarioResult)(((OkObjectResult)actionMikeScenarioResultUpdated.Result).Value);
               Assert.NotNull(mikeScenarioResultUpdated);

               // Delete MikeScenarioResult
               var actionMikeScenarioResultDeleted = await mikeScenarioResultService.Delete(mikeScenarioResult);
               Assert.Equal(200, ((ObjectResult)actionMikeScenarioResultDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeScenarioResultDeleted.Result).Value);
               MikeScenarioResult mikeScenarioResultDeleted = (MikeScenarioResult)(((OkObjectResult)actionMikeScenarioResultDeleted.Result).Value);
               Assert.NotNull(mikeScenarioResultDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMikeScenarioResultService, MikeScenarioResultService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            mikeScenarioResultService = Provider.GetService<IMikeScenarioResultService>();
            Assert.NotNull(mikeScenarioResultService);
        
            await mikeScenarioResultService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private MikeScenarioResult GetFilledRandomMikeScenarioResult(string OmitPropName)
        {
            MikeScenarioResult mikeScenarioResult = new MikeScenarioResult();

            if (OmitPropName != "MikeScenarioTVItemID") mikeScenarioResult.MikeScenarioTVItemID = 51;
            if (OmitPropName != "MikeResultsJSON") mikeScenarioResult.MikeResultsJSON = GetRandomString("", 20);
            if (OmitPropName != "LastUpdateDate_UTC") mikeScenarioResult.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mikeScenarioResult.LastUpdateContactTVItemID = 2;

            return mikeScenarioResult;
        }
        #endregion Functions private
    }
}
