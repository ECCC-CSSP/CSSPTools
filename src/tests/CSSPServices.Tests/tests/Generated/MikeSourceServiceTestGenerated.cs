/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class MikeSourceServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IMikeSourceService mikeSourceService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public MikeSourceServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task MikeSource_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               MikeSource mikeSource = GetFilledRandomMikeSource(""); 

               // List<MikeSource>
               var actionMikeSourceList = await mikeSourceService.GetMikeSourceList();
               Assert.Equal(200, ((ObjectResult)actionMikeSourceList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeSourceList.Result).Value);
               List<MikeSource> mikeSourceList = (List<MikeSource>)(((OkObjectResult)actionMikeSourceList.Result).Value);

               int count = ((List<MikeSource>)((OkObjectResult)actionMikeSourceList.Result).Value).Count();
                Assert.True(count > 0);

               // Add MikeSource
               var actionMikeSourceAdded = await mikeSourceService.Add(mikeSource);
               Assert.Equal(200, ((ObjectResult)actionMikeSourceAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeSourceAdded.Result).Value);
               MikeSource mikeSourceAdded = (MikeSource)(((OkObjectResult)actionMikeSourceAdded.Result).Value);
               Assert.NotNull(mikeSourceAdded);

               // Update MikeSource
               var actionMikeSourceUpdated = await mikeSourceService.Update(mikeSource);
               Assert.Equal(200, ((ObjectResult)actionMikeSourceUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeSourceUpdated.Result).Value);
               MikeSource mikeSourceUpdated = (MikeSource)(((OkObjectResult)actionMikeSourceUpdated.Result).Value);
               Assert.NotNull(mikeSourceUpdated);

               // Delete MikeSource
               var actionMikeSourceDeleted = await mikeSourceService.Delete(mikeSource);
               Assert.Equal(200, ((ObjectResult)actionMikeSourceDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionMikeSourceDeleted.Result).Value);
               MikeSource mikeSourceDeleted = (MikeSource)(((OkObjectResult)actionMikeSourceDeleted.Result).Value);
               Assert.NotNull(mikeSourceDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IMikeSourceService, MikeSourceService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            mikeSourceService = Provider.GetService<IMikeSourceService>();
            Assert.NotNull(mikeSourceService);
        
            await mikeSourceService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private MikeSource GetFilledRandomMikeSource(string OmitPropName)
        {
            MikeSource mikeSource = new MikeSource();

            if (OmitPropName != "MikeSourceTVItemID") mikeSource.MikeSourceTVItemID = 53;
            if (OmitPropName != "IsContinuous") mikeSource.IsContinuous = true;
            if (OmitPropName != "Include") mikeSource.Include = true;
            if (OmitPropName != "IsRiver") mikeSource.IsRiver = true;
            if (OmitPropName != "UseHydrometric") mikeSource.UseHydrometric = true;
            if (OmitPropName != "HydrometricTVItemID") mikeSource.HydrometricTVItemID = 8;
            if (OmitPropName != "DrainageArea_km2") mikeSource.DrainageArea_km2 = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "Factor") mikeSource.Factor = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "SourceNumberString") mikeSource.SourceNumberString = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") mikeSource.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mikeSource.LastUpdateContactTVItemID = 2;

            return mikeSource;
        }
        #endregion Functions private
    }
}
