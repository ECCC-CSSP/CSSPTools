 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    [TestClass]
    public partial class PolSourceGroupingLanguageServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private PolSourceGroupingLanguageService polSourceGroupingLanguageService { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceGroupingLanguageServiceTest() : base()
        {
            //polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [TestMethod]
        public void PolSourceGroupingLanguage_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    PolSourceGroupingLanguage polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count();

                    Assert.AreEqual(count, (from c in dbTestDB.PolSourceGroupingLanguages select c).Count());

                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    if (polSourceGroupingLanguage.HasErrors)
                    {
                        Assert.AreEqual("", polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(true, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Where(c => c == polSourceGroupingLanguage).Any());
                    polSourceGroupingLanguageService.Update(polSourceGroupingLanguage);
                    if (polSourceGroupingLanguage.HasErrors)
                    {
                        Assert.AreEqual("", polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(count + 1, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());
                    polSourceGroupingLanguageService.Delete(polSourceGroupingLanguage);
                    if (polSourceGroupingLanguage.HasErrors)
                    {
                        Assert.AreEqual("", polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [TestMethod]
        public void PolSourceGroupingLanguage_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count();

                    PolSourceGroupingLanguage polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.PolSourceGroupingLanguageID   (Int32)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.PolSourceGroupingLanguageID = 0;
                    polSourceGroupingLanguageService.Update(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "PolSourceGroupingLanguageID"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.PolSourceGroupingLanguageID = 10000000;
                    polSourceGroupingLanguageService.Update(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceGroupingLanguage", "PolSourceGroupingLanguageID", polSourceGroupingLanguage.PolSourceGroupingLanguageID.ToString()), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "PolSourceGrouping", ExistPlurial = "s", ExistFieldID = "PolSourceGroupingID", AllowableTVtypeList = )]
                    // polSourceGroupingLanguage.PolSourceGroupingID   (Int32)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.PolSourceGroupingID = 0;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceGrouping", "PolSourceGroupingID", polSourceGroupingLanguage.PolSourceGroupingID.ToString()), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.Language   (LanguageEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.Language = (LanguageEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "Language"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.SourceName   (String)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("SourceName");
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(1, polSourceGroupingLanguage.ValidationResults.Count());
                    Assert.IsTrue(polSourceGroupingLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "SourceName")).Any());
                    Assert.AreEqual(null, polSourceGroupingLanguage.SourceName);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 1000)]
                    // polSourceGroupingLanguage.SourceNameOrder   (Int32)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.SourceNameOrder = -1;
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "SourceNameOrder", "0", "1000"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());
                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.SourceNameOrder = 1001;
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "SourceNameOrder", "0", "1000"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.TranslationStatusSourceName   (TranslationStatusEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusSourceName"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.Init   (String)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Init");
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(1, polSourceGroupingLanguage.ValidationResults.Count());
                    Assert.IsTrue(polSourceGroupingLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Init")).Any());
                    Assert.AreEqual(null, polSourceGroupingLanguage.Init);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.TranslationStatusInit   (TranslationStatusEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusInit"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.Description   (String)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Description");
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(1, polSourceGroupingLanguage.ValidationResults.Count());
                    Assert.IsTrue(polSourceGroupingLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Description")).Any());
                    Assert.AreEqual(null, polSourceGroupingLanguage.Description);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.TranslationStatusDescription   (TranslationStatusEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusDescription"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.Report   (String)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Report");
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(1, polSourceGroupingLanguage.ValidationResults.Count());
                    Assert.IsTrue(polSourceGroupingLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Report")).Any());
                    Assert.AreEqual(null, polSourceGroupingLanguage.Report);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.TranslationStatusReport   (TranslationStatusEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusReport"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceGroupingLanguage.Text   (String)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("Text");
                    Assert.AreEqual(false, polSourceGroupingLanguageService.Add(polSourceGroupingLanguage));
                    Assert.AreEqual(1, polSourceGroupingLanguage.ValidationResults.Count());
                    Assert.IsTrue(polSourceGroupingLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "Text")).Any());
                    Assert.AreEqual(null, polSourceGroupingLanguage.Text);
                    Assert.AreEqual(count, polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().Count());


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // polSourceGroupingLanguage.TranslationStatusText   (TranslationStatusEnum)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)1000000;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusText"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // polSourceGroupingLanguage.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime();
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // polSourceGroupingLanguage.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.LastUpdateContactTVItemID = 0;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", polSourceGroupingLanguage.LastUpdateContactTVItemID.ToString()), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceGroupingLanguage = null;
                    polSourceGroupingLanguage = GetFilledRandomPolSourceGroupingLanguage("");
                    polSourceGroupingLanguage.LastUpdateContactTVItemID = 1;
                    polSourceGroupingLanguageService.Add(polSourceGroupingLanguage);
                    Assert.AreEqual(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), polSourceGroupingLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceGroupingLanguage.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceGroupingLanguage.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(polSourceGroupingLanguage.PolSourceGroupingLanguageID)
        [TestMethod]
        public void GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID__polSourceGroupingLanguage_PolSourceGroupingLanguageID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceGroupingLanguage polSourceGroupingLanguage = (from c in dbTestDB.PolSourceGroupingLanguages select c).FirstOrDefault();
                    Assert.IsNotNull(polSourceGroupingLanguage);

                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        polSourceGroupingLanguageService.Query.Extra = extra;

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            PolSourceGroupingLanguage polSourceGroupingLanguageRet = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(polSourceGroupingLanguage.PolSourceGroupingLanguageID);
                            CheckPolSourceGroupingLanguageFields(new List<PolSourceGroupingLanguage>() { polSourceGroupingLanguageRet });
                            Assert.AreEqual(polSourceGroupingLanguage.PolSourceGroupingLanguageID, polSourceGroupingLanguageRet.PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageWithPolSourceGroupingLanguageID(polSourceGroupingLanguage.PolSourceGroupingLanguageID)

        #region Tests Generated for GetPolSourceGroupingLanguageList()
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceGroupingLanguage polSourceGroupingLanguage = (from c in dbTestDB.PolSourceGroupingLanguages select c).FirstOrDefault();
                    Assert.IsNotNull(polSourceGroupingLanguage);

                    List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                    polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Take(200).ToList();

                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        polSourceGroupingLanguageService.Query.Extra = extra;

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList()

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "", "", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 1, 1,  "PolSourceGroupingLanguageID", "", "", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).OrderBy(c => c.PolSourceGroupingLanguageID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take 2 Asc
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 1, 1, "PolSourceGroupingLanguageID,PolSourceGroupingID", "", "", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).OrderBy(c => c.PolSourceGroupingLanguageID).ThenBy(c => c.PolSourceGroupingID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take 2 Asc

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc Where
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceGroupingLanguageID", "", "PolSourceGroupingLanguageID,EQ,4", "");

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Where(c => c.PolSourceGroupingLanguageID == 4).OrderBy(c => c.PolSourceGroupingLanguageID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc Where

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc 2 Where
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceGroupingLanguageID", "", "PolSourceGroupingLanguageID,GT,2|PolSourceGroupingLanguageID,LT,5", "");

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Where(c => c.PolSourceGroupingLanguageID > 2 && c.PolSourceGroupingLanguageID < 5).Skip(0).Take(1).OrderBy(c => c.PolSourceGroupingLanguageID).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Asc 2 Where

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceGroupingLanguageID", "", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).OrderByDescending(c => c.PolSourceGroupingLanguageID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take 2 Desc
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceGroupingLanguageID,PolSourceGroupingID", "", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).OrderByDescending(c => c.PolSourceGroupingLanguageID).ThenByDescending(c => c.PolSourceGroupingID).Skip(1).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take 2 Desc

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc Where
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceGroupingLanguageID", "", "PolSourceGroupingLanguageID,EQ,4", "");

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Where(c => c.PolSourceGroupingLanguageID == 4).OrderByDescending(c => c.PolSourceGroupingLanguageID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc Where

        #region Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc 2 Where
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 0, 1, "", "PolSourceGroupingLanguageID", "PolSourceGroupingLanguageID,GT,2|PolSourceGroupingLanguageID,LT,5", "");

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Where(c => c.PolSourceGroupingLanguageID > 2 && c.PolSourceGroupingLanguageID < 5).OrderByDescending(c => c.PolSourceGroupingLanguageID).Skip(0).Take(1).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() Skip Take Desc 2 Where

        #region Tests Generated for GetPolSourceGroupingLanguageList() 2 Where
        [TestMethod]
        public void GetPolSourceGroupingLanguageList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    foreach (string extra in new List<string>() { null, "A", "B", "C", "D", "E" })
                    {
                        PolSourceGroupingLanguageService polSourceGroupingLanguageService = new PolSourceGroupingLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                        polSourceGroupingLanguageService.Query = polSourceGroupingLanguageService.FillQuery(typeof(PolSourceGroupingLanguage), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "PolSourceGroupingLanguageID,GT,2|PolSourceGroupingLanguageID,LT,5", extra);

                        List<PolSourceGroupingLanguage> polSourceGroupingLanguageDirectQueryList = new List<PolSourceGroupingLanguage>();
                        polSourceGroupingLanguageDirectQueryList = (from c in dbTestDB.PolSourceGroupingLanguages select c).Where(c => c.PolSourceGroupingLanguageID > 2 && c.PolSourceGroupingLanguageID < 5).ToList();

                        if (string.IsNullOrWhiteSpace(extra))
                        {
                            List<PolSourceGroupingLanguage> polSourceGroupingLanguageList = new List<PolSourceGroupingLanguage>();
                            polSourceGroupingLanguageList = polSourceGroupingLanguageService.GetPolSourceGroupingLanguageList().ToList();
                            CheckPolSourceGroupingLanguageFields(polSourceGroupingLanguageList);
                            Assert.AreEqual(polSourceGroupingLanguageDirectQueryList[0].PolSourceGroupingLanguageID, polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
                        }
                        else
                        {
                            //Assert.AreEqual(true, false);
                        }
                    }
                }
            }
        }
        #endregion Tests Generated for GetPolSourceGroupingLanguageList() 2 Where

        #region Functions private
        private void CheckPolSourceGroupingLanguageFields(List<PolSourceGroupingLanguage> polSourceGroupingLanguageList)
        {
            Assert.IsNotNull(polSourceGroupingLanguageList[0].PolSourceGroupingLanguageID);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].PolSourceGroupingID);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].Language);
            Assert.IsFalse(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].SourceName));
            Assert.IsNotNull(polSourceGroupingLanguageList[0].SourceNameOrder);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].TranslationStatusSourceName);
            Assert.IsFalse(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Init));
            Assert.IsNotNull(polSourceGroupingLanguageList[0].TranslationStatusInit);
            Assert.IsFalse(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Description));
            Assert.IsNotNull(polSourceGroupingLanguageList[0].TranslationStatusDescription);
            Assert.IsFalse(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Report));
            Assert.IsNotNull(polSourceGroupingLanguageList[0].TranslationStatusReport);
            Assert.IsFalse(string.IsNullOrWhiteSpace(polSourceGroupingLanguageList[0].Text));
            Assert.IsNotNull(polSourceGroupingLanguageList[0].TranslationStatusText);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].LastUpdateDate_UTC);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].LastUpdateContactTVItemID);
            Assert.IsNotNull(polSourceGroupingLanguageList[0].HasErrors);
        }
        private PolSourceGroupingLanguage GetFilledRandomPolSourceGroupingLanguage(string OmitPropName)
        {
            PolSourceGroupingLanguage polSourceGroupingLanguage = new PolSourceGroupingLanguage();

            // Need to implement [PolSourceGroupingLanguage PolSourceGroupingID PolSourceGrouping PolSourceGroupingID]
            if (OmitPropName != "Language") polSourceGroupingLanguage.Language = LanguageRequest;
            if (OmitPropName != "SourceName") polSourceGroupingLanguage.SourceName = GetRandomString("", 20);
            if (OmitPropName != "SourceNameOrder") polSourceGroupingLanguage.SourceNameOrder = GetRandomInt(0, 1000);
            if (OmitPropName != "TranslationStatusSourceName") polSourceGroupingLanguage.TranslationStatusSourceName = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Init") polSourceGroupingLanguage.Init = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusInit") polSourceGroupingLanguage.TranslationStatusInit = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Description") polSourceGroupingLanguage.Description = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusDescription") polSourceGroupingLanguage.TranslationStatusDescription = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Report") polSourceGroupingLanguage.Report = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusReport") polSourceGroupingLanguage.TranslationStatusReport = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "Text") polSourceGroupingLanguage.Text = GetRandomString("", 20);
            if (OmitPropName != "TranslationStatusText") polSourceGroupingLanguage.TranslationStatusText = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") polSourceGroupingLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceGroupingLanguage.LastUpdateContactTVItemID = 2;

            return polSourceGroupingLanguage;
        }
        #endregion Functions private
    }
}
