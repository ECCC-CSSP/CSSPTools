/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class RainExceedanceServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICultureService CultureService { get; set; }
        private IRainExceedanceService RainExceedanceService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task RainExceedance_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               RainExceedance rainExceedance = GetFilledRandomRainExceedance(""); 

               // List<RainExceedance>
               var actionRainExceedanceList = await RainExceedanceService.GetRainExceedanceList();
               Assert.Equal(200, ((ObjectResult)actionRainExceedanceList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRainExceedanceList.Result).Value);
               List<RainExceedance> rainExceedanceList = (List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value;

               int count = ((List<RainExceedance>)((OkObjectResult)actionRainExceedanceList.Result).Value).Count();
                Assert.True(count > 0);

               // Post RainExceedance
               var actionRainExceedanceAdded = await RainExceedanceService.Post(rainExceedance);
               Assert.Equal(200, ((ObjectResult)actionRainExceedanceAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRainExceedanceAdded.Result).Value);
               RainExceedance rainExceedanceAdded = (RainExceedance)((OkObjectResult)actionRainExceedanceAdded.Result).Value;
               Assert.NotNull(rainExceedanceAdded);

               // Put RainExceedance
               var actionRainExceedanceUpdated = await RainExceedanceService.Put(rainExceedance);
               Assert.Equal(200, ((ObjectResult)actionRainExceedanceUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRainExceedanceUpdated.Result).Value);
               RainExceedance rainExceedanceUpdated = (RainExceedance)((OkObjectResult)actionRainExceedanceUpdated.Result).Value;
               Assert.NotNull(rainExceedanceUpdated);

               // Delete RainExceedance
               var actionRainExceedanceDeleted = await RainExceedanceService.Delete(rainExceedance.RainExceedanceID);
               Assert.Equal(200, ((ObjectResult)actionRainExceedanceDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRainExceedanceDeleted.Result).Value);
               bool retBool = (bool)((OkObjectResult)actionRainExceedanceDeleted.Result).Value;
               Assert.True(retBool);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddSingleton<ICultureService, CultureService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IRainExceedanceService, RainExceedanceService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CultureService = Provider.GetService<ICultureService>();
            Assert.NotNull(CultureService);

            CultureService.SetCulture(culture);

            RainExceedanceService = Provider.GetService<IRainExceedanceService>();
            Assert.NotNull(RainExceedanceService);

            return await Task.FromResult(true);
        }
        private RainExceedance GetFilledRandomRainExceedance(string OmitPropName)
        {
            RainExceedance rainExceedance = new RainExceedance();

            if (OmitPropName != "RainExceedanceTVItemID") rainExceedance.RainExceedanceTVItemID = 56;
            if (OmitPropName != "StartMonth") rainExceedance.StartMonth = GetRandomInt(1, 12);
            if (OmitPropName != "StartDay") rainExceedance.StartDay = GetRandomInt(1, 31);
            if (OmitPropName != "EndMonth") rainExceedance.EndMonth = GetRandomInt(1, 12);
            if (OmitPropName != "EndDay") rainExceedance.EndDay = GetRandomInt(1, 31);
            if (OmitPropName != "RainMaximum_mm") rainExceedance.RainMaximum_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "StakeholdersEmailDistributionListID") rainExceedance.StakeholdersEmailDistributionListID = 1;
            if (OmitPropName != "OnlyStaffEmailDistributionListID") rainExceedance.OnlyStaffEmailDistributionListID = 1;
            if (OmitPropName != "IsActive") rainExceedance.IsActive = true;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedance.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedance.LastUpdateContactTVItemID = 2;

            return rainExceedance;
        }
        #endregion Functions private
    }
}
