/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class RatingCurveValueServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IRatingCurveValueService ratingCurveValueService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public RatingCurveValueServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task RatingCurveValue_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               RatingCurveValue ratingCurveValue = GetFilledRandomRatingCurveValue(""); 

               // List<RatingCurveValue>
               var actionRatingCurveValueList = await ratingCurveValueService.GetRatingCurveValueList();
               Assert.Equal(200, ((ObjectResult)actionRatingCurveValueList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRatingCurveValueList.Result).Value);
               List<RatingCurveValue> ratingCurveValueList = (List<RatingCurveValue>)(((OkObjectResult)actionRatingCurveValueList.Result).Value);

               int count = ((List<RatingCurveValue>)((OkObjectResult)actionRatingCurveValueList.Result).Value).Count();
                Assert.True(count > 0);

               // Add RatingCurveValue
               var actionRatingCurveValueAdded = await ratingCurveValueService.Add(ratingCurveValue);
               Assert.Equal(200, ((ObjectResult)actionRatingCurveValueAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRatingCurveValueAdded.Result).Value);
               RatingCurveValue ratingCurveValueAdded = (RatingCurveValue)(((OkObjectResult)actionRatingCurveValueAdded.Result).Value);
               Assert.NotNull(ratingCurveValueAdded);

               // Update RatingCurveValue
               var actionRatingCurveValueUpdated = await ratingCurveValueService.Update(ratingCurveValue);
               Assert.Equal(200, ((ObjectResult)actionRatingCurveValueUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRatingCurveValueUpdated.Result).Value);
               RatingCurveValue ratingCurveValueUpdated = (RatingCurveValue)(((OkObjectResult)actionRatingCurveValueUpdated.Result).Value);
               Assert.NotNull(ratingCurveValueUpdated);

               // Delete RatingCurveValue
               var actionRatingCurveValueDeleted = await ratingCurveValueService.Delete(ratingCurveValue);
               Assert.Equal(200, ((ObjectResult)actionRatingCurveValueDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionRatingCurveValueDeleted.Result).Value);
               RatingCurveValue ratingCurveValueDeleted = (RatingCurveValue)(((OkObjectResult)actionRatingCurveValueDeleted.Result).Value);
               Assert.NotNull(ratingCurveValueDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IRatingCurveValueService, RatingCurveValueService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            ratingCurveValueService = Provider.GetService<IRatingCurveValueService>();
            Assert.NotNull(ratingCurveValueService);
        
            await ratingCurveValueService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private RatingCurveValue GetFilledRandomRatingCurveValue(string OmitPropName)
        {
            RatingCurveValue ratingCurveValue = new RatingCurveValue();

            if (OmitPropName != "RatingCurveID") ratingCurveValue.RatingCurveID = 1;
            if (OmitPropName != "StageValue_m") ratingCurveValue.StageValue_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "DischargeValue_m3_s") ratingCurveValue.DischargeValue_m3_s = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "LastUpdateDate_UTC") ratingCurveValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") ratingCurveValue.LastUpdateContactTVItemID = 2;

            return ratingCurveValue;
        }
        #endregion Functions private
    }
}
