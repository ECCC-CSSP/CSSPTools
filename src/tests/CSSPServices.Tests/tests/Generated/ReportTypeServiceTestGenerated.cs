/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class ReportTypeServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IReportTypeService reportTypeService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public ReportTypeServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task ReportType_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            ReportType reportType = GetFilledRandomReportType(""); 

            // List<ReportType>
            var actionReportTypeList = await reportTypeService.GetReportTypeList();
            Assert.Equal(200, ((ObjectResult)actionReportTypeList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeList.Result).Value);
            List<ReportType> reportTypeList = (List<ReportType>)(((OkObjectResult)actionReportTypeList.Result).Value);

            int count = ((List<ReportType>)((OkObjectResult)actionReportTypeList.Result).Value).Count();
            Assert.True(count > 0);

            // Add ReportType
            var actionReportTypeAdded = await reportTypeService.Add(reportType);
            Assert.Equal(200, ((ObjectResult)actionReportTypeAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeAdded.Result).Value);
            ReportType reportTypeAdded = (ReportType)(((OkObjectResult)actionReportTypeAdded.Result).Value);
            Assert.NotNull(reportTypeAdded);

            // Update ReportType
            var actionReportTypeUpdated = await reportTypeService.Update(reportType);
            Assert.Equal(200, ((ObjectResult)actionReportTypeUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeUpdated.Result).Value);
            ReportType reportTypeUpdated = (ReportType)(((OkObjectResult)actionReportTypeUpdated.Result).Value);
            Assert.NotNull(reportTypeUpdated);

            // Delete ReportType
            var actionReportTypeDeleted = await reportTypeService.Delete(reportType);
            Assert.Equal(200, ((ObjectResult)actionReportTypeDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionReportTypeDeleted.Result).Value);
            ReportType reportTypeDeleted = (ReportType)(((OkObjectResult)actionReportTypeDeleted.Result).Value);
            Assert.NotNull(reportTypeDeleted);
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IReportTypeService, ReportTypeService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            reportTypeService = Provider.GetService<IReportTypeService>();
            Assert.NotNull(reportTypeService);
        
            await reportTypeService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private ReportType GetFilledRandomReportType(string OmitPropName)
        {
            ReportType reportType = new ReportType();

            if (OmitPropName != "TVType") reportType.TVType = (TVTypeEnum)GetRandomEnumType(typeof(TVTypeEnum));
            if (OmitPropName != "FileType") reportType.FileType = (FileTypeEnum)GetRandomEnumType(typeof(FileTypeEnum));
            if (OmitPropName != "UniqueCode") reportType.UniqueCode = GetRandomString("", 5);
            if (OmitPropName != "Language") reportType.Language = LanguageRequest;
            if (OmitPropName != "Name") reportType.Name = GetRandomString("", 5);
            if (OmitPropName != "Description") reportType.Description = GetRandomString("", 5);
            if (OmitPropName != "StartOfFileName") reportType.StartOfFileName = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") reportType.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") reportType.LastUpdateContactTVItemID = 2;

            return reportType;
        }
        #endregion Functions private
    }
}
