/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;

namespace CSSPServices.Tests
{
    [Collection("Sequential")]
    public partial class ResetPasswordServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private IResetPasswordService ResetPasswordService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private InMemoryDBContext dbIM { get; set; }
        private ResetPassword resetPassword { get; set; }
        #endregion Properties

        #region Constructors
        public ResetPasswordServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task ResetPassword_CRUD_Good_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            resetPassword = GetFilledRandomResetPassword("");

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                await DoCRUDTest();
            }
            else
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    await DoCRUDTest();
                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task ResetPassword_Properties_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // Properties testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionResetPasswordList = await ResetPasswordService.GetResetPasswordList();
            Assert.Equal(200, ((ObjectResult)actionResetPasswordList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordList.Result).Value);
            List<ResetPassword> resetPasswordList = (List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value;

            count = resetPasswordList.Count();

            ResetPassword resetPassword = GetFilledRandomResetPassword("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // resetPassword.ResetPasswordID   (Int32)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ResetPasswordID = 0;

            var actionResetPassword = await ResetPasswordService.Put(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ResetPasswordID = 10000000;
            actionResetPassword = await ResetPasswordService.Put(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [DataType(DataType.EmailAddress)]
            // [CSSPMaxLength(256)]
            // resetPassword.Email   (String)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("Email");
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.Email = GetRandomString("", 257);
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            //Assert.AreEqual(count, resetPasswordService.GetResetPasswordList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // resetPassword.ExpireDate_Local   (DateTime)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ExpireDate_Local = new DateTime();
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.ExpireDate_Local = new DateTime(1979, 1, 1);
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPMaxLength(8)]
            // resetPassword.Code   (String)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("Code");
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.Code = GetRandomString("", 9);
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            //Assert.AreEqual(count, resetPasswordService.GetResetPasswordList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // resetPassword.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateDate_UTC = new DateTime();
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);
            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // resetPassword.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateContactTVItemID = 0;
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

            resetPassword = null;
            resetPassword = GetFilledRandomResetPassword("");
            resetPassword.LastUpdateContactTVItemID = 1;
            actionResetPassword = await ResetPasswordService.Post(resetPassword);
            Assert.IsType<BadRequestObjectResult>(actionResetPassword.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDTest()
        {
            // Post ResetPassword
            var actionResetPasswordAdded = await ResetPasswordService.Post(resetPassword);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordAdded.Result).Value);
            ResetPassword resetPasswordAdded = (ResetPassword)((OkObjectResult)actionResetPasswordAdded.Result).Value;
            Assert.NotNull(resetPasswordAdded);

            // List<ResetPassword>
            var actionResetPasswordList = await ResetPasswordService.GetResetPasswordList();
            Assert.Equal(200, ((ObjectResult)actionResetPasswordList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordList.Result).Value);
            List<ResetPassword> resetPasswordList = (List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value;

            int count = ((List<ResetPassword>)((OkObjectResult)actionResetPasswordList.Result).Value).Count();
            Assert.True(count > 0);

            // Put ResetPassword
            var actionResetPasswordUpdated = await ResetPasswordService.Put(resetPassword);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordUpdated.Result).Value);
            ResetPassword resetPasswordUpdated = (ResetPassword)((OkObjectResult)actionResetPasswordUpdated.Result).Value;
            Assert.NotNull(resetPasswordUpdated);

            // Delete ResetPassword
            var actionResetPasswordDeleted = await ResetPasswordService.Delete(resetPassword.ResetPasswordID);
            Assert.Equal(200, ((ObjectResult)actionResetPasswordDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionResetPasswordDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionResetPasswordDeleted.Result).Value;
            Assert.True(retBool);
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            string TestDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddDbContext<InMemoryDBContext>(options =>
            {
                options.UseInMemoryDatabase(TestDBConnString);
            });

            string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            FileInfo fiAppDataPath = new FileInfo(CSSPDBLocalFileName.Replace("{AppDataPath}", appDataPath));

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiAppDataPath.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IResetPasswordService, ResetPasswordService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            LoggedInService.DBLocation = DBLocationEnum.Local;

            dbIM = Provider.GetService<InMemoryDBContext>();
            Assert.NotNull(dbIM);

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            ResetPasswordService = Provider.GetService<IResetPasswordService>();
            Assert.NotNull(ResetPasswordService);

            return await Task.FromResult(true);
        }
        private ResetPassword GetFilledRandomResetPassword(string OmitPropName)
        {
            List<ResetPassword> resetPasswordListToDelete = (from c in dbLocal.ResetPasswords
                                                               select c).ToList(); 
            
            dbLocal.ResetPasswords.RemoveRange(resetPasswordListToDelete);
            try
            {
                dbLocal.SaveChanges();
            }
            catch (Exception ex)
            {
                Assert.True(false, ex.Message);
            }
            
            dbIM.Database.EnsureDeleted();

            ResetPassword resetPassword = new ResetPassword();

            if (OmitPropName != "Email") resetPassword.Email = GetRandomEmail();
            if (OmitPropName != "ExpireDate_Local") resetPassword.ExpireDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Code") resetPassword.Code = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") resetPassword.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") resetPassword.LastUpdateContactTVItemID = 2;

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                if (OmitPropName != "ResetPasswordID") resetPassword.ResetPasswordID = 10000000;

                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
            }

            return resetPassword;
        }
        private void CheckResetPasswordFields(List<ResetPassword> resetPasswordList)
        {
            Assert.False(string.IsNullOrWhiteSpace(resetPasswordList[0].Email));
            Assert.False(string.IsNullOrWhiteSpace(resetPasswordList[0].Code));
        }
        #endregion Functions private
    }
}
