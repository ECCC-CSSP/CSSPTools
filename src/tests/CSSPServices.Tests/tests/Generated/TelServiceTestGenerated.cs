 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\Generated\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class TelServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private TelService telService { get; set; }
        #endregion Properties

        #region Constructors
        public TelServiceTest() : base()
        {
            //telService = new TelService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void Tel_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    Tel tel = GetFilledRandomTel("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = telService.GetTelList().Count();

                    Assert.Equal(count, (from c in dbTestDB.Tels select c).Count());

                    telService.Add(tel);
                    if (tel.HasErrors)
                    {
                        Assert.Equal("", tel.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(telService.GetTelList().Where(c => c == tel).Any());
                    telService.Update(tel);
                    if (tel.HasErrors)
                    {
                        Assert.Equal("", tel.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, telService.GetTelList().Count());
                    telService.Delete(tel);
                    if (tel.HasErrors)
                    {
                        Assert.Equal("", tel.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, telService.GetTelList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void Tel_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = telService.GetTelList().Count();

                    Tel tel = GetFilledRandomTel("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // tel.TelID   (Int32)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelID = 0;
                    telService.Update(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TelID"), tel.ValidationResults.FirstOrDefault().ErrorMessage);

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelID = 10000000;
                    telService.Update(tel);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "Tel", "TelID", tel.TelID.ToString()), tel.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Tel)]
                    // tel.TelTVItemID   (Int32)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelTVItemID = 0;
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "TelTVItemID", tel.TelTVItemID.ToString()), tel.ValidationResults.FirstOrDefault().ErrorMessage);

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelTVItemID = 1;
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "TelTVItemID", "Tel"), tel.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(50))]
                    // tel.TelNumber   (String)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("TelNumber");
                    Assert.False(telService.Add(tel));
                    Assert.Equal(1, (int)tel.ValidationResults.Count());
                    Assert.True(tel.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "TelNumber")).Any());
                    Assert.Null(tel.TelNumber);
                    Assert.Equal(count, (int)telService.GetTelList().Count());

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelNumber = GetRandomString("", 51);
                    Assert.False(telService.Add(tel));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "TelNumber", "50"), tel.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)telService.GetTelList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // tel.TelType   (TelTypeEnum)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.TelType = (TelTypeEnum)1000000;
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TelType"), tel.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // tel.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.LastUpdateDate_UTC = new DateTime();
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), tel.ValidationResults.FirstOrDefault().ErrorMessage);
                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), tel.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // tel.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.LastUpdateContactTVItemID = 0;
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", tel.LastUpdateContactTVItemID.ToString()), tel.ValidationResults.FirstOrDefault().ErrorMessage);

                    tel = null;
                    tel = GetFilledRandomTel("");
                    tel.LastUpdateContactTVItemID = 1;
                    telService.Add(tel);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), tel.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // tel.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // tel.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetTelWithTelID(tel.TelID)
        [Fact]
        public void GetTelWithTelID__tel_TelID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Tel tel = (from c in dbTestDB.Tels select c).FirstOrDefault();
                    Assert.NotNull(tel);

                }
            }
        }
        #endregion Tests Generated for GetTelWithTelID(tel.TelID)

        #region Tests Generated for GetTelList()
        [Fact]
        public void GetTelList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Tel tel = (from c in dbTestDB.Tels select c).FirstOrDefault();
                    Assert.NotNull(tel);

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetTelList()

        #region Tests Generated for GetTelList() Skip Take
        [Fact]
        public void GetTelList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Skip(1).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take

        #region Tests Generated for GetTelList() Skip Take Asc
        [Fact]
        public void GetTelList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 1, 1,  "TelID", "", "");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).OrderBy(c => c.TelID).Skip(1).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Asc

        #region Tests Generated for GetTelList() Skip Take 2 Asc
        [Fact]
        public void GetTelList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 1, 1, "TelID,TelTVItemID", "", "");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).OrderBy(c => c.TelID).ThenBy(c => c.TelTVItemID).Skip(1).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take 2 Asc

        #region Tests Generated for GetTelList() Skip Take Asc Where
        [Fact]
        public void GetTelList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 0, 1, "TelID", "", "TelID,EQ,4");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Where(c => c.TelID == 4).OrderBy(c => c.TelID).Skip(0).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Asc Where

        #region Tests Generated for GetTelList() Skip Take Asc 2 Where
        [Fact]
        public void GetTelList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 0, 1, "TelID", "", "TelID,GT,2|TelID,LT,5");

                     List<Tel> telDirectQueryList = new List<Tel>();
                     telDirectQueryList = (from c in dbTestDB.Tels select c).Where(c => c.TelID > 2 && c.TelID < 5).Skip(0).Take(1).OrderBy(c => c.TelID).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Asc 2 Where

        #region Tests Generated for GetTelList() Skip Take Desc
        [Fact]
        public void GetTelList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 1, 1, "", "TelID", "");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).OrderByDescending(c => c.TelID).Skip(1).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Desc

        #region Tests Generated for GetTelList() Skip Take 2 Desc
        [Fact]
        public void GetTelList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 1, 1, "", "TelID,TelTVItemID", "");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).OrderByDescending(c => c.TelID).ThenByDescending(c => c.TelTVItemID).Skip(1).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take 2 Desc

        #region Tests Generated for GetTelList() Skip Take Desc Where
        [Fact]
        public void GetTelList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 0, 1, "TelID", "", "TelID,EQ,4");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Where(c => c.TelID == 4).OrderByDescending(c => c.TelID).Skip(0).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Desc Where

        #region Tests Generated for GetTelList() Skip Take Desc 2 Where
        [Fact]
        public void GetTelList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 0, 1, "", "TelID", "TelID,GT,2|TelID,LT,5");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Where(c => c.TelID > 2 && c.TelID < 5).OrderByDescending(c => c.TelID).Skip(0).Take(1).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() Skip Take Desc 2 Where

        #region Tests Generated for GetTelList() 2 Where
        [Fact]
        public void GetTelList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TelService telService = new TelService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    telService.Query = telService.FillQuery(typeof(Tel), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "TelID,GT,2|TelID,LT,5");

                    List<Tel> telDirectQueryList = new List<Tel>();
                    telDirectQueryList = (from c in dbTestDB.Tels select c).Where(c => c.TelID > 2 && c.TelID < 5).ToList();

                        List<Tel> telList = new List<Tel>();
                        telList = telService.GetTelList().ToList();
                        CheckTelFields(telList);
                        Assert.Equal(telDirectQueryList[0].TelID, telList[0].TelID);
                }
            }
        }
        #endregion Tests Generated for GetTelList() 2 Where

        #region Functions private
        private void CheckTelFields(List<Tel> telList)
        {
            Assert.False(string.IsNullOrWhiteSpace(telList[0].TelNumber));
        }
        private Tel GetFilledRandomTel(string OmitPropName)
        {
            Tel tel = new Tel();

            if (OmitPropName != "TelTVItemID") tel.TelTVItemID = 55;
            if (OmitPropName != "TelNumber") tel.TelNumber = GetRandomString("", 5);
            if (OmitPropName != "TelType") tel.TelType = (TelTypeEnum)GetRandomEnumType(typeof(TelTypeEnum));
            if (OmitPropName != "LastUpdateDate_UTC") tel.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tel.LastUpdateContactTVItemID = 2;

            return tel;
        }
        #endregion Functions private
    }
}
