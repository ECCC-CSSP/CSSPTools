/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;
using System.ComponentModel.DataAnnotations;
using CSSPCultureServices.Resources;

namespace CSSPServices.Tests
{
    [Collection("Sequential")]
    public partial class TideDataValueServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ICSSPCultureService CSSPCultureService { get; set; }
        private ILoggedInService LoggedInService { get; set; }
        private ITideDataValueService TideDataValueService { get; set; }
        private CSSPDBContext db { get; set; }
        private CSSPDBLocalContext dbLocal { get; set; }
        private CSSPDBInMemoryContext dbIM { get; set; }
        private TideDataValue tideDataValue { get; set; }
        #endregion Properties

        #region Constructors
        public TideDataValueServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task TideDataValue_CRUD_Good_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            tideDataValue = GetFilledRandomTideDataValue("");

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                await DoCRUDTest();
            }
            else
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    await DoCRUDTest();
                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Theory]
        [InlineData("en-CA", DBLocationEnum.Local)]
        [InlineData("fr-CA", DBLocationEnum.Local)]
        [InlineData("en-CA", DBLocationEnum.Server)]
        [InlineData("fr-CA", DBLocationEnum.Server)]
        public async Task TideDataValue_Properties_Test(string culture, DBLocationEnum DBLocation)
        {
            // -------------------------------
            // -------------------------------
            // Properties testing
            // -------------------------------
            // -------------------------------

            Assert.True(await Setup(culture));

            LoggedInService.DBLocation = DBLocation;

            int count = 0;
            if (count == 1)
            {
                // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
            }

            var actionTideDataValueList = await TideDataValueService.GetTideDataValueList();
            Assert.Equal(200, ((ObjectResult)actionTideDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueList.Result).Value);
            List<TideDataValue> tideDataValueList = (List<TideDataValue>)((OkObjectResult)actionTideDataValueList.Result).Value;

            count = tideDataValueList.Count();

            TideDataValue tideDataValue = GetFilledRandomTideDataValue("");


            // -----------------------------------
            // [Key]
            // Is NOT Nullable
            // tideDataValue.TideDataValueID   (Int32)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideDataValueID = 0;

            var actionTideDataValue = await TideDataValueService.Put(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideDataValueID = 10000000;
            actionTideDataValue = await TideDataValueService.Put(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = TideSite)]
            // tideDataValue.TideSiteTVItemID   (Int32)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideSiteTVItemID = 0;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideSiteTVItemID = 1;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tideDataValue.DateTime_Local   (DateTime)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.DateTime_Local = new DateTime();
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.DateTime_Local = new DateTime(1979, 1, 1);
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // tideDataValue.Keep   (Boolean)
            // -----------------------------------


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tideDataValue.TideDataType   (TideDataTypeEnum)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideDataType = (TideDataTypeEnum)1000000;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPEnumType]
            // tideDataValue.StorageDataType   (StorageDataTypeEnum)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10000)]
            // tideDataValue.Depth_m   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [Depth_m]

            //CSSPError: Type not implemented [Depth_m]

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.Depth_m = -1.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());
            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.Depth_m = 10001.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10)]
            // tideDataValue.UVelocity_m_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [UVelocity_m_s]

            //CSSPError: Type not implemented [UVelocity_m_s]

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.UVelocity_m_s = -1.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());
            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.UVelocity_m_s = 11.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPRange(0, 10)]
            // tideDataValue.VVelocity_m_s   (Double)
            // -----------------------------------

            //CSSPError: Type not implemented [VVelocity_m_s]

            //CSSPError: Type not implemented [VVelocity_m_s]

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.VVelocity_m_s = -1.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());
            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.VVelocity_m_s = 11.0D;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            //Assert.AreEqual(count, tideDataValueService.GetTideDataValueList().Count());

            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // tideDataValue.TideStart   (TideTextEnum)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideStart = (TideTextEnum)1000000;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is Nullable
            // [CSSPEnumType]
            // tideDataValue.TideEnd   (TideTextEnum)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.TideEnd = (TideTextEnum)1000000;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);


            // -----------------------------------
            // Is NOT Nullable
            // [CSSPAfter(Year = 1980)]
            // tideDataValue.LastUpdateDate_UTC   (DateTime)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.LastUpdateDate_UTC = new DateTime();
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);
            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

            // -----------------------------------
            // Is NOT Nullable
            // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
            // tideDataValue.LastUpdateContactTVItemID   (Int32)
            // -----------------------------------

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.LastUpdateContactTVItemID = 0;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

            tideDataValue = null;
            tideDataValue = GetFilledRandomTideDataValue("");
            tideDataValue.LastUpdateContactTVItemID = 1;
            actionTideDataValue = await TideDataValueService.Post(tideDataValue);
            Assert.IsType<BadRequestObjectResult>(actionTideDataValue.Result);

        }
        #endregion Tests Generated Properties

        #region Functions private
        private async Task DoCRUDTest()
        {
            // Post TideDataValue
            var actionTideDataValueAdded = await TideDataValueService.Post(tideDataValue);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueAdded.Result).Value);
            TideDataValue tideDataValueAdded = (TideDataValue)((OkObjectResult)actionTideDataValueAdded.Result).Value;
            Assert.NotNull(tideDataValueAdded);

            // List<TideDataValue>
            var actionTideDataValueList = await TideDataValueService.GetTideDataValueList();
            Assert.Equal(200, ((ObjectResult)actionTideDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueList.Result).Value);
            List<TideDataValue> tideDataValueList = (List<TideDataValue>)((OkObjectResult)actionTideDataValueList.Result).Value;

            int count = ((List<TideDataValue>)((OkObjectResult)actionTideDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            if (LoggedInService.DBLocation == DBLocationEnum.Server)
            {
                // List<TideDataValue> with skip and take
                var actionTideDataValueListSkipAndTake = await TideDataValueService.GetTideDataValueList(1, 1);
                Assert.Equal(200, ((ObjectResult)actionTideDataValueListSkipAndTake.Result).StatusCode);
                Assert.NotNull(((OkObjectResult)actionTideDataValueListSkipAndTake.Result).Value);
                List<TideDataValue> tideDataValueListSkipAndTake = (List<TideDataValue>)((OkObjectResult)actionTideDataValueListSkipAndTake.Result).Value;

                int countSkipAndTake = ((List<TideDataValue>)((OkObjectResult)actionTideDataValueListSkipAndTake.Result).Value).Count();
                Assert.True(countSkipAndTake == 1);

                Assert.False(tideDataValueList[0].TideDataValueID == tideDataValueListSkipAndTake[0].TideDataValueID);
            }

            // Get TideDataValue With TideDataValueID
            var actionTideDataValueGet = await TideDataValueService.GetTideDataValueWithTideDataValueID(tideDataValueList[0].TideDataValueID);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueGet.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueGet.Result).Value);
            TideDataValue tideDataValueGet = (TideDataValue)((OkObjectResult)actionTideDataValueGet.Result).Value;
            Assert.NotNull(tideDataValueGet);
            Assert.Equal(tideDataValueGet.TideDataValueID, tideDataValueList[0].TideDataValueID);

            // Put TideDataValue
            var actionTideDataValueUpdated = await TideDataValueService.Put(tideDataValue);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueUpdated.Result).Value);
            TideDataValue tideDataValueUpdated = (TideDataValue)((OkObjectResult)actionTideDataValueUpdated.Result).Value;
            Assert.NotNull(tideDataValueUpdated);

            // Delete TideDataValue
            var actionTideDataValueDeleted = await TideDataValueService.Delete(tideDataValue.TideDataValueID);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueDeleted.Result).Value);
            bool retBool = (bool)((OkObjectResult)actionTideDataValueDeleted.Result).Value;
            Assert.True(retBool);
        }
        private async Task<bool> Setup(string culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings_csspservices.json")
               .AddUserSecrets("6f27cbbe-6ffb-4154-b49b-d739597c4f60")
               .Build();

            Services = new ServiceCollection();

            Services.AddSingleton<IConfiguration>(Config);

            string CSSPDBLocalFileName = Config.GetValue<string>("CSSPDBLocal");
            Assert.NotNull(CSSPDBLocalFileName);

            string TestDBConnString = Config.GetValue<string>("TestDB");
            Assert.NotNull(TestDBConnString);

            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });

            Services.AddDbContext<CSSPDBInMemoryContext>(options =>
            {
                options.UseInMemoryDatabase(TestDBConnString);
            });

            FileInfo fiAppDataPath = new FileInfo(CSSPDBLocalFileName);

            Services.AddDbContext<CSSPDBLocalContext>(options =>
            {
                options.UseSqlite($"Data Source={ fiAppDataPath.FullName }");
            });

            Services.AddSingleton<ICSSPCultureService, CSSPCultureService>();
            Services.AddSingleton<ILoggedInService, LoggedInService>();
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITideDataValueService, TideDataValueService>();

            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);

            CSSPCultureService = Provider.GetService<ICSSPCultureService>();
            Assert.NotNull(CSSPCultureService);

            CSSPCultureService.SetCulture(culture);

            LoggedInService = Provider.GetService<ILoggedInService>();
            Assert.NotNull(LoggedInService);

            string Id = Config.GetValue<string>("Id");
            Assert.True(await LoggedInService.SetLoggedInContactInfo(Id));

            LoggedInService.DBLocation = DBLocationEnum.Local;

            dbIM = Provider.GetService<CSSPDBInMemoryContext>();
            Assert.NotNull(dbIM);

            dbLocal = Provider.GetService<CSSPDBLocalContext>();
            Assert.NotNull(dbLocal);

            TideDataValueService = Provider.GetService<ITideDataValueService>();
            Assert.NotNull(TideDataValueService);

            return await Task.FromResult(true);
        }
        private TideDataValue GetFilledRandomTideDataValue(string OmitPropName)
        {
            List<TideDataValue> tideDataValueListToDelete = (from c in dbLocal.TideDataValues
                                                               select c).ToList(); 
            
            dbLocal.TideDataValues.RemoveRange(tideDataValueListToDelete);
            try
            {
                dbLocal.SaveChanges();
            }
            catch (Exception ex)
            {
                Assert.True(false, ex.Message);
            }
            
            dbIM.Database.EnsureDeleted();

            TideDataValue tideDataValue = new TideDataValue();

            if (OmitPropName != "TideSiteTVItemID") tideDataValue.TideSiteTVItemID = 38;
            if (OmitPropName != "DateTime_Local") tideDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") tideDataValue.Keep = true;
            if (OmitPropName != "TideDataType") tideDataValue.TideDataType = (TideDataTypeEnum)GetRandomEnumType(typeof(TideDataTypeEnum));
            if (OmitPropName != "StorageDataType") tideDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "Depth_m") tideDataValue.Depth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "UVelocity_m_s") tideDataValue.UVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "VVelocity_m_s") tideDataValue.VVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "TideStart") tideDataValue.TideStart = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "TideEnd") tideDataValue.TideEnd = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "LastUpdateDate_UTC") tideDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tideDataValue.LastUpdateContactTVItemID = 2;

            if (LoggedInService.DBLocation == DBLocationEnum.Local)
            {
                if (OmitPropName != "TideDataValueID") tideDataValue.TideDataValueID = 10000000;

                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 38, TVLevel = 3, TVPath = "p1p5p6p38", TVType = (TVTypeEnum)22, ParentID = 6, IsActive = true, LastUpdateDate_UTC = new DateTime(2019, 1, 22, 18, 36, 9), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
                try
                {
                    dbIM.TVItems.Add(new TVItem() { TVItemID = 2, TVLevel = 1, TVPath = "p1p2", TVType = (TVTypeEnum)5, ParentID = 1, IsActive = true, LastUpdateDate_UTC = new DateTime(2014, 12, 2, 16, 58, 16), LastUpdateContactTVItemID = 2});
                    dbIM.SaveChanges();
                }
                catch (Exception)
                {
                   // nothing for now
                }
            }

            return tideDataValue;
        }
        private void CheckTideDataValueFields(List<TideDataValue> tideDataValueList)
        {
            if (tideDataValueList[0].TideStart != null)
            {
                Assert.NotNull(tideDataValueList[0].TideStart);
            }
            if (tideDataValueList[0].TideEnd != null)
            {
                Assert.NotNull(tideDataValueList[0].TideEnd);
            }
        }
        #endregion Functions private
    }
}
