/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class TideDataValueServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private ITideDataValueService tideDataValueService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public TideDataValueServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task TideDataValue_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            TideDataValue tideDataValue = GetFilledRandomTideDataValue(""); 

            // List<TideDataValue>
            var actionTideDataValueList = await tideDataValueService.GetTideDataValueList();
            Assert.Equal(200, ((ObjectResult)actionTideDataValueList.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueList.Result).Value);
            List<TideDataValue> tideDataValueList = (List<TideDataValue>)(((OkObjectResult)actionTideDataValueList.Result).Value);

            int count = ((List<TideDataValue>)((OkObjectResult)actionTideDataValueList.Result).Value).Count();
            Assert.True(count > 0);

            // Add TideDataValue
            var actionTideDataValueAdded = await tideDataValueService.Add(tideDataValue);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueAdded.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueAdded.Result).Value);
            TideDataValue tideDataValueAdded = (TideDataValue)(((OkObjectResult)actionTideDataValueAdded.Result).Value);
            Assert.NotNull(tideDataValueAdded);

            // Update TideDataValue
            var actionTideDataValueUpdated = await tideDataValueService.Update(tideDataValue);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueUpdated.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueUpdated.Result).Value);
            TideDataValue tideDataValueUpdated = (TideDataValue)(((OkObjectResult)actionTideDataValueUpdated.Result).Value);
            Assert.NotNull(tideDataValueUpdated);

            // Delete TideDataValue
            var actionTideDataValueDeleted = await tideDataValueService.Delete(tideDataValue);
            Assert.Equal(200, ((ObjectResult)actionTideDataValueDeleted.Result).StatusCode);
            Assert.NotNull(((OkObjectResult)actionTideDataValueDeleted.Result).Value);
            TideDataValue tideDataValueDeleted = (TideDataValue)(((OkObjectResult)actionTideDataValueDeleted.Result).Value);
            Assert.NotNull(tideDataValueDeleted);
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<ITideDataValueService, TideDataValueService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            tideDataValueService = Provider.GetService<ITideDataValueService>();
            Assert.NotNull(tideDataValueService);
        
            await tideDataValueService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private TideDataValue GetFilledRandomTideDataValue(string OmitPropName)
        {
            TideDataValue tideDataValue = new TideDataValue();

            if (OmitPropName != "TideSiteTVItemID") tideDataValue.TideSiteTVItemID = 38;
            if (OmitPropName != "DateTime_Local") tideDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") tideDataValue.Keep = true;
            if (OmitPropName != "TideDataType") tideDataValue.TideDataType = (TideDataTypeEnum)GetRandomEnumType(typeof(TideDataTypeEnum));
            if (OmitPropName != "StorageDataType") tideDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "Depth_m") tideDataValue.Depth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "UVelocity_m_s") tideDataValue.UVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "VVelocity_m_s") tideDataValue.VVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "TideStart") tideDataValue.TideStart = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "TideEnd") tideDataValue.TideEnd = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "LastUpdateDate_UTC") tideDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tideDataValue.LastUpdateContactTVItemID = 2;

            return tideDataValue;
        }
        #endregion Functions private
    }
}
