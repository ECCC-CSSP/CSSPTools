/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class VPAmbientServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IVPAmbientService vpAmbientService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public VPAmbientServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task VPAmbient_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               VPAmbient vpAmbient = GetFilledRandomVPAmbient(""); 

               // List<VPAmbient>
               var actionVPAmbientList = await vpAmbientService.GetVPAmbientList();
               Assert.Equal(200, ((ObjectResult)actionVPAmbientList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPAmbientList.Result).Value);
               List<VPAmbient> vpAmbientList = (List<VPAmbient>)(((OkObjectResult)actionVPAmbientList.Result).Value);

               int count = ((List<VPAmbient>)((OkObjectResult)actionVPAmbientList.Result).Value).Count();
                Assert.True(count > 0);

               // Add VPAmbient
               var actionVPAmbientAdded = await vpAmbientService.Add(vpAmbient);
               Assert.Equal(200, ((ObjectResult)actionVPAmbientAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPAmbientAdded.Result).Value);
               VPAmbient vpAmbientAdded = (VPAmbient)(((OkObjectResult)actionVPAmbientAdded.Result).Value);
               Assert.NotNull(vpAmbientAdded);

               // Update VPAmbient
               var actionVPAmbientUpdated = await vpAmbientService.Update(vpAmbient);
               Assert.Equal(200, ((ObjectResult)actionVPAmbientUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPAmbientUpdated.Result).Value);
               VPAmbient vpAmbientUpdated = (VPAmbient)(((OkObjectResult)actionVPAmbientUpdated.Result).Value);
               Assert.NotNull(vpAmbientUpdated);

               // Delete VPAmbient
               var actionVPAmbientDeleted = await vpAmbientService.Delete(vpAmbient);
               Assert.Equal(200, ((ObjectResult)actionVPAmbientDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPAmbientDeleted.Result).Value);
               VPAmbient vpAmbientDeleted = (VPAmbient)(((OkObjectResult)actionVPAmbientDeleted.Result).Value);
               Assert.NotNull(vpAmbientDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IVPAmbientService, VPAmbientService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            vpAmbientService = Provider.GetService<IVPAmbientService>();
            Assert.NotNull(vpAmbientService);
        
            await vpAmbientService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private VPAmbient GetFilledRandomVPAmbient(string OmitPropName)
        {
            VPAmbient vpAmbient = new VPAmbient();

            if (OmitPropName != "VPScenarioID") vpAmbient.VPScenarioID = 1;
            if (OmitPropName != "Row") vpAmbient.Row = GetRandomInt(0, 10);
            if (OmitPropName != "MeasurementDepth_m") vpAmbient.MeasurementDepth_m = GetRandomDouble(0.0D, 1000.0D);
            if (OmitPropName != "CurrentSpeed_m_s") vpAmbient.CurrentSpeed_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "CurrentDirection_deg") vpAmbient.CurrentDirection_deg = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "AmbientSalinity_PSU") vpAmbient.AmbientSalinity_PSU = GetRandomDouble(0.0D, 40.0D);
            if (OmitPropName != "AmbientTemperature_C") vpAmbient.AmbientTemperature_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "BackgroundConcentration_MPN_100ml") vpAmbient.BackgroundConcentration_MPN_100ml = GetRandomInt(0, 10000000);
            if (OmitPropName != "PollutantDecayRate_per_day") vpAmbient.PollutantDecayRate_per_day = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "FarFieldCurrentSpeed_m_s") vpAmbient.FarFieldCurrentSpeed_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "FarFieldCurrentDirection_deg") vpAmbient.FarFieldCurrentDirection_deg = GetRandomDouble(-180.0D, 180.0D);
            if (OmitPropName != "FarFieldDiffusionCoefficient") vpAmbient.FarFieldDiffusionCoefficient = GetRandomDouble(0.0D, 1.0D);
            if (OmitPropName != "LastUpdateDate_UTC") vpAmbient.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") vpAmbient.LastUpdateContactTVItemID = 2;

            return vpAmbient;
        }
        #endregion Functions private
    }
}
