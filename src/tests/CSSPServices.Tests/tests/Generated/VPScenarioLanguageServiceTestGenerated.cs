/* Auto generated from C:\CSSPTools\src\codegen\ServicesClassNameServiceTestGenerated\bin\Debug\netcoreapp3.1\ServicesClassNameServiceTestGenerated.exe
 *
 * Do not edit this file.
 *
 */ 

using CSSPEnums;
using CSSPModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Transactions;
using Xunit;

namespace CSSPServices.Tests
{
    public partial class VPScenarioLanguageServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        private IConfiguration Config { get; set; }
        private IServiceProvider Provider { get; set; }
        private IServiceCollection Services { get; set; }
        private IVPScenarioLanguageService vpScenarioLanguageService { get; set; }
        private CSSPDBContext db { get; set; }
        #endregion Properties

        #region Constructors
        public VPScenarioLanguageServiceTest() : base()
        {

        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Theory]
        [InlineData("en-CA")]
        [InlineData("fr-CA")]
        public async Task VPScenarioLanguage_CRUD_Good_Test(string culture)
        {
            // -------------------------------
            // -------------------------------
            // CRUD testing
            // -------------------------------
            // -------------------------------

            await Setup(new CultureInfo(culture));

            using (TransactionScope ts = new TransactionScope())
            {
               VPScenarioLanguage vpScenarioLanguage = GetFilledRandomVPScenarioLanguage(""); 

               // List<VPScenarioLanguage>
               var actionVPScenarioLanguageList = await vpScenarioLanguageService.GetVPScenarioLanguageList();
               Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageList.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageList.Result).Value);
               List<VPScenarioLanguage> vpScenarioLanguageList = (List<VPScenarioLanguage>)(((OkObjectResult)actionVPScenarioLanguageList.Result).Value);

               int count = ((List<VPScenarioLanguage>)((OkObjectResult)actionVPScenarioLanguageList.Result).Value).Count();
                Assert.True(count > 0);

               // Add VPScenarioLanguage
               var actionVPScenarioLanguageAdded = await vpScenarioLanguageService.Add(vpScenarioLanguage);
               Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageAdded.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageAdded.Result).Value);
               VPScenarioLanguage vpScenarioLanguageAdded = (VPScenarioLanguage)(((OkObjectResult)actionVPScenarioLanguageAdded.Result).Value);
               Assert.NotNull(vpScenarioLanguageAdded);

               // Update VPScenarioLanguage
               var actionVPScenarioLanguageUpdated = await vpScenarioLanguageService.Update(vpScenarioLanguage);
               Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageUpdated.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageUpdated.Result).Value);
               VPScenarioLanguage vpScenarioLanguageUpdated = (VPScenarioLanguage)(((OkObjectResult)actionVPScenarioLanguageUpdated.Result).Value);
               Assert.NotNull(vpScenarioLanguageUpdated);

               // Delete VPScenarioLanguage
               var actionVPScenarioLanguageDeleted = await vpScenarioLanguageService.Delete(vpScenarioLanguage);
               Assert.Equal(200, ((ObjectResult)actionVPScenarioLanguageDeleted.Result).StatusCode);
               Assert.NotNull(((OkObjectResult)actionVPScenarioLanguageDeleted.Result).Value);
               VPScenarioLanguage vpScenarioLanguageDeleted = (VPScenarioLanguage)(((OkObjectResult)actionVPScenarioLanguageDeleted.Result).Value);
               Assert.NotNull(vpScenarioLanguageDeleted);
            }
        }
        #endregion Tests Generated CRUD

        #region Functions private
        private async Task<bool> Setup(CultureInfo culture)
        {
            Config = new ConfigurationBuilder()
               .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
               .AddJsonFile("appsettings.json")
               .Build();
        
            Services = new ServiceCollection();
        
            Services.AddSingleton<IConfiguration>(Config);
        
            string TestDBConnString = Config.GetValue<string>("TestDBConnectionString");
            Assert.NotNull(TestDBConnString);
        
            Services.AddDbContext<CSSPDBContext>(options =>
            {
                options.UseSqlServer(TestDBConnString);
            });
        
            Services.AddSingleton<IEnums, Enums>();
            Services.AddSingleton<IVPScenarioLanguageService, VPScenarioLanguageService>();
        
            Provider = Services.BuildServiceProvider();
            Assert.NotNull(Provider);
        
            vpScenarioLanguageService = Provider.GetService<IVPScenarioLanguageService>();
            Assert.NotNull(vpScenarioLanguageService);
        
            await vpScenarioLanguageService.SetCulture(culture);
        
            return await Task.FromResult(true);
        }
        private VPScenarioLanguage GetFilledRandomVPScenarioLanguage(string OmitPropName)
        {
            VPScenarioLanguage vpScenarioLanguage = new VPScenarioLanguage();

            if (OmitPropName != "VPScenarioID") vpScenarioLanguage.VPScenarioID = 1;
            if (OmitPropName != "Language") vpScenarioLanguage.Language = LanguageRequest;
            if (OmitPropName != "VPScenarioName") vpScenarioLanguage.VPScenarioName = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatus") vpScenarioLanguage.TranslationStatus = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") vpScenarioLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") vpScenarioLanguage.LastUpdateContactTVItemID = 2;

            return vpScenarioLanguage;
        }
        #endregion Functions private
    }
}
