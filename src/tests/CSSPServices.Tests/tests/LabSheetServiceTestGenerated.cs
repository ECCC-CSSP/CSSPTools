 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class LabSheetServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private LabSheetService labSheetService { get; set; }
        #endregion Properties

        #region Constructors
        public LabSheetServiceTest() : base()
        {
            //labSheetService = new LabSheetService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void LabSheet_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    LabSheet labSheet = GetFilledRandomLabSheet("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = labSheetService.GetLabSheetList().Count();

                    Assert.Equal(count, (from c in dbTestDB.LabSheets select c).Count());

                    labSheetService.Add(labSheet);
                    if (labSheet.HasErrors)
                    {
                        Assert.Equal("", labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(labSheetService.GetLabSheetList().Where(c => c == labSheet).Any());
                    labSheetService.Update(labSheet);
                    if (labSheet.HasErrors)
                    {
                        Assert.Equal("", labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, labSheetService.GetLabSheetList().Count());
                    labSheetService.Delete(labSheet);
                    if (labSheet.HasErrors)
                    {
                        Assert.Equal("", labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, labSheetService.GetLabSheetList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void LabSheet_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = labSheetService.GetLabSheetList().Count();

                    LabSheet labSheet = GetFilledRandomLabSheet("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // labSheet.LabSheetID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LabSheetID = 0;
                    labSheetService.Update(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LabSheetID"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LabSheetID = 10000000;
                    labSheetService.Update(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "LabSheet", "LabSheetID", labSheet.LabSheetID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, -1)]
                    // labSheet.OtherServerLabSheetID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.OtherServerLabSheetID = 0;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._MinValueIs_, "OtherServerLabSheetID", "1"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "SamplingPlan", ExistPlurial = "s", ExistFieldID = "SamplingPlanID", AllowableTVtypeList = )]
                    // labSheet.SamplingPlanID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SamplingPlanID = 0;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "SamplingPlan", "SamplingPlanID", labSheet.SamplingPlanID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(250, MinimumLength = 1)]
                    // labSheet.SamplingPlanName   (String)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("SamplingPlanName");
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(1, (int)labSheet.ValidationResults.Count());
                    Assert.True(labSheet.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "SamplingPlanName")).Any());
                    Assert.Null(labSheet.SamplingPlanName);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SamplingPlanName = GetRandomString("", 251);
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._LengthShouldBeBetween_And_, "SamplingPlanName", "1", "250"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1980, -1)]
                    // labSheet.Year   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.Year = 1979;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._MinValueIs_, "Year", "1980"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 12)]
                    // labSheet.Month   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.Month = 0;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Month", "1", "12"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.Month = 13;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Month", "1", "12"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 31)]
                    // labSheet.Day   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.Day = 0;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Day", "1", "31"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.Day = 32;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Day", "1", "31"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 100)]
                    // labSheet.RunNumber   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.RunNumber = 0;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RunNumber", "1", "100"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.RunNumber = 101;
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RunNumber", "1", "100"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
                    // labSheet.SubsectorTVItemID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SubsectorTVItemID = 0;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "SubsectorTVItemID", labSheet.SubsectorTVItemID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SubsectorTVItemID = 1;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
                    // labSheet.MWQMRunTVItemID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.MWQMRunTVItemID = 0;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "MWQMRunTVItemID", labSheet.MWQMRunTVItemID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.MWQMRunTVItemID = 1;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "MWQMRunTVItemID", "MWQMRun"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // labSheet.SamplingPlanType   (SamplingPlanTypeEnum)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SamplingPlanType = (SamplingPlanTypeEnum)1000000;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SamplingPlanType"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // labSheet.SampleType   (SampleTypeEnum)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.SampleType = (SampleTypeEnum)1000000;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SampleType"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // labSheet.LabSheetType   (LabSheetTypeEnum)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LabSheetType = (LabSheetTypeEnum)1000000;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LabSheetType"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // labSheet.LabSheetStatus   (LabSheetStatusEnum)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LabSheetStatus = (LabSheetStatusEnum)1000000;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LabSheetStatus"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(250, MinimumLength = 1)]
                    // labSheet.FileName   (String)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("FileName");
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(1, (int)labSheet.ValidationResults.Count());
                    Assert.True(labSheet.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "FileName")).Any());
                    Assert.Null(labSheet.FileName);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.FileName = GetRandomString("", 251);
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._LengthShouldBeBetween_And_, "FileName", "1", "250"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // labSheet.FileLastModifiedDate_Local   (DateTime)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.FileLastModifiedDate_Local = new DateTime();
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "FileLastModifiedDate_Local"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.FileLastModifiedDate_Local = new DateTime(1979, 1, 1);
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "FileLastModifiedDate_Local", "1980"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // labSheet.FileContent   (String)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("FileContent");
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(1, (int)labSheet.ValidationResults.Count());
                    Assert.True(labSheet.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "FileContent")).Any());
                    Assert.Null(labSheet.FileContent);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // labSheet.AcceptedOrRejectedByContactTVItemID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.AcceptedOrRejectedByContactTVItemID = 0;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "AcceptedOrRejectedByContactTVItemID", labSheet.AcceptedOrRejectedByContactTVItemID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.AcceptedOrRejectedByContactTVItemID = 1;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "AcceptedOrRejectedByContactTVItemID", "Contact"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // labSheet.AcceptedOrRejectedDateTime   (DateTime)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.AcceptedOrRejectedDateTime = new DateTime(1979, 1, 1);
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "AcceptedOrRejectedDateTime", "1980"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [StringLength(250))]
                    // labSheet.RejectReason   (String)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.RejectReason = GetRandomString("", 251);
                    Assert.False(labSheetService.Add(labSheet));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "RejectReason", "250"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)labSheetService.GetLabSheetList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // labSheet.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LastUpdateDate_UTC = new DateTime();
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);
                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // labSheet.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LastUpdateContactTVItemID = 0;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", labSheet.LastUpdateContactTVItemID.ToString()), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);

                    labSheet = null;
                    labSheet = GetFilledRandomLabSheet("");
                    labSheet.LastUpdateContactTVItemID = 1;
                    labSheetService.Add(labSheet);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), labSheet.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // labSheet.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // labSheet.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetLabSheetWithLabSheetID(labSheet.LabSheetID)
        [Fact]
        public void GetLabSheetWithLabSheetID__labSheet_LabSheetID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    LabSheet labSheet = (from c in dbTestDB.LabSheets select c).FirstOrDefault();
                    Assert.NotNull(labSheet);

                }
            }
        }
        #endregion Tests Generated for GetLabSheetWithLabSheetID(labSheet.LabSheetID)

        #region Tests Generated for GetLabSheetList()
        [Fact]
        public void GetLabSheetList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    LabSheet labSheet = (from c in dbTestDB.LabSheets select c).FirstOrDefault();
                    Assert.NotNull(labSheet);

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetLabSheetList()

        #region Tests Generated for GetLabSheetList() Skip Take
        [Fact]
        public void GetLabSheetList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Skip(1).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take

        #region Tests Generated for GetLabSheetList() Skip Take Asc
        [Fact]
        public void GetLabSheetList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 1, 1,  "LabSheetID", "", "");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).OrderBy(c => c.LabSheetID).Skip(1).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Asc

        #region Tests Generated for GetLabSheetList() Skip Take 2 Asc
        [Fact]
        public void GetLabSheetList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 1, 1, "LabSheetID,OtherServerLabSheetID", "", "");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).OrderBy(c => c.LabSheetID).ThenBy(c => c.OtherServerLabSheetID).Skip(1).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take 2 Asc

        #region Tests Generated for GetLabSheetList() Skip Take Asc Where
        [Fact]
        public void GetLabSheetList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 0, 1, "LabSheetID", "", "LabSheetID,EQ,4");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Where(c => c.LabSheetID == 4).OrderBy(c => c.LabSheetID).Skip(0).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Asc Where

        #region Tests Generated for GetLabSheetList() Skip Take Asc 2 Where
        [Fact]
        public void GetLabSheetList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 0, 1, "LabSheetID", "", "LabSheetID,GT,2|LabSheetID,LT,5");

                     List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                     labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Where(c => c.LabSheetID > 2 && c.LabSheetID < 5).Skip(0).Take(1).OrderBy(c => c.LabSheetID).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Asc 2 Where

        #region Tests Generated for GetLabSheetList() Skip Take Desc
        [Fact]
        public void GetLabSheetList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 1, 1, "", "LabSheetID", "");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).OrderByDescending(c => c.LabSheetID).Skip(1).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Desc

        #region Tests Generated for GetLabSheetList() Skip Take 2 Desc
        [Fact]
        public void GetLabSheetList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 1, 1, "", "LabSheetID,OtherServerLabSheetID", "");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).OrderByDescending(c => c.LabSheetID).ThenByDescending(c => c.OtherServerLabSheetID).Skip(1).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take 2 Desc

        #region Tests Generated for GetLabSheetList() Skip Take Desc Where
        [Fact]
        public void GetLabSheetList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 0, 1, "LabSheetID", "", "LabSheetID,EQ,4");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Where(c => c.LabSheetID == 4).OrderByDescending(c => c.LabSheetID).Skip(0).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Desc Where

        #region Tests Generated for GetLabSheetList() Skip Take Desc 2 Where
        [Fact]
        public void GetLabSheetList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 0, 1, "", "LabSheetID", "LabSheetID,GT,2|LabSheetID,LT,5");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Where(c => c.LabSheetID > 2 && c.LabSheetID < 5).OrderByDescending(c => c.LabSheetID).Skip(0).Take(1).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() Skip Take Desc 2 Where

        #region Tests Generated for GetLabSheetList() 2 Where
        [Fact]
        public void GetLabSheetList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    LabSheetService labSheetService = new LabSheetService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    labSheetService.Query = labSheetService.FillQuery(typeof(LabSheet), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "LabSheetID,GT,2|LabSheetID,LT,5");

                    List<LabSheet> labSheetDirectQueryList = new List<LabSheet>();
                    labSheetDirectQueryList = (from c in dbTestDB.LabSheets select c).Where(c => c.LabSheetID > 2 && c.LabSheetID < 5).ToList();

                        List<LabSheet> labSheetList = new List<LabSheet>();
                        labSheetList = labSheetService.GetLabSheetList().ToList();
                        CheckLabSheetFields(labSheetList);
                        Assert.Equal(labSheetDirectQueryList[0].LabSheetID, labSheetList[0].LabSheetID);
                }
            }
        }
        #endregion Tests Generated for GetLabSheetList() 2 Where

        #region Functions private
        private void CheckLabSheetFields(List<LabSheet> labSheetList)
        {
            Assert.False(string.IsNullOrWhiteSpace(labSheetList[0].SamplingPlanName));
            if (labSheetList[0].MWQMRunTVItemID != null)
            {
                Assert.NotNull(labSheetList[0].MWQMRunTVItemID);
            }
            Assert.False(string.IsNullOrWhiteSpace(labSheetList[0].FileName));
            Assert.False(string.IsNullOrWhiteSpace(labSheetList[0].FileContent));
            if (labSheetList[0].AcceptedOrRejectedByContactTVItemID != null)
            {
                Assert.NotNull(labSheetList[0].AcceptedOrRejectedByContactTVItemID);
            }
            if (labSheetList[0].AcceptedOrRejectedDateTime != null)
            {
                Assert.NotNull(labSheetList[0].AcceptedOrRejectedDateTime);
            }
            if (!string.IsNullOrWhiteSpace(labSheetList[0].RejectReason))
            {
                Assert.False(string.IsNullOrWhiteSpace(labSheetList[0].RejectReason));
            }
        }
        private LabSheet GetFilledRandomLabSheet(string OmitPropName)
        {
            LabSheet labSheet = new LabSheet();

            if (OmitPropName != "OtherServerLabSheetID") labSheet.OtherServerLabSheetID = GetRandomInt(1, 11);
            if (OmitPropName != "SamplingPlanID") labSheet.SamplingPlanID = 1;
            if (OmitPropName != "SamplingPlanName") labSheet.SamplingPlanName = GetRandomString("", 6);
            if (OmitPropName != "Year") labSheet.Year = GetRandomInt(1980, 1990);
            if (OmitPropName != "Month") labSheet.Month = GetRandomInt(1, 12);
            if (OmitPropName != "Day") labSheet.Day = GetRandomInt(1, 31);
            if (OmitPropName != "RunNumber") labSheet.RunNumber = GetRandomInt(1, 100);
            if (OmitPropName != "SubsectorTVItemID") labSheet.SubsectorTVItemID = 11;
            if (OmitPropName != "MWQMRunTVItemID") labSheet.MWQMRunTVItemID = 50;
            if (OmitPropName != "SamplingPlanType") labSheet.SamplingPlanType = (SamplingPlanTypeEnum)GetRandomEnumType(typeof(SamplingPlanTypeEnum));
            if (OmitPropName != "SampleType") labSheet.SampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "LabSheetType") labSheet.LabSheetType = (LabSheetTypeEnum)GetRandomEnumType(typeof(LabSheetTypeEnum));
            if (OmitPropName != "LabSheetStatus") labSheet.LabSheetStatus = (LabSheetStatusEnum)GetRandomEnumType(typeof(LabSheetStatusEnum));
            if (OmitPropName != "FileName") labSheet.FileName = GetRandomString("", 6);
            if (OmitPropName != "FileLastModifiedDate_Local") labSheet.FileLastModifiedDate_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "FileContent") labSheet.FileContent = GetRandomString("", 20);
            if (OmitPropName != "AcceptedOrRejectedByContactTVItemID") labSheet.AcceptedOrRejectedByContactTVItemID = 2;
            if (OmitPropName != "AcceptedOrRejectedDateTime") labSheet.AcceptedOrRejectedDateTime = new DateTime(2005, 3, 6);
            if (OmitPropName != "RejectReason") labSheet.RejectReason = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") labSheet.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") labSheet.LastUpdateContactTVItemID = 2;

            return labSheet;
        }
        #endregion Functions private
    }
}
