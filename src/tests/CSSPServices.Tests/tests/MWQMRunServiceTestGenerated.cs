 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class MWQMRunServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private MWQMRunService mwqmRunService { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMRunServiceTest() : base()
        {
            //mwqmRunService = new MWQMRunService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void MWQMRun_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    MWQMRun mwqmRun = GetFilledRandomMWQMRun("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = mwqmRunService.GetMWQMRunList().Count();

                    Assert.Equal(count, (from c in dbTestDB.MWQMRuns select c).Count());

                    mwqmRunService.Add(mwqmRun);
                    if (mwqmRun.HasErrors)
                    {
                        Assert.Equal("", mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(mwqmRunService.GetMWQMRunList().Where(c => c == mwqmRun).Any());
                    mwqmRunService.Update(mwqmRun);
                    if (mwqmRun.HasErrors)
                    {
                        Assert.Equal("", mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRunService.Delete(mwqmRun);
                    if (mwqmRun.HasErrors)
                    {
                        Assert.Equal("", mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void MWQMRun_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = mwqmRunService.GetMWQMRunList().Count();

                    MWQMRun mwqmRun = GetFilledRandomMWQMRun("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // mwqmRun.MWQMRunID   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.MWQMRunID = 0;
                    mwqmRunService.Update(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "MWQMRunID"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.MWQMRunID = 10000000;
                    mwqmRunService.Update(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "MWQMRun", "MWQMRunID", mwqmRun.MWQMRunID.ToString()), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Subsector)]
                    // mwqmRun.SubsectorTVItemID   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SubsectorTVItemID = 0;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "SubsectorTVItemID", mwqmRun.SubsectorTVItemID.ToString()), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SubsectorTVItemID = 1;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "SubsectorTVItemID", "Subsector"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMRun)]
                    // mwqmRun.MWQMRunTVItemID   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.MWQMRunTVItemID = 0;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "MWQMRunTVItemID", mwqmRun.MWQMRunTVItemID.ToString()), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.MWQMRunTVItemID = 1;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "MWQMRunTVItemID", "MWQMRun"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // mwqmRun.RunSampleType   (SampleTypeEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RunSampleType = (SampleTypeEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "RunSampleType"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.DateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.DateTime_Local = new DateTime();
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "DateTime_Local"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.DateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "DateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 1000)]
                    // mwqmRun.RunNumber   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RunNumber = 0;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RunNumber", "1", "1000"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RunNumber = 1001;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RunNumber", "1", "1000"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.StartDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.StartDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "StartDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // [CSSPBigger(OtherField = StartDateTime_Local)]
                    // mwqmRun.EndDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.EndDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "EndDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LabReceivedDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabReceivedDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LabReceivedDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [Range(-10, 40)]
                    // mwqmRun.TemperatureControl1_C   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [TemperatureControl1_C]

                    //CSSPError: Type not implemented [TemperatureControl1_C]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.TemperatureControl1_C = -11.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "TemperatureControl1_C", "-10", "40"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.TemperatureControl1_C = 41.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "TemperatureControl1_C", "-10", "40"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(-10, 40)]
                    // mwqmRun.TemperatureControl2_C   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [TemperatureControl2_C]

                    //CSSPError: Type not implemented [TemperatureControl2_C]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.TemperatureControl2_C = -11.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "TemperatureControl2_C", "-10", "40"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.TemperatureControl2_C = 41.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "TemperatureControl2_C", "-10", "40"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.SeaStateAtStart_BeaufortScale   (BeaufortScaleEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SeaStateAtStart_BeaufortScale = (BeaufortScaleEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SeaStateAtStart_BeaufortScale"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.SeaStateAtEnd_BeaufortScale   (BeaufortScaleEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SeaStateAtEnd_BeaufortScale = (BeaufortScaleEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SeaStateAtEnd_BeaufortScale"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 100)]
                    // mwqmRun.WaterLevelAtBrook_m   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [WaterLevelAtBrook_m]

                    //CSSPError: Type not implemented [WaterLevelAtBrook_m]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaterLevelAtBrook_m = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaterLevelAtBrook_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaterLevelAtBrook_m = 101.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaterLevelAtBrook_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 100)]
                    // mwqmRun.WaveHightAtStart_m   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [WaveHightAtStart_m]

                    //CSSPError: Type not implemented [WaveHightAtStart_m]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaveHightAtStart_m = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaveHightAtStart_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaveHightAtStart_m = 101.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaveHightAtStart_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 100)]
                    // mwqmRun.WaveHightAtEnd_m   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [WaveHightAtEnd_m]

                    //CSSPError: Type not implemented [WaveHightAtEnd_m]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaveHightAtEnd_m = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaveHightAtEnd_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.WaveHightAtEnd_m = 101.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "WaveHightAtEnd_m", "0", "100"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [StringLength(20))]
                    // mwqmRun.SampleCrewInitials   (String)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SampleCrewInitials = GetRandomString("", 21);
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "SampleCrewInitials", "20"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.AnalyzeMethod   (AnalyzeMethodEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.AnalyzeMethod = (AnalyzeMethodEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "AnalyzeMethod"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.SampleMatrix   (SampleMatrixEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SampleMatrix = (SampleMatrixEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SampleMatrix"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.Laboratory   (LaboratoryEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.Laboratory = (LaboratoryEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Laboratory"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.SampleStatus   (SampleStatusEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.SampleStatus = (SampleStatusEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SampleStatus"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // mwqmRun.LabSampleApprovalContactTVItemID   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabSampleApprovalContactTVItemID = 0;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LabSampleApprovalContactTVItemID", mwqmRun.LabSampleApprovalContactTVItemID.ToString()), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabSampleApprovalContactTVItemID = 1;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LabSampleApprovalContactTVItemID", "Contact"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LabAnalyzeBath1IncubationStartDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabAnalyzeBath1IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LabAnalyzeBath1IncubationStartDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LabAnalyzeBath2IncubationStartDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabAnalyzeBath2IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LabAnalyzeBath2IncubationStartDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LabAnalyzeBath3IncubationStartDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabAnalyzeBath3IncubationStartDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LabAnalyzeBath3IncubationStartDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LabRunSampleApprovalDateTime_Local   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LabRunSampleApprovalDateTime_Local = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LabRunSampleApprovalDateTime_Local", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.Tide_Start   (TideTextEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.Tide_Start = (TideTextEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Tide_Start"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // mwqmRun.Tide_End   (TideTextEnum)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.Tide_End = (TideTextEnum)1000000;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Tide_End"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay0_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay0_mm]

                    //CSSPError: Type not implemented [RainDay0_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay0_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay0_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay0_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay0_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay1_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay1_mm]

                    //CSSPError: Type not implemented [RainDay1_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay1_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay1_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay1_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay1_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay2_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay2_mm]

                    //CSSPError: Type not implemented [RainDay2_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay2_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay2_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay2_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay2_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay3_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay3_mm]

                    //CSSPError: Type not implemented [RainDay3_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay3_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay3_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay3_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay3_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay4_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay4_mm]

                    //CSSPError: Type not implemented [RainDay4_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay4_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay4_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay4_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay4_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay5_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay5_mm]

                    //CSSPError: Type not implemented [RainDay5_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay5_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay5_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay5_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay5_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay6_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay6_mm]

                    //CSSPError: Type not implemented [RainDay6_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay6_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay6_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay6_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay6_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay7_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay7_mm]

                    //CSSPError: Type not implemented [RainDay7_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay7_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay7_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay7_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay7_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay8_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay8_mm]

                    //CSSPError: Type not implemented [RainDay8_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay8_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay8_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay8_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay8_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay9_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay9_mm]

                    //CSSPError: Type not implemented [RainDay9_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay9_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay9_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay9_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay9_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [Range(0, 300)]
                    // mwqmRun.RainDay10_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainDay10_mm]

                    //CSSPError: Type not implemented [RainDay10_mm]

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay10_mm = -1.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay10_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.RainDay10_mm = 301.0D;
                    Assert.False(mwqmRunService.Add(mwqmRun));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainDay10_mm", "0", "300"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, mwqmRunService.GetMWQMRunList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // mwqmRun.RemoveFromStat   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // mwqmRun.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LastUpdateDate_UTC = new DateTime();
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);
                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // mwqmRun.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LastUpdateContactTVItemID = 0;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", mwqmRun.LastUpdateContactTVItemID.ToString()), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);

                    mwqmRun = null;
                    mwqmRun = GetFilledRandomMWQMRun("");
                    mwqmRun.LastUpdateContactTVItemID = 1;
                    mwqmRunService.Add(mwqmRun);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), mwqmRun.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // mwqmRun.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // mwqmRun.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetMWQMRunWithMWQMRunID(mwqmRun.MWQMRunID)
        [Fact]
        public void GetMWQMRunWithMWQMRunID__mwqmRun_MWQMRunID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    MWQMRun mwqmRun = (from c in dbTestDB.MWQMRuns select c).FirstOrDefault();
                    Assert.NotNull(mwqmRun);

                }
            }
        }
        #endregion Tests Generated for GetMWQMRunWithMWQMRunID(mwqmRun.MWQMRunID)

        #region Tests Generated for GetMWQMRunList()
        [Fact]
        public void GetMWQMRunList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    MWQMRun mwqmRun = (from c in dbTestDB.MWQMRuns select c).FirstOrDefault();
                    Assert.NotNull(mwqmRun);

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList()

        #region Tests Generated for GetMWQMRunList() Skip Take
        [Fact]
        public void GetMWQMRunList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Skip(1).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take

        #region Tests Generated for GetMWQMRunList() Skip Take Asc
        [Fact]
        public void GetMWQMRunList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 1, 1,  "MWQMRunID", "", "");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).OrderBy(c => c.MWQMRunID).Skip(1).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Asc

        #region Tests Generated for GetMWQMRunList() Skip Take 2 Asc
        [Fact]
        public void GetMWQMRunList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 1, 1, "MWQMRunID,SubsectorTVItemID", "", "");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).OrderBy(c => c.MWQMRunID).ThenBy(c => c.SubsectorTVItemID).Skip(1).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take 2 Asc

        #region Tests Generated for GetMWQMRunList() Skip Take Asc Where
        [Fact]
        public void GetMWQMRunList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 0, 1, "MWQMRunID", "", "MWQMRunID,EQ,4");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Where(c => c.MWQMRunID == 4).OrderBy(c => c.MWQMRunID).Skip(0).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Asc Where

        #region Tests Generated for GetMWQMRunList() Skip Take Asc 2 Where
        [Fact]
        public void GetMWQMRunList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 0, 1, "MWQMRunID", "", "MWQMRunID,GT,2|MWQMRunID,LT,5");

                     List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                     mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Where(c => c.MWQMRunID > 2 && c.MWQMRunID < 5).Skip(0).Take(1).OrderBy(c => c.MWQMRunID).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Asc 2 Where

        #region Tests Generated for GetMWQMRunList() Skip Take Desc
        [Fact]
        public void GetMWQMRunList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 1, 1, "", "MWQMRunID", "");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).OrderByDescending(c => c.MWQMRunID).Skip(1).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Desc

        #region Tests Generated for GetMWQMRunList() Skip Take 2 Desc
        [Fact]
        public void GetMWQMRunList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 1, 1, "", "MWQMRunID,SubsectorTVItemID", "");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).OrderByDescending(c => c.MWQMRunID).ThenByDescending(c => c.SubsectorTVItemID).Skip(1).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take 2 Desc

        #region Tests Generated for GetMWQMRunList() Skip Take Desc Where
        [Fact]
        public void GetMWQMRunList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 0, 1, "MWQMRunID", "", "MWQMRunID,EQ,4");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Where(c => c.MWQMRunID == 4).OrderByDescending(c => c.MWQMRunID).Skip(0).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Desc Where

        #region Tests Generated for GetMWQMRunList() Skip Take Desc 2 Where
        [Fact]
        public void GetMWQMRunList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 0, 1, "", "MWQMRunID", "MWQMRunID,GT,2|MWQMRunID,LT,5");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Where(c => c.MWQMRunID > 2 && c.MWQMRunID < 5).OrderByDescending(c => c.MWQMRunID).Skip(0).Take(1).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() Skip Take Desc 2 Where

        #region Tests Generated for GetMWQMRunList() 2 Where
        [Fact]
        public void GetMWQMRunList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    MWQMRunService mwqmRunService = new MWQMRunService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    mwqmRunService.Query = mwqmRunService.FillQuery(typeof(MWQMRun), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "MWQMRunID,GT,2|MWQMRunID,LT,5");

                    List<MWQMRun> mwqmRunDirectQueryList = new List<MWQMRun>();
                    mwqmRunDirectQueryList = (from c in dbTestDB.MWQMRuns select c).Where(c => c.MWQMRunID > 2 && c.MWQMRunID < 5).ToList();

                        List<MWQMRun> mwqmRunList = new List<MWQMRun>();
                        mwqmRunList = mwqmRunService.GetMWQMRunList().ToList();
                        CheckMWQMRunFields(mwqmRunList);
                        Assert.Equal(mwqmRunDirectQueryList[0].MWQMRunID, mwqmRunList[0].MWQMRunID);
                }
            }
        }
        #endregion Tests Generated for GetMWQMRunList() 2 Where

        #region Functions private
        private void CheckMWQMRunFields(List<MWQMRun> mwqmRunList)
        {
            Assert.NotNull(mwqmRunList[0].MWQMRunID);
            Assert.NotNull(mwqmRunList[0].SubsectorTVItemID);
            Assert.NotNull(mwqmRunList[0].MWQMRunTVItemID);
            Assert.NotNull(mwqmRunList[0].RunSampleType);
            Assert.NotNull(mwqmRunList[0].DateTime_Local);
            Assert.NotNull(mwqmRunList[0].RunNumber);
            if (mwqmRunList[0].StartDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].StartDateTime_Local);
            }
            if (mwqmRunList[0].EndDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].EndDateTime_Local);
            }
            if (mwqmRunList[0].LabReceivedDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].LabReceivedDateTime_Local);
            }
            if (mwqmRunList[0].TemperatureControl1_C != null)
            {
                Assert.NotNull(mwqmRunList[0].TemperatureControl1_C);
            }
            if (mwqmRunList[0].TemperatureControl2_C != null)
            {
                Assert.NotNull(mwqmRunList[0].TemperatureControl2_C);
            }
            if (mwqmRunList[0].SeaStateAtStart_BeaufortScale != null)
            {
                Assert.NotNull(mwqmRunList[0].SeaStateAtStart_BeaufortScale);
            }
            if (mwqmRunList[0].SeaStateAtEnd_BeaufortScale != null)
            {
                Assert.NotNull(mwqmRunList[0].SeaStateAtEnd_BeaufortScale);
            }
            if (mwqmRunList[0].WaterLevelAtBrook_m != null)
            {
                Assert.NotNull(mwqmRunList[0].WaterLevelAtBrook_m);
            }
            if (mwqmRunList[0].WaveHightAtStart_m != null)
            {
                Assert.NotNull(mwqmRunList[0].WaveHightAtStart_m);
            }
            if (mwqmRunList[0].WaveHightAtEnd_m != null)
            {
                Assert.NotNull(mwqmRunList[0].WaveHightAtEnd_m);
            }
            if (!string.IsNullOrWhiteSpace(mwqmRunList[0].SampleCrewInitials))
            {
                Assert.False(string.IsNullOrWhiteSpace(mwqmRunList[0].SampleCrewInitials));
            }
            if (mwqmRunList[0].AnalyzeMethod != null)
            {
                Assert.NotNull(mwqmRunList[0].AnalyzeMethod);
            }
            if (mwqmRunList[0].SampleMatrix != null)
            {
                Assert.NotNull(mwqmRunList[0].SampleMatrix);
            }
            if (mwqmRunList[0].Laboratory != null)
            {
                Assert.NotNull(mwqmRunList[0].Laboratory);
            }
            if (mwqmRunList[0].SampleStatus != null)
            {
                Assert.NotNull(mwqmRunList[0].SampleStatus);
            }
            if (mwqmRunList[0].LabSampleApprovalContactTVItemID != null)
            {
                Assert.NotNull(mwqmRunList[0].LabSampleApprovalContactTVItemID);
            }
            if (mwqmRunList[0].LabAnalyzeBath1IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].LabAnalyzeBath1IncubationStartDateTime_Local);
            }
            if (mwqmRunList[0].LabAnalyzeBath2IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].LabAnalyzeBath2IncubationStartDateTime_Local);
            }
            if (mwqmRunList[0].LabAnalyzeBath3IncubationStartDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].LabAnalyzeBath3IncubationStartDateTime_Local);
            }
            if (mwqmRunList[0].LabRunSampleApprovalDateTime_Local != null)
            {
                Assert.NotNull(mwqmRunList[0].LabRunSampleApprovalDateTime_Local);
            }
            if (mwqmRunList[0].Tide_Start != null)
            {
                Assert.NotNull(mwqmRunList[0].Tide_Start);
            }
            if (mwqmRunList[0].Tide_End != null)
            {
                Assert.NotNull(mwqmRunList[0].Tide_End);
            }
            if (mwqmRunList[0].RainDay0_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay0_mm);
            }
            if (mwqmRunList[0].RainDay1_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay1_mm);
            }
            if (mwqmRunList[0].RainDay2_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay2_mm);
            }
            if (mwqmRunList[0].RainDay3_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay3_mm);
            }
            if (mwqmRunList[0].RainDay4_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay4_mm);
            }
            if (mwqmRunList[0].RainDay5_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay5_mm);
            }
            if (mwqmRunList[0].RainDay6_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay6_mm);
            }
            if (mwqmRunList[0].RainDay7_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay7_mm);
            }
            if (mwqmRunList[0].RainDay8_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay8_mm);
            }
            if (mwqmRunList[0].RainDay9_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay9_mm);
            }
            if (mwqmRunList[0].RainDay10_mm != null)
            {
                Assert.NotNull(mwqmRunList[0].RainDay10_mm);
            }
            if (mwqmRunList[0].RemoveFromStat != null)
            {
                Assert.NotNull(mwqmRunList[0].RemoveFromStat);
            }
            Assert.NotNull(mwqmRunList[0].LastUpdateDate_UTC);
            Assert.NotNull(mwqmRunList[0].LastUpdateContactTVItemID);
            Assert.NotNull(mwqmRunList[0].HasErrors);
        }
        private MWQMRun GetFilledRandomMWQMRun(string OmitPropName)
        {
            MWQMRun mwqmRun = new MWQMRun();

            if (OmitPropName != "SubsectorTVItemID") mwqmRun.SubsectorTVItemID = 11;
            if (OmitPropName != "MWQMRunTVItemID") mwqmRun.MWQMRunTVItemID = 50;
            if (OmitPropName != "RunSampleType") mwqmRun.RunSampleType = (SampleTypeEnum)GetRandomEnumType(typeof(SampleTypeEnum));
            if (OmitPropName != "DateTime_Local") mwqmRun.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "RunNumber") mwqmRun.RunNumber = GetRandomInt(1, 1000);
            if (OmitPropName != "StartDateTime_Local") mwqmRun.StartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDateTime_Local") mwqmRun.EndDateTime_Local = new DateTime(2005, 3, 7);
            if (OmitPropName != "LabReceivedDateTime_Local") mwqmRun.LabReceivedDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "TemperatureControl1_C") mwqmRun.TemperatureControl1_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "TemperatureControl2_C") mwqmRun.TemperatureControl2_C = GetRandomDouble(-10.0D, 40.0D);
            if (OmitPropName != "SeaStateAtStart_BeaufortScale") mwqmRun.SeaStateAtStart_BeaufortScale = (BeaufortScaleEnum)GetRandomEnumType(typeof(BeaufortScaleEnum));
            if (OmitPropName != "SeaStateAtEnd_BeaufortScale") mwqmRun.SeaStateAtEnd_BeaufortScale = (BeaufortScaleEnum)GetRandomEnumType(typeof(BeaufortScaleEnum));
            if (OmitPropName != "WaterLevelAtBrook_m") mwqmRun.WaterLevelAtBrook_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WaveHightAtStart_m") mwqmRun.WaveHightAtStart_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "WaveHightAtEnd_m") mwqmRun.WaveHightAtEnd_m = GetRandomDouble(0.0D, 100.0D);
            if (OmitPropName != "SampleCrewInitials") mwqmRun.SampleCrewInitials = GetRandomString("", 5);
            if (OmitPropName != "AnalyzeMethod") mwqmRun.AnalyzeMethod = (AnalyzeMethodEnum)GetRandomEnumType(typeof(AnalyzeMethodEnum));
            if (OmitPropName != "SampleMatrix") mwqmRun.SampleMatrix = (SampleMatrixEnum)GetRandomEnumType(typeof(SampleMatrixEnum));
            if (OmitPropName != "Laboratory") mwqmRun.Laboratory = (LaboratoryEnum)GetRandomEnumType(typeof(LaboratoryEnum));
            if (OmitPropName != "SampleStatus") mwqmRun.SampleStatus = (SampleStatusEnum)GetRandomEnumType(typeof(SampleStatusEnum));
            if (OmitPropName != "LabSampleApprovalContactTVItemID") mwqmRun.LabSampleApprovalContactTVItemID = 2;
            if (OmitPropName != "LabAnalyzeBath1IncubationStartDateTime_Local") mwqmRun.LabAnalyzeBath1IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabAnalyzeBath2IncubationStartDateTime_Local") mwqmRun.LabAnalyzeBath2IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabAnalyzeBath3IncubationStartDateTime_Local") mwqmRun.LabAnalyzeBath3IncubationStartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "LabRunSampleApprovalDateTime_Local") mwqmRun.LabRunSampleApprovalDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Tide_Start") mwqmRun.Tide_Start = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "Tide_End") mwqmRun.Tide_End = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "RainDay0_mm") mwqmRun.RainDay0_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay1_mm") mwqmRun.RainDay1_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay2_mm") mwqmRun.RainDay2_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay3_mm") mwqmRun.RainDay3_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay4_mm") mwqmRun.RainDay4_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay5_mm") mwqmRun.RainDay5_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay6_mm") mwqmRun.RainDay6_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay7_mm") mwqmRun.RainDay7_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay8_mm") mwqmRun.RainDay8_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay9_mm") mwqmRun.RainDay9_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RainDay10_mm") mwqmRun.RainDay10_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "RemoveFromStat") mwqmRun.RemoveFromStat = true;
            if (OmitPropName != "LastUpdateDate_UTC") mwqmRun.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") mwqmRun.LastUpdateContactTVItemID = 2;

            return mwqmRun;
        }
        #endregion Functions private
    }
}
