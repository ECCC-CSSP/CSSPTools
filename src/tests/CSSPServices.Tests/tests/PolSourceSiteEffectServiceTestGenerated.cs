 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class PolSourceSiteEffectServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private PolSourceSiteEffectService polSourceSiteEffectService { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceSiteEffectServiceTest() : base()
        {
            //polSourceSiteEffectService = new PolSourceSiteEffectService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void PolSourceSiteEffect_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    PolSourceSiteEffect polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = polSourceSiteEffectService.GetPolSourceSiteEffectList().Count();

                    Assert.Equal(count, (from c in dbTestDB.PolSourceSiteEffects select c).Count());

                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    if (polSourceSiteEffect.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(polSourceSiteEffectService.GetPolSourceSiteEffectList().Where(c => c == polSourceSiteEffect).Any());
                    polSourceSiteEffectService.Update(polSourceSiteEffect);
                    if (polSourceSiteEffect.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, polSourceSiteEffectService.GetPolSourceSiteEffectList().Count());
                    polSourceSiteEffectService.Delete(polSourceSiteEffect);
                    if (polSourceSiteEffect.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, polSourceSiteEffectService.GetPolSourceSiteEffectList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void PolSourceSiteEffect_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = polSourceSiteEffectService.GetPolSourceSiteEffectList().Count();

                    PolSourceSiteEffect polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // polSourceSiteEffect.PolSourceSiteEffectID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.PolSourceSiteEffectID = 0;
                    polSourceSiteEffectService.Update(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "PolSourceSiteEffectID"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.PolSourceSiteEffectID = 10000000;
                    polSourceSiteEffectService.Update(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceSiteEffect", "PolSourceSiteEffectID", polSourceSiteEffect.PolSourceSiteEffectID.ToString()), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Infrastructure,PolSourceSite)]
                    // polSourceSiteEffect.PolSourceSiteOrInfrastructureTVItemID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.PolSourceSiteOrInfrastructureTVItemID = 0;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "PolSourceSiteOrInfrastructureTVItemID", polSourceSiteEffect.PolSourceSiteOrInfrastructureTVItemID.ToString()), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.PolSourceSiteOrInfrastructureTVItemID = 1;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "PolSourceSiteOrInfrastructureTVItemID", "Infrastructure,PolSourceSite"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = MWQMSite)]
                    // polSourceSiteEffect.MWQMSiteTVItemID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.MWQMSiteTVItemID = 0;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "MWQMSiteTVItemID", polSourceSiteEffect.MWQMSiteTVItemID.ToString()), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.MWQMSiteTVItemID = 1;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "MWQMSiteTVItemID", "MWQMSite"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [StringLength(250))]
                    // polSourceSiteEffect.PolSourceSiteEffectTermIDs   (String)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.PolSourceSiteEffectTermIDs = GetRandomString("", 251);
                    Assert.False(polSourceSiteEffectService.Add(polSourceSiteEffect));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "PolSourceSiteEffectTermIDs", "250"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)polSourceSiteEffectService.GetPolSourceSiteEffectList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // polSourceSiteEffect.Comments   (String)
                    // -----------------------------------


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = File)]
                    // polSourceSiteEffect.AnalysisDocumentTVItemID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.AnalysisDocumentTVItemID = 0;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "AnalysisDocumentTVItemID", polSourceSiteEffect.AnalysisDocumentTVItemID.ToString()), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.AnalysisDocumentTVItemID = 1;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "AnalysisDocumentTVItemID", "File"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // polSourceSiteEffect.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.LastUpdateDate_UTC = new DateTime();
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);
                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // polSourceSiteEffect.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.LastUpdateContactTVItemID = 0;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", polSourceSiteEffect.LastUpdateContactTVItemID.ToString()), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffect = null;
                    polSourceSiteEffect = GetFilledRandomPolSourceSiteEffect("");
                    polSourceSiteEffect.LastUpdateContactTVItemID = 1;
                    polSourceSiteEffectService.Add(polSourceSiteEffect);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), polSourceSiteEffect.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceSiteEffect.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceSiteEffect.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetPolSourceSiteEffectWithPolSourceSiteEffectID(polSourceSiteEffect.PolSourceSiteEffectID)
        [Fact]
        public void GetPolSourceSiteEffectWithPolSourceSiteEffectID__polSourceSiteEffect_PolSourceSiteEffectID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceSiteEffect polSourceSiteEffect = (from c in dbTestDB.PolSourceSiteEffects select c).FirstOrDefault();
                    Assert.NotNull(polSourceSiteEffect);

                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectWithPolSourceSiteEffectID(polSourceSiteEffect.PolSourceSiteEffectID)

        #region Tests Generated for GetPolSourceSiteEffectList()
        [Fact]
        public void GetPolSourceSiteEffectList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceSiteEffect polSourceSiteEffect = (from c in dbTestDB.PolSourceSiteEffects select c).FirstOrDefault();
                    Assert.NotNull(polSourceSiteEffect);

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList()

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 1, 1,  "PolSourceSiteEffectID", "", "");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).OrderBy(c => c.PolSourceSiteEffectID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take 2 Asc
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 1, 1, "PolSourceSiteEffectID,PolSourceSiteOrInfrastructureTVItemID", "", "");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).OrderBy(c => c.PolSourceSiteEffectID).ThenBy(c => c.PolSourceSiteOrInfrastructureTVItemID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take 2 Asc

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc Where
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectID", "", "PolSourceSiteEffectID,EQ,4");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Where(c => c.PolSourceSiteEffectID == 4).OrderBy(c => c.PolSourceSiteEffectID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc Where

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc 2 Where
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectID", "", "PolSourceSiteEffectID,GT,2|PolSourceSiteEffectID,LT,5");

                     List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                     polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Where(c => c.PolSourceSiteEffectID > 2 && c.PolSourceSiteEffectID < 5).Skip(0).Take(1).OrderBy(c => c.PolSourceSiteEffectID).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Asc 2 Where

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceSiteEffectID", "");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).OrderByDescending(c => c.PolSourceSiteEffectID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take 2 Desc
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceSiteEffectID,PolSourceSiteOrInfrastructureTVItemID", "");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).OrderByDescending(c => c.PolSourceSiteEffectID).ThenByDescending(c => c.PolSourceSiteOrInfrastructureTVItemID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take 2 Desc

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc Where
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectID", "", "PolSourceSiteEffectID,EQ,4");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Where(c => c.PolSourceSiteEffectID == 4).OrderByDescending(c => c.PolSourceSiteEffectID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc Where

        #region Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc 2 Where
        [Fact]
        public void GetPolSourceSiteEffectList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 0, 1, "", "PolSourceSiteEffectID", "PolSourceSiteEffectID,GT,2|PolSourceSiteEffectID,LT,5");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Where(c => c.PolSourceSiteEffectID > 2 && c.PolSourceSiteEffectID < 5).OrderByDescending(c => c.PolSourceSiteEffectID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() Skip Take Desc 2 Where

        #region Tests Generated for GetPolSourceSiteEffectList() 2 Where
        [Fact]
        public void GetPolSourceSiteEffectList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectService polSourceSiteEffectService = new PolSourceSiteEffectService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectService.Query = polSourceSiteEffectService.FillQuery(typeof(PolSourceSiteEffect), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "PolSourceSiteEffectID,GT,2|PolSourceSiteEffectID,LT,5");

                    List<PolSourceSiteEffect> polSourceSiteEffectDirectQueryList = new List<PolSourceSiteEffect>();
                    polSourceSiteEffectDirectQueryList = (from c in dbTestDB.PolSourceSiteEffects select c).Where(c => c.PolSourceSiteEffectID > 2 && c.PolSourceSiteEffectID < 5).ToList();

                        List<PolSourceSiteEffect> polSourceSiteEffectList = new List<PolSourceSiteEffect>();
                        polSourceSiteEffectList = polSourceSiteEffectService.GetPolSourceSiteEffectList().ToList();
                        CheckPolSourceSiteEffectFields(polSourceSiteEffectList);
                        Assert.Equal(polSourceSiteEffectDirectQueryList[0].PolSourceSiteEffectID, polSourceSiteEffectList[0].PolSourceSiteEffectID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectList() 2 Where

        #region Functions private
        private void CheckPolSourceSiteEffectFields(List<PolSourceSiteEffect> polSourceSiteEffectList)
        {
            if (!string.IsNullOrWhiteSpace(polSourceSiteEffectList[0].PolSourceSiteEffectTermIDs))
            {
                Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectList[0].PolSourceSiteEffectTermIDs));
            }
            if (!string.IsNullOrWhiteSpace(polSourceSiteEffectList[0].Comments))
            {
                Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectList[0].Comments));
            }
            if (polSourceSiteEffectList[0].AnalysisDocumentTVItemID != null)
            {
                Assert.NotNull(polSourceSiteEffectList[0].AnalysisDocumentTVItemID);
            }
        }
        private PolSourceSiteEffect GetFilledRandomPolSourceSiteEffect(string OmitPropName)
        {
            PolSourceSiteEffect polSourceSiteEffect = new PolSourceSiteEffect();

            if (OmitPropName != "PolSourceSiteOrInfrastructureTVItemID") polSourceSiteEffect.PolSourceSiteOrInfrastructureTVItemID = 41;
            if (OmitPropName != "MWQMSiteTVItemID") polSourceSiteEffect.MWQMSiteTVItemID = 44;
            if (OmitPropName != "PolSourceSiteEffectTermIDs") polSourceSiteEffect.PolSourceSiteEffectTermIDs = GetRandomString("", 5);
            if (OmitPropName != "Comments") polSourceSiteEffect.Comments = GetRandomString("", 20);
            if (OmitPropName != "AnalysisDocumentTVItemID") polSourceSiteEffect.AnalysisDocumentTVItemID = 42;
            if (OmitPropName != "LastUpdateDate_UTC") polSourceSiteEffect.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceSiteEffect.LastUpdateContactTVItemID = 2;

            return polSourceSiteEffect;
        }
        #endregion Functions private
    }
}
