 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class PolSourceSiteEffectTermServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private PolSourceSiteEffectTermService polSourceSiteEffectTermService { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceSiteEffectTermServiceTest() : base()
        {
            //polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void PolSourceSiteEffectTerm_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    PolSourceSiteEffectTerm polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count();

                    Assert.Equal(count, (from c in dbTestDB.PolSourceSiteEffectTerms select c).Count());

                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    if (polSourceSiteEffectTerm.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Where(c => c == polSourceSiteEffectTerm).Any());
                    polSourceSiteEffectTermService.Update(polSourceSiteEffectTerm);
                    if (polSourceSiteEffectTerm.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());
                    polSourceSiteEffectTermService.Delete(polSourceSiteEffectTerm);
                    if (polSourceSiteEffectTerm.HasErrors)
                    {
                        Assert.Equal("", polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void PolSourceSiteEffectTerm_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count();

                    PolSourceSiteEffectTerm polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // polSourceSiteEffectTerm.PolSourceSiteEffectTermID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.PolSourceSiteEffectTermID = 0;
                    polSourceSiteEffectTermService.Update(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "PolSourceSiteEffectTermID"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.PolSourceSiteEffectTermID = 10000000;
                    polSourceSiteEffectTermService.Update(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceSiteEffectTerm", "PolSourceSiteEffectTermID", polSourceSiteEffectTerm.PolSourceSiteEffectTermID.ToString()), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // polSourceSiteEffectTerm.IsGroup   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "PolSourceSiteEffectTerm", ExistPlurial = "s", ExistFieldID = "PolSourceSiteEffectTermID", AllowableTVtypeList = )]
                    // polSourceSiteEffectTerm.UnderGroupID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.UnderGroupID = 0;
                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "PolSourceSiteEffectTerm", "UnderGroupID", polSourceSiteEffectTerm.UnderGroupID.ToString()), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // polSourceSiteEffectTerm.EffectTermEN   (String)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("EffectTermEN");
                    Assert.False(polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm));
                    Assert.Equal(1, (int)polSourceSiteEffectTerm.ValidationResults.Count());
                    Assert.True(polSourceSiteEffectTerm.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "EffectTermEN")).Any());
                    Assert.Null(polSourceSiteEffectTerm.EffectTermEN);
                    Assert.Equal(count, (int)polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 101);
                    Assert.False(polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "EffectTermEN", "100"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // polSourceSiteEffectTerm.EffectTermFR   (String)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("EffectTermFR");
                    Assert.False(polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm));
                    Assert.Equal(1, (int)polSourceSiteEffectTerm.ValidationResults.Count());
                    Assert.True(polSourceSiteEffectTerm.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "EffectTermFR")).Any());
                    Assert.Null(polSourceSiteEffectTerm.EffectTermFR);
                    Assert.Equal(count, (int)polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 101);
                    Assert.False(polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "EffectTermFR", "100"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // polSourceSiteEffectTerm.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime();
                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);
                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // polSourceSiteEffectTerm.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.LastUpdateContactTVItemID = 0;
                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", polSourceSiteEffectTerm.LastUpdateContactTVItemID.ToString()), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);

                    polSourceSiteEffectTerm = null;
                    polSourceSiteEffectTerm = GetFilledRandomPolSourceSiteEffectTerm("");
                    polSourceSiteEffectTerm.LastUpdateContactTVItemID = 1;
                    polSourceSiteEffectTermService.Add(polSourceSiteEffectTerm);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), polSourceSiteEffectTerm.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceSiteEffectTerm.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // polSourceSiteEffectTerm.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(polSourceSiteEffectTerm.PolSourceSiteEffectTermID)
        [Fact]
        public void GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID__polSourceSiteEffectTerm_PolSourceSiteEffectTermID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceSiteEffectTerm polSourceSiteEffectTerm = (from c in dbTestDB.PolSourceSiteEffectTerms select c).FirstOrDefault();
                    Assert.NotNull(polSourceSiteEffectTerm);

                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermWithPolSourceSiteEffectTermID(polSourceSiteEffectTerm.PolSourceSiteEffectTermID)

        #region Tests Generated for GetPolSourceSiteEffectTermList()
        [Fact]
        public void GetPolSourceSiteEffectTermList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    PolSourceSiteEffectTerm polSourceSiteEffectTerm = (from c in dbTestDB.PolSourceSiteEffectTerms select c).FirstOrDefault();
                    Assert.NotNull(polSourceSiteEffectTerm);

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList()

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 1, 1,  "PolSourceSiteEffectTermID", "", "");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).OrderBy(c => c.PolSourceSiteEffectTermID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take 2 Asc
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 1, 1, "PolSourceSiteEffectTermID,IsGroup", "", "");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).OrderBy(c => c.PolSourceSiteEffectTermID).ThenBy(c => c.IsGroup).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take 2 Asc

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc Where
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectTermID", "", "PolSourceSiteEffectTermID,EQ,4");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID == 4).OrderBy(c => c.PolSourceSiteEffectTermID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc Where

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc 2 Where
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectTermID", "", "PolSourceSiteEffectTermID,GT,2|PolSourceSiteEffectTermID,LT,5");

                     List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                     polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID > 2 && c.PolSourceSiteEffectTermID < 5).Skip(0).Take(1).OrderBy(c => c.PolSourceSiteEffectTermID).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Asc 2 Where

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceSiteEffectTermID", "");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).OrderByDescending(c => c.PolSourceSiteEffectTermID).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take 2 Desc
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 1, 1, "", "PolSourceSiteEffectTermID,IsGroup", "");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).OrderByDescending(c => c.PolSourceSiteEffectTermID).ThenByDescending(c => c.IsGroup).Skip(1).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take 2 Desc

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc Where
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 0, 1, "PolSourceSiteEffectTermID", "", "PolSourceSiteEffectTermID,EQ,4");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID == 4).OrderByDescending(c => c.PolSourceSiteEffectTermID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc Where

        #region Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc 2 Where
        [Fact]
        public void GetPolSourceSiteEffectTermList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 0, 1, "", "PolSourceSiteEffectTermID", "PolSourceSiteEffectTermID,GT,2|PolSourceSiteEffectTermID,LT,5");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID > 2 && c.PolSourceSiteEffectTermID < 5).OrderByDescending(c => c.PolSourceSiteEffectTermID).Skip(0).Take(1).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() Skip Take Desc 2 Where

        #region Tests Generated for GetPolSourceSiteEffectTermList() 2 Where
        [Fact]
        public void GetPolSourceSiteEffectTermList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    PolSourceSiteEffectTermService polSourceSiteEffectTermService = new PolSourceSiteEffectTermService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    polSourceSiteEffectTermService.Query = polSourceSiteEffectTermService.FillQuery(typeof(PolSourceSiteEffectTerm), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "PolSourceSiteEffectTermID,GT,2|PolSourceSiteEffectTermID,LT,5");

                    List<PolSourceSiteEffectTerm> polSourceSiteEffectTermDirectQueryList = new List<PolSourceSiteEffectTerm>();
                    polSourceSiteEffectTermDirectQueryList = (from c in dbTestDB.PolSourceSiteEffectTerms select c).Where(c => c.PolSourceSiteEffectTermID > 2 && c.PolSourceSiteEffectTermID < 5).ToList();

                        List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList = new List<PolSourceSiteEffectTerm>();
                        polSourceSiteEffectTermList = polSourceSiteEffectTermService.GetPolSourceSiteEffectTermList().ToList();
                        CheckPolSourceSiteEffectTermFields(polSourceSiteEffectTermList);
                        Assert.Equal(polSourceSiteEffectTermDirectQueryList[0].PolSourceSiteEffectTermID, polSourceSiteEffectTermList[0].PolSourceSiteEffectTermID);
                }
            }
        }
        #endregion Tests Generated for GetPolSourceSiteEffectTermList() 2 Where

        #region Functions private
        private void CheckPolSourceSiteEffectTermFields(List<PolSourceSiteEffectTerm> polSourceSiteEffectTermList)
        {
            if (polSourceSiteEffectTermList[0].UnderGroupID != null)
            {
                Assert.NotNull(polSourceSiteEffectTermList[0].UnderGroupID);
            }
            Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectTermList[0].EffectTermEN));
            Assert.False(string.IsNullOrWhiteSpace(polSourceSiteEffectTermList[0].EffectTermFR));
        }
        private PolSourceSiteEffectTerm GetFilledRandomPolSourceSiteEffectTerm(string OmitPropName)
        {
            PolSourceSiteEffectTerm polSourceSiteEffectTerm = new PolSourceSiteEffectTerm();

            if (OmitPropName != "IsGroup") polSourceSiteEffectTerm.IsGroup = true;
            if (OmitPropName != "UnderGroupID") polSourceSiteEffectTerm.UnderGroupID = 1;
            if (OmitPropName != "EffectTermEN") polSourceSiteEffectTerm.EffectTermEN = GetRandomString("", 5);
            if (OmitPropName != "EffectTermFR") polSourceSiteEffectTerm.EffectTermFR = GetRandomString("", 5);
            if (OmitPropName != "LastUpdateDate_UTC") polSourceSiteEffectTerm.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") polSourceSiteEffectTerm.LastUpdateContactTVItemID = 2;

            return polSourceSiteEffectTerm;
        }
        #endregion Functions private
    }
}
