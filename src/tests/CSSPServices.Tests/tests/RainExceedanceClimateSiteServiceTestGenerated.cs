 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class RainExceedanceClimateSiteServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private RainExceedanceClimateSiteService rainExceedanceClimateSiteService { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceClimateSiteServiceTest() : base()
        {
            //rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void RainExceedanceClimateSite_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    RainExceedanceClimateSite rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().Count();

                    Assert.Equal(count, (from c in dbTestDB.RainExceedanceClimateSites select c).Count());

                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    if (rainExceedanceClimateSite.HasErrors)
                    {
                        Assert.Equal("", rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().Where(c => c == rainExceedanceClimateSite).Any());
                    rainExceedanceClimateSiteService.Update(rainExceedanceClimateSite);
                    if (rainExceedanceClimateSite.HasErrors)
                    {
                        Assert.Equal("", rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().Count());
                    rainExceedanceClimateSiteService.Delete(rainExceedanceClimateSite);
                    if (rainExceedanceClimateSite.HasErrors)
                    {
                        Assert.Equal("", rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void RainExceedanceClimateSite_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().Count();

                    RainExceedanceClimateSite rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // rainExceedanceClimateSite.RainExceedanceClimateSiteID   (Int32)
                    // -----------------------------------

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.RainExceedanceClimateSiteID = 0;
                    rainExceedanceClimateSiteService.Update(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "RainExceedanceClimateSiteID"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.RainExceedanceClimateSiteID = 10000000;
                    rainExceedanceClimateSiteService.Update(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "RainExceedanceClimateSite", "RainExceedanceClimateSiteID", rainExceedanceClimateSite.RainExceedanceClimateSiteID.ToString()), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
                    // rainExceedanceClimateSite.RainExceedanceTVItemID   (Int32)
                    // -----------------------------------

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.RainExceedanceTVItemID = 0;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "RainExceedanceTVItemID", rainExceedanceClimateSite.RainExceedanceTVItemID.ToString()), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.RainExceedanceTVItemID = 1;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "RainExceedanceTVItemID", "RainExceedance"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = ClimateSite)]
                    // rainExceedanceClimateSite.ClimateSiteTVItemID   (Int32)
                    // -----------------------------------

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.ClimateSiteTVItemID = 0;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "ClimateSiteTVItemID", rainExceedanceClimateSite.ClimateSiteTVItemID.ToString()), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.ClimateSiteTVItemID = 1;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "ClimateSiteTVItemID", "ClimateSite"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // rainExceedanceClimateSite.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime();
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);
                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // rainExceedanceClimateSite.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.LastUpdateContactTVItemID = 0;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", rainExceedanceClimateSite.LastUpdateContactTVItemID.ToString()), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedanceClimateSite = null;
                    rainExceedanceClimateSite = GetFilledRandomRainExceedanceClimateSite("");
                    rainExceedanceClimateSite.LastUpdateContactTVItemID = 1;
                    rainExceedanceClimateSiteService.Add(rainExceedanceClimateSite);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), rainExceedanceClimateSite.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // rainExceedanceClimateSite.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // rainExceedanceClimateSite.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(rainExceedanceClimateSite.RainExceedanceClimateSiteID)
        [Fact]
        public void GetRainExceedanceClimateSiteWithRainExceedanceClimateSiteID__rainExceedanceClimateSite_RainExceedanceClimateSiteID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    RainExceedanceClimateSite rainExceedanceClimateSite = (from c in dbTestDB.RainExceedanceClimateSites select c).FirstOrDefault();
                    Assert.NotNull(rainExceedanceClimateSite);

                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteWithRainExceedanceClimateSiteID(rainExceedanceClimateSite.RainExceedanceClimateSiteID)

        #region Tests Generated for GetRainExceedanceClimateSiteList()
        [Fact]
        public void GetRainExceedanceClimateSiteList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    RainExceedanceClimateSite rainExceedanceClimateSite = (from c in dbTestDB.RainExceedanceClimateSites select c).FirstOrDefault();
                    Assert.NotNull(rainExceedanceClimateSite);

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList()

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Skip(1).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 1, 1,  "RainExceedanceClimateSiteID", "", "");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).OrderBy(c => c.RainExceedanceClimateSiteID).Skip(1).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take 2 Asc
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 1, 1, "RainExceedanceClimateSiteID,RainExceedanceTVItemID", "", "");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).OrderBy(c => c.RainExceedanceClimateSiteID).ThenBy(c => c.RainExceedanceTVItemID).Skip(1).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take 2 Asc

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc Where
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceClimateSiteID", "", "RainExceedanceClimateSiteID,EQ,4");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Where(c => c.RainExceedanceClimateSiteID == 4).OrderBy(c => c.RainExceedanceClimateSiteID).Skip(0).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc Where

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc 2 Where
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceClimateSiteID", "", "RainExceedanceClimateSiteID,GT,2|RainExceedanceClimateSiteID,LT,5");

                     List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                     rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Where(c => c.RainExceedanceClimateSiteID > 2 && c.RainExceedanceClimateSiteID < 5).Skip(0).Take(1).OrderBy(c => c.RainExceedanceClimateSiteID).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Asc 2 Where

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 1, 1, "", "RainExceedanceClimateSiteID", "");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).OrderByDescending(c => c.RainExceedanceClimateSiteID).Skip(1).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take 2 Desc
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 1, 1, "", "RainExceedanceClimateSiteID,RainExceedanceTVItemID", "");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).OrderByDescending(c => c.RainExceedanceClimateSiteID).ThenByDescending(c => c.RainExceedanceTVItemID).Skip(1).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take 2 Desc

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc Where
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceClimateSiteID", "", "RainExceedanceClimateSiteID,EQ,4");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Where(c => c.RainExceedanceClimateSiteID == 4).OrderByDescending(c => c.RainExceedanceClimateSiteID).Skip(0).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc Where

        #region Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc 2 Where
        [Fact]
        public void GetRainExceedanceClimateSiteList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 0, 1, "", "RainExceedanceClimateSiteID", "RainExceedanceClimateSiteID,GT,2|RainExceedanceClimateSiteID,LT,5");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Where(c => c.RainExceedanceClimateSiteID > 2 && c.RainExceedanceClimateSiteID < 5).OrderByDescending(c => c.RainExceedanceClimateSiteID).Skip(0).Take(1).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() Skip Take Desc 2 Where

        #region Tests Generated for GetRainExceedanceClimateSiteList() 2 Where
        [Fact]
        public void GetRainExceedanceClimateSiteList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceClimateSiteService rainExceedanceClimateSiteService = new RainExceedanceClimateSiteService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceClimateSiteService.Query = rainExceedanceClimateSiteService.FillQuery(typeof(RainExceedanceClimateSite), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "RainExceedanceClimateSiteID,GT,2|RainExceedanceClimateSiteID,LT,5");

                    List<RainExceedanceClimateSite> rainExceedanceClimateSiteDirectQueryList = new List<RainExceedanceClimateSite>();
                    rainExceedanceClimateSiteDirectQueryList = (from c in dbTestDB.RainExceedanceClimateSites select c).Where(c => c.RainExceedanceClimateSiteID > 2 && c.RainExceedanceClimateSiteID < 5).ToList();

                        List<RainExceedanceClimateSite> rainExceedanceClimateSiteList = new List<RainExceedanceClimateSite>();
                        rainExceedanceClimateSiteList = rainExceedanceClimateSiteService.GetRainExceedanceClimateSiteList().ToList();
                        CheckRainExceedanceClimateSiteFields(rainExceedanceClimateSiteList);
                        Assert.Equal(rainExceedanceClimateSiteDirectQueryList[0].RainExceedanceClimateSiteID, rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceClimateSiteList() 2 Where

        #region Functions private
        private void CheckRainExceedanceClimateSiteFields(List<RainExceedanceClimateSite> rainExceedanceClimateSiteList)
        {
            Assert.NotNull(rainExceedanceClimateSiteList[0].RainExceedanceClimateSiteID);
            Assert.NotNull(rainExceedanceClimateSiteList[0].RainExceedanceTVItemID);
            Assert.NotNull(rainExceedanceClimateSiteList[0].ClimateSiteTVItemID);
            Assert.NotNull(rainExceedanceClimateSiteList[0].LastUpdateDate_UTC);
            Assert.NotNull(rainExceedanceClimateSiteList[0].LastUpdateContactTVItemID);
            Assert.NotNull(rainExceedanceClimateSiteList[0].HasErrors);
        }
        private RainExceedanceClimateSite GetFilledRandomRainExceedanceClimateSite(string OmitPropName)
        {
            RainExceedanceClimateSite rainExceedanceClimateSite = new RainExceedanceClimateSite();

            if (OmitPropName != "RainExceedanceTVItemID") rainExceedanceClimateSite.RainExceedanceTVItemID = 56;
            if (OmitPropName != "ClimateSiteTVItemID") rainExceedanceClimateSite.ClimateSiteTVItemID = 7;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedanceClimateSite.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedanceClimateSite.LastUpdateContactTVItemID = 2;

            return rainExceedanceClimateSite;
        }
        #endregion Functions private
    }
}
