 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class RainExceedanceServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private RainExceedanceService rainExceedanceService { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceServiceTest() : base()
        {
            //rainExceedanceService = new RainExceedanceService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void RainExceedance_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    RainExceedance rainExceedance = GetFilledRandomRainExceedance("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = rainExceedanceService.GetRainExceedanceList().Count();

                    Assert.Equal(count, (from c in dbTestDB.RainExceedances select c).Count());

                    rainExceedanceService.Add(rainExceedance);
                    if (rainExceedance.HasErrors)
                    {
                        Assert.Equal("", rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(rainExceedanceService.GetRainExceedanceList().Where(c => c == rainExceedance).Any());
                    rainExceedanceService.Update(rainExceedance);
                    if (rainExceedance.HasErrors)
                    {
                        Assert.Equal("", rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedanceService.Delete(rainExceedance);
                    if (rainExceedance.HasErrors)
                    {
                        Assert.Equal("", rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, rainExceedanceService.GetRainExceedanceList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void RainExceedance_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = rainExceedanceService.GetRainExceedanceList().Count();

                    RainExceedance rainExceedance = GetFilledRandomRainExceedance("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // rainExceedance.RainExceedanceID   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainExceedanceID = 0;
                    rainExceedanceService.Update(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "RainExceedanceID"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainExceedanceID = 10000000;
                    rainExceedanceService.Update(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "RainExceedance", "RainExceedanceID", rainExceedance.RainExceedanceID.ToString()), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = RainExceedance)]
                    // rainExceedance.RainExceedanceTVItemID   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainExceedanceTVItemID = 0;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "RainExceedanceTVItemID", rainExceedance.RainExceedanceTVItemID.ToString()), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainExceedanceTVItemID = 1;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "RainExceedanceTVItemID", "RainExceedance"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 12)]
                    // rainExceedance.StartMonth   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.StartMonth = 0;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StartMonth", "1", "12"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.StartMonth = 13;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StartMonth", "1", "12"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 31)]
                    // rainExceedance.StartDay   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.StartDay = 0;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StartDay", "1", "31"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.StartDay = 32;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "StartDay", "1", "31"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 12)]
                    // rainExceedance.EndMonth   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.EndMonth = 0;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "EndMonth", "1", "12"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.EndMonth = 13;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "EndMonth", "1", "12"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(1, 31)]
                    // rainExceedance.EndDay   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.EndDay = 0;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "EndDay", "1", "31"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.EndDay = 32;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "EndDay", "1", "31"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 300)]
                    // rainExceedance.RainMaximum_mm   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [RainMaximum_mm]

                    //CSSPError: Type not implemented [RainMaximum_mm]

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainMaximum_mm = -1.0D;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainMaximum_mm", "0", "300"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.RainMaximum_mm = 301.0D;
                    Assert.False(rainExceedanceService.Add(rainExceedance));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "RainMaximum_mm", "0", "300"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)rainExceedanceService.GetRainExceedanceList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
                    // rainExceedance.StakeholdersEmailDistributionListID   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.StakeholdersEmailDistributionListID = 0;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "EmailDistributionList", "StakeholdersEmailDistributionListID", rainExceedance.StakeholdersEmailDistributionListID.ToString()), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "EmailDistributionList", ExistPlurial = "s", ExistFieldID = "EmailDistributionListID", AllowableTVtypeList = )]
                    // rainExceedance.OnlyStaffEmailDistributionListID   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.OnlyStaffEmailDistributionListID = 0;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "EmailDistributionList", "OnlyStaffEmailDistributionListID", rainExceedance.OnlyStaffEmailDistributionListID.ToString()), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // rainExceedance.IsActive   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // rainExceedance.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.LastUpdateDate_UTC = new DateTime();
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);
                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // rainExceedance.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.LastUpdateContactTVItemID = 0;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", rainExceedance.LastUpdateContactTVItemID.ToString()), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);

                    rainExceedance = null;
                    rainExceedance = GetFilledRandomRainExceedance("");
                    rainExceedance.LastUpdateContactTVItemID = 1;
                    rainExceedanceService.Add(rainExceedance);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), rainExceedance.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // rainExceedance.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // rainExceedance.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetRainExceedanceWithRainExceedanceID(rainExceedance.RainExceedanceID)
        [Fact]
        public void GetRainExceedanceWithRainExceedanceID__rainExceedance_RainExceedanceID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    RainExceedance rainExceedance = (from c in dbTestDB.RainExceedances select c).FirstOrDefault();
                    Assert.NotNull(rainExceedance);

                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceWithRainExceedanceID(rainExceedance.RainExceedanceID)

        #region Tests Generated for GetRainExceedanceList()
        [Fact]
        public void GetRainExceedanceList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    RainExceedance rainExceedance = (from c in dbTestDB.RainExceedances select c).FirstOrDefault();
                    Assert.NotNull(rainExceedance);

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList()

        #region Tests Generated for GetRainExceedanceList() Skip Take
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Skip(1).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take

        #region Tests Generated for GetRainExceedanceList() Skip Take Asc
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 1, 1,  "RainExceedanceID", "", "");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).OrderBy(c => c.RainExceedanceID).Skip(1).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Asc

        #region Tests Generated for GetRainExceedanceList() Skip Take 2 Asc
        [Fact]
        public void GetRainExceedanceList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 1, 1, "RainExceedanceID,RainExceedanceTVItemID", "", "");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).OrderBy(c => c.RainExceedanceID).ThenBy(c => c.RainExceedanceTVItemID).Skip(1).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take 2 Asc

        #region Tests Generated for GetRainExceedanceList() Skip Take Asc Where
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceID", "", "RainExceedanceID,EQ,4");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Where(c => c.RainExceedanceID == 4).OrderBy(c => c.RainExceedanceID).Skip(0).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Asc Where

        #region Tests Generated for GetRainExceedanceList() Skip Take Asc 2 Where
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceID", "", "RainExceedanceID,GT,2|RainExceedanceID,LT,5");

                     List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                     rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Where(c => c.RainExceedanceID > 2 && c.RainExceedanceID < 5).Skip(0).Take(1).OrderBy(c => c.RainExceedanceID).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Asc 2 Where

        #region Tests Generated for GetRainExceedanceList() Skip Take Desc
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 1, 1, "", "RainExceedanceID", "");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).OrderByDescending(c => c.RainExceedanceID).Skip(1).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Desc

        #region Tests Generated for GetRainExceedanceList() Skip Take 2 Desc
        [Fact]
        public void GetRainExceedanceList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 1, 1, "", "RainExceedanceID,RainExceedanceTVItemID", "");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).OrderByDescending(c => c.RainExceedanceID).ThenByDescending(c => c.RainExceedanceTVItemID).Skip(1).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take 2 Desc

        #region Tests Generated for GetRainExceedanceList() Skip Take Desc Where
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 0, 1, "RainExceedanceID", "", "RainExceedanceID,EQ,4");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Where(c => c.RainExceedanceID == 4).OrderByDescending(c => c.RainExceedanceID).Skip(0).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Desc Where

        #region Tests Generated for GetRainExceedanceList() Skip Take Desc 2 Where
        [Fact]
        public void GetRainExceedanceList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 0, 1, "", "RainExceedanceID", "RainExceedanceID,GT,2|RainExceedanceID,LT,5");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Where(c => c.RainExceedanceID > 2 && c.RainExceedanceID < 5).OrderByDescending(c => c.RainExceedanceID).Skip(0).Take(1).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() Skip Take Desc 2 Where

        #region Tests Generated for GetRainExceedanceList() 2 Where
        [Fact]
        public void GetRainExceedanceList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    RainExceedanceService rainExceedanceService = new RainExceedanceService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    rainExceedanceService.Query = rainExceedanceService.FillQuery(typeof(RainExceedance), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "RainExceedanceID,GT,2|RainExceedanceID,LT,5");

                    List<RainExceedance> rainExceedanceDirectQueryList = new List<RainExceedance>();
                    rainExceedanceDirectQueryList = (from c in dbTestDB.RainExceedances select c).Where(c => c.RainExceedanceID > 2 && c.RainExceedanceID < 5).ToList();

                        List<RainExceedance> rainExceedanceList = new List<RainExceedance>();
                        rainExceedanceList = rainExceedanceService.GetRainExceedanceList().ToList();
                        CheckRainExceedanceFields(rainExceedanceList);
                        Assert.Equal(rainExceedanceDirectQueryList[0].RainExceedanceID, rainExceedanceList[0].RainExceedanceID);
                }
            }
        }
        #endregion Tests Generated for GetRainExceedanceList() 2 Where

        #region Functions private
        private void CheckRainExceedanceFields(List<RainExceedance> rainExceedanceList)
        {
            if (rainExceedanceList[0].StakeholdersEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].StakeholdersEmailDistributionListID);
            }
            if (rainExceedanceList[0].OnlyStaffEmailDistributionListID != null)
            {
                Assert.NotNull(rainExceedanceList[0].OnlyStaffEmailDistributionListID);
            }
        }
        private RainExceedance GetFilledRandomRainExceedance(string OmitPropName)
        {
            RainExceedance rainExceedance = new RainExceedance();

            if (OmitPropName != "RainExceedanceTVItemID") rainExceedance.RainExceedanceTVItemID = 56;
            if (OmitPropName != "StartMonth") rainExceedance.StartMonth = GetRandomInt(1, 12);
            if (OmitPropName != "StartDay") rainExceedance.StartDay = GetRandomInt(1, 31);
            if (OmitPropName != "EndMonth") rainExceedance.EndMonth = GetRandomInt(1, 12);
            if (OmitPropName != "EndDay") rainExceedance.EndDay = GetRandomInt(1, 31);
            if (OmitPropName != "RainMaximum_mm") rainExceedance.RainMaximum_mm = GetRandomDouble(0.0D, 300.0D);
            if (OmitPropName != "StakeholdersEmailDistributionListID") rainExceedance.StakeholdersEmailDistributionListID = 1;
            if (OmitPropName != "OnlyStaffEmailDistributionListID") rainExceedance.OnlyStaffEmailDistributionListID = 1;
            if (OmitPropName != "IsActive") rainExceedance.IsActive = true;
            if (OmitPropName != "LastUpdateDate_UTC") rainExceedance.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") rainExceedance.LastUpdateContactTVItemID = 2;

            return rainExceedance;
        }
        #endregion Functions private
    }
}
