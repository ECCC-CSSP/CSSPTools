 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class ReportSectionLanguageServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private ReportSectionLanguageService reportSectionLanguageService { get; set; }
        #endregion Properties

        #region Constructors
        public ReportSectionLanguageServiceTest() : base()
        {
            //reportSectionLanguageService = new ReportSectionLanguageService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void ReportSectionLanguage_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    ReportSectionLanguage reportSectionLanguage = GetFilledRandomReportSectionLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = reportSectionLanguageService.GetReportSectionLanguageList().Count();

                    Assert.Equal(count, (from c in dbTestDB.ReportSectionLanguages select c).Count());

                    reportSectionLanguageService.Add(reportSectionLanguage);
                    if (reportSectionLanguage.HasErrors)
                    {
                        Assert.Equal("", reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(reportSectionLanguageService.GetReportSectionLanguageList().Where(c => c == reportSectionLanguage).Any());
                    reportSectionLanguageService.Update(reportSectionLanguage);
                    if (reportSectionLanguage.HasErrors)
                    {
                        Assert.Equal("", reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, reportSectionLanguageService.GetReportSectionLanguageList().Count());
                    reportSectionLanguageService.Delete(reportSectionLanguage);
                    if (reportSectionLanguage.HasErrors)
                    {
                        Assert.Equal("", reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, reportSectionLanguageService.GetReportSectionLanguageList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void ReportSectionLanguage_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = reportSectionLanguageService.GetReportSectionLanguageList().Count();

                    ReportSectionLanguage reportSectionLanguage = GetFilledRandomReportSectionLanguage("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // reportSectionLanguage.ReportSectionLanguageID   (Int32)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.ReportSectionLanguageID = 0;
                    reportSectionLanguageService.Update(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "ReportSectionLanguageID"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.ReportSectionLanguageID = 10000000;
                    reportSectionLanguageService.Update(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "ReportSectionLanguage", "ReportSectionLanguageID", reportSectionLanguage.ReportSectionLanguageID.ToString()), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "ReportSection", ExistPlurial = "s", ExistFieldID = "ReportSectionID", AllowableTVtypeList = )]
                    // reportSectionLanguage.ReportSectionID   (Int32)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.ReportSectionID = 0;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "ReportSection", "ReportSectionID", reportSectionLanguage.ReportSectionID.ToString()), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // reportSectionLanguage.Language   (LanguageEnum)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.Language = (LanguageEnum)1000000;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "Language"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(100))]
                    // reportSectionLanguage.ReportSectionName   (String)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("ReportSectionName");
                    Assert.False(reportSectionLanguageService.Add(reportSectionLanguage));
                    Assert.Equal(1, reportSectionLanguage.ValidationResults.Count());
                    Assert.True(reportSectionLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "ReportSectionName")).Any());
                    Assert.Null(reportSectionLanguage.ReportSectionName);
                    Assert.Equal(count, reportSectionLanguageService.GetReportSectionLanguageList().Count());

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.ReportSectionName = GetRandomString("", 101);
                    Assert.False(reportSectionLanguageService.Add(reportSectionLanguage));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "ReportSectionName", "100"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, reportSectionLanguageService.GetReportSectionLanguageList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // reportSectionLanguage.TranslationStatusReportSectionName   (TranslationStatusEnum)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.TranslationStatusReportSectionName = (TranslationStatusEnum)1000000;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusReportSectionName"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [StringLength(10000))]
                    // reportSectionLanguage.ReportSectionText   (String)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("ReportSectionText");
                    Assert.False(reportSectionLanguageService.Add(reportSectionLanguage));
                    Assert.Equal(1, reportSectionLanguage.ValidationResults.Count());
                    Assert.True(reportSectionLanguage.ValidationResults.Where(c => c.ErrorMessage == string.Format(CSSPServicesRes._IsRequired, "ReportSectionText")).Any());
                    Assert.Null(reportSectionLanguage.ReportSectionText);
                    Assert.Equal(count, reportSectionLanguageService.GetReportSectionLanguageList().Count());

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.ReportSectionText = GetRandomString("", 10001);
                    Assert.False(reportSectionLanguageService.Add(reportSectionLanguage));
                    Assert.Equal(string.Format(CSSPServicesRes._MaxLengthIs_, "ReportSectionText", "10000"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, reportSectionLanguageService.GetReportSectionLanguageList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // reportSectionLanguage.TranslationStatusReportSectionText   (TranslationStatusEnum)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.TranslationStatusReportSectionText = (TranslationStatusEnum)1000000;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TranslationStatusReportSectionText"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // reportSectionLanguage.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.LastUpdateDate_UTC = new DateTime();
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);
                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // reportSectionLanguage.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.LastUpdateContactTVItemID = 0;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", reportSectionLanguage.LastUpdateContactTVItemID.ToString()), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);

                    reportSectionLanguage = null;
                    reportSectionLanguage = GetFilledRandomReportSectionLanguage("");
                    reportSectionLanguage.LastUpdateContactTVItemID = 1;
                    reportSectionLanguageService.Add(reportSectionLanguage);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), reportSectionLanguage.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // reportSectionLanguage.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // reportSectionLanguage.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetReportSectionLanguageWithReportSectionLanguageID(reportSectionLanguage.ReportSectionLanguageID)
        [Fact]
        public void GetReportSectionLanguageWithReportSectionLanguageID__reportSectionLanguage_ReportSectionLanguageID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    ReportSectionLanguage reportSectionLanguage = (from c in dbTestDB.ReportSectionLanguages select c).FirstOrDefault();
                    Assert.NotNull(reportSectionLanguage);

                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageWithReportSectionLanguageID(reportSectionLanguage.ReportSectionLanguageID)

        #region Tests Generated for GetReportSectionLanguageList()
        [Fact]
        public void GetReportSectionLanguageList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    ReportSectionLanguage reportSectionLanguage = (from c in dbTestDB.ReportSectionLanguages select c).FirstOrDefault();
                    Assert.NotNull(reportSectionLanguage);

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList()

        #region Tests Generated for GetReportSectionLanguageList() Skip Take
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Skip(1).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Asc
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 1, 1,  "ReportSectionLanguageID", "", "");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).OrderBy(c => c.ReportSectionLanguageID).Skip(1).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Asc

        #region Tests Generated for GetReportSectionLanguageList() Skip Take 2 Asc
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 1, 1, "ReportSectionLanguageID,ReportSectionID", "", "");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).OrderBy(c => c.ReportSectionLanguageID).ThenBy(c => c.ReportSectionID).Skip(1).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take 2 Asc

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Asc Where
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 0, 1, "ReportSectionLanguageID", "", "ReportSectionLanguageID,EQ,4");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Where(c => c.ReportSectionLanguageID == 4).OrderBy(c => c.ReportSectionLanguageID).Skip(0).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Asc Where

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Asc 2 Where
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 0, 1, "ReportSectionLanguageID", "", "ReportSectionLanguageID,GT,2|ReportSectionLanguageID,LT,5");

                     List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                     reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Where(c => c.ReportSectionLanguageID > 2 && c.ReportSectionLanguageID < 5).Skip(0).Take(1).OrderBy(c => c.ReportSectionLanguageID).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Asc 2 Where

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Desc
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "ReportSectionLanguageID", "");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).OrderByDescending(c => c.ReportSectionLanguageID).Skip(1).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Desc

        #region Tests Generated for GetReportSectionLanguageList() Skip Take 2 Desc
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 1, 1, "", "ReportSectionLanguageID,ReportSectionID", "");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).OrderByDescending(c => c.ReportSectionLanguageID).ThenByDescending(c => c.ReportSectionID).Skip(1).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take 2 Desc

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Desc Where
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 0, 1, "ReportSectionLanguageID", "", "ReportSectionLanguageID,EQ,4");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Where(c => c.ReportSectionLanguageID == 4).OrderByDescending(c => c.ReportSectionLanguageID).Skip(0).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Desc Where

        #region Tests Generated for GetReportSectionLanguageList() Skip Take Desc 2 Where
        [Fact]
        public void GetReportSectionLanguageList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 0, 1, "", "ReportSectionLanguageID", "ReportSectionLanguageID,GT,2|ReportSectionLanguageID,LT,5");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Where(c => c.ReportSectionLanguageID > 2 && c.ReportSectionLanguageID < 5).OrderByDescending(c => c.ReportSectionLanguageID).Skip(0).Take(1).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() Skip Take Desc 2 Where

        #region Tests Generated for GetReportSectionLanguageList() 2 Where
        [Fact]
        public void GetReportSectionLanguageList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    ReportSectionLanguageService reportSectionLanguageService = new ReportSectionLanguageService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    reportSectionLanguageService.Query = reportSectionLanguageService.FillQuery(typeof(ReportSectionLanguage), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "ReportSectionLanguageID,GT,2|ReportSectionLanguageID,LT,5");

                    List<ReportSectionLanguage> reportSectionLanguageDirectQueryList = new List<ReportSectionLanguage>();
                    reportSectionLanguageDirectQueryList = (from c in dbTestDB.ReportSectionLanguages select c).Where(c => c.ReportSectionLanguageID > 2 && c.ReportSectionLanguageID < 5).ToList();

                        List<ReportSectionLanguage> reportSectionLanguageList = new List<ReportSectionLanguage>();
                        reportSectionLanguageList = reportSectionLanguageService.GetReportSectionLanguageList().ToList();
                        CheckReportSectionLanguageFields(reportSectionLanguageList);
                        Assert.Equal(reportSectionLanguageDirectQueryList[0].ReportSectionLanguageID, reportSectionLanguageList[0].ReportSectionLanguageID);
                }
            }
        }
        #endregion Tests Generated for GetReportSectionLanguageList() 2 Where

        #region Functions private
        private void CheckReportSectionLanguageFields(List<ReportSectionLanguage> reportSectionLanguageList)
        {
            Assert.NotNull(reportSectionLanguageList[0].ReportSectionLanguageID);
            Assert.NotNull(reportSectionLanguageList[0].ReportSectionID);
            Assert.NotNull(reportSectionLanguageList[0].Language);
            Assert.False(string.IsNullOrWhiteSpace(reportSectionLanguageList[0].ReportSectionName));
            Assert.NotNull(reportSectionLanguageList[0].TranslationStatusReportSectionName);
            Assert.False(string.IsNullOrWhiteSpace(reportSectionLanguageList[0].ReportSectionText));
            Assert.NotNull(reportSectionLanguageList[0].TranslationStatusReportSectionText);
            Assert.NotNull(reportSectionLanguageList[0].LastUpdateDate_UTC);
            Assert.NotNull(reportSectionLanguageList[0].LastUpdateContactTVItemID);
            Assert.NotNull(reportSectionLanguageList[0].HasErrors);
        }
        private ReportSectionLanguage GetFilledRandomReportSectionLanguage(string OmitPropName)
        {
            ReportSectionLanguage reportSectionLanguage = new ReportSectionLanguage();

            if (OmitPropName != "ReportSectionID") reportSectionLanguage.ReportSectionID = 1;
            if (OmitPropName != "Language") reportSectionLanguage.Language = LanguageRequest;
            if (OmitPropName != "ReportSectionName") reportSectionLanguage.ReportSectionName = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusReportSectionName") reportSectionLanguage.TranslationStatusReportSectionName = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "ReportSectionText") reportSectionLanguage.ReportSectionText = GetRandomString("", 5);
            if (OmitPropName != "TranslationStatusReportSectionText") reportSectionLanguage.TranslationStatusReportSectionText = (TranslationStatusEnum)GetRandomEnumType(typeof(TranslationStatusEnum));
            if (OmitPropName != "LastUpdateDate_UTC") reportSectionLanguage.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") reportSectionLanguage.LastUpdateContactTVItemID = 2;

            return reportSectionLanguage;
        }
        #endregion Functions private
    }
}
