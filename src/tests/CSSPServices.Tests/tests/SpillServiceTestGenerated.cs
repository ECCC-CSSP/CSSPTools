 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{

    public partial class SpillServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private SpillService spillService { get; set; }
        #endregion Properties

        #region Constructors
        public SpillServiceTest() : base()
        {
            //spillService = new SpillService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void Spill_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    Spill spill = GetFilledRandomSpill("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = spillService.GetSpillList().Count();

                    Assert.Equal(count, (from c in dbTestDB.Spills select c).Count());

                    spillService.Add(spill);
                    if (spill.HasErrors)
                    {
                        Assert.Equal("", spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(spillService.GetSpillList().Where(c => c == spill).Any());
                    spillService.Update(spill);
                    if (spill.HasErrors)
                    {
                        Assert.Equal("", spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, spillService.GetSpillList().Count());
                    spillService.Delete(spill);
                    if (spill.HasErrors)
                    {
                        Assert.Equal("", spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, spillService.GetSpillList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void Spill_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = spillService.GetSpillList().Count();

                    Spill spill = GetFilledRandomSpill("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // spill.SpillID   (Int32)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.SpillID = 0;
                    spillService.Update(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "SpillID"), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.SpillID = 10000000;
                    spillService.Update(spill);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "Spill", "SpillID", spill.SpillID.ToString()), spill.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Municipality)]
                    // spill.MunicipalityTVItemID   (Int32)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.MunicipalityTVItemID = 0;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "MunicipalityTVItemID", spill.MunicipalityTVItemID.ToString()), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.MunicipalityTVItemID = 1;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "MunicipalityTVItemID", "Municipality"), spill.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Infrastructure)]
                    // spill.InfrastructureTVItemID   (Int32)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.InfrastructureTVItemID = 0;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "InfrastructureTVItemID", spill.InfrastructureTVItemID.ToString()), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.InfrastructureTVItemID = 1;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "InfrastructureTVItemID", "Infrastructure"), spill.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // spill.StartDateTime_Local   (DateTime)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.StartDateTime_Local = new DateTime();
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "StartDateTime_Local"), spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.StartDateTime_Local = new DateTime(1979, 1, 1);
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "StartDateTime_Local", "1980"), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPAfter(Year = 1980)]
                    // [CSSPBigger(OtherField = StartDateTime_Local)]
                    // spill.EndDateTime_Local   (DateTime)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.EndDateTime_Local = new DateTime(1979, 1, 1);
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "EndDateTime_Local", "1980"), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 1000000)]
                    // spill.AverageFlow_m3_day   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [AverageFlow_m3_day]

                    //CSSPError: Type not implemented [AverageFlow_m3_day]

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.AverageFlow_m3_day = -1.0D;
                    Assert.False(spillService.Add(spill));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "AverageFlow_m3_day", "0", "1000000"), spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, spillService.GetSpillList().Count());
                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.AverageFlow_m3_day = 1000001.0D;
                    Assert.False(spillService.Add(spill));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "AverageFlow_m3_day", "0", "1000000"), spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, spillService.GetSpillList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // spill.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.LastUpdateDate_UTC = new DateTime();
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), spill.ValidationResults.FirstOrDefault().ErrorMessage);
                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // spill.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.LastUpdateContactTVItemID = 0;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", spill.LastUpdateContactTVItemID.ToString()), spill.ValidationResults.FirstOrDefault().ErrorMessage);

                    spill = null;
                    spill = GetFilledRandomSpill("");
                    spill.LastUpdateContactTVItemID = 1;
                    spillService.Add(spill);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), spill.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // spill.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // spill.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetSpillWithSpillID(spill.SpillID)
        [Fact]
        public void GetSpillWithSpillID__spill_SpillID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Spill spill = (from c in dbTestDB.Spills select c).FirstOrDefault();
                    Assert.NotNull(spill);

                }
            }
        }
        #endregion Tests Generated for GetSpillWithSpillID(spill.SpillID)

        #region Tests Generated for GetSpillList()
        [Fact]
        public void GetSpillList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    Spill spill = (from c in dbTestDB.Spills select c).FirstOrDefault();
                    Assert.NotNull(spill);

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetSpillList()

        #region Tests Generated for GetSpillList() Skip Take
        [Fact]
        public void GetSpillList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Skip(1).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take

        #region Tests Generated for GetSpillList() Skip Take Asc
        [Fact]
        public void GetSpillList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 1, 1,  "SpillID", "", "");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).OrderBy(c => c.SpillID).Skip(1).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Asc

        #region Tests Generated for GetSpillList() Skip Take 2 Asc
        [Fact]
        public void GetSpillList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 1, 1, "SpillID,MunicipalityTVItemID", "", "");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).OrderBy(c => c.SpillID).ThenBy(c => c.MunicipalityTVItemID).Skip(1).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take 2 Asc

        #region Tests Generated for GetSpillList() Skip Take Asc Where
        [Fact]
        public void GetSpillList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 0, 1, "SpillID", "", "SpillID,EQ,4");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Where(c => c.SpillID == 4).OrderBy(c => c.SpillID).Skip(0).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Asc Where

        #region Tests Generated for GetSpillList() Skip Take Asc 2 Where
        [Fact]
        public void GetSpillList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 0, 1, "SpillID", "", "SpillID,GT,2|SpillID,LT,5");

                     List<Spill> spillDirectQueryList = new List<Spill>();
                     spillDirectQueryList = (from c in dbTestDB.Spills select c).Where(c => c.SpillID > 2 && c.SpillID < 5).Skip(0).Take(1).OrderBy(c => c.SpillID).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Asc 2 Where

        #region Tests Generated for GetSpillList() Skip Take Desc
        [Fact]
        public void GetSpillList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 1, 1, "", "SpillID", "");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).OrderByDescending(c => c.SpillID).Skip(1).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Desc

        #region Tests Generated for GetSpillList() Skip Take 2 Desc
        [Fact]
        public void GetSpillList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 1, 1, "", "SpillID,MunicipalityTVItemID", "");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).OrderByDescending(c => c.SpillID).ThenByDescending(c => c.MunicipalityTVItemID).Skip(1).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take 2 Desc

        #region Tests Generated for GetSpillList() Skip Take Desc Where
        [Fact]
        public void GetSpillList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 0, 1, "SpillID", "", "SpillID,EQ,4");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Where(c => c.SpillID == 4).OrderByDescending(c => c.SpillID).Skip(0).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Desc Where

        #region Tests Generated for GetSpillList() Skip Take Desc 2 Where
        [Fact]
        public void GetSpillList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 0, 1, "", "SpillID", "SpillID,GT,2|SpillID,LT,5");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Where(c => c.SpillID > 2 && c.SpillID < 5).OrderByDescending(c => c.SpillID).Skip(0).Take(1).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() Skip Take Desc 2 Where

        #region Tests Generated for GetSpillList() 2 Where
        [Fact]
        public void GetSpillList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    SpillService spillService = new SpillService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    spillService.Query = spillService.FillQuery(typeof(Spill), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "SpillID,GT,2|SpillID,LT,5");

                    List<Spill> spillDirectQueryList = new List<Spill>();
                    spillDirectQueryList = (from c in dbTestDB.Spills select c).Where(c => c.SpillID > 2 && c.SpillID < 5).ToList();

                        List<Spill> spillList = new List<Spill>();
                        spillList = spillService.GetSpillList().ToList();
                        CheckSpillFields(spillList);
                        Assert.Equal(spillDirectQueryList[0].SpillID, spillList[0].SpillID);
                }
            }
        }
        #endregion Tests Generated for GetSpillList() 2 Where

        #region Functions private
        private void CheckSpillFields(List<Spill> spillList)
        {
            Assert.NotNull(spillList[0].SpillID);
            Assert.NotNull(spillList[0].MunicipalityTVItemID);
            if (spillList[0].InfrastructureTVItemID != null)
            {
                Assert.NotNull(spillList[0].InfrastructureTVItemID);
            }
            Assert.NotNull(spillList[0].StartDateTime_Local);
            if (spillList[0].EndDateTime_Local != null)
            {
                Assert.NotNull(spillList[0].EndDateTime_Local);
            }
            Assert.NotNull(spillList[0].AverageFlow_m3_day);
            Assert.NotNull(spillList[0].LastUpdateDate_UTC);
            Assert.NotNull(spillList[0].LastUpdateContactTVItemID);
            Assert.NotNull(spillList[0].HasErrors);
        }
        private Spill GetFilledRandomSpill(string OmitPropName)
        {
            Spill spill = new Spill();

            if (OmitPropName != "MunicipalityTVItemID") spill.MunicipalityTVItemID = 39;
            if (OmitPropName != "InfrastructureTVItemID") spill.InfrastructureTVItemID = 41;
            if (OmitPropName != "StartDateTime_Local") spill.StartDateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "EndDateTime_Local") spill.EndDateTime_Local = new DateTime(2005, 3, 7);
            if (OmitPropName != "AverageFlow_m3_day") spill.AverageFlow_m3_day = GetRandomDouble(0.0D, 1000000.0D);
            if (OmitPropName != "LastUpdateDate_UTC") spill.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") spill.LastUpdateContactTVItemID = 2;

            return spill;
        }
        #endregion Functions private
    }
}
