 /* Auto generated from the CSSPCodeWriter.proj by clicking on the [\src\[ClassName]ServiceGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 

using System;
using Xunit;
using System.Linq;
using System.Collections.Generic;
using CSSPModels;
using CSSPServices;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.Security.Principal;
using System.Globalization;
using CSSPServices.Resources;
using CSSPModels.Resources;
using CSSPEnums.Resources;

namespace CSSPServices.Tests
{
    public partial class TideDataValueServiceTest : TestHelper
    {
        #region Variables
        #endregion Variables

        #region Properties
        //private TideDataValueService tideDataValueService { get; set; }
        #endregion Properties

        #region Constructors
        public TideDataValueServiceTest() : base()
        {
            //tideDataValueService = new TideDataValueService(LanguageRequest, dbTestDB, ContactID);
        }
        #endregion Constructors

        #region Tests Generated CRUD
        [Fact]
        public void TideDataValue_CRUD_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    TideDataValue tideDataValue = GetFilledRandomTideDataValue("");

                    // -------------------------------
                    // -------------------------------
                    // CRUD testing
                    // -------------------------------
                    // -------------------------------

                    count = tideDataValueService.GetTideDataValueList().Count();

                    Assert.Equal(count, (from c in dbTestDB.TideDataValues select c).Count());

                    tideDataValueService.Add(tideDataValue);
                    if (tideDataValue.HasErrors)
                    {
                        Assert.Equal("", tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.True(tideDataValueService.GetTideDataValueList().Where(c => c == tideDataValue).Any());
                    tideDataValueService.Update(tideDataValue);
                    if (tideDataValue.HasErrors)
                    {
                        Assert.Equal("", tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count + 1, tideDataValueService.GetTideDataValueList().Count());
                    tideDataValueService.Delete(tideDataValue);
                    if (tideDataValue.HasErrors)
                    {
                        Assert.Equal("", tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    }
                    Assert.Equal(count, tideDataValueService.GetTideDataValueList().Count());

                }
            }
        }
        #endregion Tests Generated CRUD

        #region Tests Generated Properties
        [Fact]
        public void TideDataValue_Properties_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    int count = 0;
                    if (count == 1)
                    {
                        // just so we don't get a warning during compile [The variable 'count' is assigned but its value is never used]
                    }

                    count = tideDataValueService.GetTideDataValueList().Count();

                    TideDataValue tideDataValue = GetFilledRandomTideDataValue("");

                    // -------------------------------
                    // -------------------------------
                    // Properties testing
                    // -------------------------------
                    // -------------------------------


                    // -----------------------------------
                    // [Key]
                    // Is NOT Nullable
                    // tideDataValue.TideDataValueID   (Int32)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideDataValueID = 0;
                    tideDataValueService.Update(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TideDataValueID"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideDataValueID = 10000000;
                    tideDataValueService.Update(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TideDataValue", "TideDataValueID", tideDataValue.TideDataValueID.ToString()), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = TideSite)]
                    // tideDataValue.TideSiteTVItemID   (Int32)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideSiteTVItemID = 0;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "TideSiteTVItemID", tideDataValue.TideSiteTVItemID.ToString()), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideSiteTVItemID = 1;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "TideSiteTVItemID", "TideSite"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // tideDataValue.DateTime_Local   (DateTime)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.DateTime_Local = new DateTime();
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "DateTime_Local"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.DateTime_Local = new DateTime(1979, 1, 1);
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "DateTime_Local", "1980"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // tideDataValue.Keep   (Boolean)
                    // -----------------------------------


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // tideDataValue.TideDataType   (TideDataTypeEnum)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideDataType = (TideDataTypeEnum)1000000;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TideDataType"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPEnumType]
                    // tideDataValue.StorageDataType   (StorageDataTypeEnum)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.StorageDataType = (StorageDataTypeEnum)1000000;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "StorageDataType"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 10000)]
                    // tideDataValue.Depth_m   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [Depth_m]

                    //CSSPError: Type not implemented [Depth_m]

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.Depth_m = -1.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Depth_m", "0", "10000"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());
                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.Depth_m = 10001.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "Depth_m", "0", "10000"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 10)]
                    // tideDataValue.UVelocity_m_s   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [UVelocity_m_s]

                    //CSSPError: Type not implemented [UVelocity_m_s]

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.UVelocity_m_s = -1.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "UVelocity_m_s", "0", "10"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());
                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.UVelocity_m_s = 11.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "UVelocity_m_s", "0", "10"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());

                    // -----------------------------------
                    // Is NOT Nullable
                    // [Range(0, 10)]
                    // tideDataValue.VVelocity_m_s   (Double)
                    // -----------------------------------

                    //CSSPError: Type not implemented [VVelocity_m_s]

                    //CSSPError: Type not implemented [VVelocity_m_s]

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.VVelocity_m_s = -1.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "VVelocity_m_s", "0", "10"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());
                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.VVelocity_m_s = 11.0D;
                    Assert.False(tideDataValueService.Add(tideDataValue));
                    Assert.Equal(string.Format(CSSPServicesRes._ValueShouldBeBetween_And_, "VVelocity_m_s", "0", "10"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    Assert.Equal(count, (int)tideDataValueService.GetTideDataValueList().Count());

                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // tideDataValue.TideStart   (TideTextEnum)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideStart = (TideTextEnum)1000000;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TideStart"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is Nullable
                    // [CSSPEnumType]
                    // tideDataValue.TideEnd   (TideTextEnum)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.TideEnd = (TideTextEnum)1000000;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "TideEnd"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPAfter(Year = 1980)]
                    // tideDataValue.LastUpdateDate_UTC   (DateTime)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.LastUpdateDate_UTC = new DateTime();
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsRequired, "LastUpdateDate_UTC"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);
                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.LastUpdateDate_UTC = new DateTime(1979, 1, 1);
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._YearShouldBeBiggerThan_, "LastUpdateDate_UTC", "1980"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);

                    // -----------------------------------
                    // Is NOT Nullable
                    // [CSSPExist(ExistTypeName = "TVItem", ExistPlurial = "s", ExistFieldID = "TVItemID", AllowableTVtypeList = Contact)]
                    // tideDataValue.LastUpdateContactTVItemID   (Int32)
                    // -----------------------------------

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.LastUpdateContactTVItemID = 0;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes.CouldNotFind_With_Equal_, "TVItem", "LastUpdateContactTVItemID", tideDataValue.LastUpdateContactTVItemID.ToString()), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);

                    tideDataValue = null;
                    tideDataValue = GetFilledRandomTideDataValue("");
                    tideDataValue.LastUpdateContactTVItemID = 1;
                    tideDataValueService.Add(tideDataValue);
                    Assert.Equal(string.Format(CSSPServicesRes._IsNotOfType_, "LastUpdateContactTVItemID", "Contact"), tideDataValue.ValidationResults.FirstOrDefault().ErrorMessage);


                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // tideDataValue.HasErrors   (Boolean)
                    // -----------------------------------

                    // No testing requied

                    // -----------------------------------
                    // Is NOT Nullable
                    // [NotMapped]
                    // tideDataValue.ValidationResults   (IEnumerable`1)
                    // -----------------------------------

                    // No testing requied
                }
            }
        }
        #endregion Tests Generated Properties

        #region Tests Generated for GetTideDataValueWithTideDataValueID(tideDataValue.TideDataValueID)
        [Fact]
        public void GetTideDataValueWithTideDataValueID__tideDataValue_TideDataValueID__Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    TideDataValue tideDataValue = (from c in dbTestDB.TideDataValues select c).FirstOrDefault();
                    Assert.NotNull(tideDataValue);

                }
            }
        }
        #endregion Tests Generated for GetTideDataValueWithTideDataValueID(tideDataValue.TideDataValueID)

        #region Tests Generated for GetTideDataValueList()
        [Fact]
        public void GetTideDataValueList_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);
                    TideDataValue tideDataValue = (from c in dbTestDB.TideDataValues select c).FirstOrDefault();
                    Assert.NotNull(tideDataValue);

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Take(200).ToList();

                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList()

        #region Tests Generated for GetTideDataValueList() Skip Take
        [Fact]
        public void GetTideDataValueList_Skip_Take_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 1, 1, "", "");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Skip(1).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take

        #region Tests Generated for GetTideDataValueList() Skip Take Asc
        [Fact]
        public void GetTideDataValueList_Skip_Take_Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 1, 1,  "TideDataValueID", "", "");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).OrderBy(c => c.TideDataValueID).Skip(1).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Asc

        #region Tests Generated for GetTideDataValueList() Skip Take 2 Asc
        [Fact]
        public void GetTideDataValueList_Skip_Take_2Asc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 1, 1, "TideDataValueID,TideSiteTVItemID", "", "");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).OrderBy(c => c.TideDataValueID).ThenBy(c => c.TideSiteTVItemID).Skip(1).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take 2 Asc

        #region Tests Generated for GetTideDataValueList() Skip Take Asc Where
        [Fact]
        public void GetTideDataValueList_Skip_Take_Asc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 0, 1, "TideDataValueID", "", "TideDataValueID,EQ,4");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Where(c => c.TideDataValueID == 4).OrderBy(c => c.TideDataValueID).Skip(0).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Asc Where

        #region Tests Generated for GetTideDataValueList() Skip Take Asc 2 Where
        [Fact]
        public void GetTideDataValueList_Skip_Take_Asc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                     TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                     tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 0, 1, "TideDataValueID", "", "TideDataValueID,GT,2|TideDataValueID,LT,5");

                     List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                     tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Where(c => c.TideDataValueID > 2 && c.TideDataValueID < 5).Skip(0).Take(1).OrderBy(c => c.TideDataValueID).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Asc 2 Where

        #region Tests Generated for GetTideDataValueList() Skip Take Desc
        [Fact]
        public void GetTideDataValueList_Skip_Take_Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 1, 1, "", "TideDataValueID", "");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).OrderByDescending(c => c.TideDataValueID).Skip(1).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Desc

        #region Tests Generated for GetTideDataValueList() Skip Take 2 Desc
        [Fact]
        public void GetTideDataValueList_Skip_Take_2Desc_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 1, 1, "", "TideDataValueID,TideSiteTVItemID", "");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).OrderByDescending(c => c.TideDataValueID).ThenByDescending(c => c.TideSiteTVItemID).Skip(1).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take 2 Desc

        #region Tests Generated for GetTideDataValueList() Skip Take Desc Where
        [Fact]
        public void GetTideDataValueList_Skip_Take_Desc_Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 0, 1, "TideDataValueID", "", "TideDataValueID,EQ,4");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Where(c => c.TideDataValueID == 4).OrderByDescending(c => c.TideDataValueID).Skip(0).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Desc Where

        #region Tests Generated for GetTideDataValueList() Skip Take Desc 2 Where
        [Fact]
        public void GetTideDataValueList_Skip_Take_Desc_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 0, 1, "", "TideDataValueID", "TideDataValueID,GT,2|TideDataValueID,LT,5");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Where(c => c.TideDataValueID > 2 && c.TideDataValueID < 5).OrderByDescending(c => c.TideDataValueID).Skip(0).Take(1).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() Skip Take Desc 2 Where

        #region Tests Generated for GetTideDataValueList() 2 Where
        [Fact]
        public void GetTideDataValueList_2Where_Test()
        {
            foreach (CultureInfo culture in AllowableCulture)
            {
                ChangeCulture(culture);

                using (CSSPDBContext dbTestDB = new CSSPDBContext(DatabaseTypeEnum.SqlServerTestDB))
                {
                    TideDataValueService tideDataValueService = new TideDataValueService(new Query() { Lang = culture.TwoLetterISOLanguageName }, dbTestDB, ContactID);

                    tideDataValueService.Query = tideDataValueService.FillQuery(typeof(TideDataValue), culture.TwoLetterISOLanguageName, 0, 10000, "", "", "TideDataValueID,GT,2|TideDataValueID,LT,5");

                    List<TideDataValue> tideDataValueDirectQueryList = new List<TideDataValue>();
                    tideDataValueDirectQueryList = (from c in dbTestDB.TideDataValues select c).Where(c => c.TideDataValueID > 2 && c.TideDataValueID < 5).ToList();

                        List<TideDataValue> tideDataValueList = new List<TideDataValue>();
                        tideDataValueList = tideDataValueService.GetTideDataValueList().ToList();
                        CheckTideDataValueFields(tideDataValueList);
                        Assert.Equal(tideDataValueDirectQueryList[0].TideDataValueID, tideDataValueList[0].TideDataValueID);
                }
            }
        }
        #endregion Tests Generated for GetTideDataValueList() 2 Where

        #region Functions private
        private void CheckTideDataValueFields(List<TideDataValue> tideDataValueList)
        {
            if (tideDataValueList[0].TideStart != null)
            {
                Assert.NotNull(tideDataValueList[0].TideStart);
            }
            if (tideDataValueList[0].TideEnd != null)
            {
                Assert.NotNull(tideDataValueList[0].TideEnd);
            }
        }
        private TideDataValue GetFilledRandomTideDataValue(string OmitPropName)
        {
            TideDataValue tideDataValue = new TideDataValue();

            if (OmitPropName != "TideSiteTVItemID") tideDataValue.TideSiteTVItemID = 38;
            if (OmitPropName != "DateTime_Local") tideDataValue.DateTime_Local = new DateTime(2005, 3, 6);
            if (OmitPropName != "Keep") tideDataValue.Keep = true;
            if (OmitPropName != "TideDataType") tideDataValue.TideDataType = (TideDataTypeEnum)GetRandomEnumType(typeof(TideDataTypeEnum));
            if (OmitPropName != "StorageDataType") tideDataValue.StorageDataType = (StorageDataTypeEnum)GetRandomEnumType(typeof(StorageDataTypeEnum));
            if (OmitPropName != "Depth_m") tideDataValue.Depth_m = GetRandomDouble(0.0D, 10000.0D);
            if (OmitPropName != "UVelocity_m_s") tideDataValue.UVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "VVelocity_m_s") tideDataValue.VVelocity_m_s = GetRandomDouble(0.0D, 10.0D);
            if (OmitPropName != "TideStart") tideDataValue.TideStart = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "TideEnd") tideDataValue.TideEnd = (TideTextEnum)GetRandomEnumType(typeof(TideTextEnum));
            if (OmitPropName != "LastUpdateDate_UTC") tideDataValue.LastUpdateDate_UTC = new DateTime(2005, 3, 6);
            if (OmitPropName != "LastUpdateContactTVItemID") tideDataValue.LastUpdateContactTVItemID = 2;

            return tideDataValue;
        }
        #endregion Functions private
    }
}
