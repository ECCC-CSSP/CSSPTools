/* Auto generated from C:\CSSPTools\src\codegen\tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

using CSSPModels;
using CSSPServices;
using CultureServices.Services;
using LoggedInServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSSPWebAPI.Controllers
{
    public partial interface IAddressController
    {
        Task<ActionResult<List<Address>>> Get();
        Task<ActionResult<Address>> Get(int AddressID);
        Task<ActionResult<Address>> Post(Address Address);
        Task<ActionResult<Address>> Put(Address Address);
        Task<ActionResult<bool>> Delete(int AddressID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class AddressController : ControllerBase, IAddressController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICultureService CultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IAddressService AddressService { get; }
        #endregion Properties

        #region Constructors
        public AddressController(ICultureService CultureService, ILoggedInService LoggedInService, IAddressService AddressService)
        {
            this.CultureService = CultureService;
            this.LoggedInService = LoggedInService;
            this.AddressService = AddressService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<Address>>> Get()
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await AddressService.GetAddressList();
        }
        [HttpGet("{AddressID}")]
        public async Task<ActionResult<Address>> Get(int AddressID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await AddressService.GetAddressWithAddressID(AddressID);
        }
        [HttpPost]
        public async Task<ActionResult<Address>> Post(Address Address)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await AddressService.Post(Address);
        }
        [HttpPut]
        public async Task<ActionResult<Address>> Put(Address Address)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await AddressService.Put(Address);
        }
        [HttpDelete("{AddressID}")]
        public async Task<ActionResult<bool>> Delete(int AddressID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await AddressService.Delete(AddressID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
