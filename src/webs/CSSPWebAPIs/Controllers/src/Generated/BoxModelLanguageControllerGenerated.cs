/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\WebAPIClassNameControllerGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPModels;
using CSSPServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSSPWebAPIs.Controllers
{
    public partial interface IBoxModelLanguageController
    {
        Task<ActionResult<List<BoxModelLanguage>>> Get();
        Task<ActionResult<BoxModelLanguage>> Get(int BoxModelLanguageID);
        Task<ActionResult<BoxModelLanguage>> Post(BoxModelLanguage BoxModelLanguage);
        Task<ActionResult<BoxModelLanguage>> Put(BoxModelLanguage BoxModelLanguage);
        Task<ActionResult<bool>> Delete(int BoxModelLanguageID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class BoxModelLanguageController : ControllerBase, IBoxModelLanguageController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IBoxModelLanguageService BoxModelLanguageService { get; }
        #endregion Properties

        #region Constructors
        public BoxModelLanguageController(ICSSPCultureService CSSPCultureService, ILoggedInService LoggedInService, IBoxModelLanguageService BoxModelLanguageService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LoggedInService = LoggedInService;
            this.BoxModelLanguageService = BoxModelLanguageService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<BoxModelLanguage>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await BoxModelLanguageService.GetBoxModelLanguageList();
        }
        [HttpGet("{BoxModelLanguageID}")]
        public async Task<ActionResult<BoxModelLanguage>> Get(int BoxModelLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await BoxModelLanguageService.GetBoxModelLanguageWithBoxModelLanguageID(BoxModelLanguageID);
        }
        [HttpPost]
        public async Task<ActionResult<BoxModelLanguage>> Post(BoxModelLanguage BoxModelLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await BoxModelLanguageService.Post(BoxModelLanguage);
        }
        [HttpPut]
        public async Task<ActionResult<BoxModelLanguage>> Put(BoxModelLanguage BoxModelLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await BoxModelLanguageService.Put(BoxModelLanguage);
        }
        [HttpDelete("{BoxModelLanguageID}")]
        public async Task<ActionResult<bool>> Delete(int BoxModelLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await BoxModelLanguageService.Delete(BoxModelLanguageID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
