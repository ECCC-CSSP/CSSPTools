/* Auto generated from C:\CSSPTools\src\codegen\tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPModels;
using CSSPServices;
using CultureServices.Services;
using LoggedInServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSSPWebAPI.Controllers
{
    public partial interface IContactController
    {
        Task<ActionResult<List<Contact>>> Get();
        Task<ActionResult<Contact>> Get(int ContactID);
        Task<ActionResult<Contact>> Post(Contact Contact);
        Task<ActionResult<Contact>> Put(Contact Contact);
        Task<ActionResult<bool>> Delete(int ContactID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class ContactController : ControllerBase, IContactController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICultureService CultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IContactService ContactService { get; }
        #endregion Properties

        #region Constructors
        public ContactController(ICultureService CultureService, ILoggedInService LoggedInService, IContactService ContactService)
        {
            this.CultureService = CultureService;
            this.LoggedInService = LoggedInService;
            this.ContactService = ContactService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<Contact>>> Get()
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactService.GetContactList();
        }
        [HttpGet("{ContactID}")]
        public async Task<ActionResult<Contact>> Get(int ContactID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactService.GetContactWithContactID(ContactID);
        }
        [HttpPost]
        public async Task<ActionResult<Contact>> Post(Contact Contact)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactService.Post(Contact, AddContactTypeEnum.Register);
        }
        [HttpPut]
        public async Task<ActionResult<Contact>> Put(Contact Contact)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactService.Put(Contact);
        }
        [HttpDelete("{ContactID}")]
        public async Task<ActionResult<bool>> Delete(int ContactID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactService.Delete(ContactID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
