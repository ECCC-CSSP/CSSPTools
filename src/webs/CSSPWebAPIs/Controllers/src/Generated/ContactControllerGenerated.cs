/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\WebAPIClassNameControllerGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPEnums;
using CSSPDBModels;
using CSSPDBServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LoggedInServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface IContactController
    {
        Task<ActionResult<List<Contact>>> Get();
        Task<ActionResult<Contact>> Get(int ContactID);
        Task<ActionResult<Contact>> Post(Contact Contact);
        Task<ActionResult<Contact>> Put(Contact Contact);
        Task<ActionResult<bool>> Delete(int ContactID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class ContactController : ControllerBase, IContactController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IContactDBService ContactDBService { get; }
        #endregion Properties

        #region Constructors
        public ContactController(ICSSPCultureService CSSPCultureService, ILoggedInService LoggedInService, IContactDBService ContactDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LoggedInService = LoggedInService;
            this.ContactDBService = ContactDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<Contact>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactDBService.GetContactList();
        }
        [HttpGet("{ContactID}")]
        public async Task<ActionResult<Contact>> Get(int ContactID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactDBService.GetContactWithContactID(ContactID);
        }
        [HttpPost]
        public async Task<ActionResult<Contact>> Post(Contact Contact)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactDBService.Post(Contact, AddContactTypeEnum.Register);
        }
        [HttpPut]
        public async Task<ActionResult<Contact>> Put(Contact Contact)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactDBService.Put(Contact);
        }
        [HttpDelete("{ContactID}")]
        public async Task<ActionResult<bool>> Delete(int ContactID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await ContactDBService.Delete(ContactID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
