/* Auto generated from C:\CSSPTools\src\codegen\tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

using CSSPModels;
using CSSPServices;
using CultureServices.Services;
using LoggedInServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSSPWebAPI.Controllers
{
    public partial interface IHydrometricSiteController
    {
        Task<ActionResult<List<HydrometricSite>>> Get();
        Task<ActionResult<HydrometricSite>> Get(int HydrometricSiteID);
        Task<ActionResult<HydrometricSite>> Post(HydrometricSite HydrometricSite);
        Task<ActionResult<HydrometricSite>> Put(HydrometricSite HydrometricSite);
        Task<ActionResult<bool>> Delete(int HydrometricSiteID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class HydrometricSiteController : ControllerBase, IHydrometricSiteController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICultureService CultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IHydrometricSiteService HydrometricSiteService { get; }
        #endregion Properties

        #region Constructors
        public HydrometricSiteController(ICultureService CultureService, ILoggedInService LoggedInService, IHydrometricSiteService HydrometricSiteService)
        {
            this.CultureService = CultureService;
            this.LoggedInService = LoggedInService;
            this.HydrometricSiteService = HydrometricSiteService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<HydrometricSite>>> Get()
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await HydrometricSiteService.GetHydrometricSiteList();
        }
        [HttpGet("{HydrometricSiteID}")]
        public async Task<ActionResult<HydrometricSite>> Get(int HydrometricSiteID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await HydrometricSiteService.GetHydrometricSiteWithHydrometricSiteID(HydrometricSiteID);
        }
        [HttpPost]
        public async Task<ActionResult<HydrometricSite>> Post(HydrometricSite HydrometricSite)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await HydrometricSiteService.Post(HydrometricSite);
        }
        [HttpPut]
        public async Task<ActionResult<HydrometricSite>> Put(HydrometricSite HydrometricSite)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await HydrometricSiteService.Put(HydrometricSite);
        }
        [HttpDelete("{HydrometricSiteID}")]
        public async Task<ActionResult<bool>> Delete(int HydrometricSiteID)
        {
            CultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await HydrometricSiteService.Delete(HydrometricSiteID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
