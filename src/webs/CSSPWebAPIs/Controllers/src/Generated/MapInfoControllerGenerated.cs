/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\WebAPIClassNameControllerGenerated.exe
 *
 * Do not edit this file.
 *
 */

using CSSPModels;
using CSSPServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CSSPWebAPIs.Controllers
{
    public partial interface IMapInfoController
    {
        Task<ActionResult<List<MapInfo>>> Get();
        Task<ActionResult<MapInfo>> Get(int MapInfoID);
        Task<ActionResult<MapInfo>> Post(MapInfo MapInfo);
        Task<ActionResult<MapInfo>> Put(MapInfo MapInfo);
        Task<ActionResult<bool>> Delete(int MapInfoID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class MapInfoController : ControllerBase, IMapInfoController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IMapInfoService MapInfoService { get; }
        #endregion Properties

        #region Constructors
        public MapInfoController(ICSSPCultureService CSSPCultureService, ILoggedInService LoggedInService, IMapInfoService MapInfoService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LoggedInService = LoggedInService;
            this.MapInfoService = MapInfoService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<MapInfo>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoService.GetMapInfoList();
        }
        [HttpGet("{MapInfoID}")]
        public async Task<ActionResult<MapInfo>> Get(int MapInfoID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoService.GetMapInfoWithMapInfoID(MapInfoID);
        }
        [HttpPost]
        public async Task<ActionResult<MapInfo>> Post(MapInfo MapInfo)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoService.Post(MapInfo);
        }
        [HttpPut]
        public async Task<ActionResult<MapInfo>> Put(MapInfo MapInfo)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoService.Put(MapInfo);
        }
        [HttpDelete("{MapInfoID}")]
        public async Task<ActionResult<bool>> Delete(int MapInfoID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoService.Delete(MapInfoID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
