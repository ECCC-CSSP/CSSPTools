/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBModels;
using CSSPDBServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LoggedInServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface IMapInfoPointController
    {
        Task<ActionResult<List<MapInfoPoint>>> Get();
        Task<ActionResult<MapInfoPoint>> Get(int MapInfoPointID);
        Task<ActionResult<MapInfoPoint>> Post(MapInfoPoint MapInfoPoint);
        Task<ActionResult<MapInfoPoint>> Put(MapInfoPoint MapInfoPoint);
        Task<ActionResult<bool>> Delete(int MapInfoPointID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    [Authorize]
    public partial class MapInfoPointController : ControllerBase, IMapInfoPointController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILoggedInService LoggedInService { get; }
        private IMapInfoPointDBService MapInfoPointDBService { get; }
        #endregion Properties

        #region Constructors
        public MapInfoPointController(ICSSPCultureService CSSPCultureService, ILoggedInService LoggedInService, IMapInfoPointDBService MapInfoPointDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LoggedInService = LoggedInService;
            this.MapInfoPointDBService = MapInfoPointDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<MapInfoPoint>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoPointDBService.GetMapInfoPointList();
        }
        [HttpGet("{MapInfoPointID}")]
        public async Task<ActionResult<MapInfoPoint>> Get(int MapInfoPointID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoPointDBService.GetMapInfoPointWithMapInfoPointID(MapInfoPointID);
        }
        [HttpPost]
        public async Task<ActionResult<MapInfoPoint>> Post(MapInfoPoint MapInfoPoint)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoPointDBService.Post(MapInfoPoint);
        }
        [HttpPut]
        public async Task<ActionResult<MapInfoPoint>> Put(MapInfoPoint MapInfoPoint)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoPointDBService.Put(MapInfoPoint);
        }
        [HttpDelete("{MapInfoPointID}")]
        public async Task<ActionResult<bool>> Delete(int MapInfoPointID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LoggedInService.SetLoggedInContactInfo(User.Identity.Name);

            return await MapInfoPointDBService.Delete(MapInfoPointID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
