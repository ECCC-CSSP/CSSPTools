/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsLocalController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBLocalModels;
using CSSPDBLocalServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LocalServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface ILocalAppTaskLanguageController
    {
        Task<ActionResult<List<LocalAppTaskLanguage>>> Get();
        Task<ActionResult<LocalAppTaskLanguage>> Get(int LocalAppTaskLanguageID);
        Task<ActionResult<LocalAppTaskLanguage>> Post(LocalAppTaskLanguage LocalAppTaskLanguage);
        Task<ActionResult<LocalAppTaskLanguage>> Put(LocalAppTaskLanguage LocalAppTaskLanguage);
        Task<ActionResult<bool>> Delete(int LocalAppTaskLanguageID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    public partial class LocalAppTaskLanguageController : ControllerBase, ILocalAppTaskLanguageController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private ILocalAppTaskLanguageDBService LocalAppTaskLanguageDBService { get; }
        #endregion Properties

        #region Constructors
        public LocalAppTaskLanguageController(ICSSPCultureService CSSPCultureService, ILocalService LocalService, ILocalAppTaskLanguageDBService LocalAppTaskLanguageDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.LocalAppTaskLanguageDBService = LocalAppTaskLanguageDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<LocalAppTaskLanguage>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageList();
        }
        [HttpGet("{LocalAppTaskLanguageID}")]
        public async Task<ActionResult<LocalAppTaskLanguage>> Get(int AppTaskLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalAppTaskLanguageDBService.GetLocalAppTaskLanguageWithAppTaskLanguageID(AppTaskLanguageID);
        }
        [HttpPost]
        public async Task<ActionResult<LocalAppTaskLanguage>> Post(LocalAppTaskLanguage LocalAppTaskLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalAppTaskLanguageDBService.Post(LocalAppTaskLanguage);
        }
        [HttpPut]
        public async Task<ActionResult<LocalAppTaskLanguage>> Put(LocalAppTaskLanguage LocalAppTaskLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalAppTaskLanguageDBService.Put(LocalAppTaskLanguage);
        }
        [HttpDelete("{LocalAppTaskLanguageID}")]
        public async Task<ActionResult<bool>> Delete(int LocalAppTaskLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalAppTaskLanguageDBService.Delete(LocalAppTaskLanguageID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
