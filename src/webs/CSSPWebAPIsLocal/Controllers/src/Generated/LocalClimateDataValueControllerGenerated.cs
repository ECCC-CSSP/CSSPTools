/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsLocalController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBLocalModels;
using CSSPDBLocalServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LocalServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface ILocalClimateDataValueController
    {
        Task<ActionResult<List<LocalClimateDataValue>>> Get();
        Task<ActionResult<LocalClimateDataValue>> Get(int LocalClimateDataValueID);
        Task<ActionResult<LocalClimateDataValue>> Post(LocalClimateDataValue LocalClimateDataValue);
        Task<ActionResult<LocalClimateDataValue>> Put(LocalClimateDataValue LocalClimateDataValue);
        Task<ActionResult<bool>> Delete(int LocalClimateDataValueID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    public partial class LocalClimateDataValueController : ControllerBase, ILocalClimateDataValueController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private ILocalClimateDataValueDBService LocalClimateDataValueDBService { get; }
        #endregion Properties

        #region Constructors
        public LocalClimateDataValueController(ICSSPCultureService CSSPCultureService, ILocalService LocalService, ILocalClimateDataValueDBService LocalClimateDataValueDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.LocalClimateDataValueDBService = LocalClimateDataValueDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<LocalClimateDataValue>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalClimateDataValueDBService.GetLocalClimateDataValueList();
        }
        [HttpGet("{LocalClimateDataValueID}")]
        public async Task<ActionResult<LocalClimateDataValue>> Get(int ClimateDataValueID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalClimateDataValueDBService.GetLocalClimateDataValueWithClimateDataValueID(ClimateDataValueID);
        }
        [HttpPost]
        public async Task<ActionResult<LocalClimateDataValue>> Post(LocalClimateDataValue LocalClimateDataValue)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalClimateDataValueDBService.Post(LocalClimateDataValue);
        }
        [HttpPut]
        public async Task<ActionResult<LocalClimateDataValue>> Put(LocalClimateDataValue LocalClimateDataValue)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalClimateDataValueDBService.Put(LocalClimateDataValue);
        }
        [HttpDelete("{LocalClimateDataValueID}")]
        public async Task<ActionResult<bool>> Delete(int LocalClimateDataValueID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalClimateDataValueDBService.Delete(LocalClimateDataValueID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
