/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsLocalController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBLocalModels;
using CSSPDBLocalServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LocalServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface ILocalPolSourceGroupingController
    {
        Task<ActionResult<List<LocalPolSourceGrouping>>> Get();
        Task<ActionResult<LocalPolSourceGrouping>> Get(int LocalPolSourceGroupingID);
        Task<ActionResult<LocalPolSourceGrouping>> Post(LocalPolSourceGrouping LocalPolSourceGrouping);
        Task<ActionResult<LocalPolSourceGrouping>> Put(LocalPolSourceGrouping LocalPolSourceGrouping);
        Task<ActionResult<bool>> Delete(int LocalPolSourceGroupingID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    public partial class LocalPolSourceGroupingController : ControllerBase, ILocalPolSourceGroupingController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private ILocalPolSourceGroupingDBService LocalPolSourceGroupingDBService { get; }
        #endregion Properties

        #region Constructors
        public LocalPolSourceGroupingController(ICSSPCultureService CSSPCultureService, ILocalService LocalService, ILocalPolSourceGroupingDBService LocalPolSourceGroupingDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.LocalPolSourceGroupingDBService = LocalPolSourceGroupingDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<LocalPolSourceGrouping>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingList();
        }
        [HttpGet("{LocalPolSourceGroupingID}")]
        public async Task<ActionResult<LocalPolSourceGrouping>> Get(int PolSourceGroupingID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalPolSourceGroupingDBService.GetLocalPolSourceGroupingWithPolSourceGroupingID(PolSourceGroupingID);
        }
        [HttpPost]
        public async Task<ActionResult<LocalPolSourceGrouping>> Post(LocalPolSourceGrouping LocalPolSourceGrouping)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalPolSourceGroupingDBService.Post(LocalPolSourceGrouping);
        }
        [HttpPut]
        public async Task<ActionResult<LocalPolSourceGrouping>> Put(LocalPolSourceGrouping LocalPolSourceGrouping)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalPolSourceGroupingDBService.Put(LocalPolSourceGrouping);
        }
        [HttpDelete("{LocalPolSourceGroupingID}")]
        public async Task<ActionResult<bool>> Delete(int LocalPolSourceGroupingID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalPolSourceGroupingDBService.Delete(LocalPolSourceGroupingID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
