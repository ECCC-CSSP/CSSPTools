/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsLocalController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBLocalModels;
using CSSPDBLocalServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LocalServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface ILocalSamplingPlanSubsectorController
    {
        Task<ActionResult<List<LocalSamplingPlanSubsector>>> Get();
        Task<ActionResult<LocalSamplingPlanSubsector>> Get(int LocalSamplingPlanSubsectorID);
        Task<ActionResult<LocalSamplingPlanSubsector>> Post(LocalSamplingPlanSubsector LocalSamplingPlanSubsector);
        Task<ActionResult<LocalSamplingPlanSubsector>> Put(LocalSamplingPlanSubsector LocalSamplingPlanSubsector);
        Task<ActionResult<bool>> Delete(int LocalSamplingPlanSubsectorID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    public partial class LocalSamplingPlanSubsectorController : ControllerBase, ILocalSamplingPlanSubsectorController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private ILocalSamplingPlanSubsectorDBService LocalSamplingPlanSubsectorDBService { get; }
        #endregion Properties

        #region Constructors
        public LocalSamplingPlanSubsectorController(ICSSPCultureService CSSPCultureService, ILocalService LocalService, ILocalSamplingPlanSubsectorDBService LocalSamplingPlanSubsectorDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.LocalSamplingPlanSubsectorDBService = LocalSamplingPlanSubsectorDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<LocalSamplingPlanSubsector>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorList();
        }
        [HttpGet("{LocalSamplingPlanSubsectorID}")]
        public async Task<ActionResult<LocalSamplingPlanSubsector>> Get(int SamplingPlanSubsectorID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalSamplingPlanSubsectorDBService.GetLocalSamplingPlanSubsectorWithSamplingPlanSubsectorID(SamplingPlanSubsectorID);
        }
        [HttpPost]
        public async Task<ActionResult<LocalSamplingPlanSubsector>> Post(LocalSamplingPlanSubsector LocalSamplingPlanSubsector)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalSamplingPlanSubsectorDBService.Post(LocalSamplingPlanSubsector);
        }
        [HttpPut]
        public async Task<ActionResult<LocalSamplingPlanSubsector>> Put(LocalSamplingPlanSubsector LocalSamplingPlanSubsector)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalSamplingPlanSubsectorDBService.Put(LocalSamplingPlanSubsector);
        }
        [HttpDelete("{LocalSamplingPlanSubsectorID}")]
        public async Task<ActionResult<bool>> Delete(int LocalSamplingPlanSubsectorID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalSamplingPlanSubsectorDBService.Delete(LocalSamplingPlanSubsectorID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
