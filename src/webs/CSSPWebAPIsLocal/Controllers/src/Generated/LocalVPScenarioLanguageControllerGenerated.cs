/* Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateCSSPWebAPIsLocalController.exe
 *
 * Do not edit this file.
 *
 */

using CSSPDBLocalModels;
using CSSPDBLocalServices;
using CSSPCultureServices.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using LocalServices;

namespace CSSPWebAPIs.Controllers
{
    public partial interface ILocalVPScenarioLanguageController
    {
        Task<ActionResult<List<LocalVPScenarioLanguage>>> Get();
        Task<ActionResult<LocalVPScenarioLanguage>> Get(int LocalVPScenarioLanguageID);
        Task<ActionResult<LocalVPScenarioLanguage>> Post(LocalVPScenarioLanguage LocalVPScenarioLanguage);
        Task<ActionResult<LocalVPScenarioLanguage>> Put(LocalVPScenarioLanguage LocalVPScenarioLanguage);
        Task<ActionResult<bool>> Delete(int LocalVPScenarioLanguageID);
    }

    [Route("api/{culture}/[controller]")]
    [ApiController]
    public partial class LocalVPScenarioLanguageController : ControllerBase, ILocalVPScenarioLanguageController
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ICSSPCultureService CSSPCultureService { get; }
        private ILocalService LocalService { get; }
        private ILocalVPScenarioLanguageDBService LocalVPScenarioLanguageDBService { get; }
        #endregion Properties

        #region Constructors
        public LocalVPScenarioLanguageController(ICSSPCultureService CSSPCultureService, ILocalService LocalService, ILocalVPScenarioLanguageDBService LocalVPScenarioLanguageDBService)
        {
            this.CSSPCultureService = CSSPCultureService;
            this.LocalService = LocalService;
            this.LocalVPScenarioLanguageDBService = LocalVPScenarioLanguageDBService;
        }
        #endregion Constructors

        #region Functions public
        [HttpGet]
        public async Task<ActionResult<List<LocalVPScenarioLanguage>>> Get()
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalVPScenarioLanguageDBService.GetLocalVPScenarioLanguageList();
        }
        [HttpGet("{LocalVPScenarioLanguageID}")]
        public async Task<ActionResult<LocalVPScenarioLanguage>> Get(int VPScenarioLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalVPScenarioLanguageDBService.GetLocalVPScenarioLanguageWithVPScenarioLanguageID(VPScenarioLanguageID);
        }
        [HttpPost]
        public async Task<ActionResult<LocalVPScenarioLanguage>> Post(LocalVPScenarioLanguage LocalVPScenarioLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalVPScenarioLanguageDBService.Post(LocalVPScenarioLanguage);
        }
        [HttpPut]
        public async Task<ActionResult<LocalVPScenarioLanguage>> Put(LocalVPScenarioLanguage LocalVPScenarioLanguage)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalVPScenarioLanguageDBService.Put(LocalVPScenarioLanguage);
        }
        [HttpDelete("{LocalVPScenarioLanguageID}")]
        public async Task<ActionResult<bool>> Delete(int LocalVPScenarioLanguageID)
        {
            CSSPCultureService.SetCulture((string)RouteData.Values["culture"]);
            await LocalService.SetLoggedInContactInfo();

            return await LocalVPScenarioLanguageDBService.Delete(LocalVPScenarioLanguageID);
        }
        #endregion Functions public

        #region Functions private
        #endregion Functions private
    }
}
