/*
 * Auto generated C:\CSSPTools\src\codegen\_package\net5.0\GenerateAngularEnums.exe
 *
 * Do not edit this file.
 *
 */

import { AppStateService } from 'src/app/services/app-state.service';
import { EnumIDAndText } from 'src/app/models/generated/helper/EnumIDAndText.model';
import { LanguageEnum } from 'src/app/enums/generated/LanguageEnum';

export enum DBCommandEnum {
    Original = 1,
    Modified = 2,
    Created = 3,
    Deleted = 4,
}

export function GetDBCommandEnum(): typeof DBCommandEnum
{
  return DBCommandEnum;
}

export function DBCommandEnum_GetOrderedText(appStateService: AppStateService): EnumIDAndText[] {
    let enumTextOrderedList: EnumIDAndText[] = [];
    if (appStateService.AppState$?.getValue().Language == LanguageEnum.fr) {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Original' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Modifié' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'Créé' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Effacé' });
    }
    else {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Original' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Modified' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'Created' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Deleted' });
    }

    return enumTextOrderedList.sort((a, b) => a.EnumText.localeCompare(b.EnumText));
}

export function DBCommandEnum_GetIDText(enumID: number, appStateService: AppStateService): string {
    let addressTypeEnunText: string;
    DBCommandEnum_GetOrderedText(appStateService).forEach(e => {
        if (e.EnumID == enumID) {
            addressTypeEnunText = e.EnumText;
            return false;
        }
    });

    return addressTypeEnunText;
}
