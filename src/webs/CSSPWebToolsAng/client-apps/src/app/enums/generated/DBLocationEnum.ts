/*
 * Auto generated C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularEnumsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { EnumIDAndText } from '../../models/generated/EnumIDAndText.model';

export enum DBLocationEnum {
    Local = 1,
    Server = 2,
    InMemory = 3,
    Login = 4,
}

export function DBLocationEnum_GetOrderedText(): EnumIDAndText[] {
    let enumTextOrderedList: EnumIDAndText[] = [];
    if ($localize.locale === 'fr-CA') {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Locale' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Serveur' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'En mÃ©moire' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Login (fr)' });
    }
    else {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Local' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Server' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'In Memory' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Login' });
    }

    return enumTextOrderedList.sort((a, b) => a.EnumText.localeCompare(b.EnumText));
}

export function DBLocationEnum_GetIDText(enumID: number): string {
    let addressTypeEnunText: string;
    DBLocationEnum_GetOrderedText().forEach(e => {
        if (e.EnumID == enumID) {
            addressTypeEnunText = e.EnumText;
            return false;
        }
    });

    return addressTypeEnunText;
}
