/*
 * Auto generated C:\CSSPTools\src\codegen\GenerateAngularEnums\bin\Debug\net6.0\GenerateAngularEnums.exe
 *
 * Do not edit this file.
 *
 */

import { AppLanguageService } from 'src/app/services/app/app-language.service';
import { EnumIDAndText } from 'src/app/models/generated/models/EnumIDAndText.model';
import { LanguageEnum } from 'src/app/enums/generated/LanguageEnum';

export enum FilePurposeEnum {
    MikeInput = 1,
    MikeInputMDF = 2,
    MikeResultDFSU = 3,
    MikeResultKMZ = 4,
    Information = 5,
    Image = 6,
    Picture = 7,
    ReportGenerated = 8,
    TemplateGenerated = 9,
    GeneratedFCForm = 10,
    Template = 11,
    Map = 12,
    Analysis = 13,
    OpenData = 14,
}

export function GetFilePurposeEnum(): typeof FilePurposeEnum
{
  return FilePurposeEnum;
}

export function FilePurposeEnum_GetOrderedText(appLanguageService: AppLanguageService): EnumIDAndText[] {
    let enumTextOrderedList: EnumIDAndText[] = [];
    if (appLanguageService.Language == LanguageEnum.fr) {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'MIKE données d\'entrées' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'MIKE données d\'entrées MDF' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'MIKE résultats DFSU' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'MIKE résultats KMZ' });
        enumTextOrderedList.push({ EnumID: 5, EnumText: 'Information' });
        enumTextOrderedList.push({ EnumID: 6, EnumText: 'Image' });
        enumTextOrderedList.push({ EnumID: 7, EnumText: 'Photo' });
        enumTextOrderedList.push({ EnumID: 8, EnumText: 'Rapport généré' });
        enumTextOrderedList.push({ EnumID: 9, EnumText: 'Générer à partir de modèle' });
        enumTextOrderedList.push({ EnumID: 10, EnumText: 'Formulaire CF' });
        enumTextOrderedList.push({ EnumID: 11, EnumText: 'Modèle' });
        enumTextOrderedList.push({ EnumID: 12, EnumText: 'Carte' });
        enumTextOrderedList.push({ EnumID: 13, EnumText: 'Analyses' });
        enumTextOrderedList.push({ EnumID: 14, EnumText: 'Données ouvertes' });
    }
    else {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'MIKE Input' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'MIKE Input MDF' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'MIKE Result DFSU' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'MIKE Result KMZ' });
        enumTextOrderedList.push({ EnumID: 5, EnumText: 'Information' });
        enumTextOrderedList.push({ EnumID: 6, EnumText: 'Image' });
        enumTextOrderedList.push({ EnumID: 7, EnumText: 'Picture' });
        enumTextOrderedList.push({ EnumID: 8, EnumText: 'Report Generated' });
        enumTextOrderedList.push({ EnumID: 9, EnumText: 'Template Generated' });
        enumTextOrderedList.push({ EnumID: 10, EnumText: 'Generated FC Form' });
        enumTextOrderedList.push({ EnumID: 11, EnumText: 'Template' });
        enumTextOrderedList.push({ EnumID: 12, EnumText: 'Map' });
        enumTextOrderedList.push({ EnumID: 13, EnumText: 'Analysis' });
        enumTextOrderedList.push({ EnumID: 14, EnumText: 'Open Data' });
    }

    return enumTextOrderedList.sort((a, b) => a.EnumText.localeCompare(b.EnumText));
}

export function FilePurposeEnum_GetIDText(enumID: number, appLanguageService: AppLanguageService): string {
    let FilePurposeEnumText: string;
    FilePurposeEnum_GetOrderedText(appLanguageService).forEach(e => {
        if (e.EnumID == enumID) {
            FilePurposeEnumText = e.EnumText;
            return false;
        }
    });

    return FilePurposeEnumText;
}
