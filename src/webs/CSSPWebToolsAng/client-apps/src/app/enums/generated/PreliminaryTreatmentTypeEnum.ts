/*
 * Auto generated C:\CSSPTools\src\codegen\_package\netcoreapp3.1\GenerateAngularEnums.exe
 *
 * Do not edit this file.
 *
 */

import { AppStateService } from 'src/app/services/app-state.service';
import { EnumIDAndText } from 'src/app/models/generated/helper/EnumIDAndText.model';
import { LanguageEnum } from 'src/app/enums/generated/LanguageEnum';

export enum PreliminaryTreatmentTypeEnum {
    NotApplicable = 1,
    BarScreen = 2,
    Grinder = 3,
    MechanicalScreening = 4,
}

export function GetPreliminaryTreatmentTypeEnum(): typeof PreliminaryTreatmentTypeEnum
{
  return PreliminaryTreatmentTypeEnum;
}

export function PreliminaryTreatmentTypeEnum_GetOrderedText(appStateService: AppStateService): EnumIDAndText[] {
    let enumTextOrderedList: EnumIDAndText[] = [];
    if (appStateService.AppState$?.getValue().Language == LanguageEnum.fr) {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Not applicable (fr)' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Bar screen (fr)' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'Grinder (fr)' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Mechanical screening (fr)' });
    }
    else {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'Not applicable' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Bar screen' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'Grinder' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'Mechanical screening' });
    }

    return enumTextOrderedList.sort((a, b) => a.EnumText.localeCompare(b.EnumText));
}

export function PreliminaryTreatmentTypeEnum_GetIDText(enumID: number, appStateService: AppStateService): string {
    let addressTypeEnunText: string;
    PreliminaryTreatmentTypeEnum_GetOrderedText(appStateService).forEach(e => {
        if (e.EnumID == enumID) {
            addressTypeEnunText = e.EnumText;
            return false;
        }
    });

    return addressTypeEnunText;
}
