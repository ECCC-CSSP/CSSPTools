/*
 * Auto generated C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularEnumsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { AppService } from '../../app.service';
import { EnumIDAndText } from '../../models/generated/EnumIDAndText.model';
import { LanguageEnum } from './LanguageEnum';

export enum ReportTreeNodeSubTypeEnum {
    TableSelectable = 1,
    Field = 2,
    FieldsHolder = 3,
    TableNotSelectable = 4,
}

export function ReportTreeNodeSubTypeEnum_GetOrderedText(appService: AppService): EnumIDAndText[] {
    let enumTextOrderedList: EnumIDAndText[] = [];
    if (appService.AppVar$?.getValue().Language == LanguageEnum.fr) {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'TableSelectable' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Field' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'FieldsHolder' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'TableNotSelectable' });
    }
    else {
        enumTextOrderedList.push({ EnumID: 1, EnumText: 'TableSelectable' });
        enumTextOrderedList.push({ EnumID: 2, EnumText: 'Field' });
        enumTextOrderedList.push({ EnumID: 3, EnumText: 'FieldsHolder' });
        enumTextOrderedList.push({ EnumID: 4, EnumText: 'TableNotSelectable' });
    }

    return enumTextOrderedList.sort((a, b) => a.EnumText.localeCompare(b.EnumText));
}

export function ReportTreeNodeSubTypeEnum_GetIDText(enumID: number, appService: AppService): string {
    let addressTypeEnunText: string;
    ReportTreeNodeSubTypeEnum_GetOrderedText(appService).forEach(e => {
        if (e.EnumID == enumID) {
            addressTypeEnunText = e.EnumText;
            return false;
        }
    });

    return addressTypeEnunText;
}
