/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AppErrLogTextModel, AppErrLogModel } from './apperrlog.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAppErrLogText } from './apperrlog.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AppErrLog } from 'src/app/models/generated/AppErrLog.model';

@Injectable({
  providedIn: 'root'
})
export class AppErrLogService {
  apperrlogTextModel$: BehaviorSubject<AppErrLogTextModel> = new BehaviorSubject<AppErrLogTextModel>(<AppErrLogTextModel>{});
  apperrlogModel$: BehaviorSubject<AppErrLogModel> = new BehaviorSubject<AppErrLogModel>(<AppErrLogModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesAppErrLogText(this);
    this.UpdateAppErrLogText(<AppErrLogTextModel>{ Title: "Something2 for text" });
  }

  UpdateAppErrLogText(apperrlogTextModel: AppErrLogTextModel) {
    this.apperrlogTextModel$.next(<AppErrLogTextModel>{ ...this.apperrlogTextModel$.getValue(), ...apperrlogTextModel });
  }

  UpdateAppErrLogModel(apperrlogModel: AppErrLogModel) {
    this.apperrlogModel$.next(<AppErrLogModel>{ ...this.apperrlogModel$.getValue(), ...apperrlogModel });
  }

  GetAppErrLog(router: Router) {
    let oldURL = router.url;
    this.UpdateAppErrLogModel(<AppErrLogModel>{ Working: true, Error: null });

    return this.httpClient.get<AppErrLog[]>('/api/AppErrLog').pipe(
      map((x: any) => {
        console.debug(`AppErrLog OK. Return: ${x}`);
        this.apperrlogModel$.getValue().AppErrLogList = <AppErrLog[]>x;
        this.UpdateAppErrLogModel(this.apperrlogModel$.getValue());
        this.UpdateAppErrLogModel(<AppErrLogModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateAppErrLogModel(<AppErrLogModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`AppErrLog ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
