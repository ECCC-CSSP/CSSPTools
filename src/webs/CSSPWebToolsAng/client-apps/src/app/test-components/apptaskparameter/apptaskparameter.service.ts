/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AppTaskParameterTextModel, AppTaskParameterModel } from './apptaskparameter.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAppTaskParameterText } from './apptaskparameter.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AppTaskParameter } from 'src/app/models/generated/AppTaskParameter.model';

@Injectable({
  providedIn: 'root'
})
export class AppTaskParameterService {
  apptaskparameterTextModel$: BehaviorSubject<AppTaskParameterTextModel> = new BehaviorSubject<AppTaskParameterTextModel>(<AppTaskParameterTextModel>{});
  apptaskparameterModel$: BehaviorSubject<AppTaskParameterModel> = new BehaviorSubject<AppTaskParameterModel>(<AppTaskParameterModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesAppTaskParameterText(this);
    this.UpdateAppTaskParameterText(<AppTaskParameterTextModel>{ Title: "Something2 for text" });
  }

  UpdateAppTaskParameterText(apptaskparameterTextModel: AppTaskParameterTextModel) {
    this.apptaskparameterTextModel$.next(<AppTaskParameterTextModel>{ ...this.apptaskparameterTextModel$.getValue(), ...apptaskparameterTextModel });
  }

  UpdateAppTaskParameterModel(apptaskparameterModel: AppTaskParameterModel) {
    this.apptaskparameterModel$.next(<AppTaskParameterModel>{ ...this.apptaskparameterModel$.getValue(), ...apptaskparameterModel });
  }

  GetAppTaskParameter(router: Router) {
    let oldURL = router.url;
    this.UpdateAppTaskParameterModel(<AppTaskParameterModel>{ Working: true, Error: null });

    return this.httpClient.get<AppTaskParameter[]>('/api/AppTaskParameter').pipe(
      map((x: any) => {
        console.debug(`AppTaskParameter OK. Return: ${x}`);
        this.apptaskparameterModel$.getValue().AppTaskParameterList = <AppTaskParameter[]>x;
        this.UpdateAppTaskParameterModel(this.apptaskparameterModel$.getValue());
        this.UpdateAppTaskParameterModel(<AppTaskParameterModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateAppTaskParameterModel(<AppTaskParameterModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`AppTaskParameter ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
