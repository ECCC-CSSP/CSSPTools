/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AspNetUserTextModel, AspNetUserModel } from './aspnetuser.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAspNetUserText } from './aspnetuser.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AspNetUser } from 'src/app/models/generated/AspNetUser.model';

@Injectable({
  providedIn: 'root'
})
export class AspNetUserService {
  aspnetuserTextModel$: BehaviorSubject<AspNetUserTextModel> = new BehaviorSubject<AspNetUserTextModel>(<AspNetUserTextModel>{});
  aspnetuserModel$: BehaviorSubject<AspNetUserModel> = new BehaviorSubject<AspNetUserModel>(<AspNetUserModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesAspNetUserText(this);
    this.UpdateAspNetUserText(<AspNetUserTextModel>{ Title: "Something2 for text" });
  }

  UpdateAspNetUserText(aspnetuserTextModel: AspNetUserTextModel) {
    this.aspnetuserTextModel$.next(<AspNetUserTextModel>{ ...this.aspnetuserTextModel$.getValue(), ...aspnetuserTextModel });
  }

  UpdateAspNetUserModel(aspnetuserModel: AspNetUserModel) {
    this.aspnetuserModel$.next(<AspNetUserModel>{ ...this.aspnetuserModel$.getValue(), ...aspnetuserModel });
  }

  GetAspNetUser(router: Router) {
    let oldURL = router.url;
    this.UpdateAspNetUserModel(<AspNetUserModel>{ Working: true, Error: null });

    return this.httpClient.get<AspNetUser[]>('/api/AspNetUser').pipe(
      map((x: any) => {
        console.debug(`AspNetUser OK. Return: ${x}`);
        this.aspnetuserModel$.getValue().AspNetUserList = <AspNetUser[]>x;
        this.UpdateAspNetUserModel(this.aspnetuserModel$.getValue());
        this.UpdateAspNetUserModel(<AspNetUserModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateAspNetUserModel(<AspNetUserModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`AspNetUser ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
