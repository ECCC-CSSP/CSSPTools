/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BoxModelResultTextModel, BoxModelResultModel } from './boxmodelresult.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBoxModelResultText } from './boxmodelresult.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BoxModelResult } from 'src/app/models/generated/BoxModelResult.model';

@Injectable({
  providedIn: 'root'
})
export class BoxModelResultService {
  boxmodelresultTextModel$: BehaviorSubject<BoxModelResultTextModel> = new BehaviorSubject<BoxModelResultTextModel>(<BoxModelResultTextModel>{});
  boxmodelresultModel$: BehaviorSubject<BoxModelResultModel> = new BehaviorSubject<BoxModelResultModel>(<BoxModelResultModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesBoxModelResultText(this);
    this.UpdateBoxModelResultText(<BoxModelResultTextModel>{ Title: "Something2 for text" });
  }

  UpdateBoxModelResultText(boxmodelresultTextModel: BoxModelResultTextModel) {
    this.boxmodelresultTextModel$.next(<BoxModelResultTextModel>{ ...this.boxmodelresultTextModel$.getValue(), ...boxmodelresultTextModel });
  }

  UpdateBoxModelResultModel(boxmodelresultModel: BoxModelResultModel) {
    this.boxmodelresultModel$.next(<BoxModelResultModel>{ ...this.boxmodelresultModel$.getValue(), ...boxmodelresultModel });
  }

  GetBoxModelResult(router: Router) {
    let oldURL = router.url;
    this.UpdateBoxModelResultModel(<BoxModelResultModel>{ Working: true, Error: null });

    return this.httpClient.get<BoxModelResult[]>('/api/BoxModelResult').pipe(
      map((x: any) => {
        console.debug(`BoxModelResult OK. Return: ${x}`);
        this.boxmodelresultModel$.getValue().BoxModelResultList = <BoxModelResult[]>x;
        this.UpdateBoxModelResultModel(this.boxmodelresultModel$.getValue());
        this.UpdateBoxModelResultModel(<BoxModelResultModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateBoxModelResultModel(<BoxModelResultModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`BoxModelResult ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
