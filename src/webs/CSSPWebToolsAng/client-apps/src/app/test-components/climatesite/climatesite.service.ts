/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ClimateSiteTextModel, ClimateSiteModel } from './climatesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesClimateSiteText } from './climatesite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ClimateSite } from 'src/app/models/generated/ClimateSite.model';

@Injectable({
  providedIn: 'root'
})
export class ClimateSiteService {
  climatesiteTextModel$: BehaviorSubject<ClimateSiteTextModel> = new BehaviorSubject<ClimateSiteTextModel>(<ClimateSiteTextModel>{});
  climatesiteModel$: BehaviorSubject<ClimateSiteModel> = new BehaviorSubject<ClimateSiteModel>(<ClimateSiteModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesClimateSiteText(this);
    this.UpdateClimateSiteText(<ClimateSiteTextModel>{ Title: "Something2 for text" });
  }

  UpdateClimateSiteText(climatesiteTextModel: ClimateSiteTextModel) {
    this.climatesiteTextModel$.next(<ClimateSiteTextModel>{ ...this.climatesiteTextModel$.getValue(), ...climatesiteTextModel });
  }

  UpdateClimateSiteModel(climatesiteModel: ClimateSiteModel) {
    this.climatesiteModel$.next(<ClimateSiteModel>{ ...this.climatesiteModel$.getValue(), ...climatesiteModel });
  }

  GetClimateSite(router: Router) {
    let oldURL = router.url;
    this.UpdateClimateSiteModel(<ClimateSiteModel>{ Working: true, Error: null });

    return this.httpClient.get<ClimateSite[]>('/api/ClimateSite').pipe(
      map((x: any) => {
        console.debug(`ClimateSite OK. Return: ${x}`);
        this.climatesiteModel$.getValue().ClimateSiteList = <ClimateSite[]>x;
        this.UpdateClimateSiteModel(this.climatesiteModel$.getValue());
        this.UpdateClimateSiteModel(<ClimateSiteModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateClimateSiteModel(<ClimateSiteModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ClimateSite ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
