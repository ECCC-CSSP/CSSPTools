/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactTextModel, ContactModel } from './contact.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactText } from './contact.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Contact } from 'src/app/models/generated/Contact.model';

@Injectable({
  providedIn: 'root'
})
export class ContactService {
  contactTextModel$: BehaviorSubject<ContactTextModel> = new BehaviorSubject<ContactTextModel>(<ContactTextModel>{});
  contactModel$: BehaviorSubject<ContactModel> = new BehaviorSubject<ContactModel>(<ContactModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesContactText(this);
    this.UpdateContactText(<ContactTextModel>{ Title: "Something2 for text" });
  }

  UpdateContactText(contactTextModel: ContactTextModel) {
    this.contactTextModel$.next(<ContactTextModel>{ ...this.contactTextModel$.getValue(), ...contactTextModel });
  }

  UpdateContactModel(contactModel: ContactModel) {
    this.contactModel$.next(<ContactModel>{ ...this.contactModel$.getValue(), ...contactModel });
  }

  GetContact(router: Router) {
    let oldURL = router.url;
    this.UpdateContactModel(<ContactModel>{ Working: true, Error: null });

    return this.httpClient.get<Contact[]>('/api/Contact').pipe(
      map((x: any) => {
        console.debug(`Contact OK. Return: ${x}`);
        this.contactModel$.getValue().ContactList = <Contact[]>x;
        this.UpdateContactModel(this.contactModel$.getValue());
        this.UpdateContactModel(<ContactModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateContactModel(<ContactModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Contact ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
