/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactPreferenceTextModel, ContactPreferenceModel } from './contactpreference.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactPreferenceText } from './contactpreference.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContactPreference } from 'src/app/models/generated/ContactPreference.model';

@Injectable({
  providedIn: 'root'
})
export class ContactPreferenceService {
  contactpreferenceTextModel$: BehaviorSubject<ContactPreferenceTextModel> = new BehaviorSubject<ContactPreferenceTextModel>(<ContactPreferenceTextModel>{});
  contactpreferenceModel$: BehaviorSubject<ContactPreferenceModel> = new BehaviorSubject<ContactPreferenceModel>(<ContactPreferenceModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesContactPreferenceText(this);
    this.UpdateContactPreferenceText(<ContactPreferenceTextModel>{ Title: "Something2 for text" });
  }

  UpdateContactPreferenceText(contactpreferenceTextModel: ContactPreferenceTextModel) {
    this.contactpreferenceTextModel$.next(<ContactPreferenceTextModel>{ ...this.contactpreferenceTextModel$.getValue(), ...contactpreferenceTextModel });
  }

  UpdateContactPreferenceModel(contactpreferenceModel: ContactPreferenceModel) {
    this.contactpreferenceModel$.next(<ContactPreferenceModel>{ ...this.contactpreferenceModel$.getValue(), ...contactpreferenceModel });
  }

  GetContactPreference(router: Router) {
    let oldURL = router.url;
    this.UpdateContactPreferenceModel(<ContactPreferenceModel>{ Working: true, Error: null });

    return this.httpClient.get<ContactPreference[]>('/api/ContactPreference').pipe(
      map((x: any) => {
        console.debug(`ContactPreference OK. Return: ${x}`);
        this.contactpreferenceModel$.getValue().ContactPreferenceList = <ContactPreference[]>x;
        this.UpdateContactPreferenceModel(this.contactpreferenceModel$.getValue());
        this.UpdateContactPreferenceModel(<ContactPreferenceModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateContactPreferenceModel(<ContactPreferenceModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ContactPreference ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
