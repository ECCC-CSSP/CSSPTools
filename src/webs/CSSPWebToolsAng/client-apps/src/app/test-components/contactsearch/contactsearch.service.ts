/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactSearchTextModel, ContactSearchModel } from './contactsearch.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactSearchText } from './contactsearch.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContactSearch } from 'src/app/models/generated/ContactSearch.model';

@Injectable({
  providedIn: 'root'
})
export class ContactSearchService {
  contactsearchTextModel$: BehaviorSubject<ContactSearchTextModel> = new BehaviorSubject<ContactSearchTextModel>(<ContactSearchTextModel>{});
  contactsearchModel$: BehaviorSubject<ContactSearchModel> = new BehaviorSubject<ContactSearchModel>(<ContactSearchModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesContactSearchText(this);
    this.UpdateContactSearchText(<ContactSearchTextModel>{ Title: "Something2 for text" });
  }

  UpdateContactSearchText(contactsearchTextModel: ContactSearchTextModel) {
    this.contactsearchTextModel$.next(<ContactSearchTextModel>{ ...this.contactsearchTextModel$.getValue(), ...contactsearchTextModel });
  }

  UpdateContactSearchModel(contactsearchModel: ContactSearchModel) {
    this.contactsearchModel$.next(<ContactSearchModel>{ ...this.contactsearchModel$.getValue(), ...contactsearchModel });
  }

  GetContactSearch(router: Router) {
    let oldURL = router.url;
    this.UpdateContactSearchModel(<ContactSearchModel>{ Working: true, Error: null });

    return this.httpClient.get<ContactSearch[]>('/api/ContactSearch').pipe(
      map((x: any) => {
        console.debug(`ContactSearch OK. Return: ${x}`);
        this.contactsearchModel$.getValue().ContactSearchList = <ContactSearch[]>x;
        this.UpdateContactSearchModel(this.contactsearchModel$.getValue());
        this.UpdateContactSearchModel(<ContactSearchModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateContactSearchModel(<ContactSearchModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ContactSearch ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
