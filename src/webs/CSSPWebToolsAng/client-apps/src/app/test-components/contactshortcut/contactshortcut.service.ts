/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactShortcutTextModel, ContactShortcutModel } from './contactshortcut.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactShortcutText } from './contactshortcut.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContactShortcut } from 'src/app/models/generated/ContactShortcut.model';

@Injectable({
  providedIn: 'root'
})
export class ContactShortcutService {
  contactshortcutTextModel$: BehaviorSubject<ContactShortcutTextModel> = new BehaviorSubject<ContactShortcutTextModel>(<ContactShortcutTextModel>{});
  contactshortcutModel$: BehaviorSubject<ContactShortcutModel> = new BehaviorSubject<ContactShortcutModel>(<ContactShortcutModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesContactShortcutText(this);
    this.UpdateContactShortcutText(<ContactShortcutTextModel>{ Title: "Something2 for text" });
  }

  UpdateContactShortcutText(contactshortcutTextModel: ContactShortcutTextModel) {
    this.contactshortcutTextModel$.next(<ContactShortcutTextModel>{ ...this.contactshortcutTextModel$.getValue(), ...contactshortcutTextModel });
  }

  UpdateContactShortcutModel(contactshortcutModel: ContactShortcutModel) {
    this.contactshortcutModel$.next(<ContactShortcutModel>{ ...this.contactshortcutModel$.getValue(), ...contactshortcutModel });
  }

  GetContactShortcut(router: Router) {
    let oldURL = router.url;
    this.UpdateContactShortcutModel(<ContactShortcutModel>{ Working: true, Error: null });

    return this.httpClient.get<ContactShortcut[]>('/api/ContactShortcut').pipe(
      map((x: any) => {
        console.debug(`ContactShortcut OK. Return: ${x}`);
        this.contactshortcutModel$.getValue().ContactShortcutList = <ContactShortcut[]>x;
        this.UpdateContactShortcutModel(this.contactshortcutModel$.getValue());
        this.UpdateContactShortcutModel(<ContactShortcutModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateContactShortcutModel(<ContactShortcutModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ContactShortcut ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
