/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContourPolygonTextModel, ContourPolygonModel } from './contourpolygon.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContourPolygonText } from './contourpolygon.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContourPolygon } from 'src/app/models/generated/ContourPolygon.model';

@Injectable({
  providedIn: 'root'
})
export class ContourPolygonService {
  contourpolygonTextModel$: BehaviorSubject<ContourPolygonTextModel> = new BehaviorSubject<ContourPolygonTextModel>(<ContourPolygonTextModel>{});
  contourpolygonModel$: BehaviorSubject<ContourPolygonModel> = new BehaviorSubject<ContourPolygonModel>(<ContourPolygonModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesContourPolygonText(this);
    this.UpdateContourPolygonText(<ContourPolygonTextModel>{ Title: "Something2 for text" });
  }

  UpdateContourPolygonText(contourpolygonTextModel: ContourPolygonTextModel) {
    this.contourpolygonTextModel$.next(<ContourPolygonTextModel>{ ...this.contourpolygonTextModel$.getValue(), ...contourpolygonTextModel });
  }

  UpdateContourPolygonModel(contourpolygonModel: ContourPolygonModel) {
    this.contourpolygonModel$.next(<ContourPolygonModel>{ ...this.contourpolygonModel$.getValue(), ...contourpolygonModel });
  }

  GetContourPolygon(router: Router) {
    let oldURL = router.url;
    this.UpdateContourPolygonModel(<ContourPolygonModel>{ Working: true, Error: null });

    return this.httpClient.get<ContourPolygon[]>('/api/ContourPolygon').pipe(
      map((x: any) => {
        console.debug(`ContourPolygon OK. Return: ${x}`);
        this.contourpolygonModel$.getValue().ContourPolygonList = <ContourPolygon[]>x;
        this.UpdateContourPolygonModel(this.contourpolygonModel$.getValue());
        this.UpdateContourPolygonModel(<ContourPolygonModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateContourPolygonModel(<ContourPolygonModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ContourPolygon ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
