/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CoordTextModel, CoordModel } from './coord.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCoordText } from './coord.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Coord } from 'src/app/models/generated/Coord.model';

@Injectable({
  providedIn: 'root'
})
export class CoordService {
  coordTextModel$: BehaviorSubject<CoordTextModel> = new BehaviorSubject<CoordTextModel>(<CoordTextModel>{});
  coordModel$: BehaviorSubject<CoordModel> = new BehaviorSubject<CoordModel>(<CoordModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesCoordText(this);
    this.UpdateCoordText(<CoordTextModel>{ Title: "Something2 for text" });
  }

  UpdateCoordText(coordTextModel: CoordTextModel) {
    this.coordTextModel$.next(<CoordTextModel>{ ...this.coordTextModel$.getValue(), ...coordTextModel });
  }

  UpdateCoordModel(coordModel: CoordModel) {
    this.coordModel$.next(<CoordModel>{ ...this.coordModel$.getValue(), ...coordModel });
  }

  GetCoord(router: Router) {
    let oldURL = router.url;
    this.UpdateCoordModel(<CoordModel>{ Working: true, Error: null });

    return this.httpClient.get<Coord[]>('/api/Coord').pipe(
      map((x: any) => {
        console.debug(`Coord OK. Return: ${x}`);
        this.coordModel$.getValue().CoordList = <Coord[]>x;
        this.UpdateCoordModel(this.coordModel$.getValue());
        this.UpdateCoordModel(<CoordModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateCoordModel(<CoordModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Coord ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
