/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPMPNTableTextModel, CSSPMPNTableModel } from './csspmpntable.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPMPNTableText } from './csspmpntable.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPMPNTable } from 'src/app/models/generated/CSSPMPNTable.model';

@Injectable({
  providedIn: 'root'
})
export class CSSPMPNTableService {
  csspmpntableTextModel$: BehaviorSubject<CSSPMPNTableTextModel> = new BehaviorSubject<CSSPMPNTableTextModel>(<CSSPMPNTableTextModel>{});
  csspmpntableModel$: BehaviorSubject<CSSPMPNTableModel> = new BehaviorSubject<CSSPMPNTableModel>(<CSSPMPNTableModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesCSSPMPNTableText(this);
    this.UpdateCSSPMPNTableText(<CSSPMPNTableTextModel>{ Title: "Something2 for text" });
  }

  UpdateCSSPMPNTableText(csspmpntableTextModel: CSSPMPNTableTextModel) {
    this.csspmpntableTextModel$.next(<CSSPMPNTableTextModel>{ ...this.csspmpntableTextModel$.getValue(), ...csspmpntableTextModel });
  }

  UpdateCSSPMPNTableModel(csspmpntableModel: CSSPMPNTableModel) {
    this.csspmpntableModel$.next(<CSSPMPNTableModel>{ ...this.csspmpntableModel$.getValue(), ...csspmpntableModel });
  }

  GetCSSPMPNTable(router: Router) {
    let oldURL = router.url;
    this.UpdateCSSPMPNTableModel(<CSSPMPNTableModel>{ Working: true, Error: null });

    return this.httpClient.get<CSSPMPNTable[]>('/api/CSSPMPNTable').pipe(
      map((x: any) => {
        console.debug(`CSSPMPNTable OK. Return: ${x}`);
        this.csspmpntableModel$.getValue().CSSPMPNTableList = <CSSPMPNTable[]>x;
        this.UpdateCSSPMPNTableModel(this.csspmpntableModel$.getValue());
        this.UpdateCSSPMPNTableModel(<CSSPMPNTableModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateCSSPMPNTableModel(<CSSPMPNTableModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`CSSPMPNTable ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
