/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DataPathOfTideTextModel, DataPathOfTideModel } from './datapathoftide.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDataPathOfTideText } from './datapathoftide.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DataPathOfTide } from 'src/app/models/generated/DataPathOfTide.model';

@Injectable({
  providedIn: 'root'
})
export class DataPathOfTideService {
  datapathoftideTextModel$: BehaviorSubject<DataPathOfTideTextModel> = new BehaviorSubject<DataPathOfTideTextModel>(<DataPathOfTideTextModel>{});
  datapathoftideModel$: BehaviorSubject<DataPathOfTideModel> = new BehaviorSubject<DataPathOfTideModel>(<DataPathOfTideModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesDataPathOfTideText(this);
    this.UpdateDataPathOfTideText(<DataPathOfTideTextModel>{ Title: "Something2 for text" });
  }

  UpdateDataPathOfTideText(datapathoftideTextModel: DataPathOfTideTextModel) {
    this.datapathoftideTextModel$.next(<DataPathOfTideTextModel>{ ...this.datapathoftideTextModel$.getValue(), ...datapathoftideTextModel });
  }

  UpdateDataPathOfTideModel(datapathoftideModel: DataPathOfTideModel) {
    this.datapathoftideModel$.next(<DataPathOfTideModel>{ ...this.datapathoftideModel$.getValue(), ...datapathoftideModel });
  }

  GetDataPathOfTide(router: Router) {
    let oldURL = router.url;
    this.UpdateDataPathOfTideModel(<DataPathOfTideModel>{ Working: true, Error: null });

    return this.httpClient.get<DataPathOfTide[]>('/api/DataPathOfTide').pipe(
      map((x: any) => {
        console.debug(`DataPathOfTide OK. Return: ${x}`);
        this.datapathoftideModel$.getValue().DataPathOfTideList = <DataPathOfTide[]>x;
        this.UpdateDataPathOfTideModel(this.datapathoftideModel$.getValue());
        this.UpdateDataPathOfTideModel(<DataPathOfTideModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateDataPathOfTideModel(<DataPathOfTideModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`DataPathOfTide ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
