/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DBTableTextModel, DBTableModel } from './dbtable.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDBTableText } from './dbtable.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DBTable } from 'src/app/models/generated/DBTable.model';

@Injectable({
  providedIn: 'root'
})
export class DBTableService {
  dbtableTextModel$: BehaviorSubject<DBTableTextModel> = new BehaviorSubject<DBTableTextModel>(<DBTableTextModel>{});
  dbtableModel$: BehaviorSubject<DBTableModel> = new BehaviorSubject<DBTableModel>(<DBTableModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesDBTableText(this);
    this.UpdateDBTableText(<DBTableTextModel>{ Title: "Something2 for text" });
  }

  UpdateDBTableText(dbtableTextModel: DBTableTextModel) {
    this.dbtableTextModel$.next(<DBTableTextModel>{ ...this.dbtableTextModel$.getValue(), ...dbtableTextModel });
  }

  UpdateDBTableModel(dbtableModel: DBTableModel) {
    this.dbtableModel$.next(<DBTableModel>{ ...this.dbtableModel$.getValue(), ...dbtableModel });
  }

  GetDBTable(router: Router) {
    let oldURL = router.url;
    this.UpdateDBTableModel(<DBTableModel>{ Working: true, Error: null });

    return this.httpClient.get<DBTable[]>('/api/DBTable').pipe(
      map((x: any) => {
        console.debug(`DBTable OK. Return: ${x}`);
        this.dbtableModel$.getValue().DBTableList = <DBTable[]>x;
        this.UpdateDBTableModel(this.dbtableModel$.getValue());
        this.UpdateDBTableModel(<DBTableModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateDBTableModel(<DBTableModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`DBTable ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
