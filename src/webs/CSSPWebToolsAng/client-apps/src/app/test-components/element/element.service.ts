/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ElementTextModel, ElementModel } from './element.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesElementText } from './element.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Element } from 'src/app/models/generated/Element.model';

@Injectable({
  providedIn: 'root'
})
export class ElementService {
  elementTextModel$: BehaviorSubject<ElementTextModel> = new BehaviorSubject<ElementTextModel>(<ElementTextModel>{});
  elementModel$: BehaviorSubject<ElementModel> = new BehaviorSubject<ElementModel>(<ElementModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesElementText(this);
    this.UpdateElementText(<ElementTextModel>{ Title: "Something2 for text" });
  }

  UpdateElementText(elementTextModel: ElementTextModel) {
    this.elementTextModel$.next(<ElementTextModel>{ ...this.elementTextModel$.getValue(), ...elementTextModel });
  }

  UpdateElementModel(elementModel: ElementModel) {
    this.elementModel$.next(<ElementModel>{ ...this.elementModel$.getValue(), ...elementModel });
  }

  GetElement(router: Router) {
    let oldURL = router.url;
    this.UpdateElementModel(<ElementModel>{ Working: true, Error: null });

    return this.httpClient.get<Element[]>('/api/Element').pipe(
      map((x: any) => {
        console.debug(`Element OK. Return: ${x}`);
        this.elementModel$.getValue().ElementList = <Element[]>x;
        this.UpdateElementModel(this.elementModel$.getValue());
        this.UpdateElementModel(<ElementModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateElementModel(<ElementModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Element ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
