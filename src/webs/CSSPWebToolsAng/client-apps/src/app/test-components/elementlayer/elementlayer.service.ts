/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ElementLayerTextModel, ElementLayerModel } from './elementlayer.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesElementLayerText } from './elementlayer.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ElementLayer } from 'src/app/models/generated/ElementLayer.model';

@Injectable({
  providedIn: 'root'
})
export class ElementLayerService {
  elementlayerTextModel$: BehaviorSubject<ElementLayerTextModel> = new BehaviorSubject<ElementLayerTextModel>(<ElementLayerTextModel>{});
  elementlayerModel$: BehaviorSubject<ElementLayerModel> = new BehaviorSubject<ElementLayerModel>(<ElementLayerModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesElementLayerText(this);
    this.UpdateElementLayerText(<ElementLayerTextModel>{ Title: "Something2 for text" });
  }

  UpdateElementLayerText(elementlayerTextModel: ElementLayerTextModel) {
    this.elementlayerTextModel$.next(<ElementLayerTextModel>{ ...this.elementlayerTextModel$.getValue(), ...elementlayerTextModel });
  }

  UpdateElementLayerModel(elementlayerModel: ElementLayerModel) {
    this.elementlayerModel$.next(<ElementLayerModel>{ ...this.elementlayerModel$.getValue(), ...elementlayerModel });
  }

  GetElementLayer(router: Router) {
    let oldURL = router.url;
    this.UpdateElementLayerModel(<ElementLayerModel>{ Working: true, Error: null });

    return this.httpClient.get<ElementLayer[]>('/api/ElementLayer').pipe(
      map((x: any) => {
        console.debug(`ElementLayer OK. Return: ${x}`);
        this.elementlayerModel$.getValue().ElementLayerList = <ElementLayer[]>x;
        this.UpdateElementLayerModel(this.elementlayerModel$.getValue());
        this.UpdateElementLayerModel(<ElementLayerModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateElementLayerModel(<ElementLayerModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ElementLayer ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
