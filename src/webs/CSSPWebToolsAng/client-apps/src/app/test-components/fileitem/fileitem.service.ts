/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { FileItemTextModel, FileItemModel } from './fileitem.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesFileItemText } from './fileitem.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { FileItem } from 'src/app/models/generated/FileItem.model';

@Injectable({
  providedIn: 'root'
})
export class FileItemService {
  fileitemTextModel$: BehaviorSubject<FileItemTextModel> = new BehaviorSubject<FileItemTextModel>(<FileItemTextModel>{});
  fileitemModel$: BehaviorSubject<FileItemModel> = new BehaviorSubject<FileItemModel>(<FileItemModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesFileItemText(this);
    this.UpdateFileItemText(<FileItemTextModel>{ Title: "Something2 for text" });
  }

  UpdateFileItemText(fileitemTextModel: FileItemTextModel) {
    this.fileitemTextModel$.next(<FileItemTextModel>{ ...this.fileitemTextModel$.getValue(), ...fileitemTextModel });
  }

  UpdateFileItemModel(fileitemModel: FileItemModel) {
    this.fileitemModel$.next(<FileItemModel>{ ...this.fileitemModel$.getValue(), ...fileitemModel });
  }

  GetFileItem(router: Router) {
    let oldURL = router.url;
    this.UpdateFileItemModel(<FileItemModel>{ Working: true, Error: null });

    return this.httpClient.get<FileItem[]>('/api/FileItem').pipe(
      map((x: any) => {
        console.debug(`FileItem OK. Return: ${x}`);
        this.fileitemModel$.getValue().FileItemList = <FileItem[]>x;
        this.UpdateFileItemModel(this.fileitemModel$.getValue());
        this.UpdateFileItemModel(<FileItemModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateFileItemModel(<FileItemModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`FileItem ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
