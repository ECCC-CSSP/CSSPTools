/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { FilePurposeAndTextTextModel, FilePurposeAndTextModel } from './filepurposeandtext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesFilePurposeAndTextText } from './filepurposeandtext.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { FilePurposeAndText } from 'src/app/models/generated/FilePurposeAndText.model';

@Injectable({
  providedIn: 'root'
})
export class FilePurposeAndTextService {
  filepurposeandtextTextModel$: BehaviorSubject<FilePurposeAndTextTextModel> = new BehaviorSubject<FilePurposeAndTextTextModel>(<FilePurposeAndTextTextModel>{});
  filepurposeandtextModel$: BehaviorSubject<FilePurposeAndTextModel> = new BehaviorSubject<FilePurposeAndTextModel>(<FilePurposeAndTextModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesFilePurposeAndTextText(this);
    this.UpdateFilePurposeAndTextText(<FilePurposeAndTextTextModel>{ Title: "Something2 for text" });
  }

  UpdateFilePurposeAndTextText(filepurposeandtextTextModel: FilePurposeAndTextTextModel) {
    this.filepurposeandtextTextModel$.next(<FilePurposeAndTextTextModel>{ ...this.filepurposeandtextTextModel$.getValue(), ...filepurposeandtextTextModel });
  }

  UpdateFilePurposeAndTextModel(filepurposeandtextModel: FilePurposeAndTextModel) {
    this.filepurposeandtextModel$.next(<FilePurposeAndTextModel>{ ...this.filepurposeandtextModel$.getValue(), ...filepurposeandtextModel });
  }

  GetFilePurposeAndText(router: Router) {
    let oldURL = router.url;
    this.UpdateFilePurposeAndTextModel(<FilePurposeAndTextModel>{ Working: true, Error: null });

    return this.httpClient.get<FilePurposeAndText[]>('/api/FilePurposeAndText').pipe(
      map((x: any) => {
        console.debug(`FilePurposeAndText OK. Return: ${x}`);
        this.filepurposeandtextModel$.getValue().FilePurposeAndTextList = <FilePurposeAndText[]>x;
        this.UpdateFilePurposeAndTextModel(this.filepurposeandtextModel$.getValue());
        this.UpdateFilePurposeAndTextModel(<FilePurposeAndTextModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateFilePurposeAndTextModel(<FilePurposeAndTextModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`FilePurposeAndText ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
