/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AddressTextModel } from './address.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAddressText } from './address.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Address } from '../../../models/generated/Address.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AddressService {
  /* Variables */
  addressTextModel$: BehaviorSubject<AddressTextModel> = new BehaviorSubject<AddressTextModel>(<AddressTextModel>{});
  addressListModel$: BehaviorSubject<Address[]> = new BehaviorSubject<Address[]>(<Address[]>{});
  addressGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  addressPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  addressPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  addressDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAddressText(this);
    this.addressTextModel$.next(<AddressTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAddressList() {
    this.httpClientService.BeforeHttpClient(this.addressGetModel$);

    return this.httpClient.get<Address[]>('/api/Address').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Address>(this.addressListModel$, this.addressGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Address>(this.addressListModel$, this.addressGetModel$, e);
      })))
    );
  }

  PutAddress(address: Address) {
    this.httpClientService.BeforeHttpClient(this.addressPutModel$);

    return this.httpClient.put<Address>('/api/Address', address, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Address>(this.addressListModel$, this.addressPutModel$, x, HttpClientCommand.Put, address);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<Address>(this.addressListModel$, this.addressPutModel$, e);
      })))
    );
  }

  PostAddress(address: Address) {
    this.httpClientService.BeforeHttpClient(this.addressPostModel$);

    return this.httpClient.post<Address>('/api/Address', address, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Address>(this.addressListModel$, this.addressPostModel$, x, HttpClientCommand.Post, address);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Address>(this.addressListModel$, this.addressPostModel$, e);
      })))
    );
  }

  DeleteAddress(address: Address) {
    this.httpClientService.BeforeHttpClient(this.addressDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/Address/${ address.AddressID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Address>(this.addressListModel$, this.addressDeleteModel$, x, HttpClientCommand.Delete, address);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Address>(this.addressListModel$, this.addressDeleteModel$, e);
      })))
    );
  }
}
