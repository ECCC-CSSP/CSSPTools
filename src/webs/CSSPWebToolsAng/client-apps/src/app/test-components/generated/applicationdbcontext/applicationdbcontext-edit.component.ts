/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ApplicationDbContextService } from './applicationdbcontext.service';
import { LoadLocalesApplicationDbContextText } from './applicationdbcontext.locales';
import { Subscription } from 'rxjs';
import { ApplicationDbContext } from '../../../models/generated/ApplicationDbContext.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-applicationdbcontext-edit',
  templateUrl: './applicationdbcontext-edit.component.html',
  styleUrls: ['./applicationdbcontext-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ApplicationDbContextEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  applicationdbcontextFormEdit: FormGroup;
  @Input() applicationdbcontext: ApplicationDbContext = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public applicationdbcontextService: ApplicationDbContextService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutApplicationDbContext(applicationdbcontext: ApplicationDbContext) {
    this.sub = this.applicationdbcontextService.PutApplicationDbContext(applicationdbcontext).subscribe();
  }

  PostApplicationDbContext(applicationdbcontext: ApplicationDbContext) {
    this.sub = this.applicationdbcontextService.PostApplicationDbContext(applicationdbcontext).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.applicationdbcontext) {
      let formGroup: FormGroup = this.fb.group(
        {
          UserRoles: [
            {
              value: this.applicationdbcontext.UserRoles,
              disabled: false
            }, [Validators.required]],
          Roles: [
            {
              value: this.applicationdbcontext.Roles,
              disabled: false
            }, [Validators.required]],
          RoleClaims: [
            {
              value: this.applicationdbcontext.RoleClaims,
              disabled: false
            }, [Validators.required]],
          Users: [
            {
              value: this.applicationdbcontext.Users,
              disabled: false
            }, [Validators.required]],
          UserClaims: [
            {
              value: this.applicationdbcontext.UserClaims,
              disabled: false
            }, [Validators.required]],
          UserLogins: [
            {
              value: this.applicationdbcontext.UserLogins,
              disabled: false
            }, [Validators.required]],
          UserTokens: [
            {
              value: this.applicationdbcontext.UserTokens,
              disabled: false
            }, [Validators.required]],
          Database: [
            {
              value: this.applicationdbcontext.Database,
              disabled: false
            }, [Validators.required]],
          ChangeTracker: [
            {
              value: this.applicationdbcontext.ChangeTracker,
              disabled: false
            }, [Validators.required]],
          Model: [
            {
              value: this.applicationdbcontext.Model,
              disabled: false
            }, [Validators.required]],
          ContextId: [
            {
              value: this.applicationdbcontext.ContextId,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.applicationdbcontextFormEdit = formGroup
    }
  }
}
