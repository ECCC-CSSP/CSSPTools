/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ApplicationDbContextTextModel } from './applicationdbcontext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesApplicationDbContextText } from './applicationdbcontext.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ApplicationDbContext } from '../../../models/generated/ApplicationDbContext.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ApplicationDbContextService {
  /* Variables */
  applicationdbcontextTextModel$: BehaviorSubject<ApplicationDbContextTextModel> = new BehaviorSubject<ApplicationDbContextTextModel>(<ApplicationDbContextTextModel>{});
  applicationdbcontextListModel$: BehaviorSubject<ApplicationDbContext[]> = new BehaviorSubject<ApplicationDbContext[]>(<ApplicationDbContext[]>{});
  applicationdbcontextGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationdbcontextPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationdbcontextPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationdbcontextDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesApplicationDbContextText(this.applicationdbcontextTextModel$);
    this.applicationdbcontextTextModel$.next(<ApplicationDbContextTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetApplicationDbContextList() {
    this.httpClientService.BeforeHttpClient(this.applicationdbcontextGetModel$);

    return this.httpClient.get<ApplicationDbContext[]>('/api/ApplicationDbContext').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextGetModel$, e);
      })))
    );
  }

  PutApplicationDbContext(applicationdbcontext: ApplicationDbContext) {
    this.httpClientService.BeforeHttpClient(this.applicationdbcontextPutModel$);

    return this.httpClient.put<ApplicationDbContext>('/api/ApplicationDbContext', applicationdbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextPutModel$, x, HttpClientCommand.Put, applicationdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextPutModel$, e);
      })))
    );
  }

  PostApplicationDbContext(applicationdbcontext: ApplicationDbContext) {
    this.httpClientService.BeforeHttpClient(this.applicationdbcontextPostModel$);

    return this.httpClient.post<ApplicationDbContext>('/api/ApplicationDbContext', applicationdbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextPostModel$, x, HttpClientCommand.Post, applicationdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextPostModel$, e);
      })))
    );
  }

  DeleteApplicationDbContext(applicationdbcontext: ApplicationDbContext) {
    this.httpClientService.BeforeHttpClient(this.applicationdbcontextDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ApplicationDbContext/${ applicationdbcontext.ApplicationDbContextID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextDeleteModel$, x, HttpClientCommand.Delete, applicationdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationDbContext>(this.applicationdbcontextListModel$, this.applicationdbcontextDeleteModel$, e);
      })))
    );
  }
}
