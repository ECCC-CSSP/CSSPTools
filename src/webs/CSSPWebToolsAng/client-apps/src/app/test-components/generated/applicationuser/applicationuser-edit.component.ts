/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ApplicationUserService } from './applicationuser.service';
import { LoadLocalesApplicationUserText } from './applicationuser.locales';
import { Subscription } from 'rxjs';
import { ApplicationUser } from '../../../models/generated/ApplicationUser.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-applicationuser-edit',
  templateUrl: './applicationuser-edit.component.html',
  styleUrls: ['./applicationuser-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ApplicationUserEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  applicationuserFormEdit: FormGroup;
  @Input() applicationuser: ApplicationUser = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public applicationuserService: ApplicationUserService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutApplicationUser(applicationuser: ApplicationUser) {
    this.sub = this.applicationuserService.PutApplicationUser(applicationuser).subscribe();
  }

  PostApplicationUser(applicationuser: ApplicationUser) {
    this.sub = this.applicationuserService.PostApplicationUser(applicationuser).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.applicationuser) {
      let formGroup: FormGroup = this.fb.group(
        {
          Id: [
            {
              value: this.applicationuser.Id,
              disabled: false
            }, [Validators.required]],
          UserName: [
            {
              value: this.applicationuser.UserName,
              disabled: false
            }, [Validators.required]],
          NormalizedUserName: [
            {
              value: this.applicationuser.NormalizedUserName,
              disabled: false
            }, [Validators.required]],
          Email: [
            {
              value: this.applicationuser.Email,
              disabled: false
            }, [Validators.required]],
          NormalizedEmail: [
            {
              value: this.applicationuser.NormalizedEmail,
              disabled: false
            }, [Validators.required]],
          EmailConfirmed: [
            {
              value: this.applicationuser.EmailConfirmed,
              disabled: false
            }, [Validators.required]],
          PasswordHash: [
            {
              value: this.applicationuser.PasswordHash,
              disabled: false
            }, [Validators.required]],
          SecurityStamp: [
            {
              value: this.applicationuser.SecurityStamp,
              disabled: false
            }, [Validators.required]],
          ConcurrencyStamp: [
            {
              value: this.applicationuser.ConcurrencyStamp,
              disabled: false
            }, [Validators.required]],
          PhoneNumber: [
            {
              value: this.applicationuser.PhoneNumber,
              disabled: false
            }, [Validators.required]],
          PhoneNumberConfirmed: [
            {
              value: this.applicationuser.PhoneNumberConfirmed,
              disabled: false
            }, [Validators.required]],
          TwoFactorEnabled: [
            {
              value: this.applicationuser.TwoFactorEnabled,
              disabled: false
            }, [Validators.required]],
          LockoutEnd: [
            {
              value: this.applicationuser.LockoutEnd,
              disabled: false
            }],
          LockoutEnabled: [
            {
              value: this.applicationuser.LockoutEnabled,
              disabled: false
            }, [Validators.required]],
          AccessFailedCount: [
            {
              value: this.applicationuser.AccessFailedCount,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.applicationuserFormEdit = formGroup
    }
  }
}
