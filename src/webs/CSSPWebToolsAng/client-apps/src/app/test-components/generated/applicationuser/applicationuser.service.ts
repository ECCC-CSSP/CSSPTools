/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ApplicationUserTextModel } from './applicationuser.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesApplicationUserText } from './applicationuser.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ApplicationUser } from '../../../models/generated/ApplicationUser.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ApplicationUserService {
  /* Variables */
  applicationuserTextModel$: BehaviorSubject<ApplicationUserTextModel> = new BehaviorSubject<ApplicationUserTextModel>(<ApplicationUserTextModel>{});
  applicationuserListModel$: BehaviorSubject<ApplicationUser[]> = new BehaviorSubject<ApplicationUser[]>(<ApplicationUser[]>{});
  applicationuserGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationuserPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationuserPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  applicationuserDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesApplicationUserText(this.applicationuserTextModel$);
    this.applicationuserTextModel$.next(<ApplicationUserTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetApplicationUserList() {
    this.httpClientService.BeforeHttpClient(this.applicationuserGetModel$);

    return this.httpClient.get<ApplicationUser[]>('/api/ApplicationUser').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationUser>(this.applicationuserListModel$, this.applicationuserGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationUser>(this.applicationuserListModel$, this.applicationuserGetModel$, e);
      })))
    );
  }

  PutApplicationUser(applicationuser: ApplicationUser) {
    this.httpClientService.BeforeHttpClient(this.applicationuserPutModel$);

    return this.httpClient.put<ApplicationUser>('/api/ApplicationUser', applicationuser, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationUser>(this.applicationuserListModel$, this.applicationuserPutModel$, x, HttpClientCommand.Put, applicationuser);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ApplicationUser>(this.applicationuserListModel$, this.applicationuserPutModel$, e);
      })))
    );
  }

  PostApplicationUser(applicationuser: ApplicationUser) {
    this.httpClientService.BeforeHttpClient(this.applicationuserPostModel$);

    return this.httpClient.post<ApplicationUser>('/api/ApplicationUser', applicationuser, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationUser>(this.applicationuserListModel$, this.applicationuserPostModel$, x, HttpClientCommand.Post, applicationuser);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationUser>(this.applicationuserListModel$, this.applicationuserPostModel$, e);
      })))
    );
  }

  DeleteApplicationUser(applicationuser: ApplicationUser) {
    this.httpClientService.BeforeHttpClient(this.applicationuserDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ApplicationUser/${ applicationuser.ApplicationUserID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ApplicationUser>(this.applicationuserListModel$, this.applicationuserDeleteModel$, x, HttpClientCommand.Delete, applicationuser);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ApplicationUser>(this.applicationuserListModel$, this.applicationuserDeleteModel$, e);
      })))
    );
  }
}
