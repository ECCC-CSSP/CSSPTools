/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { AppTaskService } from './apptask.service';
import { LoadLocalesAppTaskText } from './apptask.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AppTaskCommandEnum_GetIDText, AppTaskCommandEnum_GetOrderedText } from '../../../enums/generated/AppTaskCommandEnum';
import { AppTaskStatusEnum_GetIDText, AppTaskStatusEnum_GetOrderedText } from '../../../enums/generated/AppTaskStatusEnum';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { AppTask } from '../../../models/generated/AppTask.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-apptask',
  templateUrl: './apptask.component.html',
  styleUrls: ['./apptask.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AppTaskComponent implements OnInit, OnDestroy {
  sub: Subscription;
  appTaskCommandList: EnumIDAndText[];
  appTaskStatusList: EnumIDAndText[];
  languageList: EnumIDAndText[];
  apptaskFormPut: FormGroup;
  apptaskFormPost: FormGroup;

  constructor(public apptaskService: AppTaskService, public router: Router, public fb: FormBuilder) { }

  GetAppTaskList() {
    this.sub = this.apptaskService.GetAppTaskList(this.router).subscribe();
  }

  PutAppTask(apptask: AppTask) {
    this.sub = this.apptaskService.PutAppTask(apptask, this.router).subscribe();
  }

  PostAppTask(apptask: AppTask) {
    this.sub = this.apptaskService.PostAppTask(apptask, this.router).subscribe();
  }

  DeleteAppTask(apptask: AppTask) {
    this.sub = this.apptaskService.DeleteAppTask(apptask, this.router).subscribe();
  }

  GetAppTaskCommandEnumText(enumID: number) {
    return AppTaskCommandEnum_GetIDText(enumID)
  }

  GetAppTaskStatusEnumText(enumID: number) {
    return AppTaskStatusEnum_GetIDText(enumID)
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesAppTaskText(this.apptaskService);
    this.appTaskCommandList = AppTaskCommandEnum_GetOrderedText();
    this.appTaskStatusList = AppTaskStatusEnum_GetOrderedText();
    this.languageList = LanguageEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.apptaskService.apptaskList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          AppTaskID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.apptaskService.apptaskList[0]?.AppTaskID)),
              disabled: false
            }, [ Validators.required ]],
          TVItemID: [
            {
              value: this.apptaskService.apptaskList[0]?.TVItemID,
              disabled: false
            }, [ Validators.required ]],
          TVItemID2: [
            {
              value: this.apptaskService.apptaskList[0]?.TVItemID2,
              disabled: false
            }, [ Validators.required ]],
          AppTaskCommand: [
            {
              value: this.apptaskService.apptaskList[0]?.AppTaskCommand,
              disabled: false
            }, [ Validators.required ]],
          AppTaskStatus: [
            {
              value: this.apptaskService.apptaskList[0]?.AppTaskStatus,
              disabled: false
            }, [ Validators.required ]],
          PercentCompleted: [
            {
              value: this.apptaskService.apptaskList[0]?.PercentCompleted,
              disabled: false
            }, [ Validators.required ]],
          Parameters: [
            {
              value: this.apptaskService.apptaskList[0]?.Parameters,
              disabled: false
            }, [ Validators.required ]],
          Language: [
            {
              value: this.apptaskService.apptaskList[0]?.Language,
              disabled: false
            }, [ Validators.required ]],
          StartDateTime_UTC: [
            {
              value: this.apptaskService.apptaskList[0]?.StartDateTime_UTC,
              disabled: false
            }, [ Validators.required ]],
          EndDateTime_UTC: [
            {
              value: this.apptaskService.apptaskList[0]?.EndDateTime_UTC,
              disabled: false
            }, [ Validators.required ]],
          EstimatedLength_second: [
            {
              value: this.apptaskService.apptaskList[0]?.EstimatedLength_second,
              disabled: false
            }, [ Validators.required ]],
          RemainingTime_second: [
            {
              value: this.apptaskService.apptaskList[0]?.RemainingTime_second,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.apptaskService.apptaskList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.apptaskService.apptaskList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.apptaskFormPost = formGroup
      }
      else {
        this.apptaskFormPut = formGroup;
      }
    }
  }
}
