/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AppTaskTextModel } from './apptask.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAppTaskText } from './apptask.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AppTask } from '../../../models/generated/AppTask.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class AppTaskService {
  /* Variables */
  apptaskTextModel$: BehaviorSubject<AppTaskTextModel> = new BehaviorSubject<AppTaskTextModel>(<AppTaskTextModel>{});
  apptaskListModel$: BehaviorSubject<AppTask[]> = new BehaviorSubject<AppTask[]>(<AppTask[]>{});
  apptaskGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskList: AppTask[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesAppTaskText(this);
    this.apptaskTextModel$.next(<AppTaskTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAppTaskList(router: Router) {
    this.BeforeHttpClient(this.apptaskGetModel$, router);

    return this.httpClient.get<AppTask[]>('/api/AppTask').pipe(
      map((x: any) => {
        this.DoSuccess(this.apptaskGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.apptaskGetModel$, e, 'Get');
      })))
    );
  }

  PutAppTask(apptask: AppTask, router: Router) {
    this.BeforeHttpClient(this.apptaskPutModel$, router);

    return this.httpClient.put<AppTask>('/api/AppTask', apptask, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.apptaskPutModel$, x, 'Put', apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.apptaskPutModel$, e, 'Put');
      })))
    );
  }

  PostAppTask(apptask: AppTask, router: Router) {
    this.BeforeHttpClient(this.apptaskPostModel$, router);

    return this.httpClient.post<AppTask>('/api/AppTask', apptask, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.apptaskPostModel$, x, 'Post', apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.apptaskPostModel$, e, 'Post');
      })))
    );
  }

  DeleteAppTask(apptask: AppTask, router: Router) {
    this.BeforeHttpClient(this.apptaskDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/AppTask/${ apptask.AppTaskID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.apptaskDeleteModel$, x, 'Delete', apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.apptaskDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.apptaskListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.apptaskList = [];
    console.debug(`AppTask ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, apptask?: AppTask) {
    console.debug(`AppTask ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.apptaskListModel$.next(<AppTask[]>x);
    }
    if (command === 'Put') {
      this.apptaskListModel$.getValue()[0] = <AppTask>x;
    }
    if (command === 'Post') {
      this.apptaskListModel$.getValue().push(<AppTask>x);
    }
    if (command === 'Delete') {
      const index = this.apptaskListModel$.getValue().indexOf(apptask);
      this.apptaskListModel$.getValue().splice(index, 1);
    }

    this.apptaskListModel$.next(this.apptaskListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.apptaskList = this.apptaskListModel$.getValue();
    this.DoReload();
  }
}
