/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AppTaskTextModel } from './apptask.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAppTaskText } from './apptask.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AppTask } from '../../../models/generated/AppTask.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AppTaskService {
  /* Variables */
  apptaskTextModel$: BehaviorSubject<AppTaskTextModel> = new BehaviorSubject<AppTaskTextModel>(<AppTaskTextModel>{});
  apptaskListModel$: BehaviorSubject<AppTask[]> = new BehaviorSubject<AppTask[]>(<AppTask[]>{});
  apptaskGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  apptaskDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAppTaskText(this);
    this.apptaskTextModel$.next(<AppTaskTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAppTaskList() {
    this.httpClientService.BeforeHttpClient(this.apptaskGetModel$);

    return this.httpClient.get<AppTask[]>('/api/AppTask').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AppTask>(this.apptaskListModel$, this.apptaskGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AppTask>(this.apptaskListModel$, this.apptaskGetModel$, e);
      })))
    );
  }

  PutAppTask(apptask: AppTask) {
    this.httpClientService.BeforeHttpClient(this.apptaskPutModel$);

    return this.httpClient.put<AppTask>('/api/AppTask', apptask, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AppTask>(this.apptaskListModel$, this.apptaskPutModel$, x, HttpClientCommand.Put, apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<AppTask>(this.apptaskListModel$, this.apptaskPutModel$, e);
      })))
    );
  }

  PostAppTask(apptask: AppTask) {
    this.httpClientService.BeforeHttpClient(this.apptaskPostModel$);

    return this.httpClient.post<AppTask>('/api/AppTask', apptask, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AppTask>(this.apptaskListModel$, this.apptaskPostModel$, x, HttpClientCommand.Post, apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AppTask>(this.apptaskListModel$, this.apptaskPostModel$, e);
      })))
    );
  }

  DeleteAppTask(apptask: AppTask) {
    this.httpClientService.BeforeHttpClient(this.apptaskDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/AppTask/${ apptask.AppTaskID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AppTask>(this.apptaskListModel$, this.apptaskDeleteModel$, x, HttpClientCommand.Delete, apptask);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AppTask>(this.apptaskListModel$, this.apptaskDeleteModel$, e);
      })))
    );
  }
}
