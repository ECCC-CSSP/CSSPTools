/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AppTaskLanguageTextModel, AppTaskLanguageModel } from './apptasklanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAppTaskLanguageText } from './apptasklanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AppTaskLanguage } from 'src/app/models/generated/AppTaskLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class AppTaskLanguageService {
  apptasklanguageTextModel$: BehaviorSubject<AppTaskLanguageTextModel> = new BehaviorSubject<AppTaskLanguageTextModel>(<AppTaskLanguageTextModel>{});
  apptasklanguageModel$: BehaviorSubject<AppTaskLanguageModel> = new BehaviorSubject<AppTaskLanguageModel>(<AppTaskLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesAppTaskLanguageText(this);
    this.UpdateAppTaskLanguageText(<AppTaskLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateAppTaskLanguageText(apptasklanguageTextModel: AppTaskLanguageTextModel) {
    this.apptasklanguageTextModel$.next(<AppTaskLanguageTextModel>{ ...this.apptasklanguageTextModel$.getValue(), ...apptasklanguageTextModel });
  }

  UpdateAppTaskLanguageModel(apptasklanguageModel: AppTaskLanguageModel) {
    this.apptasklanguageModel$.next(<AppTaskLanguageModel>{ ...this.apptasklanguageModel$.getValue(), ...apptasklanguageModel });
  }

  GetAppTaskLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateAppTaskLanguageModel(<AppTaskLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<AppTaskLanguage[]>('/api/AppTaskLanguage').pipe(
      map((x: any) => {
        console.debug(`AppTaskLanguage OK. Return: ${x}`);
        this.apptasklanguageModel$.getValue().AppTaskLanguageList = <AppTaskLanguage[]>x;
        this.UpdateAppTaskLanguageModel(this.apptasklanguageModel$.getValue());
        this.UpdateAppTaskLanguageModel(<AppTaskLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateAppTaskLanguageModel(<AppTaskLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`AppTaskLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
