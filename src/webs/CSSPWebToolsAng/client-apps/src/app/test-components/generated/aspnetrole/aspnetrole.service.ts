/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AspNetRoleTextModel } from './aspnetrole.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAspNetRoleText } from './aspnetrole.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AspNetRole } from '../../../models/generated/AspNetRole.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AspNetRoleService {
  /* Variables */
  aspnetroleTextModel$: BehaviorSubject<AspNetRoleTextModel> = new BehaviorSubject<AspNetRoleTextModel>(<AspNetRoleTextModel>{});
  aspnetroleListModel$: BehaviorSubject<AspNetRole[]> = new BehaviorSubject<AspNetRole[]>(<AspNetRole[]>{});
  aspnetroleGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetrolePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetrolePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetroleDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAspNetRoleText(this.aspnetroleTextModel$);
    this.aspnetroleTextModel$.next(<AspNetRoleTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAspNetRoleList() {
    this.httpClientService.BeforeHttpClient(this.aspnetroleGetModel$);

    return this.httpClient.get<AspNetRole[]>('/api/AspNetRole').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRole>(this.aspnetroleListModel$, this.aspnetroleGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRole>(this.aspnetroleListModel$, this.aspnetroleGetModel$, e);
      })))
    );
  }

  PutAspNetRole(aspnetrole: AspNetRole) {
    this.httpClientService.BeforeHttpClient(this.aspnetrolePutModel$);

    return this.httpClient.put<AspNetRole>('/api/AspNetRole', aspnetrole, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRole>(this.aspnetroleListModel$, this.aspnetrolePutModel$, x, HttpClientCommand.Put, aspnetrole);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<AspNetRole>(this.aspnetroleListModel$, this.aspnetrolePutModel$, e);
      })))
    );
  }

  PostAspNetRole(aspnetrole: AspNetRole) {
    this.httpClientService.BeforeHttpClient(this.aspnetrolePostModel$);

    return this.httpClient.post<AspNetRole>('/api/AspNetRole', aspnetrole, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRole>(this.aspnetroleListModel$, this.aspnetrolePostModel$, x, HttpClientCommand.Post, aspnetrole);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRole>(this.aspnetroleListModel$, this.aspnetrolePostModel$, e);
      })))
    );
  }

  DeleteAspNetRole(aspnetrole: AspNetRole) {
    this.httpClientService.BeforeHttpClient(this.aspnetroleDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/AspNetRole/${ aspnetrole.AspNetRoleID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRole>(this.aspnetroleListModel$, this.aspnetroleDeleteModel$, x, HttpClientCommand.Delete, aspnetrole);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRole>(this.aspnetroleListModel$, this.aspnetroleDeleteModel$, e);
      })))
    );
  }
}
