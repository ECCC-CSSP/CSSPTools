/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AspNetRoleClaimTextModel } from './aspnetroleclaim.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAspNetRoleClaimText } from './aspnetroleclaim.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AspNetRoleClaim } from '../../../models/generated/AspNetRoleClaim.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AspNetRoleClaimService {
  /* Variables */
  aspnetroleclaimTextModel$: BehaviorSubject<AspNetRoleClaimTextModel> = new BehaviorSubject<AspNetRoleClaimTextModel>(<AspNetRoleClaimTextModel>{});
  aspnetroleclaimListModel$: BehaviorSubject<AspNetRoleClaim[]> = new BehaviorSubject<AspNetRoleClaim[]>(<AspNetRoleClaim[]>{});
  aspnetroleclaimGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetroleclaimPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetroleclaimPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetroleclaimDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAspNetRoleClaimText(this.aspnetroleclaimTextModel$);
    this.aspnetroleclaimTextModel$.next(<AspNetRoleClaimTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAspNetRoleClaimList() {
    this.httpClientService.BeforeHttpClient(this.aspnetroleclaimGetModel$);

    return this.httpClient.get<AspNetRoleClaim[]>('/api/AspNetRoleClaim').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimGetModel$, e);
      })))
    );
  }

  PutAspNetRoleClaim(aspnetroleclaim: AspNetRoleClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetroleclaimPutModel$);

    return this.httpClient.put<AspNetRoleClaim>('/api/AspNetRoleClaim', aspnetroleclaim, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimPutModel$, x, HttpClientCommand.Put, aspnetroleclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimPutModel$, e);
      })))
    );
  }

  PostAspNetRoleClaim(aspnetroleclaim: AspNetRoleClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetroleclaimPostModel$);

    return this.httpClient.post<AspNetRoleClaim>('/api/AspNetRoleClaim', aspnetroleclaim, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimPostModel$, x, HttpClientCommand.Post, aspnetroleclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimPostModel$, e);
      })))
    );
  }

  DeleteAspNetRoleClaim(aspnetroleclaim: AspNetRoleClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetroleclaimDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/AspNetRoleClaim/${ aspnetroleclaim.AspNetRoleClaimID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimDeleteModel$, x, HttpClientCommand.Delete, aspnetroleclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetRoleClaim>(this.aspnetroleclaimListModel$, this.aspnetroleclaimDeleteModel$, e);
      })))
    );
  }
}
