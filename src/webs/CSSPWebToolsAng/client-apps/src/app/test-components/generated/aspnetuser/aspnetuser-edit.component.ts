/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { AspNetUserService } from './aspnetuser.service';
import { LoadLocalesAspNetUserText } from './aspnetuser.locales';
import { Subscription } from 'rxjs';
import { AspNetUser } from '../../../models/generated/AspNetUser.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-aspnetuser-edit',
  templateUrl: './aspnetuser-edit.component.html',
  styleUrls: ['./aspnetuser-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AspNetUserEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  aspnetuserFormEdit: FormGroup;
  @Input() aspnetuser: AspNetUser = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public aspnetuserService: AspNetUserService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutAspNetUser(aspnetuser: AspNetUser) {
    this.sub = this.aspnetuserService.PutAspNetUser(aspnetuser).subscribe();
  }

  PostAspNetUser(aspnetuser: AspNetUser) {
    this.sub = this.aspnetuserService.PostAspNetUser(aspnetuser).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.aspnetuser) {
      let formGroup: FormGroup = this.fb.group(
        {
          Id: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.aspnetuser.Id)),
              disabled: false
            }, [Validators.required, Validators.maxLength(450)]],
          Email: [
            {
              value: this.aspnetuser.Email,
              disabled: false
            }, [Validators.maxLength(256)]],
          EmailConfirmed: [
            {
              value: this.aspnetuser.EmailConfirmed,
              disabled: false
            }, [Validators.required]],
          PasswordHash: [
            {
              value: this.aspnetuser.PasswordHash,
              disabled: false
            }],
          SecurityStamp: [
            {
              value: this.aspnetuser.SecurityStamp,
              disabled: false
            }],
          PhoneNumber: [
            {
              value: this.aspnetuser.PhoneNumber,
              disabled: false
            }],
          PhoneNumberConfirmed: [
            {
              value: this.aspnetuser.PhoneNumberConfirmed,
              disabled: false
            }, [Validators.required]],
          TwoFactorEnabled: [
            {
              value: this.aspnetuser.TwoFactorEnabled,
              disabled: false
            }, [Validators.required]],
          LockoutEndDateUtc: [
            {
              value: this.aspnetuser.LockoutEndDateUtc,
              disabled: false
            }],
          LockoutEnabled: [
            {
              value: this.aspnetuser.LockoutEnabled,
              disabled: false
            }, [Validators.required]],
          AccessFailedCount: [
            {
              value: this.aspnetuser.AccessFailedCount,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000)]],
          UserName: [
            {
              value: this.aspnetuser.UserName,
              disabled: false
            }, [Validators.required, Validators.maxLength(256)]],
          NormalizedUserName: [
            {
              value: this.aspnetuser.NormalizedUserName,
              disabled: false
            }, [Validators.maxLength(256)]],
          NormalizedEmail: [
            {
              value: this.aspnetuser.NormalizedEmail,
              disabled: false
            }, [Validators.maxLength(256)]],
          ConcurrencyStamp: [
            {
              value: this.aspnetuser.ConcurrencyStamp,
              disabled: false
            }, [Validators.maxLength(256)]],
          LockoutEnd: [
            {
              value: this.aspnetuser.LockoutEnd,
              disabled: false
            }],
        }
      );

      this.aspnetuserFormEdit = formGroup
    }
  }
}
