/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { AspNetUserService } from './aspnetuser.service';
import { LoadLocalesAspNetUserText } from './aspnetuser.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { AspNetUser } from '../../../models/generated/AspNetUser.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-aspnetuser',
  templateUrl: './aspnetuser.component.html',
  styleUrls: ['./aspnetuser.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AspNetUserComponent implements OnInit, OnDestroy {
  sub: Subscription;
  aspnetuserFormPut: FormGroup;
  aspnetuserFormPost: FormGroup;

  constructor(public aspnetuserService: AspNetUserService, public router: Router, public fb: FormBuilder) { }

  GetAspNetUserList() {
    this.sub = this.aspnetuserService.GetAspNetUserList(this.router).subscribe();
  }

  PutAspNetUser(aspnetuser: AspNetUser) {
    this.sub = this.aspnetuserService.PutAspNetUser(aspnetuser, this.router).subscribe();
  }

  PostAspNetUser(aspnetuser: AspNetUser) {
    this.sub = this.aspnetuserService.PostAspNetUser(aspnetuser, this.router).subscribe();
  }

  DeleteAspNetUser(aspnetuser: AspNetUser) {
    this.sub = this.aspnetuserService.DeleteAspNetUser(aspnetuser, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesAspNetUserText(this.aspnetuserService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.aspnetuserService.aspnetuserList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          Id: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.aspnetuserService.aspnetuserList[0]?.Id ?? '')),
              disabled: false
            }, Validators.required],
          Email: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.Email ?? '',
              disabled: false
            }, Validators.required],
          EmailConfirmed: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.EmailConfirmed ?? '',
              disabled: false
            }, Validators.required],
          PasswordHash: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.PasswordHash ?? '',
              disabled: false
            }, Validators.required],
          SecurityStamp: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.SecurityStamp ?? '',
              disabled: false
            }, Validators.required],
          PhoneNumber: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.PhoneNumber ?? '',
              disabled: false
            }, Validators.required],
          PhoneNumberConfirmed: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.PhoneNumberConfirmed ?? '',
              disabled: false
            }, Validators.required],
          TwoFactorEnabled: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.TwoFactorEnabled ?? '',
              disabled: false
            }, Validators.required],
          LockoutEndDateUtc: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.LockoutEndDateUtc ?? '',
              disabled: false
            }, Validators.required],
          LockoutEnabled: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.LockoutEnabled ?? '',
              disabled: false
            }, Validators.required],
          AccessFailedCount: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.AccessFailedCount ?? '',
              disabled: false
            }, Validators.required],
          UserName: [
            {
              value: this.aspnetuserService.aspnetuserList[0]?.UserName ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.aspnetuserFormPost = formGroup
      }
      else {
        this.aspnetuserFormPut = formGroup;
      }
    }
  }
}
