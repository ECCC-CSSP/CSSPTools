/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AspNetUserTextModel } from './aspnetuser.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAspNetUserText } from './aspnetuser.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AspNetUser } from '../../../models/generated/AspNetUser.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AspNetUserService {
  /* Variables */
  aspnetuserTextModel$: BehaviorSubject<AspNetUserTextModel> = new BehaviorSubject<AspNetUserTextModel>(<AspNetUserTextModel>{});
  aspnetuserListModel$: BehaviorSubject<AspNetUser[]> = new BehaviorSubject<AspNetUser[]>(<AspNetUser[]>{});
  aspnetuserGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAspNetUserText(this.aspnetuserTextModel$);
    this.aspnetuserTextModel$.next(<AspNetUserTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAspNetUserList() {
    this.httpClientService.BeforeHttpClient(this.aspnetuserGetModel$);

    return this.httpClient.get<AspNetUser[]>('/api/AspNetUser').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserGetModel$, e);
      })))
    );
  }

  PutAspNetUser(aspnetuser: AspNetUser) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserPutModel$);

    return this.httpClient.put<AspNetUser>('/api/AspNetUser', aspnetuser, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserPutModel$, x, HttpClientCommand.Put, aspnetuser);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserPutModel$, e);
      })))
    );
  }

  PostAspNetUser(aspnetuser: AspNetUser) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserPostModel$);

    return this.httpClient.post<AspNetUser>('/api/AspNetUser', aspnetuser, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserPostModel$, x, HttpClientCommand.Post, aspnetuser);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserPostModel$, e);
      })))
    );
  }

  DeleteAspNetUser(aspnetuser: AspNetUser) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/AspNetUser/${ aspnetuser.AspNetUserID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserDeleteModel$, x, HttpClientCommand.Delete, aspnetuser);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUser>(this.aspnetuserListModel$, this.aspnetuserDeleteModel$, e);
      })))
    );
  }
}
