/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { AspNetUserClaimTextModel } from './aspnetuserclaim.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesAspNetUserClaimText } from './aspnetuserclaim.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { AspNetUserClaim } from '../../../models/generated/AspNetUserClaim.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class AspNetUserClaimService {
  /* Variables */
  aspnetuserclaimTextModel$: BehaviorSubject<AspNetUserClaimTextModel> = new BehaviorSubject<AspNetUserClaimTextModel>(<AspNetUserClaimTextModel>{});
  aspnetuserclaimListModel$: BehaviorSubject<AspNetUserClaim[]> = new BehaviorSubject<AspNetUserClaim[]>(<AspNetUserClaim[]>{});
  aspnetuserclaimGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserclaimPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserclaimPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  aspnetuserclaimDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesAspNetUserClaimText(this.aspnetuserclaimTextModel$);
    this.aspnetuserclaimTextModel$.next(<AspNetUserClaimTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetAspNetUserClaimList() {
    this.httpClientService.BeforeHttpClient(this.aspnetuserclaimGetModel$);

    return this.httpClient.get<AspNetUserClaim[]>('/api/AspNetUserClaim').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimGetModel$, e);
      })))
    );
  }

  PutAspNetUserClaim(aspnetuserclaim: AspNetUserClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserclaimPutModel$);

    return this.httpClient.put<AspNetUserClaim>('/api/AspNetUserClaim', aspnetuserclaim, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimPutModel$, x, HttpClientCommand.Put, aspnetuserclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimPutModel$, e);
      })))
    );
  }

  PostAspNetUserClaim(aspnetuserclaim: AspNetUserClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserclaimPostModel$);

    return this.httpClient.post<AspNetUserClaim>('/api/AspNetUserClaim', aspnetuserclaim, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimPostModel$, x, HttpClientCommand.Post, aspnetuserclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimPostModel$, e);
      })))
    );
  }

  DeleteAspNetUserClaim(aspnetuserclaim: AspNetUserClaim) {
    this.httpClientService.BeforeHttpClient(this.aspnetuserclaimDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/AspNetUserClaim/${ aspnetuserclaim.AspNetUserClaimID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimDeleteModel$, x, HttpClientCommand.Delete, aspnetuserclaim);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<AspNetUserClaim>(this.aspnetuserclaimListModel$, this.aspnetuserclaimDeleteModel$, e);
      })))
    );
  }
}
