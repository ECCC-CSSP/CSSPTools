/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { AspNetUserLoginService } from './aspnetuserlogin.service';
import { LoadLocalesAspNetUserLoginText } from './aspnetuserlogin.locales';
import { Subscription } from 'rxjs';
import { AspNetUserLogin } from '../../../models/generated/AspNetUserLogin.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-aspnetuserlogin-edit',
  templateUrl: './aspnetuserlogin-edit.component.html',
  styleUrls: ['./aspnetuserlogin-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AspNetUserLoginEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  aspnetuserloginFormEdit: FormGroup;
  @Input() aspnetuserlogin: AspNetUserLogin = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public aspnetuserloginService: AspNetUserLoginService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutAspNetUserLogin(aspnetuserlogin: AspNetUserLogin) {
    this.sub = this.aspnetuserloginService.PutAspNetUserLogin(aspnetuserlogin).subscribe();
  }

  PostAspNetUserLogin(aspnetuserlogin: AspNetUserLogin) {
    this.sub = this.aspnetuserloginService.PostAspNetUserLogin(aspnetuserlogin).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.aspnetuserlogin) {
      let formGroup: FormGroup = this.fb.group(
        {
          LoginProvider: [
            {
              value: this.aspnetuserlogin.LoginProvider,
              disabled: false
            }, [Validators.required, Validators.maxLength(128)]],
          ProviderKey: [
            {
              value: this.aspnetuserlogin.ProviderKey,
              disabled: false
            }, [Validators.required, Validators.maxLength(128)]],
          ProviderDisplayName: [
            {
              value: this.aspnetuserlogin.ProviderDisplayName,
              disabled: false
            }],
          UserId: [
            {
              value: this.aspnetuserlogin.UserId,
              disabled: false
            }, [Validators.required, Validators.maxLength(450)]],
        }
      );

      this.aspnetuserloginFormEdit = formGroup
    }
  }
}
