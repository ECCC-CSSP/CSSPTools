/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BaseContextTextModel } from './basecontext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBaseContextText } from './basecontext.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BaseContext } from '../../../models/generated/BaseContext.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class BaseContextService {
  /* Variables */
  basecontextTextModel$: BehaviorSubject<BaseContextTextModel> = new BehaviorSubject<BaseContextTextModel>(<BaseContextTextModel>{});
  basecontextListModel$: BehaviorSubject<BaseContext[]> = new BehaviorSubject<BaseContext[]>(<BaseContext[]>{});
  basecontextGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  basecontextPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  basecontextPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  basecontextDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesBaseContextText(this.basecontextTextModel$);
    this.basecontextTextModel$.next(<BaseContextTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetBaseContextList() {
    this.httpClientService.BeforeHttpClient(this.basecontextGetModel$);

    return this.httpClient.get<BaseContext[]>('/api/BaseContext').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BaseContext>(this.basecontextListModel$, this.basecontextGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BaseContext>(this.basecontextListModel$, this.basecontextGetModel$, e);
      })))
    );
  }

  PutBaseContext(basecontext: BaseContext) {
    this.httpClientService.BeforeHttpClient(this.basecontextPutModel$);

    return this.httpClient.put<BaseContext>('/api/BaseContext', basecontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BaseContext>(this.basecontextListModel$, this.basecontextPutModel$, x, HttpClientCommand.Put, basecontext);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<BaseContext>(this.basecontextListModel$, this.basecontextPutModel$, e);
      })))
    );
  }

  PostBaseContext(basecontext: BaseContext) {
    this.httpClientService.BeforeHttpClient(this.basecontextPostModel$);

    return this.httpClient.post<BaseContext>('/api/BaseContext', basecontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BaseContext>(this.basecontextListModel$, this.basecontextPostModel$, x, HttpClientCommand.Post, basecontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BaseContext>(this.basecontextListModel$, this.basecontextPostModel$, e);
      })))
    );
  }

  DeleteBaseContext(basecontext: BaseContext) {
    this.httpClientService.BeforeHttpClient(this.basecontextDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/BaseContext/${ basecontext.BaseContextID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BaseContext>(this.basecontextListModel$, this.basecontextDeleteModel$, x, HttpClientCommand.Delete, basecontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BaseContext>(this.basecontextListModel$, this.basecontextDeleteModel$, e);
      })))
    );
  }
}
