/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { BoxModelService } from './boxmodel.service';
import { LoadLocalesBoxModelText } from './boxmodel.locales';
import { Subscription } from 'rxjs';
import { BoxModel } from '../../../models/generated/BoxModel.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-boxmodel-edit',
  templateUrl: './boxmodel-edit.component.html',
  styleUrls: ['./boxmodel-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class BoxModelEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  boxmodelFormEdit: FormGroup;
  @Input() boxmodel: BoxModel = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public boxmodelService: BoxModelService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutBoxModel(boxmodel: BoxModel) {
    this.sub = this.boxmodelService.PutBoxModel(boxmodel).subscribe();
  }

  PostBoxModel(boxmodel: BoxModel) {
    this.sub = this.boxmodelService.PostBoxModel(boxmodel).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.boxmodel) {
      let formGroup: FormGroup = this.fb.group(
        {
          BoxModelID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.boxmodel.BoxModelID)),
              disabled: false
            }, [Validators.required]],
          InfrastructureTVItemID: [
            {
              value: this.boxmodel.InfrastructureTVItemID,
              disabled: false
            }, [Validators.required]],
          Discharge_m3_day: [
            {
              value: this.boxmodel.Discharge_m3_day,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000)]],
          Depth_m: [
            {
              value: this.boxmodel.Depth_m,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(1000)]],
          Temperature_C: [
            {
              value: this.boxmodel.Temperature_C,
              disabled: false
            }, [Validators.required, Validators.min(-15), Validators.max(40)]],
          Dilution: [
            {
              value: this.boxmodel.Dilution,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000000)]],
          DecayRate_per_day: [
            {
              value: this.boxmodel.DecayRate_per_day,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(100)]],
          FCUntreated_MPN_100ml: [
            {
              value: this.boxmodel.FCUntreated_MPN_100ml,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000000)]],
          FCPreDisinfection_MPN_100ml: [
            {
              value: this.boxmodel.FCPreDisinfection_MPN_100ml,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000000)]],
          Concentration_MPN_100ml: [
            {
              value: this.boxmodel.Concentration_MPN_100ml,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000000)]],
          T90_hour: [
            {
              value: this.boxmodel.T90_hour,
              disabled: false
            }, [Validators.required, Validators.min(0)]],
          DischargeDuration_hour: [
            {
              value: this.boxmodel.DischargeDuration_hour,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(24)]],
          LastUpdateDate_UTC: [
            {
              value: this.boxmodel.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.boxmodel.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.boxmodelFormEdit = formGroup
    }
  }
}
