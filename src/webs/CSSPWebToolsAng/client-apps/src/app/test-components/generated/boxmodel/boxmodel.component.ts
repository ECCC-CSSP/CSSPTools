/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { BoxModelService } from './boxmodel.service';
import { LoadLocalesBoxModelText } from './boxmodel.locales';
import { Subscription } from 'rxjs';
import { BoxModel } from '../../../models/generated/BoxModel.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-boxmodel',
  templateUrl: './boxmodel.component.html',
  styleUrls: ['./boxmodel.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class BoxModelComponent implements OnInit, OnDestroy {
  sub: Subscription;
  boxmodelFormPut: FormGroup;
  boxmodelFormPost: FormGroup;

  constructor(public boxmodelService: BoxModelService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetBoxModelList() {
    this.sub = this.boxmodelService.GetBoxModelList().subscribe();
  }

  PutBoxModel(boxmodel: BoxModel) {
    this.sub = this.boxmodelService.PutBoxModel(boxmodel).subscribe();
  }

  PostBoxModel(boxmodel: BoxModel) {
    this.sub = this.boxmodelService.PostBoxModel(boxmodel).subscribe();
  }

  DeleteBoxModel(boxmodel: BoxModel) {
    this.sub = this.boxmodelService.DeleteBoxModel(boxmodel).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesBoxModelText(this.boxmodelService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.boxmodelService.boxmodelListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          BoxModelID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.boxmodelService.boxmodelListModel$.getValue()[0]?.BoxModelID)),
              disabled: false
            }, [  Validators.required ]],
          InfrastructureTVItemID: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.InfrastructureTVItemID,
              disabled: false
            }, [  Validators.required ]],
          Discharge_m3_day: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.Discharge_m3_day,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(10000) ]],
          Depth_m: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.Depth_m,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(1000) ]],
          Temperature_C: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.Temperature_C,
              disabled: false
            }, [  Validators.required, Validators.min(-15), Validators.max(40) ]],
          Dilution: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.Dilution,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(10000000) ]],
          DecayRate_per_day: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.DecayRate_per_day,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(100) ]],
          FCUntreated_MPN_100ml: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.FCUntreated_MPN_100ml,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(10000000) ]],
          FCPreDisinfection_MPN_100ml: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.FCPreDisinfection_MPN_100ml,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(10000000) ]],
          Concentration_MPN_100ml: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.Concentration_MPN_100ml,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(10000000) ]],
          T90_hour: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.T90_hour,
              disabled: false
            }, [  Validators.required, Validators.min(0) ]],
          DischargeDuration_hour: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.DischargeDuration_hour,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(24) ]],
          LastUpdateDate_UTC: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.boxmodelService.boxmodelListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.boxmodelFormPost = formGroup
      }
      else {
        this.boxmodelFormPut = formGroup;
      }
    }
  }
}
