/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BoxModelTextModel } from './boxmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBoxModelText } from './boxmodel.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BoxModel } from '../../../models/generated/BoxModel.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class BoxModelService {
  /* Variables */
  boxmodelTextModel$: BehaviorSubject<BoxModelTextModel> = new BehaviorSubject<BoxModelTextModel>(<BoxModelTextModel>{});
  boxmodelListModel$: BehaviorSubject<BoxModel[]> = new BehaviorSubject<BoxModel[]>(<BoxModel[]>{});
  boxmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelList: BoxModel[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesBoxModelText(this);
    this.boxmodelTextModel$.next(<BoxModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetBoxModelList(router: Router) {
    this.BeforeHttpClient(this.boxmodelGetModel$, router);

    return this.httpClient.get<BoxModel[]>('/api/BoxModel').pipe(
      map((x: any) => {
        this.DoSuccess(this.boxmodelGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.boxmodelGetModel$, e, 'Get');
      })))
    );
  }

  PutBoxModel(boxmodel: BoxModel, router: Router) {
    this.BeforeHttpClient(this.boxmodelPutModel$, router);

    return this.httpClient.put<BoxModel>('/api/BoxModel', boxmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.boxmodelPutModel$, x, 'Put', boxmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.boxmodelPutModel$, e, 'Put');
      })))
    );
  }

  PostBoxModel(boxmodel: BoxModel, router: Router) {
    this.BeforeHttpClient(this.boxmodelPostModel$, router);

    return this.httpClient.post<BoxModel>('/api/BoxModel', boxmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.boxmodelPostModel$, x, 'Post', boxmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.boxmodelPostModel$, e, 'Post');
      })))
    );
  }

  DeleteBoxModel(boxmodel: BoxModel, router: Router) {
    this.BeforeHttpClient(this.boxmodelDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/BoxModel/${ boxmodel.BoxModelID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.boxmodelDeleteModel$, x, 'Delete', boxmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.boxmodelDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.boxmodelListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.boxmodelList = [];
    console.debug(`BoxModel ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, boxmodel?: BoxModel) {
    console.debug(`BoxModel ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.boxmodelListModel$.next(<BoxModel[]>x);
    }
    if (command === 'Put') {
      this.boxmodelListModel$.getValue()[0] = <BoxModel>x;
    }
    if (command === 'Post') {
      this.boxmodelListModel$.getValue().push(<BoxModel>x);
    }
    if (command === 'Delete') {
      const index = this.boxmodelListModel$.getValue().indexOf(boxmodel);
      this.boxmodelListModel$.getValue().splice(index, 1);
    }

    this.boxmodelListModel$.next(this.boxmodelListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.boxmodelList = this.boxmodelListModel$.getValue();
    this.DoReload();
  }
}
