/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BoxModelLanguageTextModel, BoxModelLanguageModel } from './boxmodellanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBoxModelLanguageText } from './boxmodellanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BoxModelLanguage } from 'src/app/models/generated/BoxModelLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class BoxModelLanguageService {
  boxmodellanguageTextModel$: BehaviorSubject<BoxModelLanguageTextModel> = new BehaviorSubject<BoxModelLanguageTextModel>(<BoxModelLanguageTextModel>{});
  boxmodellanguageModel$: BehaviorSubject<BoxModelLanguageModel> = new BehaviorSubject<BoxModelLanguageModel>(<BoxModelLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesBoxModelLanguageText(this);
    this.UpdateBoxModelLanguageText(<BoxModelLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateBoxModelLanguageText(boxmodellanguageTextModel: BoxModelLanguageTextModel) {
    this.boxmodellanguageTextModel$.next(<BoxModelLanguageTextModel>{ ...this.boxmodellanguageTextModel$.getValue(), ...boxmodellanguageTextModel });
  }

  UpdateBoxModelLanguageModel(boxmodellanguageModel: BoxModelLanguageModel) {
    this.boxmodellanguageModel$.next(<BoxModelLanguageModel>{ ...this.boxmodellanguageModel$.getValue(), ...boxmodellanguageModel });
  }

  GetBoxModelLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateBoxModelLanguageModel(<BoxModelLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<BoxModelLanguage[]>('/api/BoxModelLanguage').pipe(
      map((x: any) => {
        console.debug(`BoxModelLanguage OK. Return: ${x}`);
        this.boxmodellanguageModel$.getValue().BoxModelLanguageList = <BoxModelLanguage[]>x;
        this.UpdateBoxModelLanguageModel(this.boxmodellanguageModel$.getValue());
        this.UpdateBoxModelLanguageModel(<BoxModelLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateBoxModelLanguageModel(<BoxModelLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`BoxModelLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
