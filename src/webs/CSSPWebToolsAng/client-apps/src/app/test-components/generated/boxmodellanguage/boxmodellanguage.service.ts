/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BoxModelLanguageTextModel } from './boxmodellanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBoxModelLanguageText } from './boxmodellanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BoxModelLanguage } from '../../../models/generated/BoxModelLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class BoxModelLanguageService {
  /* Variables */
  boxmodellanguageTextModel$: BehaviorSubject<BoxModelLanguageTextModel> = new BehaviorSubject<BoxModelLanguageTextModel>(<BoxModelLanguageTextModel>{});
  boxmodellanguageListModel$: BehaviorSubject<BoxModelLanguage[]> = new BehaviorSubject<BoxModelLanguage[]>(<BoxModelLanguage[]>{});
  boxmodellanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodellanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodellanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodellanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesBoxModelLanguageText(this.boxmodellanguageTextModel$);
    this.boxmodellanguageTextModel$.next(<BoxModelLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetBoxModelLanguageList() {
    this.httpClientService.BeforeHttpClient(this.boxmodellanguageGetModel$);

    return this.httpClient.get<BoxModelLanguage[]>('/api/BoxModelLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguageGetModel$, e);
      })))
    );
  }

  PutBoxModelLanguage(boxmodellanguage: BoxModelLanguage) {
    this.httpClientService.BeforeHttpClient(this.boxmodellanguagePutModel$);

    return this.httpClient.put<BoxModelLanguage>('/api/BoxModelLanguage', boxmodellanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguagePutModel$, x, HttpClientCommand.Put, boxmodellanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguagePutModel$, e);
      })))
    );
  }

  PostBoxModelLanguage(boxmodellanguage: BoxModelLanguage) {
    this.httpClientService.BeforeHttpClient(this.boxmodellanguagePostModel$);

    return this.httpClient.post<BoxModelLanguage>('/api/BoxModelLanguage', boxmodellanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguagePostModel$, x, HttpClientCommand.Post, boxmodellanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguagePostModel$, e);
      })))
    );
  }

  DeleteBoxModelLanguage(boxmodellanguage: BoxModelLanguage) {
    this.httpClientService.BeforeHttpClient(this.boxmodellanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/BoxModelLanguage/${ boxmodellanguage.BoxModelLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguageDeleteModel$, x, HttpClientCommand.Delete, boxmodellanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelLanguage>(this.boxmodellanguageListModel$, this.boxmodellanguageDeleteModel$, e);
      })))
    );
  }
}
