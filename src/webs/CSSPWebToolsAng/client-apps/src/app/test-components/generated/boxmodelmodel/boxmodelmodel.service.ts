/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { BoxModelModelTextModel } from './boxmodelmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesBoxModelModelText } from './boxmodelmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { BoxModelModel } from '../../../models/generated/BoxModelModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class BoxModelModelService {
  /* Variables */
  boxmodelmodelTextModel$: BehaviorSubject<BoxModelModelTextModel> = new BehaviorSubject<BoxModelModelTextModel>(<BoxModelModelTextModel>{});
  boxmodelmodelListModel$: BehaviorSubject<BoxModelModel[]> = new BehaviorSubject<BoxModelModel[]>(<BoxModelModel[]>{});
  boxmodelmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  boxmodelmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesBoxModelModelText(this.boxmodelmodelTextModel$);
    this.boxmodelmodelTextModel$.next(<BoxModelModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetBoxModelModelList() {
    this.httpClientService.BeforeHttpClient(this.boxmodelmodelGetModel$);

    return this.httpClient.get<BoxModelModel[]>('/api/BoxModelModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelGetModel$, e);
      })))
    );
  }

  PutBoxModelModel(boxmodelmodel: BoxModelModel) {
    this.httpClientService.BeforeHttpClient(this.boxmodelmodelPutModel$);

    return this.httpClient.put<BoxModelModel>('/api/BoxModelModel', boxmodelmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelPutModel$, x, HttpClientCommand.Put, boxmodelmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelPutModel$, e);
      })))
    );
  }

  PostBoxModelModel(boxmodelmodel: BoxModelModel) {
    this.httpClientService.BeforeHttpClient(this.boxmodelmodelPostModel$);

    return this.httpClient.post<BoxModelModel>('/api/BoxModelModel', boxmodelmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelPostModel$, x, HttpClientCommand.Post, boxmodelmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelPostModel$, e);
      })))
    );
  }

  DeleteBoxModelModel(boxmodelmodel: BoxModelModel) {
    this.httpClientService.BeforeHttpClient(this.boxmodelmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/BoxModelModel/${ boxmodelmodel.BoxModelModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelDeleteModel$, x, HttpClientCommand.Delete, boxmodelmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<BoxModelModel>(this.boxmodelmodelListModel$, this.boxmodelmodelDeleteModel$, e);
      })))
    );
  }
}
