/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { BoxModelResultService } from './boxmodelresult.service';
import { LoadLocalesBoxModelResultText } from './boxmodelresult.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { BoxModelResultTypeEnum_GetIDText, BoxModelResultTypeEnum_GetOrderedText } from '../../../enums/generated/BoxModelResultTypeEnum';
import { BoxModelResult } from '../../../models/generated/BoxModelResult.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-boxmodelresult',
  templateUrl: './boxmodelresult.component.html',
  styleUrls: ['./boxmodelresult.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class BoxModelResultComponent implements OnInit, OnDestroy {
  sub: Subscription;
  boxModelResultTypeList: EnumIDAndText[];
  boxmodelresultFormPut: FormGroup;
  boxmodelresultFormPost: FormGroup;

  constructor(public boxmodelresultService: BoxModelResultService, public router: Router, public fb: FormBuilder) { }

  GetBoxModelResultList() {
    this.sub = this.boxmodelresultService.GetBoxModelResultList(this.router).subscribe();
  }

  PutBoxModelResult(boxmodelresult: BoxModelResult) {
    this.sub = this.boxmodelresultService.PutBoxModelResult(boxmodelresult, this.router).subscribe();
  }

  PostBoxModelResult(boxmodelresult: BoxModelResult) {
    this.sub = this.boxmodelresultService.PostBoxModelResult(boxmodelresult, this.router).subscribe();
  }

  DeleteBoxModelResult(boxmodelresult: BoxModelResult) {
    this.sub = this.boxmodelresultService.DeleteBoxModelResult(boxmodelresult, this.router).subscribe();
  }

  GetBoxModelResultTypeEnumText(enumID: number) {
    return BoxModelResultTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesBoxModelResultText(this.boxmodelresultService);
    this.boxModelResultTypeList = BoxModelResultTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.boxmodelresultService.boxmodelresultList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          BoxModelResultID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.boxmodelresultService.boxmodelresultList[0]?.BoxModelResultID)),
              disabled: false
            }, [ Validators.required ]],
          BoxModelID: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.BoxModelID,
              disabled: false
            }, [ Validators.required ]],
          BoxModelResultType: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.BoxModelResultType,
              disabled: false
            }, [ Validators.required ]],
          Volume_m3: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.Volume_m3,
              disabled: false
            }, [ Validators.required ]],
          Surface_m2: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.Surface_m2,
              disabled: false
            }, [ Validators.required ]],
          Radius_m: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.Radius_m,
              disabled: false
            }, [ Validators.required ]],
          LeftSideDiameterLineAngle_deg: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LeftSideDiameterLineAngle_deg,
              disabled: false
            }, [ Validators.required ]],
          CircleCenterLatitude: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.CircleCenterLatitude,
              disabled: false
            }, [ Validators.required ]],
          CircleCenterLongitude: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.CircleCenterLongitude,
              disabled: false
            }, [ Validators.required ]],
          FixLength: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.FixLength,
              disabled: false
            }, [ Validators.required ]],
          FixWidth: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.FixWidth,
              disabled: false
            }, [ Validators.required ]],
          RectLength_m: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.RectLength_m,
              disabled: false
            }, [ Validators.required ]],
          RectWidth_m: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.RectWidth_m,
              disabled: false
            }, [ Validators.required ]],
          LeftSideLineAngle_deg: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LeftSideLineAngle_deg,
              disabled: false
            }, [ Validators.required ]],
          LeftSideLineStartLatitude: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LeftSideLineStartLatitude,
              disabled: false
            }, [ Validators.required ]],
          LeftSideLineStartLongitude: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LeftSideLineStartLongitude,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.boxmodelresultService.boxmodelresultList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.boxmodelresultFormPost = formGroup
      }
      else {
        this.boxmodelresultFormPut = formGroup;
      }
    }
  }
}
