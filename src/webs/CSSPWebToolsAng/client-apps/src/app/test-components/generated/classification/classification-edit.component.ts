/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ClassificationService } from './classification.service';
import { LoadLocalesClassificationText } from './classification.locales';
import { Subscription } from 'rxjs';
import { ClassificationTypeEnum_GetOrderedText } from '../../../enums/generated/ClassificationTypeEnum';
import { Classification } from '../../../models/generated/Classification.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-classification-edit',
  templateUrl: './classification-edit.component.html',
  styleUrls: ['./classification-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ClassificationEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  classificationTypeList: EnumIDAndText[];
  classificationFormEdit: FormGroup;
  @Input() classification: Classification = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public classificationService: ClassificationService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutClassification(classification: Classification) {
    this.sub = this.classificationService.PutClassification(classification).subscribe();
  }

  PostClassification(classification: Classification) {
    this.sub = this.classificationService.PostClassification(classification).subscribe();
  }

  ngOnInit(): void {
    this.classificationTypeList = ClassificationTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.classification) {
      let formGroup: FormGroup = this.fb.group(
        {
          ClassificationID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.classification.ClassificationID)),
              disabled: false
            }, [Validators.required]],
          ClassificationTVItemID: [
            {
              value: this.classification.ClassificationTVItemID,
              disabled: false
            }, [Validators.required]],
          ClassificationType: [
            {
              value: this.classification.ClassificationType,
              disabled: false
            }, [Validators.required]],
          Ordinal: [
            {
              value: this.classification.Ordinal,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000)]],
          LastUpdateDate_UTC: [
            {
              value: this.classification.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.classification.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.classificationFormEdit = formGroup
    }
  }
}
