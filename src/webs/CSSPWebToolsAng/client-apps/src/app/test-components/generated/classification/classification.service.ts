/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ClassificationTextModel } from './classification.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesClassificationText } from './classification.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Classification } from '../../../models/generated/Classification.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ClassificationService {
  /* Variables */
  classificationTextModel$: BehaviorSubject<ClassificationTextModel> = new BehaviorSubject<ClassificationTextModel>(<ClassificationTextModel>{});
  classificationListModel$: BehaviorSubject<Classification[]> = new BehaviorSubject<Classification[]>(<Classification[]>{});
  classificationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  classificationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  classificationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  classificationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesClassificationText(this.classificationTextModel$);
    this.classificationTextModel$.next(<ClassificationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetClassificationList() {
    this.httpClientService.BeforeHttpClient(this.classificationGetModel$);

    return this.httpClient.get<Classification[]>('/api/Classification').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Classification>(this.classificationListModel$, this.classificationGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Classification>(this.classificationListModel$, this.classificationGetModel$, e);
      })))
    );
  }

  PutClassification(classification: Classification) {
    this.httpClientService.BeforeHttpClient(this.classificationPutModel$);

    return this.httpClient.put<Classification>('/api/Classification', classification, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Classification>(this.classificationListModel$, this.classificationPutModel$, x, HttpClientCommand.Put, classification);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<Classification>(this.classificationListModel$, this.classificationPutModel$, e);
      })))
    );
  }

  PostClassification(classification: Classification) {
    this.httpClientService.BeforeHttpClient(this.classificationPostModel$);

    return this.httpClient.post<Classification>('/api/Classification', classification, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Classification>(this.classificationListModel$, this.classificationPostModel$, x, HttpClientCommand.Post, classification);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Classification>(this.classificationListModel$, this.classificationPostModel$, e);
      })))
    );
  }

  DeleteClassification(classification: Classification) {
    this.httpClientService.BeforeHttpClient(this.classificationDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/Classification/${ classification.ClassificationID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Classification>(this.classificationListModel$, this.classificationDeleteModel$, x, HttpClientCommand.Delete, classification);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Classification>(this.classificationListModel$, this.classificationDeleteModel$, e);
      })))
    );
  }
}
