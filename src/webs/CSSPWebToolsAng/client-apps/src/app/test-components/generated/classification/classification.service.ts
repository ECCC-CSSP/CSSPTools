/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ClassificationTextModel, ClassificationModel } from './classification.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesClassificationText } from './classification.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Classification } from 'src/app/models/generated/Classification.model';

@Injectable({
  providedIn: 'root'
})
export class ClassificationService {
  classificationTextModel$: BehaviorSubject<ClassificationTextModel> = new BehaviorSubject<ClassificationTextModel>(<ClassificationTextModel>{});
  classificationModel$: BehaviorSubject<ClassificationModel> = new BehaviorSubject<ClassificationModel>(<ClassificationModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesClassificationText(this);
    this.UpdateClassificationText(<ClassificationTextModel>{ Title: "Something2 for text" });
  }

  UpdateClassificationText(classificationTextModel: ClassificationTextModel) {
    this.classificationTextModel$.next(<ClassificationTextModel>{ ...this.classificationTextModel$.getValue(), ...classificationTextModel });
  }

  UpdateClassificationModel(classificationModel: ClassificationModel) {
    this.classificationModel$.next(<ClassificationModel>{ ...this.classificationModel$.getValue(), ...classificationModel });
  }

  GetClassification(router: Router) {
    let oldURL = router.url;
    this.UpdateClassificationModel(<ClassificationModel>{ Working: true, Error: null });

    return this.httpClient.get<Classification[]>('/api/Classification').pipe(
      map((x: any) => {
        console.debug(`Classification OK. Return: ${x}`);
        this.classificationModel$.getValue().ClassificationList = <Classification[]>x;
        this.UpdateClassificationModel(this.classificationModel$.getValue());
        this.UpdateClassificationModel(<ClassificationModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateClassificationModel(<ClassificationModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Classification ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
