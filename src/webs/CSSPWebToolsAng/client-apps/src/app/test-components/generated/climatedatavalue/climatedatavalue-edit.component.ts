/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ClimateDataValueService } from './climatedatavalue.service';
import { LoadLocalesClimateDataValueText } from './climatedatavalue.locales';
import { Subscription } from 'rxjs';
import { StorageDataTypeEnum_GetOrderedText } from '../../../enums/generated/StorageDataTypeEnum';
import { ClimateDataValue } from '../../../models/generated/ClimateDataValue.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-climatedatavalue-edit',
  templateUrl: './climatedatavalue-edit.component.html',
  styleUrls: ['./climatedatavalue-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ClimateDataValueEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  storageDataTypeList: EnumIDAndText[];
  climatedatavalueFormEdit: FormGroup;
  @Input() climatedatavalue: ClimateDataValue = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public climatedatavalueService: ClimateDataValueService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutClimateDataValue(climatedatavalue: ClimateDataValue) {
    this.sub = this.climatedatavalueService.PutClimateDataValue(climatedatavalue).subscribe();
  }

  PostClimateDataValue(climatedatavalue: ClimateDataValue) {
    this.sub = this.climatedatavalueService.PostClimateDataValue(climatedatavalue).subscribe();
  }

  ngOnInit(): void {
    this.storageDataTypeList = StorageDataTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.climatedatavalue) {
      let formGroup: FormGroup = this.fb.group(
        {
          ClimateDataValueID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.climatedatavalue.ClimateDataValueID)),
              disabled: false
            }, [Validators.required]],
          ClimateSiteID: [
            {
              value: this.climatedatavalue.ClimateSiteID,
              disabled: false
            }, [Validators.required]],
          DateTime_Local: [
            {
              value: this.climatedatavalue.DateTime_Local,
              disabled: false
            }, [Validators.required]],
          Keep: [
            {
              value: this.climatedatavalue.Keep,
              disabled: false
            }, [Validators.required]],
          StorageDataType: [
            {
              value: this.climatedatavalue.StorageDataType,
              disabled: false
            }, [Validators.required]],
          HasBeenRead: [
            {
              value: this.climatedatavalue.HasBeenRead,
              disabled: false
            }, [Validators.required]],
          Snow_cm: [
            {
              value: this.climatedatavalue.Snow_cm,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          Rainfall_mm: [
            {
              value: this.climatedatavalue.Rainfall_mm,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          RainfallEntered_mm: [
            {
              value: this.climatedatavalue.RainfallEntered_mm,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          TotalPrecip_mm_cm: [
            {
              value: this.climatedatavalue.TotalPrecip_mm_cm,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          MaxTemp_C: [
            {
              value: this.climatedatavalue.MaxTemp_C,
              disabled: false
            }, [Validators.min(-50), Validators.max(50)]],
          MinTemp_C: [
            {
              value: this.climatedatavalue.MinTemp_C,
              disabled: false
            }, [Validators.min(-50), Validators.max(50)]],
          HeatDegDays_C: [
            {
              value: this.climatedatavalue.HeatDegDays_C,
              disabled: false
            }, [Validators.min(-1000), Validators.max(100)]],
          CoolDegDays_C: [
            {
              value: this.climatedatavalue.CoolDegDays_C,
              disabled: false
            }, [Validators.min(-1000), Validators.max(100)]],
          SnowOnGround_cm: [
            {
              value: this.climatedatavalue.SnowOnGround_cm,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          DirMaxGust_0North: [
            {
              value: this.climatedatavalue.DirMaxGust_0North,
              disabled: false
            }, [Validators.min(0), Validators.max(360)]],
          SpdMaxGust_kmh: [
            {
              value: this.climatedatavalue.SpdMaxGust_kmh,
              disabled: false
            }, [Validators.min(0), Validators.max(300)]],
          HourlyValues: [
            {
              value: this.climatedatavalue.HourlyValues,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.climatedatavalue.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.climatedatavalue.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.climatedatavalueFormEdit = formGroup
    }
  }
}
