/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { ClimateDataValueService } from './climatedatavalue.service';
import { LoadLocalesClimateDataValueText } from './climatedatavalue.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { StorageDataTypeEnum_GetIDText, StorageDataTypeEnum_GetOrderedText } from '../../../enums/generated/StorageDataTypeEnum';
import { ClimateDataValue } from '../../../models/generated/ClimateDataValue.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-climatedatavalue',
  templateUrl: './climatedatavalue.component.html',
  styleUrls: ['./climatedatavalue.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ClimateDataValueComponent implements OnInit, OnDestroy {
  sub: Subscription;
  storageDataTypeList: EnumIDAndText[];
  climatedatavalueFormPut: FormGroup;
  climatedatavalueFormPost: FormGroup;

  constructor(public climatedatavalueService: ClimateDataValueService, public router: Router, public fb: FormBuilder) { }

  GetClimateDataValueList() {
    this.sub = this.climatedatavalueService.GetClimateDataValueList(this.router).subscribe();
  }

  PutClimateDataValue(climatedatavalue: ClimateDataValue) {
    this.sub = this.climatedatavalueService.PutClimateDataValue(climatedatavalue, this.router).subscribe();
  }

  PostClimateDataValue(climatedatavalue: ClimateDataValue) {
    this.sub = this.climatedatavalueService.PostClimateDataValue(climatedatavalue, this.router).subscribe();
  }

  DeleteClimateDataValue(climatedatavalue: ClimateDataValue) {
    this.sub = this.climatedatavalueService.DeleteClimateDataValue(climatedatavalue, this.router).subscribe();
  }

  GetStorageDataTypeEnumText(enumID: number) {
    return StorageDataTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesClimateDataValueText(this.climatedatavalueService);
    this.storageDataTypeList = StorageDataTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.climatedatavalueService.climatedatavalueList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          ClimateDataValueID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.climatedatavalueService.climatedatavalueList[0]?.ClimateDataValueID ?? '')),
              disabled: false
            }, Validators.required],
          ClimateSiteID: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.ClimateSiteID ?? '',
              disabled: false
            }, Validators.required],
          DateTime_Local: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.DateTime_Local ?? '',
              disabled: false
            }, Validators.required],
          Keep: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.Keep ?? '',
              disabled: false
            }, Validators.required],
          StorageDataType: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.StorageDataType ?? '',
              disabled: false
            }, Validators.required],
          HasBeenRead: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.HasBeenRead ?? '',
              disabled: false
            }, Validators.required],
          Snow_cm: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.Snow_cm ?? '',
              disabled: false
            }, Validators.required],
          Rainfall_mm: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.Rainfall_mm ?? '',
              disabled: false
            }, Validators.required],
          RainfallEntered_mm: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.RainfallEntered_mm ?? '',
              disabled: false
            }, Validators.required],
          TotalPrecip_mm_cm: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.TotalPrecip_mm_cm ?? '',
              disabled: false
            }, Validators.required],
          MaxTemp_C: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.MaxTemp_C ?? '',
              disabled: false
            }, Validators.required],
          MinTemp_C: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.MinTemp_C ?? '',
              disabled: false
            }, Validators.required],
          HeatDegDays_C: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.HeatDegDays_C ?? '',
              disabled: false
            }, Validators.required],
          CoolDegDays_C: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.CoolDegDays_C ?? '',
              disabled: false
            }, Validators.required],
          SnowOnGround_cm: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.SnowOnGround_cm ?? '',
              disabled: false
            }, Validators.required],
          DirMaxGust_0North: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.DirMaxGust_0North ?? '',
              disabled: false
            }, Validators.required],
          SpdMaxGust_kmh: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.SpdMaxGust_kmh ?? '',
              disabled: false
            }, Validators.required],
          HourlyValues: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.HourlyValues ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.climatedatavalueService.climatedatavalueList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.climatedatavalueFormPost = formGroup
      }
      else {
        this.climatedatavalueFormPut = formGroup;
      }
    }
  }
}
