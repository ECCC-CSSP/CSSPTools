/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ClimateDataValueTextModel, ClimateDataValueModel } from './climatedatavalue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesClimateDataValueText } from './climatedatavalue.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ClimateDataValue } from 'src/app/models/generated/ClimateDataValue.model';

@Injectable({
  providedIn: 'root'
})
export class ClimateDataValueService {
  climatedatavalueTextModel$: BehaviorSubject<ClimateDataValueTextModel> = new BehaviorSubject<ClimateDataValueTextModel>(<ClimateDataValueTextModel>{});
  climatedatavalueModel$: BehaviorSubject<ClimateDataValueModel> = new BehaviorSubject<ClimateDataValueModel>(<ClimateDataValueModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesClimateDataValueText(this);
    this.UpdateClimateDataValueText(<ClimateDataValueTextModel>{ Title: "Something2 for text" });
  }

  UpdateClimateDataValueText(climatedatavalueTextModel: ClimateDataValueTextModel) {
    this.climatedatavalueTextModel$.next(<ClimateDataValueTextModel>{ ...this.climatedatavalueTextModel$.getValue(), ...climatedatavalueTextModel });
  }

  UpdateClimateDataValueModel(climatedatavalueModel: ClimateDataValueModel) {
    this.climatedatavalueModel$.next(<ClimateDataValueModel>{ ...this.climatedatavalueModel$.getValue(), ...climatedatavalueModel });
  }

  GetClimateDataValue(router: Router) {
    let oldURL = router.url;
    this.UpdateClimateDataValueModel(<ClimateDataValueModel>{ Working: true, Error: null });

    return this.httpClient.get<ClimateDataValue[]>('/api/ClimateDataValue').pipe(
      map((x: any) => {
        console.debug(`ClimateDataValue OK. Return: ${x}`);
        this.climatedatavalueModel$.getValue().ClimateDataValueList = <ClimateDataValue[]>x;
        this.UpdateClimateDataValueModel(this.climatedatavalueModel$.getValue());
        this.UpdateClimateDataValueModel(<ClimateDataValueModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateClimateDataValueModel(<ClimateDataValueModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ClimateDataValue ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
