/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ClimateSiteService } from './climatesite.service';
import { LoadLocalesClimateSiteText } from './climatesite.locales';
import { Subscription } from 'rxjs';
import { ClimateSite } from '../../../models/generated/ClimateSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-climatesite-edit',
  templateUrl: './climatesite-edit.component.html',
  styleUrls: ['./climatesite-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ClimateSiteEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  climatesiteFormEdit: FormGroup;
  @Input() climatesite: ClimateSite = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public climatesiteService: ClimateSiteService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutClimateSite(climatesite: ClimateSite) {
    this.sub = this.climatesiteService.PutClimateSite(climatesite).subscribe();
  }

  PostClimateSite(climatesite: ClimateSite) {
    this.sub = this.climatesiteService.PostClimateSite(climatesite).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.climatesite) {
      let formGroup: FormGroup = this.fb.group(
        {
          ClimateSiteID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.climatesite.ClimateSiteID)),
              disabled: false
            }, [Validators.required]],
          ClimateSiteTVItemID: [
            {
              value: this.climatesite.ClimateSiteTVItemID,
              disabled: false
            }, [Validators.required]],
          ECDBID: [
            {
              value: this.climatesite.ECDBID,
              disabled: false
            }, [Validators.min(1), Validators.max(100000)]],
          ClimateSiteName: [
            {
              value: this.climatesite.ClimateSiteName,
              disabled: false
            }, [Validators.required, Validators.maxLength(100)]],
          Province: [
            {
              value: this.climatesite.Province,
              disabled: false
            }, [Validators.required, Validators.maxLength(4)]],
          Elevation_m: [
            {
              value: this.climatesite.Elevation_m,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          ClimateID: [
            {
              value: this.climatesite.ClimateID,
              disabled: false
            }, [Validators.maxLength(10)]],
          WMOID: [
            {
              value: this.climatesite.WMOID,
              disabled: false
            }, [Validators.min(1), Validators.max(100000)]],
          TCID: [
            {
              value: this.climatesite.TCID,
              disabled: false
            }, [Validators.maxLength(3)]],
          IsQuebecSite: [
            {
              value: this.climatesite.IsQuebecSite,
              disabled: false
            }],
          IsCoCoRaHS: [
            {
              value: this.climatesite.IsCoCoRaHS,
              disabled: false
            }],
          TimeOffset_hour: [
            {
              value: this.climatesite.TimeOffset_hour,
              disabled: false
            }, [Validators.min(-10), Validators.max(0)]],
          File_desc: [
            {
              value: this.climatesite.File_desc,
              disabled: false
            }, [Validators.maxLength(50)]],
          HourlyStartDate_Local: [
            {
              value: this.climatesite.HourlyStartDate_Local,
              disabled: false
            }],
          HourlyEndDate_Local: [
            {
              value: this.climatesite.HourlyEndDate_Local,
              disabled: false
            }],
          HourlyNow: [
            {
              value: this.climatesite.HourlyNow,
              disabled: false
            }],
          DailyStartDate_Local: [
            {
              value: this.climatesite.DailyStartDate_Local,
              disabled: false
            }],
          DailyEndDate_Local: [
            {
              value: this.climatesite.DailyEndDate_Local,
              disabled: false
            }],
          DailyNow: [
            {
              value: this.climatesite.DailyNow,
              disabled: false
            }],
          MonthlyStartDate_Local: [
            {
              value: this.climatesite.MonthlyStartDate_Local,
              disabled: false
            }],
          MonthlyEndDate_Local: [
            {
              value: this.climatesite.MonthlyEndDate_Local,
              disabled: false
            }],
          MonthlyNow: [
            {
              value: this.climatesite.MonthlyNow,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.climatesite.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.climatesite.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.climatesiteFormEdit = formGroup
    }
  }
}
