/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ClimateSiteTextModel } from './climatesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesClimateSiteText } from './climatesite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ClimateSite } from '../../../models/generated/ClimateSite.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class ClimateSiteService {
  /* Variables */
  climatesiteTextModel$: BehaviorSubject<ClimateSiteTextModel> = new BehaviorSubject<ClimateSiteTextModel>(<ClimateSiteTextModel>{});
  climatesiteListModel$: BehaviorSubject<ClimateSite[]> = new BehaviorSubject<ClimateSite[]>(<ClimateSite[]>{});
  climatesiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  climatesitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  climatesitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  climatesiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  climatesiteList: ClimateSite[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesClimateSiteText(this);
    this.climatesiteTextModel$.next(<ClimateSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetClimateSiteList(router: Router) {
    this.BeforeHttpClient(this.climatesiteGetModel$, router);

    return this.httpClient.get<ClimateSite[]>('/api/ClimateSite').pipe(
      map((x: any) => {
        this.DoSuccess(this.climatesiteGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.climatesiteGetModel$, e, 'Get');
      })))
    );
  }

  PutClimateSite(climatesite: ClimateSite, router: Router) {
    this.BeforeHttpClient(this.climatesitePutModel$, router);

    return this.httpClient.put<ClimateSite>('/api/ClimateSite', climatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.climatesitePutModel$, x, 'Put', climatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.climatesitePutModel$, e, 'Put');
      })))
    );
  }

  PostClimateSite(climatesite: ClimateSite, router: Router) {
    this.BeforeHttpClient(this.climatesitePostModel$, router);

    return this.httpClient.post<ClimateSite>('/api/ClimateSite', climatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.climatesitePostModel$, x, 'Post', climatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.climatesitePostModel$, e, 'Post');
      })))
    );
  }

  DeleteClimateSite(climatesite: ClimateSite, router: Router) {
    this.BeforeHttpClient(this.climatesiteDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/ClimateSite/${ climatesite.ClimateSiteID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.climatesiteDeleteModel$, x, 'Delete', climatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.climatesiteDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.climatesiteListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.climatesiteList = [];
    console.debug(`ClimateSite ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, climatesite?: ClimateSite) {
    console.debug(`ClimateSite ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.climatesiteListModel$.next(<ClimateSite[]>x);
    }
    if (command === 'Put') {
      this.climatesiteListModel$.getValue()[0] = <ClimateSite>x;
    }
    if (command === 'Post') {
      this.climatesiteListModel$.getValue().push(<ClimateSite>x);
    }
    if (command === 'Delete') {
      const index = this.climatesiteListModel$.getValue().indexOf(climatesite);
      this.climatesiteListModel$.getValue().splice(index, 1);
    }

    this.climatesiteListModel$.next(this.climatesiteListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.climatesiteList = this.climatesiteListModel$.getValue();
    this.DoReload();
  }
}
