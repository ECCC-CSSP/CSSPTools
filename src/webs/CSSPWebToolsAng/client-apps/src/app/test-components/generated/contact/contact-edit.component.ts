/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ContactService } from './contact.service';
import { LoadLocalesContactText } from './contact.locales';
import { Subscription } from 'rxjs';
import { ContactTitleEnum_GetOrderedText } from '../../../enums/generated/ContactTitleEnum';
import { Contact } from '../../../models/generated/Contact.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-contact-edit',
  templateUrl: './contact-edit.component.html',
  styleUrls: ['./contact-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ContactEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  contactTitleList: EnumIDAndText[];
  contactFormEdit: FormGroup;
  @Input() contact: Contact = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public contactService: ContactService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutContact(contact: Contact) {
    this.sub = this.contactService.PutContact(contact).subscribe();
  }

  PostContact(contact: Contact) {
    this.sub = this.contactService.PostContact(contact).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesContactText(this.contactService);
    this.contactTitleList = ContactTitleEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.contact) {
      let formGroup: FormGroup = this.fb.group(
        {
          ContactID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.contactService.contactListModel$.getValue()[0]?.ContactID)),
              disabled: false
            }, [Validators.required]],
          Id: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.Id,
              disabled: false
            }, [Validators.required, Validators.maxLength(128)]],
          ContactTVItemID: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.ContactTVItemID,
              disabled: false
            }, [Validators.required]],
          LoginEmail: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.LoginEmail,
              disabled: false
            }, [Validators.required, Validators.email, Validators.minLength(6), Validators.maxLength(255)]],
          FirstName: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.FirstName,
              disabled: false
            }, [Validators.required, Validators.maxLength(100)]],
          LastName: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.LastName,
              disabled: false
            }, [Validators.required, Validators.maxLength(100)]],
          Initial: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.Initial,
              disabled: false
            }, [Validators.maxLength(50)]],
          WebName: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.WebName,
              disabled: false
            }, [Validators.required, Validators.maxLength(100)]],
          ContactTitle: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.ContactTitle,
              disabled: false
            }],
          IsAdmin: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.IsAdmin,
              disabled: false
            }, [Validators.required]],
          EmailValidated: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.EmailValidated,
              disabled: false
            }, [Validators.required]],
          Disabled: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.Disabled,
              disabled: false
            }, [Validators.required]],
          IsNew: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.IsNew,
              disabled: false
            }, [Validators.required]],
          SamplingPlanner_ProvincesTVItemID: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.SamplingPlanner_ProvincesTVItemID,
              disabled: false
            }, [Validators.maxLength(200)]],
          Token: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.Token,
              disabled: false
            }, [Validators.maxLength(255)]],
          LastUpdateDate_UTC: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.contactService.contactListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.contactFormEdit = formGroup
    }
  }
}
