/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { ContactService } from './contact.service';
import { LoadLocalesContactText } from './contact.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { ContactTitleEnum_GetIDText, ContactTitleEnum_GetOrderedText } from '../../../enums/generated/ContactTitleEnum';
import { Contact } from '../../../models/generated/Contact.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ContactComponent implements OnInit, OnDestroy {
  sub: Subscription;
  contactTitleList: EnumIDAndText[];
  contactFormPut: FormGroup;
  contactFormPost: FormGroup;

  constructor(public contactService: ContactService, public router: Router, public fb: FormBuilder) { }

  GetContactList() {
    this.sub = this.contactService.GetContactList(this.router).subscribe();
  }

  PutContact(contact: Contact) {
    this.sub = this.contactService.PutContact(contact, this.router).subscribe();
  }

  PostContact(contact: Contact) {
    this.sub = this.contactService.PostContact(contact, this.router).subscribe();
  }

  DeleteContact(contact: Contact) {
    this.sub = this.contactService.DeleteContact(contact, this.router).subscribe();
  }

  GetContactTitleEnumText(enumID: number) {
    return ContactTitleEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesContactText(this.contactService);
    this.contactTitleList = ContactTitleEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.contactService.contactList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          ContactID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.contactService.contactList[0]?.ContactID ?? '')),
              disabled: false
            }, Validators.required],
          Id: [
            {
              value: this.contactService.contactList[0]?.Id ?? '',
              disabled: false
            }, Validators.required],
          ContactTVItemID: [
            {
              value: this.contactService.contactList[0]?.ContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
          LoginEmail: [
            {
              value: this.contactService.contactList[0]?.LoginEmail ?? '',
              disabled: false
            }, Validators.required],
          FirstName: [
            {
              value: this.contactService.contactList[0]?.FirstName ?? '',
              disabled: false
            }, Validators.required],
          LastName: [
            {
              value: this.contactService.contactList[0]?.LastName ?? '',
              disabled: false
            }, Validators.required],
          Initial: [
            {
              value: this.contactService.contactList[0]?.Initial ?? '',
              disabled: false
            }, Validators.required],
          WebName: [
            {
              value: this.contactService.contactList[0]?.WebName ?? '',
              disabled: false
            }, Validators.required],
          ContactTitle: [
            {
              value: this.contactService.contactList[0]?.ContactTitle ?? '',
              disabled: false
            }, Validators.required],
          IsAdmin: [
            {
              value: this.contactService.contactList[0]?.IsAdmin ?? '',
              disabled: false
            }, Validators.required],
          EmailValidated: [
            {
              value: this.contactService.contactList[0]?.EmailValidated ?? '',
              disabled: false
            }, Validators.required],
          Disabled: [
            {
              value: this.contactService.contactList[0]?.Disabled ?? '',
              disabled: false
            }, Validators.required],
          IsNew: [
            {
              value: this.contactService.contactList[0]?.IsNew ?? '',
              disabled: false
            }, Validators.required],
          SamplingPlanner_ProvincesTVItemID: [
            {
              value: this.contactService.contactList[0]?.SamplingPlanner_ProvincesTVItemID ?? '',
              disabled: false
            }, Validators.required],
          Token: [
            {
              value: this.contactService.contactList[0]?.Token ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.contactService.contactList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.contactService.contactList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.contactFormPost = formGroup
      }
      else {
        this.contactFormPut = formGroup;
      }
    }
  }
}
