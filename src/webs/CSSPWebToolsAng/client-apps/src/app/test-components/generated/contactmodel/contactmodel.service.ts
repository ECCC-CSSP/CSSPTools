/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactModelTextModel } from './contactmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactModelText } from './contactmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContactModel } from '../../../models/generated/ContactModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ContactModelService {
  /* Variables */
  contactmodelTextModel$: BehaviorSubject<ContactModelTextModel> = new BehaviorSubject<ContactModelTextModel>(<ContactModelTextModel>{});
  contactmodelListModel$: BehaviorSubject<ContactModel[]> = new BehaviorSubject<ContactModel[]>(<ContactModel[]>{});
  contactmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesContactModelText(this.contactmodelTextModel$);
    this.contactmodelTextModel$.next(<ContactModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetContactModelList() {
    this.httpClientService.BeforeHttpClient(this.contactmodelGetModel$);

    return this.httpClient.get<ContactModel[]>('/api/ContactModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactModel>(this.contactmodelListModel$, this.contactmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactModel>(this.contactmodelListModel$, this.contactmodelGetModel$, e);
      })))
    );
  }

  PutContactModel(contactmodel: ContactModel) {
    this.httpClientService.BeforeHttpClient(this.contactmodelPutModel$);

    return this.httpClient.put<ContactModel>('/api/ContactModel', contactmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactModel>(this.contactmodelListModel$, this.contactmodelPutModel$, x, HttpClientCommand.Put, contactmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ContactModel>(this.contactmodelListModel$, this.contactmodelPutModel$, e);
      })))
    );
  }

  PostContactModel(contactmodel: ContactModel) {
    this.httpClientService.BeforeHttpClient(this.contactmodelPostModel$);

    return this.httpClient.post<ContactModel>('/api/ContactModel', contactmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactModel>(this.contactmodelListModel$, this.contactmodelPostModel$, x, HttpClientCommand.Post, contactmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactModel>(this.contactmodelListModel$, this.contactmodelPostModel$, e);
      })))
    );
  }

  DeleteContactModel(contactmodel: ContactModel) {
    this.httpClientService.BeforeHttpClient(this.contactmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ContactModel/${ contactmodel.ContactModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactModel>(this.contactmodelListModel$, this.contactmodelDeleteModel$, x, HttpClientCommand.Delete, contactmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactModel>(this.contactmodelListModel$, this.contactmodelDeleteModel$, e);
      })))
    );
  }
}
