/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { ContactPreferenceService } from './contactpreference.service';
import { LoadLocalesContactPreferenceText } from './contactpreference.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { ContactPreference } from '../../../models/generated/ContactPreference.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-contactpreference',
  templateUrl: './contactpreference.component.html',
  styleUrls: ['./contactpreference.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ContactPreferenceComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  contactpreferenceFormPut: FormGroup;
  contactpreferenceFormPost: FormGroup;

  constructor(public contactpreferenceService: ContactPreferenceService, public router: Router, public fb: FormBuilder) { }

  GetContactPreferenceList() {
    this.sub = this.contactpreferenceService.GetContactPreferenceList(this.router).subscribe();
  }

  PutContactPreference(contactpreference: ContactPreference) {
    this.sub = this.contactpreferenceService.PutContactPreference(contactpreference, this.router).subscribe();
  }

  PostContactPreference(contactpreference: ContactPreference) {
    this.sub = this.contactpreferenceService.PostContactPreference(contactpreference, this.router).subscribe();
  }

  DeleteContactPreference(contactpreference: ContactPreference) {
    this.sub = this.contactpreferenceService.DeleteContactPreference(contactpreference, this.router).subscribe();
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesContactPreferenceText(this.contactpreferenceService);
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.contactpreferenceService.contactpreferenceList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          ContactPreferenceID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.contactpreferenceService.contactpreferenceList[0]?.ContactPreferenceID ?? '')),
              disabled: false
            }, Validators.required],
          ContactID: [
            {
              value: this.contactpreferenceService.contactpreferenceList[0]?.ContactID ?? '',
              disabled: false
            }, Validators.required],
          TVType: [
            {
              value: this.contactpreferenceService.contactpreferenceList[0]?.TVType ?? '',
              disabled: false
            }, Validators.required],
          MarkerSize: [
            {
              value: this.contactpreferenceService.contactpreferenceList[0]?.MarkerSize ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.contactpreferenceService.contactpreferenceList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.contactpreferenceService.contactpreferenceList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.contactpreferenceFormPost = formGroup
      }
      else {
        this.contactpreferenceFormPut = formGroup;
      }
    }
  }
}
