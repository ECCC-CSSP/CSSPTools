/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ContactShortcutTextModel } from './contactshortcut.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesContactShortcutText } from './contactshortcut.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ContactShortcut } from '../../../models/generated/ContactShortcut.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ContactShortcutService {
  /* Variables */
  contactshortcutTextModel$: BehaviorSubject<ContactShortcutTextModel> = new BehaviorSubject<ContactShortcutTextModel>(<ContactShortcutTextModel>{});
  contactshortcutListModel$: BehaviorSubject<ContactShortcut[]> = new BehaviorSubject<ContactShortcut[]>(<ContactShortcut[]>{});
  contactshortcutGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactshortcutPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactshortcutPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  contactshortcutDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesContactShortcutText(this.contactshortcutTextModel$);
    this.contactshortcutTextModel$.next(<ContactShortcutTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetContactShortcutList() {
    this.httpClientService.BeforeHttpClient(this.contactshortcutGetModel$);

    return this.httpClient.get<ContactShortcut[]>('/api/ContactShortcut').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutGetModel$, e);
      })))
    );
  }

  PutContactShortcut(contactshortcut: ContactShortcut) {
    this.httpClientService.BeforeHttpClient(this.contactshortcutPutModel$);

    return this.httpClient.put<ContactShortcut>('/api/ContactShortcut', contactshortcut, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutPutModel$, x, HttpClientCommand.Put, contactshortcut);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutPutModel$, e);
      })))
    );
  }

  PostContactShortcut(contactshortcut: ContactShortcut) {
    this.httpClientService.BeforeHttpClient(this.contactshortcutPostModel$);

    return this.httpClient.post<ContactShortcut>('/api/ContactShortcut', contactshortcut, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutPostModel$, x, HttpClientCommand.Post, contactshortcut);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutPostModel$, e);
      })))
    );
  }

  DeleteContactShortcut(contactshortcut: ContactShortcut) {
    this.httpClientService.BeforeHttpClient(this.contactshortcutDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ContactShortcut/${ contactshortcut.ContactShortcutID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutDeleteModel$, x, HttpClientCommand.Delete, contactshortcut);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ContactShortcut>(this.contactshortcutListModel$, this.contactshortcutDeleteModel$, e);
      })))
    );
  }
}
