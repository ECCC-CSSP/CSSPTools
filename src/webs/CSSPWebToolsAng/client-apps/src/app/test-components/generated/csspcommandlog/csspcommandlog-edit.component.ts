/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { CSSPCommandLogService } from './csspcommandlog.service';
import { LoadLocalesCSSPCommandLogText } from './csspcommandlog.locales';
import { Subscription } from 'rxjs';
import { CSSPCommandLog } from '../../../models/generated/CSSPCommandLog.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-csspcommandlog-edit',
  templateUrl: './csspcommandlog-edit.component.html',
  styleUrls: ['./csspcommandlog-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class CSSPCommandLogEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  csspcommandlogFormEdit: FormGroup;
  @Input() csspcommandlog: CSSPCommandLog = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public csspcommandlogService: CSSPCommandLogService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutCSSPCommandLog(csspcommandlog: CSSPCommandLog) {
    this.sub = this.csspcommandlogService.PutCSSPCommandLog(csspcommandlog).subscribe();
  }

  PostCSSPCommandLog(csspcommandlog: CSSPCommandLog) {
    this.sub = this.csspcommandlogService.PostCSSPCommandLog(csspcommandlog).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.csspcommandlog) {
      let formGroup: FormGroup = this.fb.group(
        {
          CSSPCommandLogID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.csspcommandlog.CSSPCommandLogID)),
              disabled: false
            }, [Validators.required]],
          AppName: [
            {
              value: this.csspcommandlog.AppName,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          CommandName: [
            {
              value: this.csspcommandlog.CommandName,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          Successful: [
            {
              value: this.csspcommandlog.Successful,
              disabled: false
            }],
          ErrorMessage: [
            {
              value: this.csspcommandlog.ErrorMessage,
              disabled: false
            }, [Validators.required, Validators.maxLength(500)]],
          DateTimeUTC: [
            {
              value: this.csspcommandlog.DateTimeUTC,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.csspcommandlogFormEdit = formGroup
    }
  }
}
