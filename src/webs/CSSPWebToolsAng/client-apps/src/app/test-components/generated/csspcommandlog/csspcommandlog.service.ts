/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPCommandLogTextModel } from './csspcommandlog.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPCommandLogText } from './csspcommandlog.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPCommandLog } from '../../../models/generated/CSSPCommandLog.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class CSSPCommandLogService {
  /* Variables */
  csspcommandlogTextModel$: BehaviorSubject<CSSPCommandLogTextModel> = new BehaviorSubject<CSSPCommandLogTextModel>(<CSSPCommandLogTextModel>{});
  csspcommandlogListModel$: BehaviorSubject<CSSPCommandLog[]> = new BehaviorSubject<CSSPCommandLog[]>(<CSSPCommandLog[]>{});
  csspcommandlogGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspcommandlogPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspcommandlogPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspcommandlogDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesCSSPCommandLogText(this.csspcommandlogTextModel$);
    this.csspcommandlogTextModel$.next(<CSSPCommandLogTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetCSSPCommandLogList() {
    this.httpClientService.BeforeHttpClient(this.csspcommandlogGetModel$);

    return this.httpClient.get<CSSPCommandLog[]>('/api/CSSPCommandLog').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogGetModel$, e);
      })))
    );
  }

  PutCSSPCommandLog(csspcommandlog: CSSPCommandLog) {
    this.httpClientService.BeforeHttpClient(this.csspcommandlogPutModel$);

    return this.httpClient.put<CSSPCommandLog>('/api/CSSPCommandLog', csspcommandlog, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogPutModel$, x, HttpClientCommand.Put, csspcommandlog);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogPutModel$, e);
      })))
    );
  }

  PostCSSPCommandLog(csspcommandlog: CSSPCommandLog) {
    this.httpClientService.BeforeHttpClient(this.csspcommandlogPostModel$);

    return this.httpClient.post<CSSPCommandLog>('/api/CSSPCommandLog', csspcommandlog, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogPostModel$, x, HttpClientCommand.Post, csspcommandlog);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogPostModel$, e);
      })))
    );
  }

  DeleteCSSPCommandLog(csspcommandlog: CSSPCommandLog) {
    this.httpClientService.BeforeHttpClient(this.csspcommandlogDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/CSSPCommandLog/${ csspcommandlog.CSSPCommandLogID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogDeleteModel$, x, HttpClientCommand.Delete, csspcommandlog);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPCommandLog>(this.csspcommandlogListModel$, this.csspcommandlogDeleteModel$, e);
      })))
    );
  }
}
