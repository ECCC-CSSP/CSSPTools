/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPFileTextModel } from './csspfile.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPFileText } from './csspfile.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPFile } from '../../../models/generated/CSSPFile.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class CSSPFileService {
  /* Variables */
  csspfileTextModel$: BehaviorSubject<CSSPFileTextModel> = new BehaviorSubject<CSSPFileTextModel>(<CSSPFileTextModel>{});
  csspfileListModel$: BehaviorSubject<CSSPFile[]> = new BehaviorSubject<CSSPFile[]>(<CSSPFile[]>{});
  csspfileGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfilePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfilePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfileDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesCSSPFileText(this.csspfileTextModel$);
    this.csspfileTextModel$.next(<CSSPFileTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetCSSPFileList() {
    this.httpClientService.BeforeHttpClient(this.csspfileGetModel$);

    return this.httpClient.get<CSSPFile[]>('/api/CSSPFile').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFile>(this.csspfileListModel$, this.csspfileGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFile>(this.csspfileListModel$, this.csspfileGetModel$, e);
      })))
    );
  }

  PutCSSPFile(csspfile: CSSPFile) {
    this.httpClientService.BeforeHttpClient(this.csspfilePutModel$);

    return this.httpClient.put<CSSPFile>('/api/CSSPFile', csspfile, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFile>(this.csspfileListModel$, this.csspfilePutModel$, x, HttpClientCommand.Put, csspfile);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<CSSPFile>(this.csspfileListModel$, this.csspfilePutModel$, e);
      })))
    );
  }

  PostCSSPFile(csspfile: CSSPFile) {
    this.httpClientService.BeforeHttpClient(this.csspfilePostModel$);

    return this.httpClient.post<CSSPFile>('/api/CSSPFile', csspfile, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFile>(this.csspfileListModel$, this.csspfilePostModel$, x, HttpClientCommand.Post, csspfile);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFile>(this.csspfileListModel$, this.csspfilePostModel$, e);
      })))
    );
  }

  DeleteCSSPFile(csspfile: CSSPFile) {
    this.httpClientService.BeforeHttpClient(this.csspfileDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/CSSPFile/${ csspfile.CSSPFileID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFile>(this.csspfileListModel$, this.csspfileDeleteModel$, x, HttpClientCommand.Delete, csspfile);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFile>(this.csspfileListModel$, this.csspfileDeleteModel$, e);
      })))
    );
  }
}
