/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { CSSPFilesManagementDBContextService } from './csspfilesmanagementdbcontext.service';
import { LoadLocalesCSSPFilesManagementDBContextText } from './csspfilesmanagementdbcontext.locales';
import { Subscription } from 'rxjs';
import { CSSPFilesManagementDBContext } from '../../../models/generated/CSSPFilesManagementDBContext.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-csspfilesmanagementdbcontext-edit',
  templateUrl: './csspfilesmanagementdbcontext-edit.component.html',
  styleUrls: ['./csspfilesmanagementdbcontext-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class CSSPFilesManagementDBContextEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  csspfilesmanagementdbcontextFormEdit: FormGroup;
  @Input() csspfilesmanagementdbcontext: CSSPFilesManagementDBContext = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public csspfilesmanagementdbcontextService: CSSPFilesManagementDBContextService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutCSSPFilesManagementDBContext(csspfilesmanagementdbcontext: CSSPFilesManagementDBContext) {
    this.sub = this.csspfilesmanagementdbcontextService.PutCSSPFilesManagementDBContext(csspfilesmanagementdbcontext).subscribe();
  }

  PostCSSPFilesManagementDBContext(csspfilesmanagementdbcontext: CSSPFilesManagementDBContext) {
    this.sub = this.csspfilesmanagementdbcontextService.PostCSSPFilesManagementDBContext(csspfilesmanagementdbcontext).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.csspfilesmanagementdbcontext) {
      let formGroup: FormGroup = this.fb.group(
        {
          CSSPFiles: [
            {
              value: this.csspfilesmanagementdbcontext.CSSPFiles,
              disabled: false
            }, [Validators.required]],
          Database: [
            {
              value: this.csspfilesmanagementdbcontext.Database,
              disabled: false
            }, [Validators.required]],
          ChangeTracker: [
            {
              value: this.csspfilesmanagementdbcontext.ChangeTracker,
              disabled: false
            }, [Validators.required]],
          Model: [
            {
              value: this.csspfilesmanagementdbcontext.Model,
              disabled: false
            }, [Validators.required]],
          ContextId: [
            {
              value: this.csspfilesmanagementdbcontext.ContextId,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.csspfilesmanagementdbcontextFormEdit = formGroup
    }
  }
}
