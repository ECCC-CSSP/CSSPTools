/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPFilesManagementDBContextTextModel } from './csspfilesmanagementdbcontext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPFilesManagementDBContextText } from './csspfilesmanagementdbcontext.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPFilesManagementDBContext } from '../../../models/generated/CSSPFilesManagementDBContext.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class CSSPFilesManagementDBContextService {
  /* Variables */
  csspfilesmanagementdbcontextTextModel$: BehaviorSubject<CSSPFilesManagementDBContextTextModel> = new BehaviorSubject<CSSPFilesManagementDBContextTextModel>(<CSSPFilesManagementDBContextTextModel>{});
  csspfilesmanagementdbcontextListModel$: BehaviorSubject<CSSPFilesManagementDBContext[]> = new BehaviorSubject<CSSPFilesManagementDBContext[]>(<CSSPFilesManagementDBContext[]>{});
  csspfilesmanagementdbcontextGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfilesmanagementdbcontextPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfilesmanagementdbcontextPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspfilesmanagementdbcontextDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesCSSPFilesManagementDBContextText(this.csspfilesmanagementdbcontextTextModel$);
    this.csspfilesmanagementdbcontextTextModel$.next(<CSSPFilesManagementDBContextTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetCSSPFilesManagementDBContextList() {
    this.httpClientService.BeforeHttpClient(this.csspfilesmanagementdbcontextGetModel$);

    return this.httpClient.get<CSSPFilesManagementDBContext[]>('/api/CSSPFilesManagementDBContext').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextGetModel$, e);
      })))
    );
  }

  PutCSSPFilesManagementDBContext(csspfilesmanagementdbcontext: CSSPFilesManagementDBContext) {
    this.httpClientService.BeforeHttpClient(this.csspfilesmanagementdbcontextPutModel$);

    return this.httpClient.put<CSSPFilesManagementDBContext>('/api/CSSPFilesManagementDBContext', csspfilesmanagementdbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextPutModel$, x, HttpClientCommand.Put, csspfilesmanagementdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextPutModel$, e);
      })))
    );
  }

  PostCSSPFilesManagementDBContext(csspfilesmanagementdbcontext: CSSPFilesManagementDBContext) {
    this.httpClientService.BeforeHttpClient(this.csspfilesmanagementdbcontextPostModel$);

    return this.httpClient.post<CSSPFilesManagementDBContext>('/api/CSSPFilesManagementDBContext', csspfilesmanagementdbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextPostModel$, x, HttpClientCommand.Post, csspfilesmanagementdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextPostModel$, e);
      })))
    );
  }

  DeleteCSSPFilesManagementDBContext(csspfilesmanagementdbcontext: CSSPFilesManagementDBContext) {
    this.httpClientService.BeforeHttpClient(this.csspfilesmanagementdbcontextDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/CSSPFilesManagementDBContext/${ csspfilesmanagementdbcontext.CSSPFilesManagementDBContextID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextDeleteModel$, x, HttpClientCommand.Delete, csspfilesmanagementdbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPFilesManagementDBContext>(this.csspfilesmanagementdbcontextListModel$, this.csspfilesmanagementdbcontextDeleteModel$, e);
      })))
    );
  }
}
