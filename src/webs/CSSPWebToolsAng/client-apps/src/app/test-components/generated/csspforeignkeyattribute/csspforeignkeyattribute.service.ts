/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPForeignKeyAttributeTextModel } from './csspforeignkeyattribute.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPForeignKeyAttributeText } from './csspforeignkeyattribute.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPForeignKeyAttribute } from '../../../models/generated/CSSPForeignKeyAttribute.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class CSSPForeignKeyAttributeService {
  /* Variables */
  csspforeignkeyattributeTextModel$: BehaviorSubject<CSSPForeignKeyAttributeTextModel> = new BehaviorSubject<CSSPForeignKeyAttributeTextModel>(<CSSPForeignKeyAttributeTextModel>{});
  csspforeignkeyattributeListModel$: BehaviorSubject<CSSPForeignKeyAttribute[]> = new BehaviorSubject<CSSPForeignKeyAttribute[]>(<CSSPForeignKeyAttribute[]>{});
  csspforeignkeyattributeGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspforeignkeyattributePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspforeignkeyattributePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  csspforeignkeyattributeDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesCSSPForeignKeyAttributeText(this.csspforeignkeyattributeTextModel$);
    this.csspforeignkeyattributeTextModel$.next(<CSSPForeignKeyAttributeTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetCSSPForeignKeyAttributeList() {
    this.httpClientService.BeforeHttpClient(this.csspforeignkeyattributeGetModel$);

    return this.httpClient.get<CSSPForeignKeyAttribute[]>('/api/CSSPForeignKeyAttribute').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributeGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributeGetModel$, e);
      })))
    );
  }

  PutCSSPForeignKeyAttribute(csspforeignkeyattribute: CSSPForeignKeyAttribute) {
    this.httpClientService.BeforeHttpClient(this.csspforeignkeyattributePutModel$);

    return this.httpClient.put<CSSPForeignKeyAttribute>('/api/CSSPForeignKeyAttribute', csspforeignkeyattribute, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributePutModel$, x, HttpClientCommand.Put, csspforeignkeyattribute);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributePutModel$, e);
      })))
    );
  }

  PostCSSPForeignKeyAttribute(csspforeignkeyattribute: CSSPForeignKeyAttribute) {
    this.httpClientService.BeforeHttpClient(this.csspforeignkeyattributePostModel$);

    return this.httpClient.post<CSSPForeignKeyAttribute>('/api/CSSPForeignKeyAttribute', csspforeignkeyattribute, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributePostModel$, x, HttpClientCommand.Post, csspforeignkeyattribute);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributePostModel$, e);
      })))
    );
  }

  DeleteCSSPForeignKeyAttribute(csspforeignkeyattribute: CSSPForeignKeyAttribute) {
    this.httpClientService.BeforeHttpClient(this.csspforeignkeyattributeDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/CSSPForeignKeyAttribute/${ csspforeignkeyattribute.CSSPForeignKeyAttributeID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributeDeleteModel$, x, HttpClientCommand.Delete, csspforeignkeyattribute);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPForeignKeyAttribute>(this.csspforeignkeyattributeListModel$, this.csspforeignkeyattributeDeleteModel$, e);
      })))
    );
  }
}
