/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { CSSPLoginDBContextTextModel } from './cssplogindbcontext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesCSSPLoginDBContextText } from './cssplogindbcontext.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { CSSPLoginDBContext } from '../../../models/generated/CSSPLoginDBContext.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class CSSPLoginDBContextService {
  /* Variables */
  cssplogindbcontextTextModel$: BehaviorSubject<CSSPLoginDBContextTextModel> = new BehaviorSubject<CSSPLoginDBContextTextModel>(<CSSPLoginDBContextTextModel>{});
  cssplogindbcontextListModel$: BehaviorSubject<CSSPLoginDBContext[]> = new BehaviorSubject<CSSPLoginDBContext[]>(<CSSPLoginDBContext[]>{});
  cssplogindbcontextGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  cssplogindbcontextPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  cssplogindbcontextPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  cssplogindbcontextDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesCSSPLoginDBContextText(this.cssplogindbcontextTextModel$);
    this.cssplogindbcontextTextModel$.next(<CSSPLoginDBContextTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetCSSPLoginDBContextList() {
    this.httpClientService.BeforeHttpClient(this.cssplogindbcontextGetModel$);

    return this.httpClient.get<CSSPLoginDBContext[]>('/api/CSSPLoginDBContext').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextGetModel$, e);
      })))
    );
  }

  PutCSSPLoginDBContext(cssplogindbcontext: CSSPLoginDBContext) {
    this.httpClientService.BeforeHttpClient(this.cssplogindbcontextPutModel$);

    return this.httpClient.put<CSSPLoginDBContext>('/api/CSSPLoginDBContext', cssplogindbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextPutModel$, x, HttpClientCommand.Put, cssplogindbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextPutModel$, e);
      })))
    );
  }

  PostCSSPLoginDBContext(cssplogindbcontext: CSSPLoginDBContext) {
    this.httpClientService.BeforeHttpClient(this.cssplogindbcontextPostModel$);

    return this.httpClient.post<CSSPLoginDBContext>('/api/CSSPLoginDBContext', cssplogindbcontext, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextPostModel$, x, HttpClientCommand.Post, cssplogindbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextPostModel$, e);
      })))
    );
  }

  DeleteCSSPLoginDBContext(cssplogindbcontext: CSSPLoginDBContext) {
    this.httpClientService.BeforeHttpClient(this.cssplogindbcontextDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/CSSPLoginDBContext/${ cssplogindbcontext.CSSPLoginDBContextID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextDeleteModel$, x, HttpClientCommand.Delete, cssplogindbcontext);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<CSSPLoginDBContext>(this.cssplogindbcontextListModel$, this.cssplogindbcontextDeleteModel$, e);
      })))
    );
  }
}
