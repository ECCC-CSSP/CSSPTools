/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { DeviceCodeService } from './devicecode.service';
import { LoadLocalesDeviceCodeText } from './devicecode.locales';
import { Subscription } from 'rxjs';
import { DeviceCode } from '../../../models/generated/DeviceCode.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-devicecode-edit',
  templateUrl: './devicecode-edit.component.html',
  styleUrls: ['./devicecode-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DeviceCodeEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  devicecodeFormEdit: FormGroup;
  @Input() devicecode: DeviceCode = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public devicecodeService: DeviceCodeService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutDeviceCode(devicecode: DeviceCode) {
    this.sub = this.devicecodeService.PutDeviceCode(devicecode).subscribe();
  }

  PostDeviceCode(devicecode: DeviceCode) {
    this.sub = this.devicecodeService.PostDeviceCode(devicecode).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.devicecode) {
      let formGroup: FormGroup = this.fb.group(
        {
          UserCode: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.devicecode.UserCode)),
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          DeviceCode_: [
            {
              value: this.devicecode.DeviceCode_,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          SubjectId: [
            {
              value: this.devicecode.SubjectId,
              disabled: false
            }, [Validators.maxLength(200)]],
          ClientId: [
            {
              value: this.devicecode.ClientId,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          CreationTime: [
            {
              value: this.devicecode.CreationTime,
              disabled: false
            }, [Validators.required]],
          Expiration: [
            {
              value: this.devicecode.Expiration,
              disabled: false
            }, [Validators.required]],
          Data: [
            {
              value: this.devicecode.Data,
              disabled: false
            }, [Validators.required, Validators.maxLength(2000)]],
        }
      );

      this.devicecodeFormEdit = formGroup
    }
  }
}
