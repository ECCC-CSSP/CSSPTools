/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DeviceCodeTextModel } from './devicecode.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDeviceCodeText } from './devicecode.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DeviceCode } from '../../../models/generated/DeviceCode.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class DeviceCodeService {
  /* Variables */
  devicecodeTextModel$: BehaviorSubject<DeviceCodeTextModel> = new BehaviorSubject<DeviceCodeTextModel>(<DeviceCodeTextModel>{});
  devicecodeListModel$: BehaviorSubject<DeviceCode[]> = new BehaviorSubject<DeviceCode[]>(<DeviceCode[]>{});
  devicecodeGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  devicecodePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  devicecodePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  devicecodeDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesDeviceCodeText(this.devicecodeTextModel$);
    this.devicecodeTextModel$.next(<DeviceCodeTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetDeviceCodeList() {
    this.httpClientService.BeforeHttpClient(this.devicecodeGetModel$);

    return this.httpClient.get<DeviceCode[]>('/api/DeviceCode').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DeviceCode>(this.devicecodeListModel$, this.devicecodeGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DeviceCode>(this.devicecodeListModel$, this.devicecodeGetModel$, e);
      })))
    );
  }

  PutDeviceCode(devicecode: DeviceCode) {
    this.httpClientService.BeforeHttpClient(this.devicecodePutModel$);

    return this.httpClient.put<DeviceCode>('/api/DeviceCode', devicecode, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DeviceCode>(this.devicecodeListModel$, this.devicecodePutModel$, x, HttpClientCommand.Put, devicecode);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<DeviceCode>(this.devicecodeListModel$, this.devicecodePutModel$, e);
      })))
    );
  }

  PostDeviceCode(devicecode: DeviceCode) {
    this.httpClientService.BeforeHttpClient(this.devicecodePostModel$);

    return this.httpClient.post<DeviceCode>('/api/DeviceCode', devicecode, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DeviceCode>(this.devicecodeListModel$, this.devicecodePostModel$, x, HttpClientCommand.Post, devicecode);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DeviceCode>(this.devicecodeListModel$, this.devicecodePostModel$, e);
      })))
    );
  }

  DeleteDeviceCode(devicecode: DeviceCode) {
    this.httpClientService.BeforeHttpClient(this.devicecodeDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/DeviceCode/${ devicecode.DeviceCodeID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DeviceCode>(this.devicecodeListModel$, this.devicecodeDeleteModel$, x, HttpClientCommand.Delete, devicecode);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DeviceCode>(this.devicecodeListModel$, this.devicecodeDeleteModel$, e);
      })))
    );
  }
}
