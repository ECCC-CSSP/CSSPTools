/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { DocTemplateService } from './doctemplate.service';
import { LoadLocalesDocTemplateText } from './doctemplate.locales';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText } from '../../../enums/generated/LanguageEnum';
import { TVTypeEnum_GetIDText } from '../../../enums/generated/TVTypeEnum';
import { DocTemplate } from '../../../models/generated/DocTemplate.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-doctemplate',
  templateUrl: './doctemplate.component.html',
  styleUrls: ['./doctemplate.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DocTemplateComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public doctemplateService: DocTemplateService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(doctemplate: DocTemplate) {
    if (this.IDToShow === doctemplate.DocTemplateID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(doctemplate: DocTemplate) {
    if (this.IDToShow === doctemplate.DocTemplateID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(doctemplate: DocTemplate) {
    if (this.IDToShow === doctemplate.DocTemplateID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = doctemplate.DocTemplateID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(doctemplate: DocTemplate) {
    if (this.IDToShow === doctemplate.DocTemplateID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = doctemplate.DocTemplateID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetDocTemplateList() {
    this.sub = this.doctemplateService.GetDocTemplateList().subscribe();
  }

  DeleteDocTemplate(doctemplate: DocTemplate) {
    this.sub = this.doctemplateService.DeleteDocTemplate(doctemplate).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesDocTemplateText(this.doctemplateService);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }
}
