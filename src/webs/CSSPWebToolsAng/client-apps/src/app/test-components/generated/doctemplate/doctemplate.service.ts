/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DocTemplateTextModel, DocTemplateModel } from './doctemplate.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDocTemplateText } from './doctemplate.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DocTemplate } from 'src/app/models/generated/DocTemplate.model';

@Injectable({
  providedIn: 'root'
})
export class DocTemplateService {
  doctemplateTextModel$: BehaviorSubject<DocTemplateTextModel> = new BehaviorSubject<DocTemplateTextModel>(<DocTemplateTextModel>{});
  doctemplateModel$: BehaviorSubject<DocTemplateModel> = new BehaviorSubject<DocTemplateModel>(<DocTemplateModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesDocTemplateText(this);
    this.UpdateDocTemplateText(<DocTemplateTextModel>{ Title: "Something2 for text" });
  }

  UpdateDocTemplateText(doctemplateTextModel: DocTemplateTextModel) {
    this.doctemplateTextModel$.next(<DocTemplateTextModel>{ ...this.doctemplateTextModel$.getValue(), ...doctemplateTextModel });
  }

  UpdateDocTemplateModel(doctemplateModel: DocTemplateModel) {
    this.doctemplateModel$.next(<DocTemplateModel>{ ...this.doctemplateModel$.getValue(), ...doctemplateModel });
  }

  GetDocTemplate(router: Router) {
    let oldURL = router.url;
    this.UpdateDocTemplateModel(<DocTemplateModel>{ Working: true, Error: null });

    return this.httpClient.get<DocTemplate[]>('/api/DocTemplate').pipe(
      map((x: any) => {
        console.debug(`DocTemplate OK. Return: ${x}`);
        this.doctemplateModel$.getValue().DocTemplateList = <DocTemplate[]>x;
        this.UpdateDocTemplateModel(this.doctemplateModel$.getValue());
        this.UpdateDocTemplateModel(<DocTemplateModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateDocTemplateModel(<DocTemplateModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`DocTemplate ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
