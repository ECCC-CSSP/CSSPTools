/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { DrogueRunService } from './droguerun.service';
import { LoadLocalesDrogueRunText } from './droguerun.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { DrogueTypeEnum_GetIDText, DrogueTypeEnum_GetOrderedText } from '../../../enums/generated/DrogueTypeEnum';
import { DrogueRun } from '../../../models/generated/DrogueRun.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-droguerun',
  templateUrl: './droguerun.component.html',
  styleUrls: ['./droguerun.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DrogueRunComponent implements OnInit, OnDestroy {
  sub: Subscription;
  drogueTypeList: EnumIDAndText[];
  droguerunFormPut: FormGroup;
  droguerunFormPost: FormGroup;

  constructor(public droguerunService: DrogueRunService, public router: Router, public fb: FormBuilder) { }

  GetDrogueRunList() {
    this.sub = this.droguerunService.GetDrogueRunList(this.router).subscribe();
  }

  PutDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.PutDrogueRun(droguerun, this.router).subscribe();
  }

  PostDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.PostDrogueRun(droguerun, this.router).subscribe();
  }

  DeleteDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.DeleteDrogueRun(droguerun, this.router).subscribe();
  }

  GetDrogueTypeEnumText(enumID: number) {
    return DrogueTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesDrogueRunText(this.droguerunService);
    this.drogueTypeList = DrogueTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.droguerunService.droguerunList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          DrogueRunID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.droguerunService.droguerunList[0]?.DrogueRunID ?? '')),
              disabled: false
            }, Validators.required],
          SubsectorTVItemID: [
            {
              value: this.droguerunService.droguerunList[0]?.SubsectorTVItemID ?? '',
              disabled: false
            }, Validators.required],
          DrogueNumber: [
            {
              value: this.droguerunService.droguerunList[0]?.DrogueNumber ?? '',
              disabled: false
            }, Validators.required],
          DrogueType: [
            {
              value: this.droguerunService.droguerunList[0]?.DrogueType ?? '',
              disabled: false
            }, Validators.required],
          RunStartDateTime: [
            {
              value: this.droguerunService.droguerunList[0]?.RunStartDateTime ?? '',
              disabled: false
            }, Validators.required],
          IsRisingTide: [
            {
              value: this.droguerunService.droguerunList[0]?.IsRisingTide ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.droguerunService.droguerunList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.droguerunService.droguerunList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.droguerunFormPost = formGroup
      }
      else {
        this.droguerunFormPut = formGroup;
      }
    }
  }
}
