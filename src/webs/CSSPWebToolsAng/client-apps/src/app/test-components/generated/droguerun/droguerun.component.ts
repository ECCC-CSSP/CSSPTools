/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { DrogueRunService } from './droguerun.service';
import { LoadLocalesDrogueRunText } from './droguerun.locales';
import { Subscription } from 'rxjs';
import { DrogueTypeEnum_GetIDText, DrogueTypeEnum_GetOrderedText } from '../../../enums/generated/DrogueTypeEnum';
import { DrogueRun } from '../../../models/generated/DrogueRun.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-droguerun',
  templateUrl: './droguerun.component.html',
  styleUrls: ['./droguerun.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DrogueRunComponent implements OnInit, OnDestroy {
  sub: Subscription;
  drogueTypeList: EnumIDAndText[];
  droguerunFormPut: FormGroup;
  droguerunFormPost: FormGroup;

  constructor(public droguerunService: DrogueRunService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetDrogueRunList() {
    this.sub = this.droguerunService.GetDrogueRunList().subscribe();
  }

  PutDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.PutDrogueRun(droguerun).subscribe();
  }

  PostDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.PostDrogueRun(droguerun).subscribe();
  }

  DeleteDrogueRun(droguerun: DrogueRun) {
    this.sub = this.droguerunService.DeleteDrogueRun(droguerun).subscribe();
  }

  GetDrogueTypeEnumText(enumID: number) {
    return DrogueTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesDrogueRunText(this.droguerunService);
    this.drogueTypeList = DrogueTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.droguerunService.droguerunListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          DrogueRunID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.droguerunService.droguerunListModel$.getValue()[0]?.DrogueRunID)),
              disabled: false
            }, [  Validators.required ]],
          SubsectorTVItemID: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.SubsectorTVItemID,
              disabled: false
            }, [  Validators.required ]],
          DrogueNumber: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.DrogueNumber,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(100) ]],
          DrogueType: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.DrogueType,
              disabled: false
            }, [  Validators.required ]],
          RunStartDateTime: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.RunStartDateTime,
              disabled: false
            }, [  Validators.required ]],
          IsRisingTide: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.IsRisingTide,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.droguerunService.droguerunListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.droguerunFormPost = formGroup
      }
      else {
        this.droguerunFormPut = formGroup;
      }
    }
  }
}
