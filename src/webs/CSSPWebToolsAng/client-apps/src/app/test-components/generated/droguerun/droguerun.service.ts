/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DrogueRunTextModel, DrogueRunModel } from './droguerun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDrogueRunText } from './droguerun.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DrogueRun } from 'src/app/models/generated/DrogueRun.model';

@Injectable({
  providedIn: 'root'
})
export class DrogueRunService {
  droguerunTextModel$: BehaviorSubject<DrogueRunTextModel> = new BehaviorSubject<DrogueRunTextModel>(<DrogueRunTextModel>{});
  droguerunModel$: BehaviorSubject<DrogueRunModel> = new BehaviorSubject<DrogueRunModel>(<DrogueRunModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesDrogueRunText(this);
    this.UpdateDrogueRunText(<DrogueRunTextModel>{ Title: "Something2 for text" });
  }

  UpdateDrogueRunText(droguerunTextModel: DrogueRunTextModel) {
    this.droguerunTextModel$.next(<DrogueRunTextModel>{ ...this.droguerunTextModel$.getValue(), ...droguerunTextModel });
  }

  UpdateDrogueRunModel(droguerunModel: DrogueRunModel) {
    this.droguerunModel$.next(<DrogueRunModel>{ ...this.droguerunModel$.getValue(), ...droguerunModel });
  }

  GetDrogueRun(router: Router) {
    let oldURL = router.url;
    this.UpdateDrogueRunModel(<DrogueRunModel>{ Working: true, Error: null });

    return this.httpClient.get<DrogueRun[]>('/api/DrogueRun').pipe(
      map((x: any) => {
        console.debug(`DrogueRun OK. Return: ${x}`);
        this.droguerunModel$.getValue().DrogueRunList = <DrogueRun[]>x;
        this.UpdateDrogueRunModel(this.droguerunModel$.getValue());
        this.UpdateDrogueRunModel(<DrogueRunModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateDrogueRunModel(<DrogueRunModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`DrogueRun ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
