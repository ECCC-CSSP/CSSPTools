/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DrogueRunTextModel } from './droguerun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDrogueRunText } from './droguerun.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DrogueRun } from '../../../models/generated/DrogueRun.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class DrogueRunService {
  /* Variables */
  droguerunTextModel$: BehaviorSubject<DrogueRunTextModel> = new BehaviorSubject<DrogueRunTextModel>(<DrogueRunTextModel>{});
  droguerunListModel$: BehaviorSubject<DrogueRun[]> = new BehaviorSubject<DrogueRun[]>(<DrogueRun[]>{});
  droguerunGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesDrogueRunText(this.droguerunTextModel$);
    this.droguerunTextModel$.next(<DrogueRunTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetDrogueRunList() {
    this.httpClientService.BeforeHttpClient(this.droguerunGetModel$);

    return this.httpClient.get<DrogueRun[]>('/api/DrogueRun').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRun>(this.droguerunListModel$, this.droguerunGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRun>(this.droguerunListModel$, this.droguerunGetModel$, e);
      })))
    );
  }

  PutDrogueRun(droguerun: DrogueRun) {
    this.httpClientService.BeforeHttpClient(this.droguerunPutModel$);

    return this.httpClient.put<DrogueRun>('/api/DrogueRun', droguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRun>(this.droguerunListModel$, this.droguerunPutModel$, x, HttpClientCommand.Put, droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<DrogueRun>(this.droguerunListModel$, this.droguerunPutModel$, e);
      })))
    );
  }

  PostDrogueRun(droguerun: DrogueRun) {
    this.httpClientService.BeforeHttpClient(this.droguerunPostModel$);

    return this.httpClient.post<DrogueRun>('/api/DrogueRun', droguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRun>(this.droguerunListModel$, this.droguerunPostModel$, x, HttpClientCommand.Post, droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRun>(this.droguerunListModel$, this.droguerunPostModel$, e);
      })))
    );
  }

  DeleteDrogueRun(droguerun: DrogueRun) {
    this.httpClientService.BeforeHttpClient(this.droguerunDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/DrogueRun/${ droguerun.DrogueRunID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRun>(this.droguerunListModel$, this.droguerunDeleteModel$, x, HttpClientCommand.Delete, droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRun>(this.droguerunListModel$, this.droguerunDeleteModel$, e);
      })))
    );
  }
}
