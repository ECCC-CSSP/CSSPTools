/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DrogueRunTextModel } from './droguerun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDrogueRunText } from './droguerun.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DrogueRun } from '../../../models/generated/DrogueRun.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class DrogueRunService {
  /* Variables */
  droguerunTextModel$: BehaviorSubject<DrogueRunTextModel> = new BehaviorSubject<DrogueRunTextModel>(<DrogueRunTextModel>{});
  droguerunListModel$: BehaviorSubject<DrogueRun[]> = new BehaviorSubject<DrogueRun[]>(<DrogueRun[]>{});
  droguerunGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunList: DrogueRun[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesDrogueRunText(this);
    this.droguerunTextModel$.next(<DrogueRunTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetDrogueRunList(router: Router) {
    this.BeforeHttpClient(this.droguerunGetModel$, router);

    return this.httpClient.get<DrogueRun[]>('/api/DrogueRun').pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunGetModel$, e, 'Get');
      })))
    );
  }

  PutDrogueRun(droguerun: DrogueRun, router: Router) {
    this.BeforeHttpClient(this.droguerunPutModel$, router);

    return this.httpClient.put<DrogueRun>('/api/DrogueRun', droguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunPutModel$, x, 'Put', droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunPutModel$, e, 'Put');
      })))
    );
  }

  PostDrogueRun(droguerun: DrogueRun, router: Router) {
    this.BeforeHttpClient(this.droguerunPostModel$, router);

    return this.httpClient.post<DrogueRun>('/api/DrogueRun', droguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunPostModel$, x, 'Post', droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunPostModel$, e, 'Post');
      })))
    );
  }

  DeleteDrogueRun(droguerun: DrogueRun, router: Router) {
    this.BeforeHttpClient(this.droguerunDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/DrogueRun/${ droguerun.DrogueRunID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunDeleteModel$, x, 'Delete', droguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.droguerunListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.droguerunList = [];
    console.debug(`DrogueRun ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, droguerun?: DrogueRun) {
    console.debug(`DrogueRun ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.droguerunListModel$.next(<DrogueRun[]>x);
    }
    if (command === 'Put') {
      this.droguerunListModel$.getValue()[0] = <DrogueRun>x;
    }
    if (command === 'Post') {
      this.droguerunListModel$.getValue().push(<DrogueRun>x);
    }
    if (command === 'Delete') {
      const index = this.droguerunListModel$.getValue().indexOf(droguerun);
      this.droguerunListModel$.getValue().splice(index, 1);
    }

    this.droguerunListModel$.next(this.droguerunListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.droguerunList = this.droguerunListModel$.getValue();
    this.DoReload();
  }
}
