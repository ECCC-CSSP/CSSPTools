/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DrogueRunPositionTextModel } from './droguerunposition.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDrogueRunPositionText } from './droguerunposition.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DrogueRunPosition } from '../../../models/generated/DrogueRunPosition.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class DrogueRunPositionService {
  /* Variables */
  droguerunpositionTextModel$: BehaviorSubject<DrogueRunPositionTextModel> = new BehaviorSubject<DrogueRunPositionTextModel>(<DrogueRunPositionTextModel>{});
  droguerunpositionListModel$: BehaviorSubject<DrogueRunPosition[]> = new BehaviorSubject<DrogueRunPosition[]>(<DrogueRunPosition[]>{});
  droguerunpositionGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesDrogueRunPositionText(this.droguerunpositionTextModel$);
    this.droguerunpositionTextModel$.next(<DrogueRunPositionTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetDrogueRunPositionList() {
    this.httpClientService.BeforeHttpClient(this.droguerunpositionGetModel$);

    return this.httpClient.get<DrogueRunPosition[]>('/api/DrogueRunPosition').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionGetModel$, e);
      })))
    );
  }

  PutDrogueRunPosition(droguerunposition: DrogueRunPosition) {
    this.httpClientService.BeforeHttpClient(this.droguerunpositionPutModel$);

    return this.httpClient.put<DrogueRunPosition>('/api/DrogueRunPosition', droguerunposition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionPutModel$, x, HttpClientCommand.Put, droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionPutModel$, e);
      })))
    );
  }

  PostDrogueRunPosition(droguerunposition: DrogueRunPosition) {
    this.httpClientService.BeforeHttpClient(this.droguerunpositionPostModel$);

    return this.httpClient.post<DrogueRunPosition>('/api/DrogueRunPosition', droguerunposition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionPostModel$, x, HttpClientCommand.Post, droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionPostModel$, e);
      })))
    );
  }

  DeleteDrogueRunPosition(droguerunposition: DrogueRunPosition) {
    this.httpClientService.BeforeHttpClient(this.droguerunpositionDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/DrogueRunPosition/${ droguerunposition.DrogueRunPositionID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionDeleteModel$, x, HttpClientCommand.Delete, droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<DrogueRunPosition>(this.droguerunpositionListModel$, this.droguerunpositionDeleteModel$, e);
      })))
    );
  }
}
