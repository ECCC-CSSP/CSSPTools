/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { DrogueRunPositionTextModel } from './droguerunposition.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesDrogueRunPositionText } from './droguerunposition.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { DrogueRunPosition } from '../../../models/generated/DrogueRunPosition.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class DrogueRunPositionService {
  /* Variables */
  droguerunpositionTextModel$: BehaviorSubject<DrogueRunPositionTextModel> = new BehaviorSubject<DrogueRunPositionTextModel>(<DrogueRunPositionTextModel>{});
  droguerunpositionListModel$: BehaviorSubject<DrogueRunPosition[]> = new BehaviorSubject<DrogueRunPosition[]>(<DrogueRunPosition[]>{});
  droguerunpositionGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  droguerunpositionList: DrogueRunPosition[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesDrogueRunPositionText(this);
    this.droguerunpositionTextModel$.next(<DrogueRunPositionTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetDrogueRunPositionList(router: Router) {
    this.BeforeHttpClient(this.droguerunpositionGetModel$, router);

    return this.httpClient.get<DrogueRunPosition[]>('/api/DrogueRunPosition').pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunpositionGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunpositionGetModel$, e, 'Get');
      })))
    );
  }

  PutDrogueRunPosition(droguerunposition: DrogueRunPosition, router: Router) {
    this.BeforeHttpClient(this.droguerunpositionPutModel$, router);

    return this.httpClient.put<DrogueRunPosition>('/api/DrogueRunPosition', droguerunposition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunpositionPutModel$, x, 'Put', droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunpositionPutModel$, e, 'Put');
      })))
    );
  }

  PostDrogueRunPosition(droguerunposition: DrogueRunPosition, router: Router) {
    this.BeforeHttpClient(this.droguerunpositionPostModel$, router);

    return this.httpClient.post<DrogueRunPosition>('/api/DrogueRunPosition', droguerunposition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunpositionPostModel$, x, 'Post', droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunpositionPostModel$, e, 'Post');
      })))
    );
  }

  DeleteDrogueRunPosition(droguerunposition: DrogueRunPosition, router: Router) {
    this.BeforeHttpClient(this.droguerunpositionDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/DrogueRunPosition/${ droguerunposition.DrogueRunPositionID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.droguerunpositionDeleteModel$, x, 'Delete', droguerunposition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.droguerunpositionDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.droguerunpositionListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.droguerunpositionList = [];
    console.debug(`DrogueRunPosition ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, droguerunposition?: DrogueRunPosition) {
    console.debug(`DrogueRunPosition ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.droguerunpositionListModel$.next(<DrogueRunPosition[]>x);
    }
    if (command === 'Put') {
      this.droguerunpositionListModel$.getValue()[0] = <DrogueRunPosition>x;
    }
    if (command === 'Post') {
      this.droguerunpositionListModel$.getValue().push(<DrogueRunPosition>x);
    }
    if (command === 'Delete') {
      const index = this.droguerunpositionListModel$.getValue().indexOf(droguerunposition);
      this.droguerunpositionListModel$.getValue().splice(index, 1);
    }

    this.droguerunpositionListModel$.next(this.droguerunpositionListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.droguerunpositionList = this.droguerunpositionListModel$.getValue();
    this.DoReload();
  }
}
