/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { EmailService } from './email.service';
import { LoadLocalesEmailText } from './email.locales';
import { Subscription } from 'rxjs';
import { EmailTypeEnum_GetOrderedText } from '../../../enums/generated/EmailTypeEnum';
import { Email } from '../../../models/generated/Email.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-email-edit',
  templateUrl: './email-edit.component.html',
  styleUrls: ['./email-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class EmailEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  emailTypeList: EnumIDAndText[];
  emailFormEdit: FormGroup;
  @Input() email: Email = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public emailService: EmailService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutEmail(email: Email) {
    this.sub = this.emailService.PutEmail(email).subscribe();
  }

  PostEmail(email: Email) {
    this.sub = this.emailService.PostEmail(email).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesEmailText(this.emailService);
    this.emailTypeList = EmailTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.email) {
      let formGroup: FormGroup = this.fb.group(
        {
          EmailID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.emailService.emailListModel$.getValue()[0]?.EmailID)),
              disabled: false
            }, [  Validators.required ]],
          EmailTVItemID: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailTVItemID,
              disabled: false
            }, [  Validators.required ]],
          EmailAddress: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailAddress,
              disabled: false
            }, [  Validators.required, Validators.email, Validators.maxLength(255) ]],
          EmailType: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailType,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      this.emailFormEdit = formGroup
    }
  }
}
