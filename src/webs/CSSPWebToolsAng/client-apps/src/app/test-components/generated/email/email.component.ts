/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { EmailService } from './email.service';
import { LoadLocalesEmailText } from './email.locales';
import { Subscription } from 'rxjs';
import { EmailTypeEnum_GetIDText, EmailTypeEnum_GetOrderedText } from '../../../enums/generated/EmailTypeEnum';
import { Email } from '../../../models/generated/Email.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-email',
  templateUrl: './email.component.html',
  styleUrls: ['./email.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class EmailComponent implements OnInit, OnDestroy {
  sub: Subscription;
  emailTypeList: EnumIDAndText[];
  emailFormPut: FormGroup;
  emailFormPost: FormGroup;

  constructor(public emailService: EmailService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetEmailList() {
    this.sub = this.emailService.GetEmailList().subscribe();
  }

  PutEmail(email: Email) {
    this.sub = this.emailService.PutEmail(email).subscribe();
  }

  PostEmail(email: Email) {
    this.sub = this.emailService.PostEmail(email).subscribe();
  }

  DeleteEmail(email: Email) {
    this.sub = this.emailService.DeleteEmail(email).subscribe();
  }

  GetEmailTypeEnumText(enumID: number) {
    return EmailTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesEmailText(this.emailService);
    this.emailTypeList = EmailTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.emailService.emailListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          EmailID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.emailService.emailListModel$.getValue()[0]?.EmailID)),
              disabled: false
            }, [  Validators.required ]],
          EmailTVItemID: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailTVItemID,
              disabled: false
            }, [  Validators.required ]],
          EmailAddress: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailAddress,
              disabled: false
            }, [  Validators.required, Validators.email, Validators.maxLength(255) ]],
          EmailType: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.EmailType,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.emailService.emailListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.emailFormPost = formGroup
      }
      else {
        this.emailFormPut = formGroup;
      }
    }
  }
}
