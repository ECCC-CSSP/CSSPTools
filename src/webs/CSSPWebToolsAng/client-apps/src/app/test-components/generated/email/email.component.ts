/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { EmailService } from './email.service';
import { LoadLocalesEmailText } from './email.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { EmailTypeEnum_GetIDText, EmailTypeEnum_GetOrderedText } from '../../../enums/generated/EmailTypeEnum';
import { Email } from '../../../models/generated/Email.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from 'src/app/models/enumidandtext.model';

@Component({
  selector: 'app-email',
  templateUrl: './email.component.html',
  styleUrls: ['./email.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class EmailComponent implements OnInit, OnDestroy {
  sub: Subscription;
  emailTypeList: EnumIDAndText[];
  emailFormPut: FormGroup;
  emailFormPost: FormGroup;

  constructor(public emailService: EmailService, public router: Router, public fb: FormBuilder) { }

  GetEmailList() {
    this.sub = this.emailService.GetEmailList(this.router).subscribe();
  }

  PutEmail(email: Email) {
    this.sub = this.emailService.PutEmail(email, this.router).subscribe();
  }

  PostEmail(email: Email) {
    this.sub = this.emailService.PostEmail(email, this.router).subscribe();
  }

  DeleteEmail(email: Email) {
    this.sub = this.emailService.DeleteEmail(email, this.router).subscribe();
  }

  GetEmailTypeEnumText(enumID: number) {
    return EmailTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesEmailText(this.emailService);
    this.emailTypeList = EmailTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.emailService.emailList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          EmailID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.emailService.emailList[0]?.EmailID ?? '')),
              disabled: false
            }, Validators.required],
          EmailTVItemID: [
            {
              value: this.emailService.emailList[0]?.EmailTVItemID ?? '',
              disabled: false
            }, Validators.required],
          EmailAddress: [
            {
              value: this.emailService.emailList[0]?.EmailAddress ?? '',
              disabled: false
            }, Validators.required],
          EmailType: [
            {
              value: this.emailService.emailList[0]?.EmailType ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.emailService.emailList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.emailService.emailList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.emailFormPost = formGroup
      }
      else {
        this.emailFormPut = formGroup;
      }
    }
  }
}
