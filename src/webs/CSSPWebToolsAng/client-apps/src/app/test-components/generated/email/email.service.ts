/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { EmailTextModel, EmailModel } from './email.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesEmailText } from './email.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Email } from 'src/app/models/generated/Email.model';

@Injectable({
  providedIn: 'root'
})
export class EmailService {
  emailTextModel$: BehaviorSubject<EmailTextModel> = new BehaviorSubject<EmailTextModel>(<EmailTextModel>{});
  emailModel$: BehaviorSubject<EmailModel> = new BehaviorSubject<EmailModel>(<EmailModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesEmailText(this);
    this.UpdateEmailText(<EmailTextModel>{ Title: "Something2 for text" });
  }

  UpdateEmailText(emailTextModel: EmailTextModel) {
    this.emailTextModel$.next(<EmailTextModel>{ ...this.emailTextModel$.getValue(), ...emailTextModel });
  }

  UpdateEmailModel(emailModel: EmailModel) {
    this.emailModel$.next(<EmailModel>{ ...this.emailModel$.getValue(), ...emailModel });
  }

  GetEmail(router: Router) {
    let oldURL = router.url;
    this.UpdateEmailModel(<EmailModel>{ Working: true, Error: null });

    return this.httpClient.get<Email[]>('/api/Email').pipe(
      map((x: any) => {
        console.debug(`Email OK. Return: ${x}`);
        this.emailModel$.getValue().EmailList = <Email[]>x;
        this.UpdateEmailModel(this.emailModel$.getValue());
        this.UpdateEmailModel(<EmailModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateEmailModel(<EmailModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Email ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
