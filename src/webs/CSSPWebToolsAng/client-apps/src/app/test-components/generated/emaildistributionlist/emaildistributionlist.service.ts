/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { EmailDistributionListTextModel } from './emaildistributionlist.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesEmailDistributionListText } from './emaildistributionlist.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { EmailDistributionList } from '../../../models/generated/EmailDistributionList.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class EmailDistributionListService {
  /* Variables */
  emaildistributionlistTextModel$: BehaviorSubject<EmailDistributionListTextModel> = new BehaviorSubject<EmailDistributionListTextModel>(<EmailDistributionListTextModel>{});
  emaildistributionlistListModel$: BehaviorSubject<EmailDistributionList[]> = new BehaviorSubject<EmailDistributionList[]>(<EmailDistributionList[]>{});
  emaildistributionlistGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesEmailDistributionListText(this);
    this.emaildistributionlistTextModel$.next(<EmailDistributionListTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetEmailDistributionListList() {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistGetModel$);

    return this.httpClient.get<EmailDistributionList[]>('/api/EmailDistributionList').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistGetModel$, e);
      })))
    );
  }

  PutEmailDistributionList(emaildistributionlist: EmailDistributionList) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistPutModel$);

    return this.httpClient.put<EmailDistributionList>('/api/EmailDistributionList', emaildistributionlist, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistPutModel$, x, HttpClientCommand.Put, emaildistributionlist);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistPutModel$, e);
      })))
    );
  }

  PostEmailDistributionList(emaildistributionlist: EmailDistributionList) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistPostModel$);

    return this.httpClient.post<EmailDistributionList>('/api/EmailDistributionList', emaildistributionlist, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistPostModel$, x, HttpClientCommand.Post, emaildistributionlist);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistPostModel$, e);
      })))
    );
  }

  DeleteEmailDistributionList(emaildistributionlist: EmailDistributionList) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/EmailDistributionList/${ emaildistributionlist.EmailDistributionListID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistDeleteModel$, x, HttpClientCommand.Delete, emaildistributionlist);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionList>(this.emaildistributionlistListModel$, this.emaildistributionlistDeleteModel$, e);
      })))
    );
  }
}
