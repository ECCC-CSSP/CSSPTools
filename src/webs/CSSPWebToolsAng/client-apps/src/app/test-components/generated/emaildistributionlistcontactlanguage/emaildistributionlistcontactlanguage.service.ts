/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { EmailDistributionListContactLanguageTextModel, EmailDistributionListContactLanguageModel } from './emaildistributionlistcontactlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesEmailDistributionListContactLanguageText } from './emaildistributionlistcontactlanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { EmailDistributionListContactLanguage } from 'src/app/models/generated/EmailDistributionListContactLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class EmailDistributionListContactLanguageService {
  emaildistributionlistcontactlanguageTextModel$: BehaviorSubject<EmailDistributionListContactLanguageTextModel> = new BehaviorSubject<EmailDistributionListContactLanguageTextModel>(<EmailDistributionListContactLanguageTextModel>{});
  emaildistributionlistcontactlanguageModel$: BehaviorSubject<EmailDistributionListContactLanguageModel> = new BehaviorSubject<EmailDistributionListContactLanguageModel>(<EmailDistributionListContactLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesEmailDistributionListContactLanguageText(this);
    this.UpdateEmailDistributionListContactLanguageText(<EmailDistributionListContactLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateEmailDistributionListContactLanguageText(emaildistributionlistcontactlanguageTextModel: EmailDistributionListContactLanguageTextModel) {
    this.emaildistributionlistcontactlanguageTextModel$.next(<EmailDistributionListContactLanguageTextModel>{ ...this.emaildistributionlistcontactlanguageTextModel$.getValue(), ...emaildistributionlistcontactlanguageTextModel });
  }

  UpdateEmailDistributionListContactLanguageModel(emaildistributionlistcontactlanguageModel: EmailDistributionListContactLanguageModel) {
    this.emaildistributionlistcontactlanguageModel$.next(<EmailDistributionListContactLanguageModel>{ ...this.emaildistributionlistcontactlanguageModel$.getValue(), ...emaildistributionlistcontactlanguageModel });
  }

  GetEmailDistributionListContactLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateEmailDistributionListContactLanguageModel(<EmailDistributionListContactLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<EmailDistributionListContactLanguage[]>('/api/EmailDistributionListContactLanguage').pipe(
      map((x: any) => {
        console.debug(`EmailDistributionListContactLanguage OK. Return: ${x}`);
        this.emaildistributionlistcontactlanguageModel$.getValue().EmailDistributionListContactLanguageList = <EmailDistributionListContactLanguage[]>x;
        this.UpdateEmailDistributionListContactLanguageModel(this.emaildistributionlistcontactlanguageModel$.getValue());
        this.UpdateEmailDistributionListContactLanguageModel(<EmailDistributionListContactLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateEmailDistributionListContactLanguageModel(<EmailDistributionListContactLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`EmailDistributionListContactLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
