/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { EmailDistributionListContactLanguageTextModel } from './emaildistributionlistcontactlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesEmailDistributionListContactLanguageText } from './emaildistributionlistcontactlanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { EmailDistributionListContactLanguage } from '../../../models/generated/EmailDistributionListContactLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class EmailDistributionListContactLanguageService {
  /* Variables */
  emaildistributionlistcontactlanguageTextModel$: BehaviorSubject<EmailDistributionListContactLanguageTextModel> = new BehaviorSubject<EmailDistributionListContactLanguageTextModel>(<EmailDistributionListContactLanguageTextModel>{});
  emaildistributionlistcontactlanguageListModel$: BehaviorSubject<EmailDistributionListContactLanguage[]> = new BehaviorSubject<EmailDistributionListContactLanguage[]>(<EmailDistributionListContactLanguage[]>{});
  emaildistributionlistcontactlanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistcontactlanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistcontactlanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emaildistributionlistcontactlanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesEmailDistributionListContactLanguageText(this.emaildistributionlistcontactlanguageTextModel$);
    this.emaildistributionlistcontactlanguageTextModel$.next(<EmailDistributionListContactLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetEmailDistributionListContactLanguageList() {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistcontactlanguageGetModel$);

    return this.httpClient.get<EmailDistributionListContactLanguage[]>('/api/EmailDistributionListContactLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguageGetModel$, e);
      })))
    );
  }

  PutEmailDistributionListContactLanguage(emaildistributionlistcontactlanguage: EmailDistributionListContactLanguage) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistcontactlanguagePutModel$);

    return this.httpClient.put<EmailDistributionListContactLanguage>('/api/EmailDistributionListContactLanguage', emaildistributionlistcontactlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguagePutModel$, x, HttpClientCommand.Put, emaildistributionlistcontactlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguagePutModel$, e);
      })))
    );
  }

  PostEmailDistributionListContactLanguage(emaildistributionlistcontactlanguage: EmailDistributionListContactLanguage) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistcontactlanguagePostModel$);

    return this.httpClient.post<EmailDistributionListContactLanguage>('/api/EmailDistributionListContactLanguage', emaildistributionlistcontactlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguagePostModel$, x, HttpClientCommand.Post, emaildistributionlistcontactlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguagePostModel$, e);
      })))
    );
  }

  DeleteEmailDistributionListContactLanguage(emaildistributionlistcontactlanguage: EmailDistributionListContactLanguage) {
    this.httpClientService.BeforeHttpClient(this.emaildistributionlistcontactlanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/EmailDistributionListContactLanguage/${ emaildistributionlistcontactlanguage.EmailDistributionListContactLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguageDeleteModel$, x, HttpClientCommand.Delete, emaildistributionlistcontactlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailDistributionListContactLanguage>(this.emaildistributionlistcontactlanguageListModel$, this.emaildistributionlistcontactlanguageDeleteModel$, e);
      })))
    );
  }
}
