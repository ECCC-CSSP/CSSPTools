/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { EmailModelTextModel } from './emailmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesEmailModelText } from './emailmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { EmailModel } from '../../../models/generated/EmailModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class EmailModelService {
  /* Variables */
  emailmodelTextModel$: BehaviorSubject<EmailModelTextModel> = new BehaviorSubject<EmailModelTextModel>(<EmailModelTextModel>{});
  emailmodelListModel$: BehaviorSubject<EmailModel[]> = new BehaviorSubject<EmailModel[]>(<EmailModel[]>{});
  emailmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emailmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emailmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  emailmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesEmailModelText(this.emailmodelTextModel$);
    this.emailmodelTextModel$.next(<EmailModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetEmailModelList() {
    this.httpClientService.BeforeHttpClient(this.emailmodelGetModel$);

    return this.httpClient.get<EmailModel[]>('/api/EmailModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailModel>(this.emailmodelListModel$, this.emailmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailModel>(this.emailmodelListModel$, this.emailmodelGetModel$, e);
      })))
    );
  }

  PutEmailModel(emailmodel: EmailModel) {
    this.httpClientService.BeforeHttpClient(this.emailmodelPutModel$);

    return this.httpClient.put<EmailModel>('/api/EmailModel', emailmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailModel>(this.emailmodelListModel$, this.emailmodelPutModel$, x, HttpClientCommand.Put, emailmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<EmailModel>(this.emailmodelListModel$, this.emailmodelPutModel$, e);
      })))
    );
  }

  PostEmailModel(emailmodel: EmailModel) {
    this.httpClientService.BeforeHttpClient(this.emailmodelPostModel$);

    return this.httpClient.post<EmailModel>('/api/EmailModel', emailmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailModel>(this.emailmodelListModel$, this.emailmodelPostModel$, x, HttpClientCommand.Post, emailmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailModel>(this.emailmodelListModel$, this.emailmodelPostModel$, e);
      })))
    );
  }

  DeleteEmailModel(emailmodel: EmailModel) {
    this.httpClientService.BeforeHttpClient(this.emailmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/EmailModel/${ emailmodel.EmailModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<EmailModel>(this.emailmodelListModel$, this.emailmodelDeleteModel$, x, HttpClientCommand.Delete, emailmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<EmailModel>(this.emailmodelListModel$, this.emailmodelDeleteModel$, e);
      })))
    );
  }
}
