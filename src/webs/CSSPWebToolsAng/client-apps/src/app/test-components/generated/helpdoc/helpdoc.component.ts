/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { HelpDocService } from './helpdoc.service';
import { LoadLocalesHelpDocText } from './helpdoc.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { HelpDoc } from '../../../models/generated/HelpDoc.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-helpdoc',
  templateUrl: './helpdoc.component.html',
  styleUrls: ['./helpdoc.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HelpDocComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  helpdocFormPut: FormGroup;
  helpdocFormPost: FormGroup;

  constructor(public helpdocService: HelpDocService, public router: Router, public fb: FormBuilder) { }

  GetHelpDocList() {
    this.sub = this.helpdocService.GetHelpDocList(this.router).subscribe();
  }

  PutHelpDoc(helpdoc: HelpDoc) {
    this.sub = this.helpdocService.PutHelpDoc(helpdoc, this.router).subscribe();
  }

  PostHelpDoc(helpdoc: HelpDoc) {
    this.sub = this.helpdocService.PostHelpDoc(helpdoc, this.router).subscribe();
  }

  DeleteHelpDoc(helpdoc: HelpDoc) {
    this.sub = this.helpdocService.DeleteHelpDoc(helpdoc, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesHelpDocText(this.helpdocService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.helpdocService.helpdocList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          HelpDocID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.helpdocService.helpdocList[0]?.HelpDocID ?? '')),
              disabled: false
            }, Validators.required],
          DocKey: [
            {
              value: this.helpdocService.helpdocList[0]?.DocKey ?? '',
              disabled: false
            }, Validators.required],
          Language: [
            {
              value: this.helpdocService.helpdocList[0]?.Language ?? '',
              disabled: false
            }, Validators.required],
          DocHTMLText: [
            {
              value: this.helpdocService.helpdocList[0]?.DocHTMLText ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.helpdocService.helpdocList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.helpdocService.helpdocList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.helpdocFormPost = formGroup
      }
      else {
        this.helpdocFormPut = formGroup;
      }
    }
  }
}
