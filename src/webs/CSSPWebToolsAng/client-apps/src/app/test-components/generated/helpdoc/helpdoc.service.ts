/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { HelpDocTextModel, HelpDocModel } from './helpdoc.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesHelpDocText } from './helpdoc.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { HelpDoc } from 'src/app/models/generated/HelpDoc.model';

@Injectable({
  providedIn: 'root'
})
export class HelpDocService {
  helpdocTextModel$: BehaviorSubject<HelpDocTextModel> = new BehaviorSubject<HelpDocTextModel>(<HelpDocTextModel>{});
  helpdocModel$: BehaviorSubject<HelpDocModel> = new BehaviorSubject<HelpDocModel>(<HelpDocModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesHelpDocText(this);
    this.UpdateHelpDocText(<HelpDocTextModel>{ Title: "Something2 for text" });
  }

  UpdateHelpDocText(helpdocTextModel: HelpDocTextModel) {
    this.helpdocTextModel$.next(<HelpDocTextModel>{ ...this.helpdocTextModel$.getValue(), ...helpdocTextModel });
  }

  UpdateHelpDocModel(helpdocModel: HelpDocModel) {
    this.helpdocModel$.next(<HelpDocModel>{ ...this.helpdocModel$.getValue(), ...helpdocModel });
  }

  GetHelpDoc(router: Router) {
    let oldURL = router.url;
    this.UpdateHelpDocModel(<HelpDocModel>{ Working: true, Error: null });

    return this.httpClient.get<HelpDoc[]>('/api/HelpDoc').pipe(
      map((x: any) => {
        console.debug(`HelpDoc OK. Return: ${x}`);
        this.helpdocModel$.getValue().HelpDocList = <HelpDoc[]>x;
        this.UpdateHelpDocModel(this.helpdocModel$.getValue());
        this.UpdateHelpDocModel(<HelpDocModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateHelpDocModel(<HelpDocModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`HelpDoc ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
