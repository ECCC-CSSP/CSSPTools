/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { HydrometricDataValueService } from './hydrometricdatavalue.service';
import { LoadLocalesHydrometricDataValueText } from './hydrometricdatavalue.locales';
import { Subscription } from 'rxjs';
import { StorageDataTypeEnum_GetOrderedText } from '../../../enums/generated/StorageDataTypeEnum';
import { HydrometricDataValue } from '../../../models/generated/HydrometricDataValue.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-hydrometricdatavalue-edit',
  templateUrl: './hydrometricdatavalue-edit.component.html',
  styleUrls: ['./hydrometricdatavalue-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HydrometricDataValueEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  storageDataTypeList: EnumIDAndText[];
  hydrometricdatavalueFormEdit: FormGroup;
  @Input() hydrometricdatavalue: HydrometricDataValue = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public hydrometricdatavalueService: HydrometricDataValueService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutHydrometricDataValue(hydrometricdatavalue: HydrometricDataValue) {
    this.sub = this.hydrometricdatavalueService.PutHydrometricDataValue(hydrometricdatavalue).subscribe();
  }

  PostHydrometricDataValue(hydrometricdatavalue: HydrometricDataValue) {
    this.sub = this.hydrometricdatavalueService.PostHydrometricDataValue(hydrometricdatavalue).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesHydrometricDataValueText(this.hydrometricdatavalueService);
    this.storageDataTypeList = StorageDataTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.hydrometricdatavalue) {
      let formGroup: FormGroup = this.fb.group(
        {
          HydrometricDataValueID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.HydrometricDataValueID)),
              disabled: false
            }, [Validators.required]],
          HydrometricSiteID: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.HydrometricSiteID,
              disabled: false
            }, [Validators.required]],
          DateTime_Local: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.DateTime_Local,
              disabled: false
            }, [Validators.required]],
          Keep: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.Keep,
              disabled: false
            }, [Validators.required]],
          StorageDataType: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.StorageDataType,
              disabled: false
            }, [Validators.required]],
          HasBeenRead: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.HasBeenRead,
              disabled: false
            }, [Validators.required]],
          Discharge_m3_s: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.Discharge_m3_s,
              disabled: false
            }, [Validators.min(0), Validators.max(100000)]],
          DischargeEntered_m3_s: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.DischargeEntered_m3_s,
              disabled: false
            }, [Validators.min(0), Validators.max(100000)]],
          Level_m: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.Level_m,
              disabled: false
            }, [Validators.min(0), Validators.max(10000)]],
          HourlyValues: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.HourlyValues,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.hydrometricdatavalueService.hydrometricdatavalueListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.hydrometricdatavalueFormEdit = formGroup
    }
  }
}
