/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { HydrometricSiteService } from './hydrometricsite.service';
import { LoadLocalesHydrometricSiteText } from './hydrometricsite.locales';
import { Subscription } from 'rxjs';
import { HydrometricSite } from '../../../models/generated/HydrometricSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-hydrometricsite-edit',
  templateUrl: './hydrometricsite-edit.component.html',
  styleUrls: ['./hydrometricsite-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HydrometricSiteEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  hydrometricsiteFormEdit: FormGroup;
  @Input() hydrometricsite: HydrometricSite = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public hydrometricsiteService: HydrometricSiteService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutHydrometricSite(hydrometricsite: HydrometricSite) {
    this.sub = this.hydrometricsiteService.PutHydrometricSite(hydrometricsite).subscribe();
  }

  PostHydrometricSite(hydrometricsite: HydrometricSite) {
    this.sub = this.hydrometricsiteService.PostHydrometricSite(hydrometricsite).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesHydrometricSiteText(this.hydrometricsiteService);
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.hydrometricsite) {
      let formGroup: FormGroup = this.fb.group(
        {
          HydrometricSiteID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HydrometricSiteID)),
              disabled: false
            }, [  Validators.required ]],
          HydrometricSiteTVItemID: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HydrometricSiteTVItemID,
              disabled: false
            }, [  Validators.required ]],
          FedSiteNumber: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.FedSiteNumber,
              disabled: false
            }, [  Validators.maxLength(7) ]],
          QuebecSiteNumber: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.QuebecSiteNumber,
              disabled: false
            }, [  Validators.maxLength(7) ]],
          HydrometricSiteName: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HydrometricSiteName,
              disabled: false
            }, [  Validators.required, Validators.maxLength(200) ]],
          Description: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.Description,
              disabled: false
            }, [  Validators.maxLength(200) ]],
          Province: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.Province,
              disabled: false
            }, [  Validators.required, Validators.maxLength(4) ]],
          Elevation_m: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.Elevation_m,
              disabled: false
            }, [  Validators.min(0), Validators.max(10000) ]],
          StartDate_Local: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.StartDate_Local,
              disabled: false
            }],
          EndDate_Local: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.EndDate_Local,
              disabled: false
            }],
          TimeOffset_hour: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.TimeOffset_hour,
              disabled: false
            }, [  Validators.min(-10), Validators.max(0) ]],
          DrainageArea_km2: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.DrainageArea_km2,
              disabled: false
            }, [  Validators.min(0), Validators.max(1000000) ]],
          IsNatural: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.IsNatural,
              disabled: false
            }],
          IsActive: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.IsActive,
              disabled: false
            }],
          Sediment: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.Sediment,
              disabled: false
            }],
          RHBN: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.RHBN,
              disabled: false
            }],
          RealTime: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.RealTime,
              disabled: false
            }],
          HasDischarge: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HasDischarge,
              disabled: false
            }],
          HasLevel: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HasLevel,
              disabled: false
            }],
          HasRatingCurve: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.HasRatingCurve,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.hydrometricsiteService.hydrometricsiteListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      this.hydrometricsiteFormEdit = formGroup
    }
  }
}
