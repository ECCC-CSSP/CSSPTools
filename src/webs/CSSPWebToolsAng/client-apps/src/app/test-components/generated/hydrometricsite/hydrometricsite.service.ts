/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { HydrometricSiteTextModel } from './hydrometricsite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesHydrometricSiteText } from './hydrometricsite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { HydrometricSite } from '../../../models/generated/HydrometricSite.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class HydrometricSiteService {
  /* Variables */
  hydrometricsiteTextModel$: BehaviorSubject<HydrometricSiteTextModel> = new BehaviorSubject<HydrometricSiteTextModel>(<HydrometricSiteTextModel>{});
  hydrometricsiteListModel$: BehaviorSubject<HydrometricSite[]> = new BehaviorSubject<HydrometricSite[]>(<HydrometricSite[]>{});
  hydrometricsiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsiteList: HydrometricSite[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesHydrometricSiteText(this);
    this.hydrometricsiteTextModel$.next(<HydrometricSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetHydrometricSiteList(router: Router) {
    this.BeforeHttpClient(this.hydrometricsiteGetModel$, router);

    return this.httpClient.get<HydrometricSite[]>('/api/HydrometricSite').pipe(
      map((x: any) => {
        this.DoSuccess(this.hydrometricsiteGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.hydrometricsiteGetModel$, e, 'Get');
      })))
    );
  }

  PutHydrometricSite(hydrometricsite: HydrometricSite, router: Router) {
    this.BeforeHttpClient(this.hydrometricsitePutModel$, router);

    return this.httpClient.put<HydrometricSite>('/api/HydrometricSite', hydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.hydrometricsitePutModel$, x, 'Put', hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.hydrometricsitePutModel$, e, 'Put');
      })))
    );
  }

  PostHydrometricSite(hydrometricsite: HydrometricSite, router: Router) {
    this.BeforeHttpClient(this.hydrometricsitePostModel$, router);

    return this.httpClient.post<HydrometricSite>('/api/HydrometricSite', hydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.hydrometricsitePostModel$, x, 'Post', hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.hydrometricsitePostModel$, e, 'Post');
      })))
    );
  }

  DeleteHydrometricSite(hydrometricsite: HydrometricSite, router: Router) {
    this.BeforeHttpClient(this.hydrometricsiteDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/HydrometricSite/${ hydrometricsite.HydrometricSiteID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.hydrometricsiteDeleteModel$, x, 'Delete', hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.hydrometricsiteDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.hydrometricsiteListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.hydrometricsiteList = [];
    console.debug(`HydrometricSite ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, hydrometricsite?: HydrometricSite) {
    console.debug(`HydrometricSite ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.hydrometricsiteListModel$.next(<HydrometricSite[]>x);
    }
    if (command === 'Put') {
      this.hydrometricsiteListModel$.getValue()[0] = <HydrometricSite>x;
    }
    if (command === 'Post') {
      this.hydrometricsiteListModel$.getValue().push(<HydrometricSite>x);
    }
    if (command === 'Delete') {
      const index = this.hydrometricsiteListModel$.getValue().indexOf(hydrometricsite);
      this.hydrometricsiteListModel$.getValue().splice(index, 1);
    }

    this.hydrometricsiteListModel$.next(this.hydrometricsiteListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.hydrometricsiteList = this.hydrometricsiteListModel$.getValue();
    this.DoReload();
  }
}
