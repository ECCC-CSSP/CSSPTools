/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { HydrometricSiteTextModel } from './hydrometricsite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesHydrometricSiteText } from './hydrometricsite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { HydrometricSite } from '../../../models/generated/HydrometricSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class HydrometricSiteService {
  /* Variables */
  hydrometricsiteTextModel$: BehaviorSubject<HydrometricSiteTextModel> = new BehaviorSubject<HydrometricSiteTextModel>(<HydrometricSiteTextModel>{});
  hydrometricsiteListModel$: BehaviorSubject<HydrometricSite[]> = new BehaviorSubject<HydrometricSite[]>(<HydrometricSite[]>{});
  hydrometricsiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  hydrometricsiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesHydrometricSiteText(this.hydrometricsiteTextModel$);
    this.hydrometricsiteTextModel$.next(<HydrometricSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetHydrometricSiteList() {
    this.httpClientService.BeforeHttpClient(this.hydrometricsiteGetModel$);

    return this.httpClient.get<HydrometricSite[]>('/api/HydrometricSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsiteGetModel$, e);
      })))
    );
  }

  PutHydrometricSite(hydrometricsite: HydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.hydrometricsitePutModel$);

    return this.httpClient.put<HydrometricSite>('/api/HydrometricSite', hydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsitePutModel$, x, HttpClientCommand.Put, hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsitePutModel$, e);
      })))
    );
  }

  PostHydrometricSite(hydrometricsite: HydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.hydrometricsitePostModel$);

    return this.httpClient.post<HydrometricSite>('/api/HydrometricSite', hydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsitePostModel$, x, HttpClientCommand.Post, hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsitePostModel$, e);
      })))
    );
  }

  DeleteHydrometricSite(hydrometricsite: HydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.hydrometricsiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/HydrometricSite/${ hydrometricsite.HydrometricSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsiteDeleteModel$, x, HttpClientCommand.Delete, hydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<HydrometricSite>(this.hydrometricsiteListModel$, this.hydrometricsiteDeleteModel$, e);
      })))
    );
  }
}
