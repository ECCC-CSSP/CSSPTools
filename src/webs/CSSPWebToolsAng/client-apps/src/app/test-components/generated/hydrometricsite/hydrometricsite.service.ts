/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { HydrometricSiteTextModel, HydrometricSiteModel } from './hydrometricsite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesHydrometricSiteText } from './hydrometricsite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { HydrometricSite } from 'src/app/models/generated/HydrometricSite.model';

@Injectable({
  providedIn: 'root'
})
export class HydrometricSiteService {
  hydrometricsiteTextModel$: BehaviorSubject<HydrometricSiteTextModel> = new BehaviorSubject<HydrometricSiteTextModel>(<HydrometricSiteTextModel>{});
  hydrometricsiteModel$: BehaviorSubject<HydrometricSiteModel> = new BehaviorSubject<HydrometricSiteModel>(<HydrometricSiteModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesHydrometricSiteText(this);
    this.UpdateHydrometricSiteText(<HydrometricSiteTextModel>{ Title: "Something2 for text" });
  }

  UpdateHydrometricSiteText(hydrometricsiteTextModel: HydrometricSiteTextModel) {
    this.hydrometricsiteTextModel$.next(<HydrometricSiteTextModel>{ ...this.hydrometricsiteTextModel$.getValue(), ...hydrometricsiteTextModel });
  }

  UpdateHydrometricSiteModel(hydrometricsiteModel: HydrometricSiteModel) {
    this.hydrometricsiteModel$.next(<HydrometricSiteModel>{ ...this.hydrometricsiteModel$.getValue(), ...hydrometricsiteModel });
  }

  GetHydrometricSite(router: Router) {
    let oldURL = router.url;
    this.UpdateHydrometricSiteModel(<HydrometricSiteModel>{ Working: true, Error: null });

    return this.httpClient.get<HydrometricSite[]>('/api/HydrometricSite').pipe(
      map((x: any) => {
        console.debug(`HydrometricSite OK. Return: ${x}`);
        this.hydrometricsiteModel$.getValue().HydrometricSiteList = <HydrometricSite[]>x;
        this.UpdateHydrometricSiteModel(this.hydrometricsiteModel$.getValue());
        this.UpdateHydrometricSiteModel(<HydrometricSiteModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateHydrometricSiteModel(<HydrometricSiteModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`HydrometricSite ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
