/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { InfrastructureService } from './infrastructure.service';
import { LoadLocalesInfrastructureText } from './infrastructure.locales';
import { Subscription } from 'rxjs';
import { InfrastructureTypeEnum_GetIDText } from '../../../enums/generated/InfrastructureTypeEnum';
import { FacilityTypeEnum_GetIDText } from '../../../enums/generated/FacilityTypeEnum';
import { AerationTypeEnum_GetIDText } from '../../../enums/generated/AerationTypeEnum';
import { PreliminaryTreatmentTypeEnum_GetIDText } from '../../../enums/generated/PreliminaryTreatmentTypeEnum';
import { PrimaryTreatmentTypeEnum_GetIDText } from '../../../enums/generated/PrimaryTreatmentTypeEnum';
import { SecondaryTreatmentTypeEnum_GetIDText } from '../../../enums/generated/SecondaryTreatmentTypeEnum';
import { TertiaryTreatmentTypeEnum_GetIDText } from '../../../enums/generated/TertiaryTreatmentTypeEnum';
import { TreatmentTypeEnum_GetIDText } from '../../../enums/generated/TreatmentTypeEnum';
import { DisinfectionTypeEnum_GetIDText } from '../../../enums/generated/DisinfectionTypeEnum';
import { CollectionSystemTypeEnum_GetIDText } from '../../../enums/generated/CollectionSystemTypeEnum';
import { AlarmSystemTypeEnum_GetIDText } from '../../../enums/generated/AlarmSystemTypeEnum';
import { ValveTypeEnum_GetIDText } from '../../../enums/generated/ValveTypeEnum';
import { Infrastructure } from '../../../models/generated/Infrastructure.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-infrastructure',
  templateUrl: './infrastructure.component.html',
  styleUrls: ['./infrastructure.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class InfrastructureComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public infrastructureService: InfrastructureService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(infrastructure: Infrastructure) {
    if (this.IDToShow === infrastructure.InfrastructureID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(infrastructure: Infrastructure) {
    if (this.IDToShow === infrastructure.InfrastructureID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(infrastructure: Infrastructure) {
    if (this.IDToShow === infrastructure.InfrastructureID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = infrastructure.InfrastructureID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(infrastructure: Infrastructure) {
    if (this.IDToShow === infrastructure.InfrastructureID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = infrastructure.InfrastructureID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetInfrastructureList() {
    this.sub = this.infrastructureService.GetInfrastructureList().subscribe();
  }

  DeleteInfrastructure(infrastructure: Infrastructure) {
    this.sub = this.infrastructureService.DeleteInfrastructure(infrastructure).subscribe();
  }

  GetInfrastructureTypeEnumText(enumID: number) {
    return InfrastructureTypeEnum_GetIDText(enumID)
  }

  GetFacilityTypeEnumText(enumID: number) {
    return FacilityTypeEnum_GetIDText(enumID)
  }

  GetAerationTypeEnumText(enumID: number) {
    return AerationTypeEnum_GetIDText(enumID)
  }

  GetPreliminaryTreatmentTypeEnumText(enumID: number) {
    return PreliminaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetPrimaryTreatmentTypeEnumText(enumID: number) {
    return PrimaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetSecondaryTreatmentTypeEnumText(enumID: number) {
    return SecondaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetTertiaryTreatmentTypeEnumText(enumID: number) {
    return TertiaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetTreatmentTypeEnumText(enumID: number) {
    return TreatmentTypeEnum_GetIDText(enumID)
  }

  GetDisinfectionTypeEnumText(enumID: number) {
    return DisinfectionTypeEnum_GetIDText(enumID)
  }

  GetCollectionSystemTypeEnumText(enumID: number) {
    return CollectionSystemTypeEnum_GetIDText(enumID)
  }

  GetAlarmSystemTypeEnumText(enumID: number) {
    return AlarmSystemTypeEnum_GetIDText(enumID)
  }

  GetValveTypeEnumText(enumID: number) {
    return ValveTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesInfrastructureText(this.infrastructureService);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }
}
