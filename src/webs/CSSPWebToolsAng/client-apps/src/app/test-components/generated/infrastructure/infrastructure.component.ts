/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { InfrastructureService } from './infrastructure.service';
import { LoadLocalesInfrastructureText } from './infrastructure.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { InfrastructureTypeEnum_GetIDText, InfrastructureTypeEnum_GetOrderedText } from '../../../enums/generated/InfrastructureTypeEnum';
import { FacilityTypeEnum_GetIDText, FacilityTypeEnum_GetOrderedText } from '../../../enums/generated/FacilityTypeEnum';
import { AerationTypeEnum_GetIDText, AerationTypeEnum_GetOrderedText } from '../../../enums/generated/AerationTypeEnum';
import { PreliminaryTreatmentTypeEnum_GetIDText, PreliminaryTreatmentTypeEnum_GetOrderedText } from '../../../enums/generated/PreliminaryTreatmentTypeEnum';
import { PrimaryTreatmentTypeEnum_GetIDText, PrimaryTreatmentTypeEnum_GetOrderedText } from '../../../enums/generated/PrimaryTreatmentTypeEnum';
import { SecondaryTreatmentTypeEnum_GetIDText, SecondaryTreatmentTypeEnum_GetOrderedText } from '../../../enums/generated/SecondaryTreatmentTypeEnum';
import { TertiaryTreatmentTypeEnum_GetIDText, TertiaryTreatmentTypeEnum_GetOrderedText } from '../../../enums/generated/TertiaryTreatmentTypeEnum';
import { TreatmentTypeEnum_GetIDText, TreatmentTypeEnum_GetOrderedText } from '../../../enums/generated/TreatmentTypeEnum';
import { DisinfectionTypeEnum_GetIDText, DisinfectionTypeEnum_GetOrderedText } from '../../../enums/generated/DisinfectionTypeEnum';
import { CollectionSystemTypeEnum_GetIDText, CollectionSystemTypeEnum_GetOrderedText } from '../../../enums/generated/CollectionSystemTypeEnum';
import { AlarmSystemTypeEnum_GetIDText, AlarmSystemTypeEnum_GetOrderedText } from '../../../enums/generated/AlarmSystemTypeEnum';
import { ValveTypeEnum_GetIDText, ValveTypeEnum_GetOrderedText } from '../../../enums/generated/ValveTypeEnum';
import { Infrastructure } from '../../../models/generated/Infrastructure.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-infrastructure',
  templateUrl: './infrastructure.component.html',
  styleUrls: ['./infrastructure.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class InfrastructureComponent implements OnInit, OnDestroy {
  sub: Subscription;
  infrastructureTypeList: EnumIDAndText[];
  facilityTypeList: EnumIDAndText[];
  aerationTypeList: EnumIDAndText[];
  preliminaryTreatmentTypeList: EnumIDAndText[];
  primaryTreatmentTypeList: EnumIDAndText[];
  secondaryTreatmentTypeList: EnumIDAndText[];
  tertiaryTreatmentTypeList: EnumIDAndText[];
  treatmentTypeList: EnumIDAndText[];
  disinfectionTypeList: EnumIDAndText[];
  collectionSystemTypeList: EnumIDAndText[];
  alarmSystemTypeList: EnumIDAndText[];
  valveTypeList: EnumIDAndText[];
  infrastructureFormPut: FormGroup;
  infrastructureFormPost: FormGroup;

  constructor(public infrastructureService: InfrastructureService, public router: Router, public fb: FormBuilder) { }

  GetInfrastructureList() {
    this.sub = this.infrastructureService.GetInfrastructureList(this.router).subscribe();
  }

  PutInfrastructure(infrastructure: Infrastructure) {
    this.sub = this.infrastructureService.PutInfrastructure(infrastructure, this.router).subscribe();
  }

  PostInfrastructure(infrastructure: Infrastructure) {
    this.sub = this.infrastructureService.PostInfrastructure(infrastructure, this.router).subscribe();
  }

  DeleteInfrastructure(infrastructure: Infrastructure) {
    this.sub = this.infrastructureService.DeleteInfrastructure(infrastructure, this.router).subscribe();
  }

  GetInfrastructureTypeEnumText(enumID: number) {
    return InfrastructureTypeEnum_GetIDText(enumID)
  }

  GetFacilityTypeEnumText(enumID: number) {
    return FacilityTypeEnum_GetIDText(enumID)
  }

  GetAerationTypeEnumText(enumID: number) {
    return AerationTypeEnum_GetIDText(enumID)
  }

  GetPreliminaryTreatmentTypeEnumText(enumID: number) {
    return PreliminaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetPrimaryTreatmentTypeEnumText(enumID: number) {
    return PrimaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetSecondaryTreatmentTypeEnumText(enumID: number) {
    return SecondaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetTertiaryTreatmentTypeEnumText(enumID: number) {
    return TertiaryTreatmentTypeEnum_GetIDText(enumID)
  }

  GetTreatmentTypeEnumText(enumID: number) {
    return TreatmentTypeEnum_GetIDText(enumID)
  }

  GetDisinfectionTypeEnumText(enumID: number) {
    return DisinfectionTypeEnum_GetIDText(enumID)
  }

  GetCollectionSystemTypeEnumText(enumID: number) {
    return CollectionSystemTypeEnum_GetIDText(enumID)
  }

  GetAlarmSystemTypeEnumText(enumID: number) {
    return AlarmSystemTypeEnum_GetIDText(enumID)
  }

  GetValveTypeEnumText(enumID: number) {
    return ValveTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesInfrastructureText(this.infrastructureService);
    this.infrastructureTypeList = InfrastructureTypeEnum_GetOrderedText();
    this.facilityTypeList = FacilityTypeEnum_GetOrderedText();
    this.aerationTypeList = AerationTypeEnum_GetOrderedText();
    this.preliminaryTreatmentTypeList = PreliminaryTreatmentTypeEnum_GetOrderedText();
    this.primaryTreatmentTypeList = PrimaryTreatmentTypeEnum_GetOrderedText();
    this.secondaryTreatmentTypeList = SecondaryTreatmentTypeEnum_GetOrderedText();
    this.tertiaryTreatmentTypeList = TertiaryTreatmentTypeEnum_GetOrderedText();
    this.treatmentTypeList = TreatmentTypeEnum_GetOrderedText();
    this.disinfectionTypeList = DisinfectionTypeEnum_GetOrderedText();
    this.collectionSystemTypeList = CollectionSystemTypeEnum_GetOrderedText();
    this.alarmSystemTypeList = AlarmSystemTypeEnum_GetOrderedText();
    this.valveTypeList = ValveTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.infrastructureService.infrastructureList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          InfrastructureID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.infrastructureService.infrastructureList[0]?.InfrastructureID)),
              disabled: false
            }],
          InfrastructureTVItemID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.InfrastructureTVItemID,
              disabled: false
            }],
          PrismID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PrismID,
              disabled: false
            }],
          TPID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.TPID,
              disabled: false
            }],
          LSID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.LSID,
              disabled: false
            }],
          SiteID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.SiteID,
              disabled: false
            }],
          Site: [
            {
              value: this.infrastructureService.infrastructureList[0]?.Site,
              disabled: false
            }],
          InfrastructureCategory: [
            {
              value: this.infrastructureService.infrastructureList[0]?.InfrastructureCategory,
              disabled: false
            }],
          InfrastructureType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.InfrastructureType,
              disabled: false
            }],
          FacilityType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.FacilityType,
              disabled: false
            }],
          HasBackupPower: [
            {
              value: this.infrastructureService.infrastructureList[0]?.HasBackupPower,
              disabled: false
            }],
          IsMechanicallyAerated: [
            {
              value: this.infrastructureService.infrastructureList[0]?.IsMechanicallyAerated,
              disabled: false
            }],
          NumberOfCells: [
            {
              value: this.infrastructureService.infrastructureList[0]?.NumberOfCells,
              disabled: false
            }],
          NumberOfAeratedCells: [
            {
              value: this.infrastructureService.infrastructureList[0]?.NumberOfAeratedCells,
              disabled: false
            }],
          AerationType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.AerationType,
              disabled: false
            }],
          PreliminaryTreatmentType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PreliminaryTreatmentType,
              disabled: false
            }],
          PrimaryTreatmentType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PrimaryTreatmentType,
              disabled: false
            }],
          SecondaryTreatmentType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.SecondaryTreatmentType,
              disabled: false
            }],
          TertiaryTreatmentType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.TertiaryTreatmentType,
              disabled: false
            }],
          TreatmentType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.TreatmentType,
              disabled: false
            }],
          DisinfectionType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.DisinfectionType,
              disabled: false
            }],
          CollectionSystemType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.CollectionSystemType,
              disabled: false
            }],
          AlarmSystemType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.AlarmSystemType,
              disabled: false
            }],
          DesignFlow_m3_day: [
            {
              value: this.infrastructureService.infrastructureList[0]?.DesignFlow_m3_day,
              disabled: false
            }],
          AverageFlow_m3_day: [
            {
              value: this.infrastructureService.infrastructureList[0]?.AverageFlow_m3_day,
              disabled: false
            }],
          PeakFlow_m3_day: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PeakFlow_m3_day,
              disabled: false
            }],
          PopServed: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PopServed,
              disabled: false
            }],
          CanOverflow: [
            {
              value: this.infrastructureService.infrastructureList[0]?.CanOverflow,
              disabled: false
            }],
          ValveType: [
            {
              value: this.infrastructureService.infrastructureList[0]?.ValveType,
              disabled: false
            }],
          PercFlowOfTotal: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PercFlowOfTotal,
              disabled: false
            }],
          TimeOffset_hour: [
            {
              value: this.infrastructureService.infrastructureList[0]?.TimeOffset_hour,
              disabled: false
            }],
          TempCatchAllRemoveLater: [
            {
              value: this.infrastructureService.infrastructureList[0]?.TempCatchAllRemoveLater,
              disabled: false
            }],
          AverageDepth_m: [
            {
              value: this.infrastructureService.infrastructureList[0]?.AverageDepth_m,
              disabled: false
            }],
          NumberOfPorts: [
            {
              value: this.infrastructureService.infrastructureList[0]?.NumberOfPorts,
              disabled: false
            }],
          PortDiameter_m: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PortDiameter_m,
              disabled: false
            }],
          PortSpacing_m: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PortSpacing_m,
              disabled: false
            }],
          PortElevation_m: [
            {
              value: this.infrastructureService.infrastructureList[0]?.PortElevation_m,
              disabled: false
            }],
          VerticalAngle_deg: [
            {
              value: this.infrastructureService.infrastructureList[0]?.VerticalAngle_deg,
              disabled: false
            }],
          HorizontalAngle_deg: [
            {
              value: this.infrastructureService.infrastructureList[0]?.HorizontalAngle_deg,
              disabled: false
            }],
          DecayRate_per_day: [
            {
              value: this.infrastructureService.infrastructureList[0]?.DecayRate_per_day,
              disabled: false
            }],
          NearFieldVelocity_m_s: [
            {
              value: this.infrastructureService.infrastructureList[0]?.NearFieldVelocity_m_s,
              disabled: false
            }],
          FarFieldVelocity_m_s: [
            {
              value: this.infrastructureService.infrastructureList[0]?.FarFieldVelocity_m_s,
              disabled: false
            }],
          ReceivingWaterSalinity_PSU: [
            {
              value: this.infrastructureService.infrastructureList[0]?.ReceivingWaterSalinity_PSU,
              disabled: false
            }],
          ReceivingWaterTemperature_C: [
            {
              value: this.infrastructureService.infrastructureList[0]?.ReceivingWaterTemperature_C,
              disabled: false
            }],
          ReceivingWater_MPN_per_100ml: [
            {
              value: this.infrastructureService.infrastructureList[0]?.ReceivingWater_MPN_per_100ml,
              disabled: false
            }],
          DistanceFromShore_m: [
            {
              value: this.infrastructureService.infrastructureList[0]?.DistanceFromShore_m,
              disabled: false
            }],
          SeeOtherMunicipalityTVItemID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.SeeOtherMunicipalityTVItemID,
              disabled: false
            }],
          CivicAddressTVItemID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.CivicAddressTVItemID,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.infrastructureService.infrastructureList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.infrastructureService.infrastructureList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.infrastructureFormPost = formGroup
      }
      else {
        this.infrastructureFormPut = formGroup;
      }
    }
  }
}
