/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { InfrastructureLanguageService } from './infrastructurelanguage.service';
import { LoadLocalesInfrastructureLanguageText } from './infrastructurelanguage.locales';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { InfrastructureLanguage } from '../../../models/generated/InfrastructureLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-infrastructurelanguage-edit',
  templateUrl: './infrastructurelanguage-edit.component.html',
  styleUrls: ['./infrastructurelanguage-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class InfrastructureLanguageEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusList: EnumIDAndText[];
  infrastructurelanguageFormEdit: FormGroup;
  @Input() infrastructurelanguage: InfrastructureLanguage = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public infrastructurelanguageService: InfrastructureLanguageService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutInfrastructureLanguage(infrastructurelanguage: InfrastructureLanguage) {
    this.sub = this.infrastructurelanguageService.PutInfrastructureLanguage(infrastructurelanguage).subscribe();
  }

  PostInfrastructureLanguage(infrastructurelanguage: InfrastructureLanguage) {
    this.sub = this.infrastructurelanguageService.PostInfrastructureLanguage(infrastructurelanguage).subscribe();
  }

  ngOnInit(): void {
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusList = TranslationStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.infrastructurelanguage) {
      let formGroup: FormGroup = this.fb.group(
        {
          InfrastructureLanguageID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.infrastructurelanguage.InfrastructureLanguageID)),
              disabled: false
            }, [Validators.required]],
          InfrastructureID: [
            {
              value: this.infrastructurelanguage.InfrastructureID,
              disabled: false
            }, [Validators.required]],
          Language: [
            {
              value: this.infrastructurelanguage.Language,
              disabled: false
            }, [Validators.required]],
          Comment: [
            {
              value: this.infrastructurelanguage.Comment,
              disabled: false
            }, [Validators.required]],
          TranslationStatus: [
            {
              value: this.infrastructurelanguage.TranslationStatus,
              disabled: false
            }, [Validators.required]],
          LastUpdateDate_UTC: [
            {
              value: this.infrastructurelanguage.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.infrastructurelanguage.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.infrastructurelanguageFormEdit = formGroup
    }
  }
}
