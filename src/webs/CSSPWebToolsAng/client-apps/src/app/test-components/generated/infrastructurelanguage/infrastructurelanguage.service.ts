/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { InfrastructureLanguageTextModel } from './infrastructurelanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesInfrastructureLanguageText } from './infrastructurelanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { InfrastructureLanguage } from '../../../models/generated/InfrastructureLanguage.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class InfrastructureLanguageService {
  /* Variables */
  infrastructurelanguageTextModel$: BehaviorSubject<InfrastructureLanguageTextModel> = new BehaviorSubject<InfrastructureLanguageTextModel>(<InfrastructureLanguageTextModel>{});
  infrastructurelanguageListModel$: BehaviorSubject<InfrastructureLanguage[]> = new BehaviorSubject<InfrastructureLanguage[]>(<InfrastructureLanguage[]>{});
  infrastructurelanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructurelanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructurelanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructurelanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesInfrastructureLanguageText(this.infrastructurelanguageTextModel$);
    this.infrastructurelanguageTextModel$.next(<InfrastructureLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetInfrastructureLanguageList() {
    this.httpClientService.BeforeHttpClient(this.infrastructurelanguageGetModel$);

    return this.httpClient.get<InfrastructureLanguage[]>('/api/InfrastructureLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguageGetModel$, e);
      })))
    );
  }

  PutInfrastructureLanguage(infrastructurelanguage: InfrastructureLanguage) {
    this.httpClientService.BeforeHttpClient(this.infrastructurelanguagePutModel$);

    return this.httpClient.put<InfrastructureLanguage>('/api/InfrastructureLanguage', infrastructurelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguagePutModel$, x, HttpClientCommand.Put, infrastructurelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguagePutModel$, e);
      })))
    );
  }

  PostInfrastructureLanguage(infrastructurelanguage: InfrastructureLanguage) {
    this.httpClientService.BeforeHttpClient(this.infrastructurelanguagePostModel$);

    return this.httpClient.post<InfrastructureLanguage>('/api/InfrastructureLanguage', infrastructurelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguagePostModel$, x, HttpClientCommand.Post, infrastructurelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguagePostModel$, e);
      })))
    );
  }

  DeleteInfrastructureLanguage(infrastructurelanguage: InfrastructureLanguage) {
    this.httpClientService.BeforeHttpClient(this.infrastructurelanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/InfrastructureLanguage/${ infrastructurelanguage.InfrastructureLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguageDeleteModel$, x, HttpClientCommand.Delete, infrastructurelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureLanguage>(this.infrastructurelanguageListModel$, this.infrastructurelanguageDeleteModel$, e);
      })))
    );
  }
}
