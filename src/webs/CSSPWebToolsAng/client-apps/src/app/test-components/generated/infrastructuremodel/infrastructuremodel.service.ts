/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { InfrastructureModelTextModel } from './infrastructuremodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesInfrastructureModelText } from './infrastructuremodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { InfrastructureModel } from '../../../models/generated/InfrastructureModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class InfrastructureModelService {
  /* Variables */
  infrastructuremodelTextModel$: BehaviorSubject<InfrastructureModelTextModel> = new BehaviorSubject<InfrastructureModelTextModel>(<InfrastructureModelTextModel>{});
  infrastructuremodelListModel$: BehaviorSubject<InfrastructureModel[]> = new BehaviorSubject<InfrastructureModel[]>(<InfrastructureModel[]>{});
  infrastructuremodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructuremodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructuremodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  infrastructuremodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesInfrastructureModelText(this.infrastructuremodelTextModel$);
    this.infrastructuremodelTextModel$.next(<InfrastructureModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetInfrastructureModelList() {
    this.httpClientService.BeforeHttpClient(this.infrastructuremodelGetModel$);

    return this.httpClient.get<InfrastructureModel[]>('/api/InfrastructureModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelGetModel$, e);
      })))
    );
  }

  PutInfrastructureModel(infrastructuremodel: InfrastructureModel) {
    this.httpClientService.BeforeHttpClient(this.infrastructuremodelPutModel$);

    return this.httpClient.put<InfrastructureModel>('/api/InfrastructureModel', infrastructuremodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelPutModel$, x, HttpClientCommand.Put, infrastructuremodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelPutModel$, e);
      })))
    );
  }

  PostInfrastructureModel(infrastructuremodel: InfrastructureModel) {
    this.httpClientService.BeforeHttpClient(this.infrastructuremodelPostModel$);

    return this.httpClient.post<InfrastructureModel>('/api/InfrastructureModel', infrastructuremodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelPostModel$, x, HttpClientCommand.Post, infrastructuremodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelPostModel$, e);
      })))
    );
  }

  DeleteInfrastructureModel(infrastructuremodel: InfrastructureModel) {
    this.httpClientService.BeforeHttpClient(this.infrastructuremodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/InfrastructureModel/${ infrastructuremodel.InfrastructureModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelDeleteModel$, x, HttpClientCommand.Delete, infrastructuremodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<InfrastructureModel>(this.infrastructuremodelListModel$, this.infrastructuremodelDeleteModel$, e);
      })))
    );
  }
}
