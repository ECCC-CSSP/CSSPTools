/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { LabSheetService } from './labsheet.service';
import { LoadLocalesLabSheetText } from './labsheet.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { SamplingPlanTypeEnum_GetIDText, SamplingPlanTypeEnum_GetOrderedText } from '../../../enums/generated/SamplingPlanTypeEnum';
import { SampleTypeEnum_GetIDText, SampleTypeEnum_GetOrderedText } from '../../../enums/generated/SampleTypeEnum';
import { LabSheetTypeEnum_GetIDText, LabSheetTypeEnum_GetOrderedText } from '../../../enums/generated/LabSheetTypeEnum';
import { LabSheetStatusEnum_GetIDText, LabSheetStatusEnum_GetOrderedText } from '../../../enums/generated/LabSheetStatusEnum';
import { LabSheet } from '../../../models/generated/LabSheet.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-labsheet',
  templateUrl: './labsheet.component.html',
  styleUrls: ['./labsheet.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class LabSheetComponent implements OnInit, OnDestroy {
  sub: Subscription;
  samplingPlanTypeList: EnumIDAndText[];
  sampleTypeList: EnumIDAndText[];
  labSheetTypeList: EnumIDAndText[];
  labSheetStatusList: EnumIDAndText[];
  labsheetFormPut: FormGroup;
  labsheetFormPost: FormGroup;

  constructor(public labsheetService: LabSheetService, public router: Router, public fb: FormBuilder) { }

  GetLabSheetList() {
    this.sub = this.labsheetService.GetLabSheetList(this.router).subscribe();
  }

  PutLabSheet(labsheet: LabSheet) {
    this.sub = this.labsheetService.PutLabSheet(labsheet, this.router).subscribe();
  }

  PostLabSheet(labsheet: LabSheet) {
    this.sub = this.labsheetService.PostLabSheet(labsheet, this.router).subscribe();
  }

  DeleteLabSheet(labsheet: LabSheet) {
    this.sub = this.labsheetService.DeleteLabSheet(labsheet, this.router).subscribe();
  }

  GetSamplingPlanTypeEnumText(enumID: number) {
    return SamplingPlanTypeEnum_GetIDText(enumID)
  }

  GetSampleTypeEnumText(enumID: number) {
    return SampleTypeEnum_GetIDText(enumID)
  }

  GetLabSheetTypeEnumText(enumID: number) {
    return LabSheetTypeEnum_GetIDText(enumID)
  }

  GetLabSheetStatusEnumText(enumID: number) {
    return LabSheetStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesLabSheetText(this.labsheetService);
    this.samplingPlanTypeList = SamplingPlanTypeEnum_GetOrderedText();
    this.sampleTypeList = SampleTypeEnum_GetOrderedText();
    this.labSheetTypeList = LabSheetTypeEnum_GetOrderedText();
    this.labSheetStatusList = LabSheetStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.labsheetService.labsheetList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          LabSheetID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.labsheetService.labsheetList[0]?.LabSheetID)),
              disabled: false
            }],
          OtherServerLabSheetID: [
            {
              value: this.labsheetService.labsheetList[0]?.OtherServerLabSheetID,
              disabled: false
            }],
          SamplingPlanID: [
            {
              value: this.labsheetService.labsheetList[0]?.SamplingPlanID,
              disabled: false
            }],
          SamplingPlanName: [
            {
              value: this.labsheetService.labsheetList[0]?.SamplingPlanName,
              disabled: false
            }],
          Year: [
            {
              value: this.labsheetService.labsheetList[0]?.Year,
              disabled: false
            }],
          Month: [
            {
              value: this.labsheetService.labsheetList[0]?.Month,
              disabled: false
            }],
          Day: [
            {
              value: this.labsheetService.labsheetList[0]?.Day,
              disabled: false
            }],
          RunNumber: [
            {
              value: this.labsheetService.labsheetList[0]?.RunNumber,
              disabled: false
            }],
          SubsectorTVItemID: [
            {
              value: this.labsheetService.labsheetList[0]?.SubsectorTVItemID,
              disabled: false
            }],
          MWQMRunTVItemID: [
            {
              value: this.labsheetService.labsheetList[0]?.MWQMRunTVItemID,
              disabled: false
            }],
          SamplingPlanType: [
            {
              value: this.labsheetService.labsheetList[0]?.SamplingPlanType,
              disabled: false
            }],
          SampleType: [
            {
              value: this.labsheetService.labsheetList[0]?.SampleType,
              disabled: false
            }],
          LabSheetType: [
            {
              value: this.labsheetService.labsheetList[0]?.LabSheetType,
              disabled: false
            }],
          LabSheetStatus: [
            {
              value: this.labsheetService.labsheetList[0]?.LabSheetStatus,
              disabled: false
            }],
          FileName: [
            {
              value: this.labsheetService.labsheetList[0]?.FileName,
              disabled: false
            }],
          FileLastModifiedDate_Local: [
            {
              value: this.labsheetService.labsheetList[0]?.FileLastModifiedDate_Local,
              disabled: false
            }],
          FileContent: [
            {
              value: this.labsheetService.labsheetList[0]?.FileContent,
              disabled: false
            }],
          AcceptedOrRejectedByContactTVItemID: [
            {
              value: this.labsheetService.labsheetList[0]?.AcceptedOrRejectedByContactTVItemID,
              disabled: false
            }],
          AcceptedOrRejectedDateTime: [
            {
              value: this.labsheetService.labsheetList[0]?.AcceptedOrRejectedDateTime,
              disabled: false
            }],
          RejectReason: [
            {
              value: this.labsheetService.labsheetList[0]?.RejectReason,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.labsheetService.labsheetList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.labsheetService.labsheetList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.labsheetFormPost = formGroup
      }
      else {
        this.labsheetFormPut = formGroup;
      }
    }
  }
}
