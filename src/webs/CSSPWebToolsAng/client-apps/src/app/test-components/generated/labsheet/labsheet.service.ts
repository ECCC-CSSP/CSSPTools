/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { LabSheetTextModel } from './labsheet.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesLabSheetText } from './labsheet.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { LabSheet } from '../../../models/generated/LabSheet.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class LabSheetService {
  /* Variables */
  labsheetTextModel$: BehaviorSubject<LabSheetTextModel> = new BehaviorSubject<LabSheetTextModel>(<LabSheetTextModel>{});
  labsheetListModel$: BehaviorSubject<LabSheet[]> = new BehaviorSubject<LabSheet[]>(<LabSheet[]>{});
  labsheetGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesLabSheetText(this.labsheetTextModel$);
    this.labsheetTextModel$.next(<LabSheetTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetLabSheetList() {
    this.httpClientService.BeforeHttpClient(this.labsheetGetModel$);

    return this.httpClient.get<LabSheet[]>('/api/LabSheet').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheet>(this.labsheetListModel$, this.labsheetGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheet>(this.labsheetListModel$, this.labsheetGetModel$, e);
      })))
    );
  }

  PutLabSheet(labsheet: LabSheet) {
    this.httpClientService.BeforeHttpClient(this.labsheetPutModel$);

    return this.httpClient.put<LabSheet>('/api/LabSheet', labsheet, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheet>(this.labsheetListModel$, this.labsheetPutModel$, x, HttpClientCommand.Put, labsheet);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<LabSheet>(this.labsheetListModel$, this.labsheetPutModel$, e);
      })))
    );
  }

  PostLabSheet(labsheet: LabSheet) {
    this.httpClientService.BeforeHttpClient(this.labsheetPostModel$);

    return this.httpClient.post<LabSheet>('/api/LabSheet', labsheet, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheet>(this.labsheetListModel$, this.labsheetPostModel$, x, HttpClientCommand.Post, labsheet);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheet>(this.labsheetListModel$, this.labsheetPostModel$, e);
      })))
    );
  }

  DeleteLabSheet(labsheet: LabSheet) {
    this.httpClientService.BeforeHttpClient(this.labsheetDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/LabSheet/${ labsheet.LabSheetID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheet>(this.labsheetListModel$, this.labsheetDeleteModel$, x, HttpClientCommand.Delete, labsheet);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheet>(this.labsheetListModel$, this.labsheetDeleteModel$, e);
      })))
    );
  }
}
