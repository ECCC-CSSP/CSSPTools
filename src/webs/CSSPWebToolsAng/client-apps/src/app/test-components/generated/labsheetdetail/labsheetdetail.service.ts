/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { LabSheetDetailTextModel } from './labsheetdetail.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesLabSheetDetailText } from './labsheetdetail.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { LabSheetDetail } from '../../../models/generated/LabSheetDetail.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class LabSheetDetailService {
  /* Variables */
  labsheetdetailTextModel$: BehaviorSubject<LabSheetDetailTextModel> = new BehaviorSubject<LabSheetDetailTextModel>(<LabSheetDetailTextModel>{});
  labsheetdetailListModel$: BehaviorSubject<LabSheetDetail[]> = new BehaviorSubject<LabSheetDetail[]>(<LabSheetDetail[]>{});
  labsheetdetailGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetdetailPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetdetailPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetdetailDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesLabSheetDetailText(this.labsheetdetailTextModel$);
    this.labsheetdetailTextModel$.next(<LabSheetDetailTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetLabSheetDetailList() {
    this.httpClientService.BeforeHttpClient(this.labsheetdetailGetModel$);

    return this.httpClient.get<LabSheetDetail[]>('/api/LabSheetDetail').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailGetModel$, e);
      })))
    );
  }

  PutLabSheetDetail(labsheetdetail: LabSheetDetail) {
    this.httpClientService.BeforeHttpClient(this.labsheetdetailPutModel$);

    return this.httpClient.put<LabSheetDetail>('/api/LabSheetDetail', labsheetdetail, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailPutModel$, x, HttpClientCommand.Put, labsheetdetail);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailPutModel$, e);
      })))
    );
  }

  PostLabSheetDetail(labsheetdetail: LabSheetDetail) {
    this.httpClientService.BeforeHttpClient(this.labsheetdetailPostModel$);

    return this.httpClient.post<LabSheetDetail>('/api/LabSheetDetail', labsheetdetail, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailPostModel$, x, HttpClientCommand.Post, labsheetdetail);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailPostModel$, e);
      })))
    );
  }

  DeleteLabSheetDetail(labsheetdetail: LabSheetDetail) {
    this.httpClientService.BeforeHttpClient(this.labsheetdetailDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/LabSheetDetail/${ labsheetdetail.LabSheetDetailID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailDeleteModel$, x, HttpClientCommand.Delete, labsheetdetail);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetDetail>(this.labsheetdetailListModel$, this.labsheetdetailDeleteModel$, e);
      })))
    );
  }
}
