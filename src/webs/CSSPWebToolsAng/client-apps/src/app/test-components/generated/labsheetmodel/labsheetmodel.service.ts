/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { LabSheetModelTextModel } from './labsheetmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesLabSheetModelText } from './labsheetmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { LabSheetModel } from '../../../models/generated/LabSheetModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class LabSheetModelService {
  /* Variables */
  labsheetmodelTextModel$: BehaviorSubject<LabSheetModelTextModel> = new BehaviorSubject<LabSheetModelTextModel>(<LabSheetModelTextModel>{});
  labsheetmodelListModel$: BehaviorSubject<LabSheetModel[]> = new BehaviorSubject<LabSheetModel[]>(<LabSheetModel[]>{});
  labsheetmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  labsheetmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesLabSheetModelText(this.labsheetmodelTextModel$);
    this.labsheetmodelTextModel$.next(<LabSheetModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetLabSheetModelList() {
    this.httpClientService.BeforeHttpClient(this.labsheetmodelGetModel$);

    return this.httpClient.get<LabSheetModel[]>('/api/LabSheetModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelGetModel$, e);
      })))
    );
  }

  PutLabSheetModel(labsheetmodel: LabSheetModel) {
    this.httpClientService.BeforeHttpClient(this.labsheetmodelPutModel$);

    return this.httpClient.put<LabSheetModel>('/api/LabSheetModel', labsheetmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelPutModel$, x, HttpClientCommand.Put, labsheetmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelPutModel$, e);
      })))
    );
  }

  PostLabSheetModel(labsheetmodel: LabSheetModel) {
    this.httpClientService.BeforeHttpClient(this.labsheetmodelPostModel$);

    return this.httpClient.post<LabSheetModel>('/api/LabSheetModel', labsheetmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelPostModel$, x, HttpClientCommand.Post, labsheetmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelPostModel$, e);
      })))
    );
  }

  DeleteLabSheetModel(labsheetmodel: LabSheetModel) {
    this.httpClientService.BeforeHttpClient(this.labsheetmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/LabSheetModel/${ labsheetmodel.LabSheetModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelDeleteModel$, x, HttpClientCommand.Delete, labsheetmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<LabSheetModel>(this.labsheetmodelListModel$, this.labsheetmodelDeleteModel$, e);
      })))
    );
  }
}
