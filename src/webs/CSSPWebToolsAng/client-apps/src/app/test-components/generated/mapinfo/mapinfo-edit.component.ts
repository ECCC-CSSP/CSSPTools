/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { MapInfoService } from './mapinfo.service';
import { LoadLocalesMapInfoText } from './mapinfo.locales';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { MapInfoDrawTypeEnum_GetOrderedText } from '../../../enums/generated/MapInfoDrawTypeEnum';
import { MapInfo } from '../../../models/generated/MapInfo.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mapinfo-edit',
  templateUrl: './mapinfo-edit.component.html',
  styleUrls: ['./mapinfo-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MapInfoEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  mapInfoDrawTypeList: EnumIDAndText[];
  mapinfoFormEdit: FormGroup;
  @Input() mapinfo: MapInfo = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public mapinfoService: MapInfoService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutMapInfo(mapinfo: MapInfo) {
    this.sub = this.mapinfoService.PutMapInfo(mapinfo).subscribe();
  }

  PostMapInfo(mapinfo: MapInfo) {
    this.sub = this.mapinfoService.PostMapInfo(mapinfo).subscribe();
  }

  ngOnInit(): void {
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.mapInfoDrawTypeList = MapInfoDrawTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.mapinfo) {
      let formGroup: FormGroup = this.fb.group(
        {
          MapInfoID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.mapinfo.MapInfoID)),
              disabled: false
            }, [Validators.required]],
          TVItemID: [
            {
              value: this.mapinfo.TVItemID,
              disabled: false
            }, [Validators.required]],
          TVType: [
            {
              value: this.mapinfo.TVType,
              disabled: false
            }, [Validators.required]],
          LatMin: [
            {
              value: this.mapinfo.LatMin,
              disabled: false
            }, [Validators.required, Validators.min(-90), Validators.max(90)]],
          LatMax: [
            {
              value: this.mapinfo.LatMax,
              disabled: false
            }, [Validators.required, Validators.min(-90), Validators.max(90)]],
          LngMin: [
            {
              value: this.mapinfo.LngMin,
              disabled: false
            }, [Validators.required, Validators.min(-180), Validators.max(180)]],
          LngMax: [
            {
              value: this.mapinfo.LngMax,
              disabled: false
            }, [Validators.required, Validators.min(-180), Validators.max(180)]],
          MapInfoDrawType: [
            {
              value: this.mapinfo.MapInfoDrawType,
              disabled: false
            }, [Validators.required]],
          LastUpdateDate_UTC: [
            {
              value: this.mapinfo.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.mapinfo.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.mapinfoFormEdit = formGroup
    }
  }
}
