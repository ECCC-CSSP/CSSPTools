/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MapInfoTextModel, MapInfoModel } from './mapinfo.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMapInfoText } from './mapinfo.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MapInfo } from 'src/app/models/generated/MapInfo.model';

@Injectable({
  providedIn: 'root'
})
export class MapInfoService {
  mapinfoTextModel$: BehaviorSubject<MapInfoTextModel> = new BehaviorSubject<MapInfoTextModel>(<MapInfoTextModel>{});
  mapinfoModel$: BehaviorSubject<MapInfoModel> = new BehaviorSubject<MapInfoModel>(<MapInfoModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMapInfoText(this);
    this.UpdateMapInfoText(<MapInfoTextModel>{ Title: "Something2 for text" });
  }

  UpdateMapInfoText(mapinfoTextModel: MapInfoTextModel) {
    this.mapinfoTextModel$.next(<MapInfoTextModel>{ ...this.mapinfoTextModel$.getValue(), ...mapinfoTextModel });
  }

  UpdateMapInfoModel(mapinfoModel: MapInfoModel) {
    this.mapinfoModel$.next(<MapInfoModel>{ ...this.mapinfoModel$.getValue(), ...mapinfoModel });
  }

  GetMapInfo(router: Router) {
    let oldURL = router.url;
    this.UpdateMapInfoModel(<MapInfoModel>{ Working: true, Error: null });

    return this.httpClient.get<MapInfo[]>('/api/MapInfo').pipe(
      map((x: any) => {
        console.debug(`MapInfo OK. Return: ${x}`);
        this.mapinfoModel$.getValue().MapInfoList = <MapInfo[]>x;
        this.UpdateMapInfoModel(this.mapinfoModel$.getValue());
        this.UpdateMapInfoModel(<MapInfoModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMapInfoModel(<MapInfoModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MapInfo ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
