/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MapInfoModelTextModel } from './mapinfomodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMapInfoModelText } from './mapinfomodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MapInfoModel } from '../../../models/generated/MapInfoModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MapInfoModelService {
  /* Variables */
  mapinfomodelTextModel$: BehaviorSubject<MapInfoModelTextModel> = new BehaviorSubject<MapInfoModelTextModel>(<MapInfoModelTextModel>{});
  mapinfomodelListModel$: BehaviorSubject<MapInfoModel[]> = new BehaviorSubject<MapInfoModel[]>(<MapInfoModel[]>{});
  mapinfomodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfomodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfomodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfomodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMapInfoModelText(this.mapinfomodelTextModel$);
    this.mapinfomodelTextModel$.next(<MapInfoModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMapInfoModelList() {
    this.httpClientService.BeforeHttpClient(this.mapinfomodelGetModel$);

    return this.httpClient.get<MapInfoModel[]>('/api/MapInfoModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelGetModel$, e);
      })))
    );
  }

  PutMapInfoModel(mapinfomodel: MapInfoModel) {
    this.httpClientService.BeforeHttpClient(this.mapinfomodelPutModel$);

    return this.httpClient.put<MapInfoModel>('/api/MapInfoModel', mapinfomodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelPutModel$, x, HttpClientCommand.Put, mapinfomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelPutModel$, e);
      })))
    );
  }

  PostMapInfoModel(mapinfomodel: MapInfoModel) {
    this.httpClientService.BeforeHttpClient(this.mapinfomodelPostModel$);

    return this.httpClient.post<MapInfoModel>('/api/MapInfoModel', mapinfomodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelPostModel$, x, HttpClientCommand.Post, mapinfomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelPostModel$, e);
      })))
    );
  }

  DeleteMapInfoModel(mapinfomodel: MapInfoModel) {
    this.httpClientService.BeforeHttpClient(this.mapinfomodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MapInfoModel/${ mapinfomodel.MapInfoModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelDeleteModel$, x, HttpClientCommand.Delete, mapinfomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoModel>(this.mapinfomodelListModel$, this.mapinfomodelDeleteModel$, e);
      })))
    );
  }
}
