/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { MapInfoPointService } from './mapinfopoint.service';
import { LoadLocalesMapInfoPointText } from './mapinfopoint.locales';
import { Subscription } from 'rxjs';
import { MapInfoPoint } from '../../../models/generated/MapInfoPoint.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mapinfopoint-edit',
  templateUrl: './mapinfopoint-edit.component.html',
  styleUrls: ['./mapinfopoint-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MapInfoPointEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mapinfopointFormEdit: FormGroup;
  @Input() mapinfopoint: MapInfoPoint = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public mapinfopointService: MapInfoPointService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.sub = this.mapinfopointService.PutMapInfoPoint(mapinfopoint).subscribe();
  }

  PostMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.sub = this.mapinfopointService.PostMapInfoPoint(mapinfopoint).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.mapinfopoint) {
      let formGroup: FormGroup = this.fb.group(
        {
          MapInfoPointID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.mapinfopoint.MapInfoPointID)),
              disabled: false
            }, [Validators.required]],
          MapInfoID: [
            {
              value: this.mapinfopoint.MapInfoID,
              disabled: false
            }, [Validators.required]],
          Ordinal: [
            {
              value: this.mapinfopoint.Ordinal,
              disabled: false
            }, [Validators.required, Validators.min(0)]],
          Lat: [
            {
              value: this.mapinfopoint.Lat,
              disabled: false
            }, [Validators.required, Validators.min(-90), Validators.max(90)]],
          Lng: [
            {
              value: this.mapinfopoint.Lng,
              disabled: false
            }, [Validators.required, Validators.min(-180), Validators.max(180)]],
          LastUpdateDate_UTC: [
            {
              value: this.mapinfopoint.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.mapinfopoint.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.mapinfopointFormEdit = formGroup
    }
  }
}
