/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MapInfoPointService } from './mapinfopoint.service';
import { LoadLocalesMapInfoPointText } from './mapinfopoint.locales';
import { Subscription } from 'rxjs';
import { MapInfoPoint } from '../../../models/generated/MapInfoPoint.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mapinfopoint',
  templateUrl: './mapinfopoint.component.html',
  styleUrls: ['./mapinfopoint.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MapInfoPointComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mapinfopointFormPut: FormGroup;
  mapinfopointFormPost: FormGroup;

  constructor(public mapinfopointService: MapInfoPointService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetMapInfoPointList() {
    this.sub = this.mapinfopointService.GetMapInfoPointList().subscribe();
  }

  PutMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.sub = this.mapinfopointService.PutMapInfoPoint(mapinfopoint).subscribe();
  }

  PostMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.sub = this.mapinfopointService.PostMapInfoPoint(mapinfopoint).subscribe();
  }

  DeleteMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.sub = this.mapinfopointService.DeleteMapInfoPoint(mapinfopoint).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesMapInfoPointText(this.mapinfopointService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.mapinfopointService.mapinfopointListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MapInfoPointID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.MapInfoPointID)),
              disabled: false
            }, [  Validators.required ]],
          MapInfoID: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.MapInfoID,
              disabled: false
            }, [  Validators.required ]],
          Ordinal: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.Ordinal,
              disabled: false
            }, [  Validators.required, Validators.min(0) ]],
          Lat: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.Lat,
              disabled: false
            }, [  Validators.required, Validators.min(-90), Validators.max(90) ]],
          Lng: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.Lng,
              disabled: false
            }, [  Validators.required, Validators.min(-180), Validators.max(180) ]],
          LastUpdateDate_UTC: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.mapinfopointService.mapinfopointListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.mapinfopointFormPost = formGroup
      }
      else {
        this.mapinfopointFormPut = formGroup;
      }
    }
  }
}
