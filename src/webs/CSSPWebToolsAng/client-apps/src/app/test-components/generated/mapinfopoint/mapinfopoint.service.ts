/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MapInfoPointTextModel } from './mapinfopoint.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMapInfoPointText } from './mapinfopoint.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MapInfoPoint } from '../../../models/generated/MapInfoPoint.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MapInfoPointService {
  /* Variables */
  mapinfopointTextModel$: BehaviorSubject<MapInfoPointTextModel> = new BehaviorSubject<MapInfoPointTextModel>(<MapInfoPointTextModel>{});
  mapinfopointListModel$: BehaviorSubject<MapInfoPoint[]> = new BehaviorSubject<MapInfoPoint[]>(<MapInfoPoint[]>{});
  mapinfopointGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfopointPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfopointPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mapinfopointDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMapInfoPointText(this);
    this.mapinfopointTextModel$.next(<MapInfoPointTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMapInfoPointList() {
    this.httpClientService.BeforeHttpClient(this.mapinfopointGetModel$);

    return this.httpClient.get<MapInfoPoint[]>('/api/MapInfoPoint').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointGetModel$, e);
      })))
    );
  }

  PutMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.httpClientService.BeforeHttpClient(this.mapinfopointPutModel$);

    return this.httpClient.put<MapInfoPoint>('/api/MapInfoPoint', mapinfopoint, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointPutModel$, x, HttpClientCommand.Put, mapinfopoint);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointPutModel$, e);
      })))
    );
  }

  PostMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.httpClientService.BeforeHttpClient(this.mapinfopointPostModel$);

    return this.httpClient.post<MapInfoPoint>('/api/MapInfoPoint', mapinfopoint, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointPostModel$, x, HttpClientCommand.Post, mapinfopoint);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointPostModel$, e);
      })))
    );
  }

  DeleteMapInfoPoint(mapinfopoint: MapInfoPoint) {
    this.httpClientService.BeforeHttpClient(this.mapinfopointDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MapInfoPoint/${ mapinfopoint.MapInfoPointID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointDeleteModel$, x, HttpClientCommand.Delete, mapinfopoint);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MapInfoPoint>(this.mapinfopointListModel$, this.mapinfopointDeleteModel$, e);
      })))
    );
  }
}
