/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MikeBoundaryConditionService } from './mikeboundarycondition.service';
import { LoadLocalesMikeBoundaryConditionText } from './mikeboundarycondition.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { MikeBoundaryConditionLevelOrVelocityEnum_GetIDText, MikeBoundaryConditionLevelOrVelocityEnum_GetOrderedText } from '../../../enums/generated/MikeBoundaryConditionLevelOrVelocityEnum';
import { WebTideDataSetEnum_GetIDText, WebTideDataSetEnum_GetOrderedText } from '../../../enums/generated/WebTideDataSetEnum';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { MikeBoundaryCondition } from '../../../models/generated/MikeBoundaryCondition.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-mikeboundarycondition',
  templateUrl: './mikeboundarycondition.component.html',
  styleUrls: ['./mikeboundarycondition.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MikeBoundaryConditionComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mikeBoundaryConditionLevelOrVelocityList: EnumIDAndText[];
  webTideDataSetList: EnumIDAndText[];
  tVTypeList: EnumIDAndText[];
  mikeboundaryconditionFormPut: FormGroup;
  mikeboundaryconditionFormPost: FormGroup;

  constructor(public mikeboundaryconditionService: MikeBoundaryConditionService, public router: Router, public fb: FormBuilder) { }

  GetMikeBoundaryConditionList() {
    this.sub = this.mikeboundaryconditionService.GetMikeBoundaryConditionList(this.router).subscribe();
  }

  PutMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.sub = this.mikeboundaryconditionService.PutMikeBoundaryCondition(mikeboundarycondition, this.router).subscribe();
  }

  PostMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.sub = this.mikeboundaryconditionService.PostMikeBoundaryCondition(mikeboundarycondition, this.router).subscribe();
  }

  DeleteMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.sub = this.mikeboundaryconditionService.DeleteMikeBoundaryCondition(mikeboundarycondition, this.router).subscribe();
  }

  GetMikeBoundaryConditionLevelOrVelocityEnumText(enumID: number) {
    return MikeBoundaryConditionLevelOrVelocityEnum_GetIDText(enumID)
  }

  GetWebTideDataSetEnumText(enumID: number) {
    return WebTideDataSetEnum_GetIDText(enumID)
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMikeBoundaryConditionText(this.mikeboundaryconditionService);
    this.mikeBoundaryConditionLevelOrVelocityList = MikeBoundaryConditionLevelOrVelocityEnum_GetOrderedText();
    this.webTideDataSetList = WebTideDataSetEnum_GetOrderedText();
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mikeboundaryconditionService.mikeboundaryconditionList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MikeBoundaryConditionID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionID ?? '')),
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionTVItemID: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionTVItemID ?? '',
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionCode: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionCode ?? '',
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionName: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionName ?? '',
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionLength_m: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionLength_m ?? '',
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionFormat: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionFormat ?? '',
              disabled: false
            }, Validators.required],
          MikeBoundaryConditionLevelOrVelocity: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.MikeBoundaryConditionLevelOrVelocity ?? '',
              disabled: false
            }, Validators.required],
          WebTideDataSet: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.WebTideDataSet ?? '',
              disabled: false
            }, Validators.required],
          NumberOfWebTideNodes: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.NumberOfWebTideNodes ?? '',
              disabled: false
            }, Validators.required],
          WebTideDataFromStartToEndDate: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.WebTideDataFromStartToEndDate ?? '',
              disabled: false
            }, Validators.required],
          TVType: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.TVType ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.mikeboundaryconditionService.mikeboundaryconditionList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mikeboundaryconditionFormPost = formGroup
      }
      else {
        this.mikeboundaryconditionFormPut = formGroup;
      }
    }
  }
}
