/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeBoundaryConditionTextModel } from './mikeboundarycondition.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeBoundaryConditionText } from './mikeboundarycondition.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeBoundaryCondition } from '../../../models/generated/MikeBoundaryCondition.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeBoundaryConditionService {
  /* Variables */
  mikeboundaryconditionTextModel$: BehaviorSubject<MikeBoundaryConditionTextModel> = new BehaviorSubject<MikeBoundaryConditionTextModel>(<MikeBoundaryConditionTextModel>{});
  mikeboundaryconditionListModel$: BehaviorSubject<MikeBoundaryCondition[]> = new BehaviorSubject<MikeBoundaryCondition[]>(<MikeBoundaryCondition[]>{});
  mikeboundaryconditionGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeBoundaryConditionText(this.mikeboundaryconditionTextModel$);
    this.mikeboundaryconditionTextModel$.next(<MikeBoundaryConditionTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeBoundaryConditionList() {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionGetModel$);

    return this.httpClient.get<MikeBoundaryCondition[]>('/api/MikeBoundaryCondition').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionGetModel$, e);
      })))
    );
  }

  PutMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionPutModel$);

    return this.httpClient.put<MikeBoundaryCondition>('/api/MikeBoundaryCondition', mikeboundarycondition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionPutModel$, x, HttpClientCommand.Put, mikeboundarycondition);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionPutModel$, e);
      })))
    );
  }

  PostMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionPostModel$);

    return this.httpClient.post<MikeBoundaryCondition>('/api/MikeBoundaryCondition', mikeboundarycondition, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionPostModel$, x, HttpClientCommand.Post, mikeboundarycondition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionPostModel$, e);
      })))
    );
  }

  DeleteMikeBoundaryCondition(mikeboundarycondition: MikeBoundaryCondition) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeBoundaryCondition/${ mikeboundarycondition.MikeBoundaryConditionID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionDeleteModel$, x, HttpClientCommand.Delete, mikeboundarycondition);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryCondition>(this.mikeboundaryconditionListModel$, this.mikeboundaryconditionDeleteModel$, e);
      })))
    );
  }
}
