/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeBoundaryConditionModelTextModel } from './mikeboundaryconditionmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeBoundaryConditionModelText } from './mikeboundaryconditionmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeBoundaryConditionModel } from '../../../models/generated/MikeBoundaryConditionModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeBoundaryConditionModelService {
  /* Variables */
  mikeboundaryconditionmodelTextModel$: BehaviorSubject<MikeBoundaryConditionModelTextModel> = new BehaviorSubject<MikeBoundaryConditionModelTextModel>(<MikeBoundaryConditionModelTextModel>{});
  mikeboundaryconditionmodelListModel$: BehaviorSubject<MikeBoundaryConditionModel[]> = new BehaviorSubject<MikeBoundaryConditionModel[]>(<MikeBoundaryConditionModel[]>{});
  mikeboundaryconditionmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikeboundaryconditionmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeBoundaryConditionModelText(this.mikeboundaryconditionmodelTextModel$);
    this.mikeboundaryconditionmodelTextModel$.next(<MikeBoundaryConditionModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeBoundaryConditionModelList() {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionmodelGetModel$);

    return this.httpClient.get<MikeBoundaryConditionModel[]>('/api/MikeBoundaryConditionModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelGetModel$, e);
      })))
    );
  }

  PutMikeBoundaryConditionModel(mikeboundaryconditionmodel: MikeBoundaryConditionModel) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionmodelPutModel$);

    return this.httpClient.put<MikeBoundaryConditionModel>('/api/MikeBoundaryConditionModel', mikeboundaryconditionmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelPutModel$, x, HttpClientCommand.Put, mikeboundaryconditionmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelPutModel$, e);
      })))
    );
  }

  PostMikeBoundaryConditionModel(mikeboundaryconditionmodel: MikeBoundaryConditionModel) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionmodelPostModel$);

    return this.httpClient.post<MikeBoundaryConditionModel>('/api/MikeBoundaryConditionModel', mikeboundaryconditionmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelPostModel$, x, HttpClientCommand.Post, mikeboundaryconditionmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelPostModel$, e);
      })))
    );
  }

  DeleteMikeBoundaryConditionModel(mikeboundaryconditionmodel: MikeBoundaryConditionModel) {
    this.httpClientService.BeforeHttpClient(this.mikeboundaryconditionmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeBoundaryConditionModel/${ mikeboundaryconditionmodel.MikeBoundaryConditionModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelDeleteModel$, x, HttpClientCommand.Delete, mikeboundaryconditionmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeBoundaryConditionModel>(this.mikeboundaryconditionmodelListModel$, this.mikeboundaryconditionmodelDeleteModel$, e);
      })))
    );
  }
}
