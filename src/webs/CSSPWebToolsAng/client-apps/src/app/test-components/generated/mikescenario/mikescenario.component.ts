/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MikeScenarioService } from './mikescenario.service';
import { LoadLocalesMikeScenarioText } from './mikescenario.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { ScenarioStatusEnum_GetIDText, ScenarioStatusEnum_GetOrderedText } from '../../../enums/generated/ScenarioStatusEnum';
import { MikeScenario } from '../../../models/generated/MikeScenario.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-mikescenario',
  templateUrl: './mikescenario.component.html',
  styleUrls: ['./mikescenario.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MikeScenarioComponent implements OnInit, OnDestroy {
  sub: Subscription;
  scenarioStatusList: EnumIDAndText[];
  mikescenarioFormPut: FormGroup;
  mikescenarioFormPost: FormGroup;

  constructor(public mikescenarioService: MikeScenarioService, public router: Router, public fb: FormBuilder) { }

  GetMikeScenarioList() {
    this.sub = this.mikescenarioService.GetMikeScenarioList(this.router).subscribe();
  }

  PutMikeScenario(mikescenario: MikeScenario) {
    this.sub = this.mikescenarioService.PutMikeScenario(mikescenario, this.router).subscribe();
  }

  PostMikeScenario(mikescenario: MikeScenario) {
    this.sub = this.mikescenarioService.PostMikeScenario(mikescenario, this.router).subscribe();
  }

  DeleteMikeScenario(mikescenario: MikeScenario) {
    this.sub = this.mikescenarioService.DeleteMikeScenario(mikescenario, this.router).subscribe();
  }

  GetScenarioStatusEnumText(enumID: number) {
    return ScenarioStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMikeScenarioText(this.mikescenarioService);
    this.scenarioStatusList = ScenarioStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mikescenarioService.mikescenarioList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MikeScenarioID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mikescenarioService.mikescenarioList[0]?.MikeScenarioID)),
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioTVItemID: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.MikeScenarioTVItemID,
              disabled: false
            }, [ Validators.required ]],
          ParentMikeScenarioID: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ParentMikeScenarioID,
              disabled: false
            }, [ Validators.required ]],
          ScenarioStatus: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ScenarioStatus,
              disabled: false
            }, [ Validators.required ]],
          ErrorInfo: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ErrorInfo,
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioStartDateTime_Local: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.MikeScenarioStartDateTime_Local,
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioEndDateTime_Local: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.MikeScenarioEndDateTime_Local,
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioStartExecutionDateTime_Local: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.MikeScenarioStartExecutionDateTime_Local,
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioExecutionTime_min: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.MikeScenarioExecutionTime_min,
              disabled: false
            }, [ Validators.required ]],
          WindSpeed_km_h: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.WindSpeed_km_h,
              disabled: false
            }, [ Validators.required ]],
          WindDirection_deg: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.WindDirection_deg,
              disabled: false
            }, [ Validators.required ]],
          DecayFactor_per_day: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.DecayFactor_per_day,
              disabled: false
            }, [ Validators.required ]],
          DecayIsConstant: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.DecayIsConstant,
              disabled: false
            }, [ Validators.required ]],
          DecayFactorAmplitude: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.DecayFactorAmplitude,
              disabled: false
            }, [ Validators.required ]],
          ResultFrequency_min: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ResultFrequency_min,
              disabled: false
            }, [ Validators.required ]],
          AmbientTemperature_C: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.AmbientTemperature_C,
              disabled: false
            }, [ Validators.required ]],
          AmbientSalinity_PSU: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.AmbientSalinity_PSU,
              disabled: false
            }, [ Validators.required ]],
          GenerateDecouplingFiles: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.GenerateDecouplingFiles,
              disabled: false
            }, [ Validators.required ]],
          UseDecouplingFiles: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.UseDecouplingFiles,
              disabled: false
            }, [ Validators.required ]],
          UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.UseSalinityAndTemperatureInitialConditionFromTVFileTVItemID,
              disabled: false
            }, [ Validators.required ]],
          ForSimulatingMWQMRunTVItemID: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ForSimulatingMWQMRunTVItemID,
              disabled: false
            }, [ Validators.required ]],
          ManningNumber: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.ManningNumber,
              disabled: false
            }, [ Validators.required ]],
          NumberOfElements: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfElements,
              disabled: false
            }, [ Validators.required ]],
          NumberOfTimeSteps: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfTimeSteps,
              disabled: false
            }, [ Validators.required ]],
          NumberOfSigmaLayers: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfSigmaLayers,
              disabled: false
            }, [ Validators.required ]],
          NumberOfZLayers: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfZLayers,
              disabled: false
            }, [ Validators.required ]],
          NumberOfHydroOutputParameters: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfHydroOutputParameters,
              disabled: false
            }, [ Validators.required ]],
          NumberOfTransOutputParameters: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.NumberOfTransOutputParameters,
              disabled: false
            }, [ Validators.required ]],
          EstimatedHydroFileSize: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.EstimatedHydroFileSize,
              disabled: false
            }, [ Validators.required ]],
          EstimatedTransFileSize: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.EstimatedTransFileSize,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.mikescenarioService.mikescenarioList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mikescenarioFormPost = formGroup
      }
      else {
        this.mikescenarioFormPut = formGroup;
      }
    }
  }
}
