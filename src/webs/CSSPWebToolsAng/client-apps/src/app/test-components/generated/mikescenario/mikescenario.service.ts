/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeScenarioTextModel } from './mikescenario.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeScenarioText } from './mikescenario.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeScenario } from '../../../models/generated/MikeScenario.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeScenarioService {
  /* Variables */
  mikescenarioTextModel$: BehaviorSubject<MikeScenarioTextModel> = new BehaviorSubject<MikeScenarioTextModel>(<MikeScenarioTextModel>{});
  mikescenarioListModel$: BehaviorSubject<MikeScenario[]> = new BehaviorSubject<MikeScenario[]>(<MikeScenario[]>{});
  mikescenarioGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeScenarioText(this.mikescenarioTextModel$);
    this.mikescenarioTextModel$.next(<MikeScenarioTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeScenarioList() {
    this.httpClientService.BeforeHttpClient(this.mikescenarioGetModel$);

    return this.httpClient.get<MikeScenario[]>('/api/MikeScenario').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioGetModel$, e);
      })))
    );
  }

  PutMikeScenario(mikescenario: MikeScenario) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioPutModel$);

    return this.httpClient.put<MikeScenario>('/api/MikeScenario', mikescenario, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioPutModel$, x, HttpClientCommand.Put, mikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioPutModel$, e);
      })))
    );
  }

  PostMikeScenario(mikescenario: MikeScenario) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioPostModel$);

    return this.httpClient.post<MikeScenario>('/api/MikeScenario', mikescenario, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioPostModel$, x, HttpClientCommand.Post, mikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioPostModel$, e);
      })))
    );
  }

  DeleteMikeScenario(mikescenario: MikeScenario) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeScenario/${ mikescenario.MikeScenarioID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioDeleteModel$, x, HttpClientCommand.Delete, mikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenario>(this.mikescenarioListModel$, this.mikescenarioDeleteModel$, e);
      })))
    );
  }
}
