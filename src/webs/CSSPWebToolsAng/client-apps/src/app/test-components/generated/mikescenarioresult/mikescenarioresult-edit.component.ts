/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { MikeScenarioResultService } from './mikescenarioresult.service';
import { LoadLocalesMikeScenarioResultText } from './mikescenarioresult.locales';
import { Subscription } from 'rxjs';
import { MikeScenarioResult } from '../../../models/generated/MikeScenarioResult.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mikescenarioresult-edit',
  templateUrl: './mikescenarioresult-edit.component.html',
  styleUrls: ['./mikescenarioresult-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MikeScenarioResultEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mikescenarioresultFormEdit: FormGroup;
  @Input() mikescenarioresult: MikeScenarioResult = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public mikescenarioresultService: MikeScenarioResultService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.sub = this.mikescenarioresultService.PutMikeScenarioResult(mikescenarioresult).subscribe();
  }

  PostMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.sub = this.mikescenarioresultService.PostMikeScenarioResult(mikescenarioresult).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.mikescenarioresult) {
      let formGroup: FormGroup = this.fb.group(
        {
          MikeScenarioResultID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.mikescenarioresult.MikeScenarioResultID)),
              disabled: false
            }, [Validators.required]],
          MikeScenarioTVItemID: [
            {
              value: this.mikescenarioresult.MikeScenarioTVItemID,
              disabled: false
            }, [Validators.required]],
          MikeResultsJSON: [
            {
              value: this.mikescenarioresult.MikeResultsJSON,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.mikescenarioresult.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.mikescenarioresult.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.mikescenarioresultFormEdit = formGroup
    }
  }
}
