/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MikeScenarioResultService } from './mikescenarioresult.service';
import { LoadLocalesMikeScenarioResultText } from './mikescenarioresult.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { MikeScenarioResult } from '../../../models/generated/MikeScenarioResult.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-mikescenarioresult',
  templateUrl: './mikescenarioresult.component.html',
  styleUrls: ['./mikescenarioresult.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MikeScenarioResultComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mikescenarioresultFormPut: FormGroup;
  mikescenarioresultFormPost: FormGroup;

  constructor(public mikescenarioresultService: MikeScenarioResultService, public router: Router, public fb: FormBuilder) { }

  GetMikeScenarioResultList() {
    this.sub = this.mikescenarioresultService.GetMikeScenarioResultList(this.router).subscribe();
  }

  PutMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.sub = this.mikescenarioresultService.PutMikeScenarioResult(mikescenarioresult, this.router).subscribe();
  }

  PostMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.sub = this.mikescenarioresultService.PostMikeScenarioResult(mikescenarioresult, this.router).subscribe();
  }

  DeleteMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.sub = this.mikescenarioresultService.DeleteMikeScenarioResult(mikescenarioresult, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesMikeScenarioResultText(this.mikescenarioresultService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mikescenarioresultService.mikescenarioresultList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MikeScenarioResultID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mikescenarioresultService.mikescenarioresultList[0]?.MikeScenarioResultID)),
              disabled: false
            }, [ Validators.required ]],
          MikeScenarioTVItemID: [
            {
              value: this.mikescenarioresultService.mikescenarioresultList[0]?.MikeScenarioTVItemID,
              disabled: false
            }, [ Validators.required ]],
          MikeResultsJSON: [
            {
              value: this.mikescenarioresultService.mikescenarioresultList[0]?.MikeResultsJSON,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.mikescenarioresultService.mikescenarioresultList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.mikescenarioresultService.mikescenarioresultList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mikescenarioresultFormPost = formGroup
      }
      else {
        this.mikescenarioresultFormPut = formGroup;
      }
    }
  }
}
