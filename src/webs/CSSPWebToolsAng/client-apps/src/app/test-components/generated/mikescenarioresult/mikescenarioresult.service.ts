/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeScenarioResultTextModel } from './mikescenarioresult.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeScenarioResultText } from './mikescenarioresult.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeScenarioResult } from '../../../models/generated/MikeScenarioResult.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeScenarioResultService {
  /* Variables */
  mikescenarioresultTextModel$: BehaviorSubject<MikeScenarioResultTextModel> = new BehaviorSubject<MikeScenarioResultTextModel>(<MikeScenarioResultTextModel>{});
  mikescenarioresultListModel$: BehaviorSubject<MikeScenarioResult[]> = new BehaviorSubject<MikeScenarioResult[]>(<MikeScenarioResult[]>{});
  mikescenarioresultGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioresultPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioresultPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikescenarioresultDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeScenarioResultText(this.mikescenarioresultTextModel$);
    this.mikescenarioresultTextModel$.next(<MikeScenarioResultTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeScenarioResultList() {
    this.httpClientService.BeforeHttpClient(this.mikescenarioresultGetModel$);

    return this.httpClient.get<MikeScenarioResult[]>('/api/MikeScenarioResult').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultGetModel$, e);
      })))
    );
  }

  PutMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioresultPutModel$);

    return this.httpClient.put<MikeScenarioResult>('/api/MikeScenarioResult', mikescenarioresult, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultPutModel$, x, HttpClientCommand.Put, mikescenarioresult);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultPutModel$, e);
      })))
    );
  }

  PostMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioresultPostModel$);

    return this.httpClient.post<MikeScenarioResult>('/api/MikeScenarioResult', mikescenarioresult, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultPostModel$, x, HttpClientCommand.Post, mikescenarioresult);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultPostModel$, e);
      })))
    );
  }

  DeleteMikeScenarioResult(mikescenarioresult: MikeScenarioResult) {
    this.httpClientService.BeforeHttpClient(this.mikescenarioresultDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeScenarioResult/${ mikescenarioresult.MikeScenarioResultID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultDeleteModel$, x, HttpClientCommand.Delete, mikescenarioresult);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeScenarioResult>(this.mikescenarioresultListModel$, this.mikescenarioresultDeleteModel$, e);
      })))
    );
  }
}
