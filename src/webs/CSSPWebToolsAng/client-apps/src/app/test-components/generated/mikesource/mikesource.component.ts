/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MikeSourceService } from './mikesource.service';
import { LoadLocalesMikeSourceText } from './mikesource.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { MikeSource } from '../../../models/generated/MikeSource.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-mikesource',
  templateUrl: './mikesource.component.html',
  styleUrls: ['./mikesource.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MikeSourceComponent implements OnInit, OnDestroy {
  sub: Subscription;
  mikesourceFormPut: FormGroup;
  mikesourceFormPost: FormGroup;

  constructor(public mikesourceService: MikeSourceService, public router: Router, public fb: FormBuilder) { }

  GetMikeSourceList() {
    this.sub = this.mikesourceService.GetMikeSourceList(this.router).subscribe();
  }

  PutMikeSource(mikesource: MikeSource) {
    this.sub = this.mikesourceService.PutMikeSource(mikesource, this.router).subscribe();
  }

  PostMikeSource(mikesource: MikeSource) {
    this.sub = this.mikesourceService.PostMikeSource(mikesource, this.router).subscribe();
  }

  DeleteMikeSource(mikesource: MikeSource) {
    this.sub = this.mikesourceService.DeleteMikeSource(mikesource, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesMikeSourceText(this.mikesourceService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mikesourceService.mikesourceList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MikeSourceID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mikesourceService.mikesourceList[0]?.MikeSourceID)),
              disabled: false
            }, [ Validators.required ]],
          MikeSourceTVItemID: [
            {
              value: this.mikesourceService.mikesourceList[0]?.MikeSourceTVItemID,
              disabled: false
            }, [ Validators.required ]],
          IsContinuous: [
            {
              value: this.mikesourceService.mikesourceList[0]?.IsContinuous,
              disabled: false
            }, [ Validators.required ]],
          Include: [
            {
              value: this.mikesourceService.mikesourceList[0]?.Include,
              disabled: false
            }, [ Validators.required ]],
          IsRiver: [
            {
              value: this.mikesourceService.mikesourceList[0]?.IsRiver,
              disabled: false
            }, [ Validators.required ]],
          UseHydrometric: [
            {
              value: this.mikesourceService.mikesourceList[0]?.UseHydrometric,
              disabled: false
            }, [ Validators.required ]],
          HydrometricTVItemID: [
            {
              value: this.mikesourceService.mikesourceList[0]?.HydrometricTVItemID,
              disabled: false
            }, [ Validators.required ]],
          DrainageArea_km2: [
            {
              value: this.mikesourceService.mikesourceList[0]?.DrainageArea_km2,
              disabled: false
            }, [ Validators.required ]],
          Factor: [
            {
              value: this.mikesourceService.mikesourceList[0]?.Factor,
              disabled: false
            }, [ Validators.required ]],
          SourceNumberString: [
            {
              value: this.mikesourceService.mikesourceList[0]?.SourceNumberString,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.mikesourceService.mikesourceList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.mikesourceService.mikesourceList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mikesourceFormPost = formGroup
      }
      else {
        this.mikesourceFormPut = formGroup;
      }
    }
  }
}
