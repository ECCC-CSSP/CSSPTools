/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeSourceTextModel, MikeSourceModel } from './mikesource.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeSourceText } from './mikesource.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeSource } from 'src/app/models/generated/MikeSource.model';

@Injectable({
  providedIn: 'root'
})
export class MikeSourceService {
  mikesourceTextModel$: BehaviorSubject<MikeSourceTextModel> = new BehaviorSubject<MikeSourceTextModel>(<MikeSourceTextModel>{});
  mikesourceModel$: BehaviorSubject<MikeSourceModel> = new BehaviorSubject<MikeSourceModel>(<MikeSourceModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMikeSourceText(this);
    this.UpdateMikeSourceText(<MikeSourceTextModel>{ Title: "Something2 for text" });
  }

  UpdateMikeSourceText(mikesourceTextModel: MikeSourceTextModel) {
    this.mikesourceTextModel$.next(<MikeSourceTextModel>{ ...this.mikesourceTextModel$.getValue(), ...mikesourceTextModel });
  }

  UpdateMikeSourceModel(mikesourceModel: MikeSourceModel) {
    this.mikesourceModel$.next(<MikeSourceModel>{ ...this.mikesourceModel$.getValue(), ...mikesourceModel });
  }

  GetMikeSource(router: Router) {
    let oldURL = router.url;
    this.UpdateMikeSourceModel(<MikeSourceModel>{ Working: true, Error: null });

    return this.httpClient.get<MikeSource[]>('/api/MikeSource').pipe(
      map((x: any) => {
        console.debug(`MikeSource OK. Return: ${x}`);
        this.mikesourceModel$.getValue().MikeSourceList = <MikeSource[]>x;
        this.UpdateMikeSourceModel(this.mikesourceModel$.getValue());
        this.UpdateMikeSourceModel(<MikeSourceModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMikeSourceModel(<MikeSourceModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MikeSource ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
