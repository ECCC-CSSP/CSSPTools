/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeSourceModelTextModel } from './mikesourcemodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeSourceModelText } from './mikesourcemodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeSourceModel } from '../../../models/generated/MikeSourceModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeSourceModelService {
  /* Variables */
  mikesourcemodelTextModel$: BehaviorSubject<MikeSourceModelTextModel> = new BehaviorSubject<MikeSourceModelTextModel>(<MikeSourceModelTextModel>{});
  mikesourcemodelListModel$: BehaviorSubject<MikeSourceModel[]> = new BehaviorSubject<MikeSourceModel[]>(<MikeSourceModel[]>{});
  mikesourcemodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcemodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcemodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcemodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeSourceModelText(this.mikesourcemodelTextModel$);
    this.mikesourcemodelTextModel$.next(<MikeSourceModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeSourceModelList() {
    this.httpClientService.BeforeHttpClient(this.mikesourcemodelGetModel$);

    return this.httpClient.get<MikeSourceModel[]>('/api/MikeSourceModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelGetModel$, e);
      })))
    );
  }

  PutMikeSourceModel(mikesourcemodel: MikeSourceModel) {
    this.httpClientService.BeforeHttpClient(this.mikesourcemodelPutModel$);

    return this.httpClient.put<MikeSourceModel>('/api/MikeSourceModel', mikesourcemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelPutModel$, x, HttpClientCommand.Put, mikesourcemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelPutModel$, e);
      })))
    );
  }

  PostMikeSourceModel(mikesourcemodel: MikeSourceModel) {
    this.httpClientService.BeforeHttpClient(this.mikesourcemodelPostModel$);

    return this.httpClient.post<MikeSourceModel>('/api/MikeSourceModel', mikesourcemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelPostModel$, x, HttpClientCommand.Post, mikesourcemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelPostModel$, e);
      })))
    );
  }

  DeleteMikeSourceModel(mikesourcemodel: MikeSourceModel) {
    this.httpClientService.BeforeHttpClient(this.mikesourcemodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeSourceModel/${ mikesourcemodel.MikeSourceModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelDeleteModel$, x, HttpClientCommand.Delete, mikesourcemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceModel>(this.mikesourcemodelListModel$, this.mikesourcemodelDeleteModel$, e);
      })))
    );
  }
}
