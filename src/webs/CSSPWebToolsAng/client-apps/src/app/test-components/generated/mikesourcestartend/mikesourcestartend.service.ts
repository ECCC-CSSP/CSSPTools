/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeSourceStartEndTextModel } from './mikesourcestartend.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeSourceStartEndText } from './mikesourcestartend.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeSourceStartEnd } from '../../../models/generated/MikeSourceStartEnd.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MikeSourceStartEndService {
  /* Variables */
  mikesourcestartendTextModel$: BehaviorSubject<MikeSourceStartEndTextModel> = new BehaviorSubject<MikeSourceStartEndTextModel>(<MikeSourceStartEndTextModel>{});
  mikesourcestartendListModel$: BehaviorSubject<MikeSourceStartEnd[]> = new BehaviorSubject<MikeSourceStartEnd[]>(<MikeSourceStartEnd[]>{});
  mikesourcestartendGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMikeSourceStartEndText(this.mikesourcestartendTextModel$);
    this.mikesourcestartendTextModel$.next(<MikeSourceStartEndTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeSourceStartEndList() {
    this.httpClientService.BeforeHttpClient(this.mikesourcestartendGetModel$);

    return this.httpClient.get<MikeSourceStartEnd[]>('/api/MikeSourceStartEnd').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendGetModel$, e);
      })))
    );
  }

  PutMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd) {
    this.httpClientService.BeforeHttpClient(this.mikesourcestartendPutModel$);

    return this.httpClient.put<MikeSourceStartEnd>('/api/MikeSourceStartEnd', mikesourcestartend, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendPutModel$, x, HttpClientCommand.Put, mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendPutModel$, e);
      })))
    );
  }

  PostMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd) {
    this.httpClientService.BeforeHttpClient(this.mikesourcestartendPostModel$);

    return this.httpClient.post<MikeSourceStartEnd>('/api/MikeSourceStartEnd', mikesourcestartend, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendPostModel$, x, HttpClientCommand.Post, mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendPostModel$, e);
      })))
    );
  }

  DeleteMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd) {
    this.httpClientService.BeforeHttpClient(this.mikesourcestartendDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MikeSourceStartEnd/${ mikesourcestartend.MikeSourceStartEndID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendDeleteModel$, x, HttpClientCommand.Delete, mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MikeSourceStartEnd>(this.mikesourcestartendListModel$, this.mikesourcestartendDeleteModel$, e);
      })))
    );
  }
}
