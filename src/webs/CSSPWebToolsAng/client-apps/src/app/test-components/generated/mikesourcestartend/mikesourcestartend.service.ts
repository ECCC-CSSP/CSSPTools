/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeSourceStartEndTextModel } from './mikesourcestartend.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeSourceStartEndText } from './mikesourcestartend.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeSourceStartEnd } from '../../../models/generated/MikeSourceStartEnd.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class MikeSourceStartEndService {
  /* Variables */
  mikesourcestartendTextModel$: BehaviorSubject<MikeSourceStartEndTextModel> = new BehaviorSubject<MikeSourceStartEndTextModel>(<MikeSourceStartEndTextModel>{});
  mikesourcestartendListModel$: BehaviorSubject<MikeSourceStartEnd[]> = new BehaviorSubject<MikeSourceStartEnd[]>(<MikeSourceStartEnd[]>{});
  mikesourcestartendGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mikesourcestartendList: MikeSourceStartEnd[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesMikeSourceStartEndText(this);
    this.mikesourcestartendTextModel$.next(<MikeSourceStartEndTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMikeSourceStartEndList(router: Router) {
    this.BeforeHttpClient(this.mikesourcestartendGetModel$, router);

    return this.httpClient.get<MikeSourceStartEnd[]>('/api/MikeSourceStartEnd').pipe(
      map((x: any) => {
        this.DoSuccess(this.mikesourcestartendGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mikesourcestartendGetModel$, e, 'Get');
      })))
    );
  }

  PutMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd, router: Router) {
    this.BeforeHttpClient(this.mikesourcestartendPutModel$, router);

    return this.httpClient.put<MikeSourceStartEnd>('/api/MikeSourceStartEnd', mikesourcestartend, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.mikesourcestartendPutModel$, x, 'Put', mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mikesourcestartendPutModel$, e, 'Put');
      })))
    );
  }

  PostMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd, router: Router) {
    this.BeforeHttpClient(this.mikesourcestartendPostModel$, router);

    return this.httpClient.post<MikeSourceStartEnd>('/api/MikeSourceStartEnd', mikesourcestartend, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.mikesourcestartendPostModel$, x, 'Post', mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mikesourcestartendPostModel$, e, 'Post');
      })))
    );
  }

  DeleteMikeSourceStartEnd(mikesourcestartend: MikeSourceStartEnd, router: Router) {
    this.BeforeHttpClient(this.mikesourcestartendDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/MikeSourceStartEnd/${ mikesourcestartend.MikeSourceStartEndID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.mikesourcestartendDeleteModel$, x, 'Delete', mikesourcestartend);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mikesourcestartendDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.mikesourcestartendListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.mikesourcestartendList = [];
    console.debug(`MikeSourceStartEnd ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, mikesourcestartend?: MikeSourceStartEnd) {
    console.debug(`MikeSourceStartEnd ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.mikesourcestartendListModel$.next(<MikeSourceStartEnd[]>x);
    }
    if (command === 'Put') {
      this.mikesourcestartendListModel$.getValue()[0] = <MikeSourceStartEnd>x;
    }
    if (command === 'Post') {
      this.mikesourcestartendListModel$.getValue().push(<MikeSourceStartEnd>x);
    }
    if (command === 'Delete') {
      const index = this.mikesourcestartendListModel$.getValue().indexOf(mikesourcestartend);
      this.mikesourcestartendListModel$.getValue().splice(index, 1);
    }

    this.mikesourcestartendListModel$.next(this.mikesourcestartendListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.mikesourcestartendList = this.mikesourcestartendListModel$.getValue();
    this.DoReload();
  }
}
