/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMLookupMPNTextModel } from './mwqmlookupmpn.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMLookupMPNText } from './mwqmlookupmpn.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMLookupMPN } from '../../../models/generated/MWQMLookupMPN.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMLookupMPNService {
  /* Variables */
  mwqmlookupmpnTextModel$: BehaviorSubject<MWQMLookupMPNTextModel> = new BehaviorSubject<MWQMLookupMPNTextModel>(<MWQMLookupMPNTextModel>{});
  mwqmlookupmpnListModel$: BehaviorSubject<MWQMLookupMPN[]> = new BehaviorSubject<MWQMLookupMPN[]>(<MWQMLookupMPN[]>{});
  mwqmlookupmpnGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmlookupmpnPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmlookupmpnPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmlookupmpnDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMLookupMPNText(this.mwqmlookupmpnTextModel$);
    this.mwqmlookupmpnTextModel$.next(<MWQMLookupMPNTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMLookupMPNList() {
    this.httpClientService.BeforeHttpClient(this.mwqmlookupmpnGetModel$);

    return this.httpClient.get<MWQMLookupMPN[]>('/api/MWQMLookupMPN').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnGetModel$, e);
      })))
    );
  }

  PutMWQMLookupMPN(mwqmlookupmpn: MWQMLookupMPN) {
    this.httpClientService.BeforeHttpClient(this.mwqmlookupmpnPutModel$);

    return this.httpClient.put<MWQMLookupMPN>('/api/MWQMLookupMPN', mwqmlookupmpn, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnPutModel$, x, HttpClientCommand.Put, mwqmlookupmpn);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnPutModel$, e);
      })))
    );
  }

  PostMWQMLookupMPN(mwqmlookupmpn: MWQMLookupMPN) {
    this.httpClientService.BeforeHttpClient(this.mwqmlookupmpnPostModel$);

    return this.httpClient.post<MWQMLookupMPN>('/api/MWQMLookupMPN', mwqmlookupmpn, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnPostModel$, x, HttpClientCommand.Post, mwqmlookupmpn);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnPostModel$, e);
      })))
    );
  }

  DeleteMWQMLookupMPN(mwqmlookupmpn: MWQMLookupMPN) {
    this.httpClientService.BeforeHttpClient(this.mwqmlookupmpnDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMLookupMPN/${ mwqmlookupmpn.MWQMLookupMPNID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnDeleteModel$, x, HttpClientCommand.Delete, mwqmlookupmpn);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMLookupMPN>(this.mwqmlookupmpnListModel$, this.mwqmlookupmpnDeleteModel$, e);
      })))
    );
  }
}
