/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MWQMRunService } from './mwqmrun.service';
import { LoadLocalesMWQMRunText } from './mwqmrun.locales';
import { Subscription } from 'rxjs';
import { SampleTypeEnum_GetIDText } from '../../../enums/generated/SampleTypeEnum';
import { BeaufortScaleEnum_GetIDText } from '../../../enums/generated/BeaufortScaleEnum';
import { AnalyzeMethodEnum_GetIDText } from '../../../enums/generated/AnalyzeMethodEnum';
import { SampleMatrixEnum_GetIDText } from '../../../enums/generated/SampleMatrixEnum';
import { LaboratoryEnum_GetIDText } from '../../../enums/generated/LaboratoryEnum';
import { SampleStatusEnum_GetIDText } from '../../../enums/generated/SampleStatusEnum';
import { TideTextEnum_GetIDText } from '../../../enums/generated/TideTextEnum';
import { MWQMRun } from '../../../models/generated/MWQMRun.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mwqmrun',
  templateUrl: './mwqmrun.component.html',
  styleUrls: ['./mwqmrun.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MWQMRunComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public mwqmrunService: MWQMRunService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(mwqmrun: MWQMRun) {
    if (this.IDToShow === mwqmrun.MWQMRunID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(mwqmrun: MWQMRun) {
    if (this.IDToShow === mwqmrun.MWQMRunID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(mwqmrun: MWQMRun) {
    if (this.IDToShow === mwqmrun.MWQMRunID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = mwqmrun.MWQMRunID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(mwqmrun: MWQMRun) {
    if (this.IDToShow === mwqmrun.MWQMRunID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = mwqmrun.MWQMRunID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetMWQMRunList() {
    this.sub = this.mwqmrunService.GetMWQMRunList().subscribe();
  }

  DeleteMWQMRun(mwqmrun: MWQMRun) {
    this.sub = this.mwqmrunService.DeleteMWQMRun(mwqmrun).subscribe();
  }

  GetSampleTypeEnumText(enumID: number) {
    return SampleTypeEnum_GetIDText(enumID)
  }

  GetBeaufortScaleEnumText(enumID: number) {
    return BeaufortScaleEnum_GetIDText(enumID)
  }

  GetAnalyzeMethodEnumText(enumID: number) {
    return AnalyzeMethodEnum_GetIDText(enumID)
  }

  GetSampleMatrixEnumText(enumID: number) {
    return SampleMatrixEnum_GetIDText(enumID)
  }

  GetLaboratoryEnumText(enumID: number) {
    return LaboratoryEnum_GetIDText(enumID)
  }

  GetSampleStatusEnumText(enumID: number) {
    return SampleStatusEnum_GetIDText(enumID)
  }

  GetTideTextEnumText(enumID: number) {
    return TideTextEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMWQMRunText(this.mwqmrunService.mwqmrunTextModel$);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }
}
