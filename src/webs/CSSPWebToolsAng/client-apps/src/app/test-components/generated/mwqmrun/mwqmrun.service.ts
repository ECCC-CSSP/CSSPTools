/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMRunTextModel } from './mwqmrun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMRunText } from './mwqmrun.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMRun } from '../../../models/generated/MWQMRun.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMRunService {
  /* Variables */
  mwqmrunTextModel$: BehaviorSubject<MWQMRunTextModel> = new BehaviorSubject<MWQMRunTextModel>(<MWQMRunTextModel>{});
  mwqmrunListModel$: BehaviorSubject<MWQMRun[]> = new BehaviorSubject<MWQMRun[]>(<MWQMRun[]>{});
  mwqmrunGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMRunText(this.mwqmrunTextModel$);
    this.mwqmrunTextModel$.next(<MWQMRunTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMRunList() {
    this.httpClientService.BeforeHttpClient(this.mwqmrunGetModel$);

    return this.httpClient.get<MWQMRun[]>('/api/MWQMRun').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunGetModel$, e);
      })))
    );
  }

  PutMWQMRun(mwqmrun: MWQMRun) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunPutModel$);

    return this.httpClient.put<MWQMRun>('/api/MWQMRun', mwqmrun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunPutModel$, x, HttpClientCommand.Put, mwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunPutModel$, e);
      })))
    );
  }

  PostMWQMRun(mwqmrun: MWQMRun) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunPostModel$);

    return this.httpClient.post<MWQMRun>('/api/MWQMRun', mwqmrun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunPostModel$, x, HttpClientCommand.Post, mwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunPostModel$, e);
      })))
    );
  }

  DeleteMWQMRun(mwqmrun: MWQMRun) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMRun/${ mwqmrun.MWQMRunID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunDeleteModel$, x, HttpClientCommand.Delete, mwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRun>(this.mwqmrunListModel$, this.mwqmrunDeleteModel$, e);
      })))
    );
  }
}
