/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MWQMRunLanguageService } from './mwqmrunlanguage.service';
import { LoadLocalesMWQMRunLanguageText } from './mwqmrunlanguage.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetIDText, TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { MWQMRunLanguage } from '../../../models/generated/MWQMRunLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from 'src/app/models/enumidandtext.model';

@Component({
  selector: 'app-mwqmrunlanguage',
  templateUrl: './mwqmrunlanguage.component.html',
  styleUrls: ['./mwqmrunlanguage.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MWQMRunLanguageComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusRunCommentList: EnumIDAndText[];
  mwqmrunlanguageFormPut: FormGroup;
  mwqmrunlanguageFormPost: FormGroup;

  constructor(public mwqmrunlanguageService: MWQMRunLanguageService, public router: Router, public fb: FormBuilder) { }

  GetMWQMRunLanguageList() {
    this.sub = this.mwqmrunlanguageService.GetMWQMRunLanguageList(this.router).subscribe();
  }

  PutMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.sub = this.mwqmrunlanguageService.PutMWQMRunLanguage(mwqmrunlanguage, this.router).subscribe();
  }

  PostMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.sub = this.mwqmrunlanguageService.PostMWQMRunLanguage(mwqmrunlanguage, this.router).subscribe();
  }

  DeleteMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.sub = this.mwqmrunlanguageService.DeleteMWQMRunLanguage(mwqmrunlanguage, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetTranslationStatusEnumText(enumID: number) {
    return TranslationStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMWQMRunLanguageText(this.mwqmrunlanguageService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusRunCommentList = TranslationStatusRunCommentEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mwqmrunlanguageService.mwqmrunlanguageList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MWQMRunLanguageID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.MWQMRunLanguageID ?? '')),
              disabled: false
            }, Validators.required],
          MWQMRunID: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.MWQMRunID ?? '',
              disabled: false
            }, Validators.required],
          Language: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.Language ?? '',
              disabled: false
            }, Validators.required],
          RunComment: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.RunComment ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusRunComment: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.TranslationStatusRunComment ?? '',
              disabled: false
            }, Validators.required],
          RunWeatherComment: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.RunWeatherComment ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusRunWeatherComment: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.TranslationStatusRunWeatherComment ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.mwqmrunlanguageService.mwqmrunlanguageList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mwqmrunlanguageFormPost = formGroup
      }
      else {
        this.mwqmrunlanguageFormPut = formGroup;
      }
    }
  }
}
