/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMRunLanguageTextModel } from './mwqmrunlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMRunLanguageText } from './mwqmrunlanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMRunLanguage } from '../../../models/generated/MWQMRunLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class MWQMRunLanguageService {
  /* Variables */
  mwqmrunlanguageTextModel$: BehaviorSubject<MWQMRunLanguageTextModel> = new BehaviorSubject<MWQMRunLanguageTextModel>(<MWQMRunLanguageTextModel>{});
  mwqmrunlanguageListModel$: BehaviorSubject<MWQMRunLanguage[]> = new BehaviorSubject<MWQMRunLanguage[]>(<MWQMRunLanguage[]>{});
  mwqmrunlanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguageList: MWQMRunLanguage[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesMWQMRunLanguageText(this);
    this.mwqmrunlanguageTextModel$.next(<MWQMRunLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMRunLanguageList(router: Router) {
    this.BeforeHttpClient(this.mwqmrunlanguageGetModel$, router);

    return this.httpClient.get<MWQMRunLanguage[]>('/api/MWQMRunLanguage').pipe(
      map((x: any) => {
        this.DoSuccess(this.mwqmrunlanguageGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mwqmrunlanguageGetModel$, e, 'Get');
      })))
    );
  }

  PutMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage, router: Router) {
    this.BeforeHttpClient(this.mwqmrunlanguagePutModel$, router);

    return this.httpClient.put<MWQMRunLanguage>('/api/MWQMRunLanguage', mwqmrunlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.mwqmrunlanguagePutModel$, x, 'Put', mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mwqmrunlanguagePutModel$, e, 'Put');
      })))
    );
  }

  PostMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage, router: Router) {
    this.BeforeHttpClient(this.mwqmrunlanguagePostModel$, router);

    return this.httpClient.post<MWQMRunLanguage>('/api/MWQMRunLanguage', mwqmrunlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.mwqmrunlanguagePostModel$, x, 'Post', mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mwqmrunlanguagePostModel$, e, 'Post');
      })))
    );
  }

  DeleteMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage, router: Router) {
    this.BeforeHttpClient(this.mwqmrunlanguageDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/MWQMRunLanguage/${ mwqmrunlanguage.MWQMRunLanguageID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.mwqmrunlanguageDeleteModel$, x, 'Delete', mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.mwqmrunlanguageDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.mwqmrunlanguageListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.mwqmrunlanguageList = [];
    console.debug(`MWQMRunLanguage ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, mwqmrunlanguage?: MWQMRunLanguage) {
    console.debug(`MWQMRunLanguage ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.mwqmrunlanguageListModel$.next(<MWQMRunLanguage[]>x);
    }
    if (command === 'Put') {
      this.mwqmrunlanguageListModel$.getValue()[0] = <MWQMRunLanguage>x;
    }
    if (command === 'Post') {
      this.mwqmrunlanguageListModel$.getValue().push(<MWQMRunLanguage>x);
    }
    if (command === 'Delete') {
      const index = this.mwqmrunlanguageListModel$.getValue().indexOf(mwqmrunlanguage);
      this.mwqmrunlanguageListModel$.getValue().splice(index, 1);
    }

    this.mwqmrunlanguageListModel$.next(this.mwqmrunlanguageListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.mwqmrunlanguageList = this.mwqmrunlanguageListModel$.getValue();
    this.DoReload();
  }
}
