/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMRunLanguageTextModel } from './mwqmrunlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMRunLanguageText } from './mwqmrunlanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMRunLanguage } from '../../../models/generated/MWQMRunLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMRunLanguageService {
  /* Variables */
  mwqmrunlanguageTextModel$: BehaviorSubject<MWQMRunLanguageTextModel> = new BehaviorSubject<MWQMRunLanguageTextModel>(<MWQMRunLanguageTextModel>{});
  mwqmrunlanguageListModel$: BehaviorSubject<MWQMRunLanguage[]> = new BehaviorSubject<MWQMRunLanguage[]>(<MWQMRunLanguage[]>{});
  mwqmrunlanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunlanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMRunLanguageText(this.mwqmrunlanguageTextModel$);
    this.mwqmrunlanguageTextModel$.next(<MWQMRunLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMRunLanguageList() {
    this.httpClientService.BeforeHttpClient(this.mwqmrunlanguageGetModel$);

    return this.httpClient.get<MWQMRunLanguage[]>('/api/MWQMRunLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguageGetModel$, e);
      })))
    );
  }

  PutMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunlanguagePutModel$);

    return this.httpClient.put<MWQMRunLanguage>('/api/MWQMRunLanguage', mwqmrunlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguagePutModel$, x, HttpClientCommand.Put, mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguagePutModel$, e);
      })))
    );
  }

  PostMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunlanguagePostModel$);

    return this.httpClient.post<MWQMRunLanguage>('/api/MWQMRunLanguage', mwqmrunlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguagePostModel$, x, HttpClientCommand.Post, mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguagePostModel$, e);
      })))
    );
  }

  DeleteMWQMRunLanguage(mwqmrunlanguage: MWQMRunLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunlanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMRunLanguage/${ mwqmrunlanguage.MWQMRunLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguageDeleteModel$, x, HttpClientCommand.Delete, mwqmrunlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunLanguage>(this.mwqmrunlanguageListModel$, this.mwqmrunlanguageDeleteModel$, e);
      })))
    );
  }
}
