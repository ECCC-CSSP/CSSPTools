/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMRunModelTextModel } from './mwqmrunmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMRunModelText } from './mwqmrunmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMRunModel } from '../../../models/generated/MWQMRunModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMRunModelService {
  /* Variables */
  mwqmrunmodelTextModel$: BehaviorSubject<MWQMRunModelTextModel> = new BehaviorSubject<MWQMRunModelTextModel>(<MWQMRunModelTextModel>{});
  mwqmrunmodelListModel$: BehaviorSubject<MWQMRunModel[]> = new BehaviorSubject<MWQMRunModel[]>(<MWQMRunModel[]>{});
  mwqmrunmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmrunmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMRunModelText(this.mwqmrunmodelTextModel$);
    this.mwqmrunmodelTextModel$.next(<MWQMRunModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMRunModelList() {
    this.httpClientService.BeforeHttpClient(this.mwqmrunmodelGetModel$);

    return this.httpClient.get<MWQMRunModel[]>('/api/MWQMRunModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelGetModel$, e);
      })))
    );
  }

  PutMWQMRunModel(mwqmrunmodel: MWQMRunModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunmodelPutModel$);

    return this.httpClient.put<MWQMRunModel>('/api/MWQMRunModel', mwqmrunmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelPutModel$, x, HttpClientCommand.Put, mwqmrunmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelPutModel$, e);
      })))
    );
  }

  PostMWQMRunModel(mwqmrunmodel: MWQMRunModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunmodelPostModel$);

    return this.httpClient.post<MWQMRunModel>('/api/MWQMRunModel', mwqmrunmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelPostModel$, x, HttpClientCommand.Post, mwqmrunmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelPostModel$, e);
      })))
    );
  }

  DeleteMWQMRunModel(mwqmrunmodel: MWQMRunModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmrunmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMRunModel/${ mwqmrunmodel.MWQMRunModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelDeleteModel$, x, HttpClientCommand.Delete, mwqmrunmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMRunModel>(this.mwqmrunmodelListModel$, this.mwqmrunmodelDeleteModel$, e);
      })))
    );
  }
}
