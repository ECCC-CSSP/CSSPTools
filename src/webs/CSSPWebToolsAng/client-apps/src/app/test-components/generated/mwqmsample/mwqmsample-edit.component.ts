/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { MWQMSampleService } from './mwqmsample.service';
import { LoadLocalesMWQMSampleText } from './mwqmsample.locales';
import { Subscription } from 'rxjs';
import { SampleTypeEnum_GetOrderedText } from '../../../enums/generated/SampleTypeEnum';
import { MWQMSample } from '../../../models/generated/MWQMSample.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-mwqmsample-edit',
  templateUrl: './mwqmsample-edit.component.html',
  styleUrls: ['./mwqmsample-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MWQMSampleEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  sampleType_oldList: EnumIDAndText[];
  mwqmsampleFormEdit: FormGroup;
  @Input() mwqmsample: MWQMSample = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public mwqmsampleService: MWQMSampleService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutMWQMSample(mwqmsample: MWQMSample) {
    this.sub = this.mwqmsampleService.PutMWQMSample(mwqmsample).subscribe();
  }

  PostMWQMSample(mwqmsample: MWQMSample) {
    this.sub = this.mwqmsampleService.PostMWQMSample(mwqmsample).subscribe();
  }

  ngOnInit(): void {
    this.sampleType_oldList = SampleTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.mwqmsample) {
      let formGroup: FormGroup = this.fb.group(
        {
          MWQMSampleID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.mwqmsample.MWQMSampleID)),
              disabled: false
            }, [Validators.required]],
          MWQMSiteTVItemID: [
            {
              value: this.mwqmsample.MWQMSiteTVItemID,
              disabled: false
            }, [Validators.required]],
          MWQMRunTVItemID: [
            {
              value: this.mwqmsample.MWQMRunTVItemID,
              disabled: false
            }, [Validators.required]],
          SampleDateTime_Local: [
            {
              value: this.mwqmsample.SampleDateTime_Local,
              disabled: false
            }, [Validators.required]],
          TimeText: [
            {
              value: this.mwqmsample.TimeText,
              disabled: false
            }, [Validators.maxLength(6)]],
          Depth_m: [
            {
              value: this.mwqmsample.Depth_m,
              disabled: false
            }, [Validators.min(0), Validators.max(1000)]],
          FecCol_MPN_100ml: [
            {
              value: this.mwqmsample.FecCol_MPN_100ml,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(10000000)]],
          Salinity_PPT: [
            {
              value: this.mwqmsample.Salinity_PPT,
              disabled: false
            }, [Validators.min(0), Validators.max(40)]],
          WaterTemp_C: [
            {
              value: this.mwqmsample.WaterTemp_C,
              disabled: false
            }, [Validators.min(-10), Validators.max(40)]],
          PH: [
            {
              value: this.mwqmsample.PH,
              disabled: false
            }, [Validators.min(0), Validators.max(14)]],
          SampleTypesText: [
            {
              value: this.mwqmsample.SampleTypesText,
              disabled: false
            }, [Validators.required, Validators.maxLength(50)]],
          SampleType_old: [
            {
              value: this.mwqmsample.SampleType_old,
              disabled: false
            }],
          Tube_10: [
            {
              value: this.mwqmsample.Tube_10,
              disabled: false
            }, [Validators.min(0), Validators.max(5)]],
          Tube_1_0: [
            {
              value: this.mwqmsample.Tube_1_0,
              disabled: false
            }, [Validators.min(0), Validators.max(5)]],
          Tube_0_1: [
            {
              value: this.mwqmsample.Tube_0_1,
              disabled: false
            }, [Validators.min(0), Validators.max(5)]],
          ProcessedBy: [
            {
              value: this.mwqmsample.ProcessedBy,
              disabled: false
            }, [Validators.maxLength(10)]],
          UseForOpenData: [
            {
              value: this.mwqmsample.UseForOpenData,
              disabled: false
            }, [Validators.required]],
          LastUpdateDate_UTC: [
            {
              value: this.mwqmsample.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.mwqmsample.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.mwqmsampleFormEdit = formGroup
    }
  }
}
