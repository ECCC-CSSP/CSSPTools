/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MWQMSampleService } from './mwqmsample.service';
import { LoadLocalesMWQMSampleText } from './mwqmsample.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { SampleTypeEnum_GetIDText, SampleTypeEnum_GetOrderedText } from '../../../enums/generated/SampleTypeEnum';
import { MWQMSample } from '../../../models/generated/MWQMSample.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-mwqmsample',
  templateUrl: './mwqmsample.component.html',
  styleUrls: ['./mwqmsample.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MWQMSampleComponent implements OnInit, OnDestroy {
  sub: Subscription;
  sampleType_oldList: EnumIDAndText[];
  mwqmsampleFormPut: FormGroup;
  mwqmsampleFormPost: FormGroup;

  constructor(public mwqmsampleService: MWQMSampleService, public router: Router, public fb: FormBuilder) { }

  GetMWQMSampleList() {
    this.sub = this.mwqmsampleService.GetMWQMSampleList(this.router).subscribe();
  }

  PutMWQMSample(mwqmsample: MWQMSample) {
    this.sub = this.mwqmsampleService.PutMWQMSample(mwqmsample, this.router).subscribe();
  }

  PostMWQMSample(mwqmsample: MWQMSample) {
    this.sub = this.mwqmsampleService.PostMWQMSample(mwqmsample, this.router).subscribe();
  }

  DeleteMWQMSample(mwqmsample: MWQMSample) {
    this.sub = this.mwqmsampleService.DeleteMWQMSample(mwqmsample, this.router).subscribe();
  }

  GetSampleTypeEnumText(enumID: number) {
    return SampleTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMWQMSampleText(this.mwqmsampleService);
    this.sampleType_oldList = SampleTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mwqmsampleService.mwqmsampleList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MWQMSampleID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mwqmsampleService.mwqmsampleList[0]?.MWQMSampleID)),
              disabled: false
            }],
          MWQMSiteTVItemID: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.MWQMSiteTVItemID,
              disabled: false
            }],
          MWQMRunTVItemID: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.MWQMRunTVItemID,
              disabled: false
            }],
          SampleDateTime_Local: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.SampleDateTime_Local,
              disabled: false
            }],
          TimeText: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.TimeText,
              disabled: false
            }],
          Depth_m: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.Depth_m,
              disabled: false
            }],
          FecCol_MPN_100ml: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.FecCol_MPN_100ml,
              disabled: false
            }],
          Salinity_PPT: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.Salinity_PPT,
              disabled: false
            }],
          WaterTemp_C: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.WaterTemp_C,
              disabled: false
            }],
          PH: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.PH,
              disabled: false
            }],
          SampleTypesText: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.SampleTypesText,
              disabled: false
            }],
          SampleType_old: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.SampleType_old,
              disabled: false
            }],
          Tube_10: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.Tube_10,
              disabled: false
            }],
          Tube_1_0: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.Tube_1_0,
              disabled: false
            }],
          Tube_0_1: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.Tube_0_1,
              disabled: false
            }],
          ProcessedBy: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.ProcessedBy,
              disabled: false
            }],
          UseForOpenData: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.UseForOpenData,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.mwqmsampleService.mwqmsampleList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mwqmsampleFormPost = formGroup
      }
      else {
        this.mwqmsampleFormPut = formGroup;
      }
    }
  }
}
