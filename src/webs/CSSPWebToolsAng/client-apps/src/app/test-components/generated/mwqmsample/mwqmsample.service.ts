/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSampleTextModel } from './mwqmsample.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSampleText } from './mwqmsample.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSample } from '../../../models/generated/MWQMSample.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSampleService {
  /* Variables */
  mwqmsampleTextModel$: BehaviorSubject<MWQMSampleTextModel> = new BehaviorSubject<MWQMSampleTextModel>(<MWQMSampleTextModel>{});
  mwqmsampleListModel$: BehaviorSubject<MWQMSample[]> = new BehaviorSubject<MWQMSample[]>(<MWQMSample[]>{});
  mwqmsampleGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsamplePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsamplePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsampleDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSampleText(this.mwqmsampleTextModel$);
    this.mwqmsampleTextModel$.next(<MWQMSampleTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSampleList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsampleGetModel$);

    return this.httpClient.get<MWQMSample[]>('/api/MWQMSample').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsampleGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsampleGetModel$, e);
      })))
    );
  }

  PutMWQMSample(mwqmsample: MWQMSample) {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplePutModel$);

    return this.httpClient.put<MWQMSample>('/api/MWQMSample', mwqmsample, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsamplePutModel$, x, HttpClientCommand.Put, mwqmsample);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsamplePutModel$, e);
      })))
    );
  }

  PostMWQMSample(mwqmsample: MWQMSample) {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplePostModel$);

    return this.httpClient.post<MWQMSample>('/api/MWQMSample', mwqmsample, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsamplePostModel$, x, HttpClientCommand.Post, mwqmsample);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsamplePostModel$, e);
      })))
    );
  }

  DeleteMWQMSample(mwqmsample: MWQMSample) {
    this.httpClientService.BeforeHttpClient(this.mwqmsampleDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSample/${ mwqmsample.MWQMSampleID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsampleDeleteModel$, x, HttpClientCommand.Delete, mwqmsample);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSample>(this.mwqmsampleListModel$, this.mwqmsampleDeleteModel$, e);
      })))
    );
  }
}
