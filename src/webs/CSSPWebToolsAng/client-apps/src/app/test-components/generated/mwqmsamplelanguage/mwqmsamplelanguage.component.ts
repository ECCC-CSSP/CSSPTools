/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { MWQMSampleLanguageService } from './mwqmsamplelanguage.service';
import { LoadLocalesMWQMSampleLanguageText } from './mwqmsamplelanguage.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetIDText, TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { MWQMSampleLanguage } from '../../../models/generated/MWQMSampleLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-mwqmsamplelanguage',
  templateUrl: './mwqmsamplelanguage.component.html',
  styleUrls: ['./mwqmsamplelanguage.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MWQMSampleLanguageComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusList: EnumIDAndText[];
  mwqmsamplelanguageFormPut: FormGroup;
  mwqmsamplelanguageFormPost: FormGroup;

  constructor(public mwqmsamplelanguageService: MWQMSampleLanguageService, public router: Router, public fb: FormBuilder) { }

  GetMWQMSampleLanguageList() {
    this.sub = this.mwqmsamplelanguageService.GetMWQMSampleLanguageList(this.router).subscribe();
  }

  PutMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.sub = this.mwqmsamplelanguageService.PutMWQMSampleLanguage(mwqmsamplelanguage, this.router).subscribe();
  }

  PostMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.sub = this.mwqmsamplelanguageService.PostMWQMSampleLanguage(mwqmsamplelanguage, this.router).subscribe();
  }

  DeleteMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.sub = this.mwqmsamplelanguageService.DeleteMWQMSampleLanguage(mwqmsamplelanguage, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetTranslationStatusEnumText(enumID: number) {
    return TranslationStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesMWQMSampleLanguageText(this.mwqmsamplelanguageService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusList = TranslationStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.mwqmsamplelanguageService.mwqmsamplelanguageList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          MWQMSampleLanguageID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.MWQMSampleLanguageID)),
              disabled: false
            }],
          MWQMSampleID: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.MWQMSampleID,
              disabled: false
            }],
          Language: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.Language,
              disabled: false
            }],
          MWQMSampleNote: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.MWQMSampleNote,
              disabled: false
            }],
          TranslationStatus: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.TranslationStatus,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.mwqmsamplelanguageService.mwqmsamplelanguageList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.mwqmsamplelanguageFormPost = formGroup
      }
      else {
        this.mwqmsamplelanguageFormPut = formGroup;
      }
    }
  }
}
