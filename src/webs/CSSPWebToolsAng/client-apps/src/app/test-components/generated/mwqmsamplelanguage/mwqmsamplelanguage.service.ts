/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSampleLanguageTextModel } from './mwqmsamplelanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSampleLanguageText } from './mwqmsamplelanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSampleLanguage } from '../../../models/generated/MWQMSampleLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSampleLanguageService {
  /* Variables */
  mwqmsamplelanguageTextModel$: BehaviorSubject<MWQMSampleLanguageTextModel> = new BehaviorSubject<MWQMSampleLanguageTextModel>(<MWQMSampleLanguageTextModel>{});
  mwqmsamplelanguageListModel$: BehaviorSubject<MWQMSampleLanguage[]> = new BehaviorSubject<MWQMSampleLanguage[]>(<MWQMSampleLanguage[]>{});
  mwqmsamplelanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsamplelanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsamplelanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsamplelanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSampleLanguageText(this.mwqmsamplelanguageTextModel$);
    this.mwqmsamplelanguageTextModel$.next(<MWQMSampleLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSampleLanguageList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplelanguageGetModel$);

    return this.httpClient.get<MWQMSampleLanguage[]>('/api/MWQMSampleLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguageGetModel$, e);
      })))
    );
  }

  PutMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplelanguagePutModel$);

    return this.httpClient.put<MWQMSampleLanguage>('/api/MWQMSampleLanguage', mwqmsamplelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguagePutModel$, x, HttpClientCommand.Put, mwqmsamplelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguagePutModel$, e);
      })))
    );
  }

  PostMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplelanguagePostModel$);

    return this.httpClient.post<MWQMSampleLanguage>('/api/MWQMSampleLanguage', mwqmsamplelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguagePostModel$, x, HttpClientCommand.Post, mwqmsamplelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguagePostModel$, e);
      })))
    );
  }

  DeleteMWQMSampleLanguage(mwqmsamplelanguage: MWQMSampleLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsamplelanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSampleLanguage/${ mwqmsamplelanguage.MWQMSampleLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguageDeleteModel$, x, HttpClientCommand.Delete, mwqmsamplelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSampleLanguage>(this.mwqmsamplelanguageListModel$, this.mwqmsamplelanguageDeleteModel$, e);
      })))
    );
  }
}
