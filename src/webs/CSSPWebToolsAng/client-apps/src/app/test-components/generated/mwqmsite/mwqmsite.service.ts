/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSiteTextModel } from './mwqmsite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSiteText } from './mwqmsite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSite } from '../../../models/generated/MWQMSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSiteService {
  /* Variables */
  mwqmsiteTextModel$: BehaviorSubject<MWQMSiteTextModel> = new BehaviorSubject<MWQMSiteTextModel>(<MWQMSiteTextModel>{});
  mwqmsiteListModel$: BehaviorSubject<MWQMSite[]> = new BehaviorSubject<MWQMSite[]>(<MWQMSite[]>{});
  mwqmsiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSiteText(this.mwqmsiteTextModel$);
    this.mwqmsiteTextModel$.next(<MWQMSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSiteList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsiteGetModel$);

    return this.httpClient.get<MWQMSite[]>('/api/MWQMSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsiteGetModel$, e);
      })))
    );
  }

  PutMWQMSite(mwqmsite: MWQMSite) {
    this.httpClientService.BeforeHttpClient(this.mwqmsitePutModel$);

    return this.httpClient.put<MWQMSite>('/api/MWQMSite', mwqmsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsitePutModel$, x, HttpClientCommand.Put, mwqmsite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsitePutModel$, e);
      })))
    );
  }

  PostMWQMSite(mwqmsite: MWQMSite) {
    this.httpClientService.BeforeHttpClient(this.mwqmsitePostModel$);

    return this.httpClient.post<MWQMSite>('/api/MWQMSite', mwqmsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsitePostModel$, x, HttpClientCommand.Post, mwqmsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsitePostModel$, e);
      })))
    );
  }

  DeleteMWQMSite(mwqmsite: MWQMSite) {
    this.httpClientService.BeforeHttpClient(this.mwqmsiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSite/${ mwqmsite.MWQMSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsiteDeleteModel$, x, HttpClientCommand.Delete, mwqmsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSite>(this.mwqmsiteListModel$, this.mwqmsiteDeleteModel$, e);
      })))
    );
  }
}
