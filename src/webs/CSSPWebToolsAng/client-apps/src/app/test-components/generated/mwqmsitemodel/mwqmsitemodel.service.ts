/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSiteModelTextModel } from './mwqmsitemodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSiteModelText } from './mwqmsitemodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSiteModel } from '../../../models/generated/MWQMSiteModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSiteModelService {
  /* Variables */
  mwqmsitemodelTextModel$: BehaviorSubject<MWQMSiteModelTextModel> = new BehaviorSubject<MWQMSiteModelTextModel>(<MWQMSiteModelTextModel>{});
  mwqmsitemodelListModel$: BehaviorSubject<MWQMSiteModel[]> = new BehaviorSubject<MWQMSiteModel[]>(<MWQMSiteModel[]>{});
  mwqmsitemodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsitemodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsitemodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsitemodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSiteModelText(this.mwqmsitemodelTextModel$);
    this.mwqmsitemodelTextModel$.next(<MWQMSiteModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSiteModelList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsitemodelGetModel$);

    return this.httpClient.get<MWQMSiteModel[]>('/api/MWQMSiteModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelGetModel$, e);
      })))
    );
  }

  PutMWQMSiteModel(mwqmsitemodel: MWQMSiteModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmsitemodelPutModel$);

    return this.httpClient.put<MWQMSiteModel>('/api/MWQMSiteModel', mwqmsitemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelPutModel$, x, HttpClientCommand.Put, mwqmsitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelPutModel$, e);
      })))
    );
  }

  PostMWQMSiteModel(mwqmsitemodel: MWQMSiteModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmsitemodelPostModel$);

    return this.httpClient.post<MWQMSiteModel>('/api/MWQMSiteModel', mwqmsitemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelPostModel$, x, HttpClientCommand.Post, mwqmsitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelPostModel$, e);
      })))
    );
  }

  DeleteMWQMSiteModel(mwqmsitemodel: MWQMSiteModel) {
    this.httpClientService.BeforeHttpClient(this.mwqmsitemodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSiteModel/${ mwqmsitemodel.MWQMSiteModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelDeleteModel$, x, HttpClientCommand.Delete, mwqmsitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSiteModel>(this.mwqmsitemodelListModel$, this.mwqmsitemodelDeleteModel$, e);
      })))
    );
  }
}
