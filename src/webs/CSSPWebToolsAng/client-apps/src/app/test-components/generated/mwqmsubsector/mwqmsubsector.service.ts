/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSubsectorTextModel } from './mwqmsubsector.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSubsectorText } from './mwqmsubsector.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSubsector } from '../../../models/generated/MWQMSubsector.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSubsectorService {
  /* Variables */
  mwqmsubsectorTextModel$: BehaviorSubject<MWQMSubsectorTextModel> = new BehaviorSubject<MWQMSubsectorTextModel>(<MWQMSubsectorTextModel>{});
  mwqmsubsectorListModel$: BehaviorSubject<MWQMSubsector[]> = new BehaviorSubject<MWQMSubsector[]>(<MWQMSubsector[]>{});
  mwqmsubsectorGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSubsectorText(this.mwqmsubsectorTextModel$);
    this.mwqmsubsectorTextModel$.next(<MWQMSubsectorTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSubsectorList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorGetModel$);

    return this.httpClient.get<MWQMSubsector[]>('/api/MWQMSubsector').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorGetModel$, e);
      })))
    );
  }

  PutMWQMSubsector(mwqmsubsector: MWQMSubsector) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorPutModel$);

    return this.httpClient.put<MWQMSubsector>('/api/MWQMSubsector', mwqmsubsector, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorPutModel$, x, HttpClientCommand.Put, mwqmsubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorPutModel$, e);
      })))
    );
  }

  PostMWQMSubsector(mwqmsubsector: MWQMSubsector) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorPostModel$);

    return this.httpClient.post<MWQMSubsector>('/api/MWQMSubsector', mwqmsubsector, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorPostModel$, x, HttpClientCommand.Post, mwqmsubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorPostModel$, e);
      })))
    );
  }

  DeleteMWQMSubsector(mwqmsubsector: MWQMSubsector) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSubsector/${ mwqmsubsector.MWQMSubsectorID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorDeleteModel$, x, HttpClientCommand.Delete, mwqmsubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsector>(this.mwqmsubsectorListModel$, this.mwqmsubsectorDeleteModel$, e);
      })))
    );
  }
}
