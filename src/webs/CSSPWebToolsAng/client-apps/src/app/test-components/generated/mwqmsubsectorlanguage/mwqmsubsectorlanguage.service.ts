/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSubsectorLanguageTextModel } from './mwqmsubsectorlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSubsectorLanguageText } from './mwqmsubsectorlanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSubsectorLanguage } from '../../../models/generated/MWQMSubsectorLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class MWQMSubsectorLanguageService {
  /* Variables */
  mwqmsubsectorlanguageTextModel$: BehaviorSubject<MWQMSubsectorLanguageTextModel> = new BehaviorSubject<MWQMSubsectorLanguageTextModel>(<MWQMSubsectorLanguageTextModel>{});
  mwqmsubsectorlanguageListModel$: BehaviorSubject<MWQMSubsectorLanguage[]> = new BehaviorSubject<MWQMSubsectorLanguage[]>(<MWQMSubsectorLanguage[]>{});
  mwqmsubsectorlanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorlanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorlanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  mwqmsubsectorlanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesMWQMSubsectorLanguageText(this.mwqmsubsectorlanguageTextModel$);
    this.mwqmsubsectorlanguageTextModel$.next(<MWQMSubsectorLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetMWQMSubsectorLanguageList() {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorlanguageGetModel$);

    return this.httpClient.get<MWQMSubsectorLanguage[]>('/api/MWQMSubsectorLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguageGetModel$, e);
      })))
    );
  }

  PutMWQMSubsectorLanguage(mwqmsubsectorlanguage: MWQMSubsectorLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorlanguagePutModel$);

    return this.httpClient.put<MWQMSubsectorLanguage>('/api/MWQMSubsectorLanguage', mwqmsubsectorlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguagePutModel$, x, HttpClientCommand.Put, mwqmsubsectorlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguagePutModel$, e);
      })))
    );
  }

  PostMWQMSubsectorLanguage(mwqmsubsectorlanguage: MWQMSubsectorLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorlanguagePostModel$);

    return this.httpClient.post<MWQMSubsectorLanguage>('/api/MWQMSubsectorLanguage', mwqmsubsectorlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguagePostModel$, x, HttpClientCommand.Post, mwqmsubsectorlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguagePostModel$, e);
      })))
    );
  }

  DeleteMWQMSubsectorLanguage(mwqmsubsectorlanguage: MWQMSubsectorLanguage) {
    this.httpClientService.BeforeHttpClient(this.mwqmsubsectorlanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/MWQMSubsectorLanguage/${ mwqmsubsectorlanguage.MWQMSubsectorLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguageDeleteModel$, x, HttpClientCommand.Delete, mwqmsubsectorlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<MWQMSubsectorLanguage>(this.mwqmsubsectorlanguageListModel$, this.mwqmsubsectorlanguageDeleteModel$, e);
      })))
    );
  }
}
