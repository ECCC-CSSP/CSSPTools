/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { PersistedGrantService } from './persistedgrant.service';
import { LoadLocalesPersistedGrantText } from './persistedgrant.locales';
import { Subscription } from 'rxjs';
import { PersistedGrant } from '../../../models/generated/PersistedGrant.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-persistedgrant-edit',
  templateUrl: './persistedgrant-edit.component.html',
  styleUrls: ['./persistedgrant-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PersistedGrantEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  persistedgrantFormEdit: FormGroup;
  @Input() persistedgrant: PersistedGrant = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public persistedgrantService: PersistedGrantService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutPersistedGrant(persistedgrant: PersistedGrant) {
    this.sub = this.persistedgrantService.PutPersistedGrant(persistedgrant).subscribe();
  }

  PostPersistedGrant(persistedgrant: PersistedGrant) {
    this.sub = this.persistedgrantService.PostPersistedGrant(persistedgrant).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.persistedgrant) {
      let formGroup: FormGroup = this.fb.group(
        {
          Key: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.persistedgrant.Key)),
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          Type: [
            {
              value: this.persistedgrant.Type,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          SubjectId: [
            {
              value: this.persistedgrant.SubjectId,
              disabled: false
            }, [Validators.maxLength(200)]],
          ClientId: [
            {
              value: this.persistedgrant.ClientId,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          CreationTime: [
            {
              value: this.persistedgrant.CreationTime,
              disabled: false
            }, [Validators.required]],
          Expiration: [
            {
              value: this.persistedgrant.Expiration,
              disabled: false
            }],
          Data: [
            {
              value: this.persistedgrant.Data,
              disabled: false
            }, [Validators.required, Validators.maxLength(2000)]],
        }
      );

      this.persistedgrantFormEdit = formGroup
    }
  }
}
