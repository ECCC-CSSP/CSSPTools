/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { PolSourceGroupingLanguageService } from './polsourcegroupinglanguage.service';
import { LoadLocalesPolSourceGroupingLanguageText } from './polsourcegroupinglanguage.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetIDText, TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { PolSourceGroupingLanguage } from '../../../models/generated/PolSourceGroupingLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-polsourcegroupinglanguage',
  templateUrl: './polsourcegroupinglanguage.component.html',
  styleUrls: ['./polsourcegroupinglanguage.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PolSourceGroupingLanguageComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusSourceNameList: EnumIDAndText[];
  polsourcegroupinglanguageFormPut: FormGroup;
  polsourcegroupinglanguageFormPost: FormGroup;

  constructor(public polsourcegroupinglanguageService: PolSourceGroupingLanguageService, public router: Router, public fb: FormBuilder) { }

  GetPolSourceGroupingLanguageList() {
    this.sub = this.polsourcegroupinglanguageService.GetPolSourceGroupingLanguageList(this.router).subscribe();
  }

  PutPolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.sub = this.polsourcegroupinglanguageService.PutPolSourceGroupingLanguage(polsourcegroupinglanguage, this.router).subscribe();
  }

  PostPolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.sub = this.polsourcegroupinglanguageService.PostPolSourceGroupingLanguage(polsourcegroupinglanguage, this.router).subscribe();
  }

  DeletePolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.sub = this.polsourcegroupinglanguageService.DeletePolSourceGroupingLanguage(polsourcegroupinglanguage, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetTranslationStatusEnumText(enumID: number) {
    return TranslationStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesPolSourceGroupingLanguageText(this.polsourcegroupinglanguageService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusSourceNameList = TranslationStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.polsourcegroupinglanguageService.polsourcegroupinglanguageList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          PolSourceGroupingLanguageID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.PolSourceGroupingLanguageID ?? '')),
              disabled: false
            }, Validators.required],
          PolSourceGroupingID: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.PolSourceGroupingID ?? '',
              disabled: false
            }, Validators.required],
          Language: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.Language ?? '',
              disabled: false
            }, Validators.required],
          SourceName: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.SourceName ?? '',
              disabled: false
            }, Validators.required],
          SourceNameOrder: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.SourceNameOrder ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusSourceName: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.TranslationStatusSourceName ?? '',
              disabled: false
            }, Validators.required],
          Init: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.Init ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusInit: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.TranslationStatusInit ?? '',
              disabled: false
            }, Validators.required],
          Description: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.Description ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusDescription: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.TranslationStatusDescription ?? '',
              disabled: false
            }, Validators.required],
          Report: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.Report ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusReport: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.TranslationStatusReport ?? '',
              disabled: false
            }, Validators.required],
          Text: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.Text ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatusText: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.TranslationStatusText ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.polsourcegroupinglanguageService.polsourcegroupinglanguageList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.polsourcegroupinglanguageFormPost = formGroup
      }
      else {
        this.polsourcegroupinglanguageFormPut = formGroup;
      }
    }
  }
}
