/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceGroupingLanguageTextModel } from './polsourcegroupinglanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceGroupingLanguageText } from './polsourcegroupinglanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceGroupingLanguage } from '../../../models/generated/PolSourceGroupingLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceGroupingLanguageService {
  /* Variables */
  polsourcegroupinglanguageTextModel$: BehaviorSubject<PolSourceGroupingLanguageTextModel> = new BehaviorSubject<PolSourceGroupingLanguageTextModel>(<PolSourceGroupingLanguageTextModel>{});
  polsourcegroupinglanguageListModel$: BehaviorSubject<PolSourceGroupingLanguage[]> = new BehaviorSubject<PolSourceGroupingLanguage[]>(<PolSourceGroupingLanguage[]>{});
  polsourcegroupinglanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcegroupinglanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcegroupinglanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcegroupinglanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceGroupingLanguageText(this.polsourcegroupinglanguageTextModel$);
    this.polsourcegroupinglanguageTextModel$.next(<PolSourceGroupingLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceGroupingLanguageList() {
    this.httpClientService.BeforeHttpClient(this.polsourcegroupinglanguageGetModel$);

    return this.httpClient.get<PolSourceGroupingLanguage[]>('/api/PolSourceGroupingLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguageGetModel$, e);
      })))
    );
  }

  PutPolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.httpClientService.BeforeHttpClient(this.polsourcegroupinglanguagePutModel$);

    return this.httpClient.put<PolSourceGroupingLanguage>('/api/PolSourceGroupingLanguage', polsourcegroupinglanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguagePutModel$, x, HttpClientCommand.Put, polsourcegroupinglanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguagePutModel$, e);
      })))
    );
  }

  PostPolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.httpClientService.BeforeHttpClient(this.polsourcegroupinglanguagePostModel$);

    return this.httpClient.post<PolSourceGroupingLanguage>('/api/PolSourceGroupingLanguage', polsourcegroupinglanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguagePostModel$, x, HttpClientCommand.Post, polsourcegroupinglanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguagePostModel$, e);
      })))
    );
  }

  DeletePolSourceGroupingLanguage(polsourcegroupinglanguage: PolSourceGroupingLanguage) {
    this.httpClientService.BeforeHttpClient(this.polsourcegroupinglanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceGroupingLanguage/${ polsourcegroupinglanguage.PolSourceGroupingLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguageDeleteModel$, x, HttpClientCommand.Delete, polsourcegroupinglanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceGroupingLanguage>(this.polsourcegroupinglanguageListModel$, this.polsourcegroupinglanguageDeleteModel$, e);
      })))
    );
  }
}
