/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { PolSourceObservationService } from './polsourceobservation.service';
import { LoadLocalesPolSourceObservationText } from './polsourceobservation.locales';
import { Subscription } from 'rxjs';
import { PolSourceObservation } from '../../../models/generated/PolSourceObservation.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-polsourceobservation',
  templateUrl: './polsourceobservation.component.html',
  styleUrls: ['./polsourceobservation.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PolSourceObservationComponent implements OnInit, OnDestroy {
  sub: Subscription;
  polsourceobservationFormPut: FormGroup;
  polsourceobservationFormPost: FormGroup;

  constructor(public polsourceobservationService: PolSourceObservationService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetPolSourceObservationList() {
    this.sub = this.polsourceobservationService.GetPolSourceObservationList().subscribe();
  }

  PutPolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.sub = this.polsourceobservationService.PutPolSourceObservation(polsourceobservation).subscribe();
  }

  PostPolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.sub = this.polsourceobservationService.PostPolSourceObservation(polsourceobservation).subscribe();
  }

  DeletePolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.sub = this.polsourceobservationService.DeletePolSourceObservation(polsourceobservation).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesPolSourceObservationText(this.polsourceobservationService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.polsourceobservationService.polsourceobservationListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          PolSourceObservationID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.PolSourceObservationID)),
              disabled: false
            }, [  Validators.required ]],
          PolSourceSiteID: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.PolSourceSiteID,
              disabled: false
            }, [  Validators.required ]],
          ObservationDate_Local: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.ObservationDate_Local,
              disabled: false
            }, [  Validators.required ]],
          ContactTVItemID: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.ContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
          DesktopReviewed: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.DesktopReviewed,
              disabled: false
            }, [  Validators.required ]],
          Observation_ToBeDeleted: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.Observation_ToBeDeleted,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.polsourceobservationService.polsourceobservationListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.polsourceobservationFormPost = formGroup
      }
      else {
        this.polsourceobservationFormPut = formGroup;
      }
    }
  }
}
