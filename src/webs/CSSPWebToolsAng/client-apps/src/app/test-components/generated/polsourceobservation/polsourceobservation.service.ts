/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationTextModel } from './polsourceobservation.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationText } from './polsourceobservation.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservation } from '../../../models/generated/PolSourceObservation.model';
import { HttpRequestModel } from '../../../models/http.model';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationService {
  /* Variables */
  polsourceobservationTextModel$: BehaviorSubject<PolSourceObservationTextModel> = new BehaviorSubject<PolSourceObservationTextModel>(<PolSourceObservationTextModel>{});
  polsourceobservationListModel$: BehaviorSubject<PolSourceObservation[]> = new BehaviorSubject<PolSourceObservation[]>(<PolSourceObservation[]>{});
  polsourceobservationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationList: PolSourceObservation[] = [];
  private oldURL: string;
  private router: Router;

  /* Constructors */
  constructor(private httpClient: HttpClient) {
    LoadLocalesPolSourceObservationText(this);
    this.polsourceobservationTextModel$.next(<PolSourceObservationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceObservationList(router: Router) {
    this.BeforeHttpClient(this.polsourceobservationGetModel$, router);

    return this.httpClient.get<PolSourceObservation[]>('/api/PolSourceObservation').pipe(
      map((x: any) => {
        this.DoSuccess(this.polsourceobservationGetModel$, x, 'Get', null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.polsourceobservationGetModel$, e, 'Get');
      })))
    );
  }

  PutPolSourceObservation(polsourceobservation: PolSourceObservation, router: Router) {
    this.BeforeHttpClient(this.polsourceobservationPutModel$, router);

    return this.httpClient.put<PolSourceObservation>('/api/PolSourceObservation', polsourceobservation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.polsourceobservationPutModel$, x, 'Put', polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.polsourceobservationPutModel$, e, 'Put');
      })))
    );
  }

  PostPolSourceObservation(polsourceobservation: PolSourceObservation, router: Router) {
    this.BeforeHttpClient(this.polsourceobservationPostModel$, router);

    return this.httpClient.post<PolSourceObservation>('/api/PolSourceObservation', polsourceobservation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.DoSuccess(this.polsourceobservationPostModel$, x, 'Post', polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.polsourceobservationPostModel$, e, 'Post');
      })))
    );
  }

  DeletePolSourceObservation(polsourceobservation: PolSourceObservation, router: Router) {
    this.BeforeHttpClient(this.polsourceobservationDeleteModel$, router);

    return this.httpClient.delete<boolean>(`/api/PolSourceObservation/${ polsourceobservation.PolSourceObservationID }`).pipe(
      map((x: any) => {
        this.DoSuccess(this.polsourceobservationDeleteModel$, x, 'Delete', polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.DoCatchError(this.polsourceobservationDeleteModel$, e, 'Delete');
      })))
    );
  }

  /* Functions private */
  private BeforeHttpClient(httpRequestModel$: BehaviorSubject<HttpRequestModel>, router: Router) {
    this.router = router;
    this.oldURL = router.url;
    httpRequestModel$.next(<HttpRequestModel>{ Working: true, Error: null, Status: null });
  }

  private DoCatchError(httpRequestModel$: BehaviorSubject<HttpRequestModel>, e: any, command: string) {
    this.polsourceobservationListModel$.next(null);
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: <HttpErrorResponse>e, Status: 'Error' });

    this.polsourceobservationList = [];
    console.debug(`PolSourceObservation ${ command } ERROR. Return: ${ <HttpErrorResponse>e }`);
    this.DoReload();
  }

  private DoReload() {
    this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
      this.router.navigate([`/${this.oldURL}`]);
    });
  }

  private DoSuccess(httpRequestModel$: BehaviorSubject<HttpRequestModel>, x: any, command: string, polsourceobservation?: PolSourceObservation) {
    console.debug(`PolSourceObservation ${ command } OK. Return: ${ x }`);
    if (command === 'Get') {
      this.polsourceobservationListModel$.next(<PolSourceObservation[]>x);
    }
    if (command === 'Put') {
      this.polsourceobservationListModel$.getValue()[0] = <PolSourceObservation>x;
    }
    if (command === 'Post') {
      this.polsourceobservationListModel$.getValue().push(<PolSourceObservation>x);
    }
    if (command === 'Delete') {
      const index = this.polsourceobservationListModel$.getValue().indexOf(polsourceobservation);
      this.polsourceobservationListModel$.getValue().splice(index, 1);
    }

    this.polsourceobservationListModel$.next(this.polsourceobservationListModel$.getValue());
    httpRequestModel$.next(<HttpRequestModel>{ Working: false, Error: null, Status: 'ok' });
    this.polsourceobservationList = this.polsourceobservationListModel$.getValue();
    this.DoReload();
  }
}
