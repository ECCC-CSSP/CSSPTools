/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationTextModel } from './polsourceobservation.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationText } from './polsourceobservation.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservation } from '../../../models/generated/PolSourceObservation.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationService {
  /* Variables */
  polsourceobservationTextModel$: BehaviorSubject<PolSourceObservationTextModel> = new BehaviorSubject<PolSourceObservationTextModel>(<PolSourceObservationTextModel>{});
  polsourceobservationListModel$: BehaviorSubject<PolSourceObservation[]> = new BehaviorSubject<PolSourceObservation[]>(<PolSourceObservation[]>{});
  polsourceobservationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceObservationText(this.polsourceobservationTextModel$);
    this.polsourceobservationTextModel$.next(<PolSourceObservationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceObservationList() {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationGetModel$);

    return this.httpClient.get<PolSourceObservation[]>('/api/PolSourceObservation').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationGetModel$, e);
      })))
    );
  }

  PutPolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationPutModel$);

    return this.httpClient.put<PolSourceObservation>('/api/PolSourceObservation', polsourceobservation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationPutModel$, x, HttpClientCommand.Put, polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationPutModel$, e);
      })))
    );
  }

  PostPolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationPostModel$);

    return this.httpClient.post<PolSourceObservation>('/api/PolSourceObservation', polsourceobservation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationPostModel$, x, HttpClientCommand.Post, polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationPostModel$, e);
      })))
    );
  }

  DeletePolSourceObservation(polsourceobservation: PolSourceObservation) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceObservation/${ polsourceobservation.PolSourceObservationID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationDeleteModel$, x, HttpClientCommand.Delete, polsourceobservation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservation>(this.polsourceobservationListModel$, this.polsourceobservationDeleteModel$, e);
      })))
    );
  }
}
