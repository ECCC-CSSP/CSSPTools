/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationIssueTextModel } from './polsourceobservationissue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationIssueText } from './polsourceobservationissue.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservationIssue } from '../../../models/generated/PolSourceObservationIssue.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationIssueService {
  /* Variables */
  polsourceobservationissueTextModel$: BehaviorSubject<PolSourceObservationIssueTextModel> = new BehaviorSubject<PolSourceObservationIssueTextModel>(<PolSourceObservationIssueTextModel>{});
  polsourceobservationissueListModel$: BehaviorSubject<PolSourceObservationIssue[]> = new BehaviorSubject<PolSourceObservationIssue[]>(<PolSourceObservationIssue[]>{});
  polsourceobservationissueGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationissuePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationissuePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationissueDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceObservationIssueText(this.polsourceobservationissueTextModel$);
    this.polsourceobservationissueTextModel$.next(<PolSourceObservationIssueTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceObservationIssueList() {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationissueGetModel$);

    return this.httpClient.get<PolSourceObservationIssue[]>('/api/PolSourceObservationIssue').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissueGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissueGetModel$, e);
      })))
    );
  }

  PutPolSourceObservationIssue(polsourceobservationissue: PolSourceObservationIssue) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationissuePutModel$);

    return this.httpClient.put<PolSourceObservationIssue>('/api/PolSourceObservationIssue', polsourceobservationissue, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissuePutModel$, x, HttpClientCommand.Put, polsourceobservationissue);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissuePutModel$, e);
      })))
    );
  }

  PostPolSourceObservationIssue(polsourceobservationissue: PolSourceObservationIssue) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationissuePostModel$);

    return this.httpClient.post<PolSourceObservationIssue>('/api/PolSourceObservationIssue', polsourceobservationissue, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissuePostModel$, x, HttpClientCommand.Post, polsourceobservationissue);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissuePostModel$, e);
      })))
    );
  }

  DeletePolSourceObservationIssue(polsourceobservationissue: PolSourceObservationIssue) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationissueDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceObservationIssue/${ polsourceobservationissue.PolSourceObservationIssueID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissueDeleteModel$, x, HttpClientCommand.Delete, polsourceobservationissue);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationIssue>(this.polsourceobservationissueListModel$, this.polsourceobservationissueDeleteModel$, e);
      })))
    );
  }
}
