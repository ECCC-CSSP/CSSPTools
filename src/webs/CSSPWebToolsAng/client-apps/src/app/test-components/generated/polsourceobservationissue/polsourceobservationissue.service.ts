/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationIssueTextModel, PolSourceObservationIssueModel } from './polsourceobservationissue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationIssueText } from './polsourceobservationissue.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservationIssue } from 'src/app/models/generated/PolSourceObservationIssue.model';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationIssueService {
  polsourceobservationissueTextModel$: BehaviorSubject<PolSourceObservationIssueTextModel> = new BehaviorSubject<PolSourceObservationIssueTextModel>(<PolSourceObservationIssueTextModel>{});
  polsourceobservationissueModel$: BehaviorSubject<PolSourceObservationIssueModel> = new BehaviorSubject<PolSourceObservationIssueModel>(<PolSourceObservationIssueModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesPolSourceObservationIssueText(this);
    this.UpdatePolSourceObservationIssueText(<PolSourceObservationIssueTextModel>{ Title: "Something2 for text" });
  }

  UpdatePolSourceObservationIssueText(polsourceobservationissueTextModel: PolSourceObservationIssueTextModel) {
    this.polsourceobservationissueTextModel$.next(<PolSourceObservationIssueTextModel>{ ...this.polsourceobservationissueTextModel$.getValue(), ...polsourceobservationissueTextModel });
  }

  UpdatePolSourceObservationIssueModel(polsourceobservationissueModel: PolSourceObservationIssueModel) {
    this.polsourceobservationissueModel$.next(<PolSourceObservationIssueModel>{ ...this.polsourceobservationissueModel$.getValue(), ...polsourceobservationissueModel });
  }

  GetPolSourceObservationIssue(router: Router) {
    let oldURL = router.url;
    this.UpdatePolSourceObservationIssueModel(<PolSourceObservationIssueModel>{ Working: true, Error: null });

    return this.httpClient.get<PolSourceObservationIssue[]>('/api/PolSourceObservationIssue').pipe(
      map((x: any) => {
        console.debug(`PolSourceObservationIssue OK. Return: ${x}`);
        this.polsourceobservationissueModel$.getValue().PolSourceObservationIssueList = <PolSourceObservationIssue[]>x;
        this.UpdatePolSourceObservationIssueModel(this.polsourceobservationissueModel$.getValue());
        this.UpdatePolSourceObservationIssueModel(<PolSourceObservationIssueModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdatePolSourceObservationIssueModel(<PolSourceObservationIssueModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`PolSourceObservationIssue ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
