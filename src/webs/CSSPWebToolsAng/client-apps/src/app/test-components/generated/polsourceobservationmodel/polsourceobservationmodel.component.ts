/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { PolSourceObservationModelService } from './polsourceobservationmodel.service';
import { LoadLocalesPolSourceObservationModelText } from './polsourceobservationmodel.locales';
import { Subscription } from 'rxjs';
import { PolSourceObservationModel } from '../../../models/generated/PolSourceObservationModel.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-polsourceobservationmodel',
  templateUrl: './polsourceobservationmodel.component.html',
  styleUrls: ['./polsourceobservationmodel.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PolSourceObservationModelComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public polsourceobservationmodelService: PolSourceObservationModelService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(polsourceobservationmodel: PolSourceObservationModel) {
    if (this.IDToShow === polsourceobservationmodel.PolSourceObservationModelID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(polsourceobservationmodel: PolSourceObservationModel) {
    if (this.IDToShow === polsourceobservationmodel.PolSourceObservationModelID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(polsourceobservationmodel: PolSourceObservationModel) {
    if (this.IDToShow === polsourceobservationmodel.PolSourceObservationModelID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = polsourceobservationmodel.PolSourceObservationModelID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(polsourceobservationmodel: PolSourceObservationModel) {
    if (this.IDToShow === polsourceobservationmodel.PolSourceObservationModelID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = polsourceobservationmodel.PolSourceObservationModelID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetPolSourceObservationModelList() {
    this.sub = this.polsourceobservationmodelService.GetPolSourceObservationModelList().subscribe();
  }

  DeletePolSourceObservationModel(polsourceobservationmodel: PolSourceObservationModel) {
    this.sub = this.polsourceobservationmodelService.DeletePolSourceObservationModel(polsourceobservationmodel).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesPolSourceObservationModelText(this.polsourceobservationmodelService.polsourceobservationmodelTextModel$);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }
}
