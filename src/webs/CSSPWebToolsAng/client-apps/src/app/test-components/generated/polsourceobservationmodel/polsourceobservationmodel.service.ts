/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationModelTextModel } from './polsourceobservationmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationModelText } from './polsourceobservationmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservationModel } from '../../../models/generated/PolSourceObservationModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationModelService {
  /* Variables */
  polsourceobservationmodelTextModel$: BehaviorSubject<PolSourceObservationModelTextModel> = new BehaviorSubject<PolSourceObservationModelTextModel>(<PolSourceObservationModelTextModel>{});
  polsourceobservationmodelListModel$: BehaviorSubject<PolSourceObservationModel[]> = new BehaviorSubject<PolSourceObservationModel[]>(<PolSourceObservationModel[]>{});
  polsourceobservationmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourceobservationmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceObservationModelText(this.polsourceobservationmodelTextModel$);
    this.polsourceobservationmodelTextModel$.next(<PolSourceObservationModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceObservationModelList() {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationmodelGetModel$);

    return this.httpClient.get<PolSourceObservationModel[]>('/api/PolSourceObservationModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelGetModel$, e);
      })))
    );
  }

  PutPolSourceObservationModel(polsourceobservationmodel: PolSourceObservationModel) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationmodelPutModel$);

    return this.httpClient.put<PolSourceObservationModel>('/api/PolSourceObservationModel', polsourceobservationmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelPutModel$, x, HttpClientCommand.Put, polsourceobservationmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelPutModel$, e);
      })))
    );
  }

  PostPolSourceObservationModel(polsourceobservationmodel: PolSourceObservationModel) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationmodelPostModel$);

    return this.httpClient.post<PolSourceObservationModel>('/api/PolSourceObservationModel', polsourceobservationmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelPostModel$, x, HttpClientCommand.Post, polsourceobservationmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelPostModel$, e);
      })))
    );
  }

  DeletePolSourceObservationModel(polsourceobservationmodel: PolSourceObservationModel) {
    this.httpClientService.BeforeHttpClient(this.polsourceobservationmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceObservationModel/${ polsourceobservationmodel.PolSourceObservationModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelDeleteModel$, x, HttpClientCommand.Delete, polsourceobservationmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceObservationModel>(this.polsourceobservationmodelListModel$, this.polsourceobservationmodelDeleteModel$, e);
      })))
    );
  }
}
