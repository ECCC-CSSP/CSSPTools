/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { PolSourceSiteEffectService } from './polsourcesiteeffect.service';
import { LoadLocalesPolSourceSiteEffectText } from './polsourcesiteeffect.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { PolSourceSiteEffect } from '../../../models/generated/PolSourceSiteEffect.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-polsourcesiteeffect',
  templateUrl: './polsourcesiteeffect.component.html',
  styleUrls: ['./polsourcesiteeffect.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PolSourceSiteEffectComponent implements OnInit, OnDestroy {
  sub: Subscription;
  polsourcesiteeffectFormPut: FormGroup;
  polsourcesiteeffectFormPost: FormGroup;

  constructor(public polsourcesiteeffectService: PolSourceSiteEffectService, public router: Router, public fb: FormBuilder) { }

  GetPolSourceSiteEffectList() {
    this.sub = this.polsourcesiteeffectService.GetPolSourceSiteEffectList(this.router).subscribe();
  }

  PutPolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.sub = this.polsourcesiteeffectService.PutPolSourceSiteEffect(polsourcesiteeffect, this.router).subscribe();
  }

  PostPolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.sub = this.polsourcesiteeffectService.PostPolSourceSiteEffect(polsourcesiteeffect, this.router).subscribe();
  }

  DeletePolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.sub = this.polsourcesiteeffectService.DeletePolSourceSiteEffect(polsourcesiteeffect, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesPolSourceSiteEffectText(this.polsourcesiteeffectService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.polsourcesiteeffectService.polsourcesiteeffectList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          PolSourceSiteEffectID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.PolSourceSiteEffectID)),
              disabled: false
            }, [ Validators.required ]],
          PolSourceSiteOrInfrastructureTVItemID: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.PolSourceSiteOrInfrastructureTVItemID,
              disabled: false
            }, [ Validators.required ]],
          MWQMSiteTVItemID: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.MWQMSiteTVItemID,
              disabled: false
            }, [ Validators.required ]],
          PolSourceSiteEffectTermIDs: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.PolSourceSiteEffectTermIDs,
              disabled: false
            }, [ Validators.required ]],
          Comments: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.Comments,
              disabled: false
            }, [ Validators.required ]],
          AnalysisDocumentTVItemID: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.AnalysisDocumentTVItemID,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.polsourcesiteeffectService.polsourcesiteeffectList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.polsourcesiteeffectFormPost = formGroup
      }
      else {
        this.polsourcesiteeffectFormPut = formGroup;
      }
    }
  }
}
