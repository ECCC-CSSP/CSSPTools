/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceSiteEffectTextModel } from './polsourcesiteeffect.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceSiteEffectText } from './polsourcesiteeffect.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceSiteEffect } from '../../../models/generated/PolSourceSiteEffect.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceSiteEffectService {
  /* Variables */
  polsourcesiteeffectTextModel$: BehaviorSubject<PolSourceSiteEffectTextModel> = new BehaviorSubject<PolSourceSiteEffectTextModel>(<PolSourceSiteEffectTextModel>{});
  polsourcesiteeffectListModel$: BehaviorSubject<PolSourceSiteEffect[]> = new BehaviorSubject<PolSourceSiteEffect[]>(<PolSourceSiteEffect[]>{});
  polsourcesiteeffectGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesiteeffectPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesiteeffectPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesiteeffectDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceSiteEffectText(this.polsourcesiteeffectTextModel$);
    this.polsourcesiteeffectTextModel$.next(<PolSourceSiteEffectTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceSiteEffectList() {
    this.httpClientService.BeforeHttpClient(this.polsourcesiteeffectGetModel$);

    return this.httpClient.get<PolSourceSiteEffect[]>('/api/PolSourceSiteEffect').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectGetModel$, e);
      })))
    );
  }

  PutPolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.httpClientService.BeforeHttpClient(this.polsourcesiteeffectPutModel$);

    return this.httpClient.put<PolSourceSiteEffect>('/api/PolSourceSiteEffect', polsourcesiteeffect, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectPutModel$, x, HttpClientCommand.Put, polsourcesiteeffect);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectPutModel$, e);
      })))
    );
  }

  PostPolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.httpClientService.BeforeHttpClient(this.polsourcesiteeffectPostModel$);

    return this.httpClient.post<PolSourceSiteEffect>('/api/PolSourceSiteEffect', polsourcesiteeffect, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectPostModel$, x, HttpClientCommand.Post, polsourcesiteeffect);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectPostModel$, e);
      })))
    );
  }

  DeletePolSourceSiteEffect(polsourcesiteeffect: PolSourceSiteEffect) {
    this.httpClientService.BeforeHttpClient(this.polsourcesiteeffectDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceSiteEffect/${ polsourcesiteeffect.PolSourceSiteEffectID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectDeleteModel$, x, HttpClientCommand.Delete, polsourcesiteeffect);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteEffect>(this.polsourcesiteeffectListModel$, this.polsourcesiteeffectDeleteModel$, e);
      })))
    );
  }
}
