/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { PolSourceSiteEffectTermService } from './polsourcesiteeffectterm.service';
import { LoadLocalesPolSourceSiteEffectTermText } from './polsourcesiteeffectterm.locales';
import { Subscription } from 'rxjs';
import { PolSourceSiteEffectTerm } from '../../../models/generated/PolSourceSiteEffectTerm.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-polsourcesiteeffectterm',
  templateUrl: './polsourcesiteeffectterm.component.html',
  styleUrls: ['./polsourcesiteeffectterm.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PolSourceSiteEffectTermComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public polsourcesiteeffecttermService: PolSourceSiteEffectTermService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(polsourcesiteeffectterm: PolSourceSiteEffectTerm) {
    if (this.IDToShow === polsourcesiteeffectterm.PolSourceSiteEffectTermID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(polsourcesiteeffectterm: PolSourceSiteEffectTerm) {
    if (this.IDToShow === polsourcesiteeffectterm.PolSourceSiteEffectTermID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(polsourcesiteeffectterm: PolSourceSiteEffectTerm) {
    if (this.IDToShow === polsourcesiteeffectterm.PolSourceSiteEffectTermID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = polsourcesiteeffectterm.PolSourceSiteEffectTermID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(polsourcesiteeffectterm: PolSourceSiteEffectTerm) {
    if (this.IDToShow === polsourcesiteeffectterm.PolSourceSiteEffectTermID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = polsourcesiteeffectterm.PolSourceSiteEffectTermID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetPolSourceSiteEffectTermList() {
    this.sub = this.polsourcesiteeffecttermService.GetPolSourceSiteEffectTermList().subscribe();
  }

  DeletePolSourceSiteEffectTerm(polsourcesiteeffectterm: PolSourceSiteEffectTerm) {
    this.sub = this.polsourcesiteeffecttermService.DeletePolSourceSiteEffectTerm(polsourcesiteeffectterm).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesPolSourceSiteEffectTermText(this.polsourcesiteeffecttermService);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }
}
