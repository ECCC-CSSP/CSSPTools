/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceSiteModelTextModel } from './polsourcesitemodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceSiteModelText } from './polsourcesitemodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceSiteModel } from '../../../models/generated/PolSourceSiteModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class PolSourceSiteModelService {
  /* Variables */
  polsourcesitemodelTextModel$: BehaviorSubject<PolSourceSiteModelTextModel> = new BehaviorSubject<PolSourceSiteModelTextModel>(<PolSourceSiteModelTextModel>{});
  polsourcesitemodelListModel$: BehaviorSubject<PolSourceSiteModel[]> = new BehaviorSubject<PolSourceSiteModel[]>(<PolSourceSiteModel[]>{});
  polsourcesitemodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesitemodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesitemodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  polsourcesitemodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesPolSourceSiteModelText(this.polsourcesitemodelTextModel$);
    this.polsourcesitemodelTextModel$.next(<PolSourceSiteModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetPolSourceSiteModelList() {
    this.httpClientService.BeforeHttpClient(this.polsourcesitemodelGetModel$);

    return this.httpClient.get<PolSourceSiteModel[]>('/api/PolSourceSiteModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelGetModel$, e);
      })))
    );
  }

  PutPolSourceSiteModel(polsourcesitemodel: PolSourceSiteModel) {
    this.httpClientService.BeforeHttpClient(this.polsourcesitemodelPutModel$);

    return this.httpClient.put<PolSourceSiteModel>('/api/PolSourceSiteModel', polsourcesitemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelPutModel$, x, HttpClientCommand.Put, polsourcesitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelPutModel$, e);
      })))
    );
  }

  PostPolSourceSiteModel(polsourcesitemodel: PolSourceSiteModel) {
    this.httpClientService.BeforeHttpClient(this.polsourcesitemodelPostModel$);

    return this.httpClient.post<PolSourceSiteModel>('/api/PolSourceSiteModel', polsourcesitemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelPostModel$, x, HttpClientCommand.Post, polsourcesitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelPostModel$, e);
      })))
    );
  }

  DeletePolSourceSiteModel(polsourcesitemodel: PolSourceSiteModel) {
    this.httpClientService.BeforeHttpClient(this.polsourcesitemodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/PolSourceSiteModel/${ polsourcesitemodel.PolSourceSiteModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelDeleteModel$, x, HttpClientCommand.Delete, polsourcesitemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<PolSourceSiteModel>(this.polsourcesitemodelListModel$, this.polsourcesitemodelDeleteModel$, e);
      })))
    );
  }
}
