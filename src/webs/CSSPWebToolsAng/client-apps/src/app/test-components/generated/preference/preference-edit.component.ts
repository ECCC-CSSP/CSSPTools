/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { PreferenceService } from './preference.service';
import { LoadLocalesPreferenceText } from './preference.locales';
import { Subscription } from 'rxjs';
import { Preference } from '../../../models/generated/Preference.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-preference-edit',
  templateUrl: './preference-edit.component.html',
  styleUrls: ['./preference-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class PreferenceEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  preferenceFormEdit: FormGroup;
  @Input() preference: Preference = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public preferenceService: PreferenceService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutPreference(preference: Preference) {
    this.sub = this.preferenceService.PutPreference(preference).subscribe();
  }

  PostPreference(preference: Preference) {
    this.sub = this.preferenceService.PostPreference(preference).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.preference) {
      let formGroup: FormGroup = this.fb.group(
        {
          PreferenceID: [
            {
              value: this.preference.PreferenceID,
              disabled: false
            }, [Validators.required]],
          VariableName: [
            {
              value: this.preference.VariableName,
              disabled: false
            }, [Validators.required, Validators.maxLength(200)]],
          VariableValue: [
            {
              value: this.preference.VariableValue,
              disabled: false
            }, [Validators.required, Validators.maxLength(300)]],
        }
      );

      this.preferenceFormEdit = formGroup
    }
  }
}
