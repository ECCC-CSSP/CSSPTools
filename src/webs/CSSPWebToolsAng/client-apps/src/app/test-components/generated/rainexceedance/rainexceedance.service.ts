/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { RainExceedanceTextModel, RainExceedanceModel } from './rainexceedance.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesRainExceedanceText } from './rainexceedance.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { RainExceedance } from 'src/app/models/generated/RainExceedance.model';

@Injectable({
  providedIn: 'root'
})
export class RainExceedanceService {
  rainexceedanceTextModel$: BehaviorSubject<RainExceedanceTextModel> = new BehaviorSubject<RainExceedanceTextModel>(<RainExceedanceTextModel>{});
  rainexceedanceModel$: BehaviorSubject<RainExceedanceModel> = new BehaviorSubject<RainExceedanceModel>(<RainExceedanceModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesRainExceedanceText(this);
    this.UpdateRainExceedanceText(<RainExceedanceTextModel>{ Title: "Something2 for text" });
  }

  UpdateRainExceedanceText(rainexceedanceTextModel: RainExceedanceTextModel) {
    this.rainexceedanceTextModel$.next(<RainExceedanceTextModel>{ ...this.rainexceedanceTextModel$.getValue(), ...rainexceedanceTextModel });
  }

  UpdateRainExceedanceModel(rainexceedanceModel: RainExceedanceModel) {
    this.rainexceedanceModel$.next(<RainExceedanceModel>{ ...this.rainexceedanceModel$.getValue(), ...rainexceedanceModel });
  }

  GetRainExceedance(router: Router) {
    let oldURL = router.url;
    this.UpdateRainExceedanceModel(<RainExceedanceModel>{ Working: true, Error: null });

    return this.httpClient.get<RainExceedance[]>('/api/RainExceedance').pipe(
      map((x: any) => {
        console.debug(`RainExceedance OK. Return: ${x}`);
        this.rainexceedanceModel$.getValue().RainExceedanceList = <RainExceedance[]>x;
        this.UpdateRainExceedanceModel(this.rainexceedanceModel$.getValue());
        this.UpdateRainExceedanceModel(<RainExceedanceModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateRainExceedanceModel(<RainExceedanceModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`RainExceedance ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
