/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { RainExceedanceClimateSiteService } from './rainexceedanceclimatesite.service';
import { LoadLocalesRainExceedanceClimateSiteText } from './rainexceedanceclimatesite.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { RainExceedanceClimateSite } from '../../../models/generated/RainExceedanceClimateSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-rainexceedanceclimatesite',
  templateUrl: './rainexceedanceclimatesite.component.html',
  styleUrls: ['./rainexceedanceclimatesite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class RainExceedanceClimateSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  rainexceedanceclimatesiteFormPut: FormGroup;
  rainexceedanceclimatesiteFormPost: FormGroup;

  constructor(public rainexceedanceclimatesiteService: RainExceedanceClimateSiteService, public router: Router, public fb: FormBuilder) { }

  GetRainExceedanceClimateSiteList() {
    this.sub = this.rainexceedanceclimatesiteService.GetRainExceedanceClimateSiteList(this.router).subscribe();
  }

  PutRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.sub = this.rainexceedanceclimatesiteService.PutRainExceedanceClimateSite(rainexceedanceclimatesite, this.router).subscribe();
  }

  PostRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.sub = this.rainexceedanceclimatesiteService.PostRainExceedanceClimateSite(rainexceedanceclimatesite, this.router).subscribe();
  }

  DeleteRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.sub = this.rainexceedanceclimatesiteService.DeleteRainExceedanceClimateSite(rainexceedanceclimatesite, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesRainExceedanceClimateSiteText(this.rainexceedanceclimatesiteService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          RainExceedanceClimateSiteID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList[0]?.RainExceedanceClimateSiteID)),
              disabled: false
            }],
          RainExceedanceTVItemID: [
            {
              value: this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList[0]?.RainExceedanceTVItemID,
              disabled: false
            }],
          ClimateSiteTVItemID: [
            {
              value: this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList[0]?.ClimateSiteTVItemID,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.rainexceedanceclimatesiteFormPost = formGroup
      }
      else {
        this.rainexceedanceclimatesiteFormPut = formGroup;
      }
    }
  }
}
