/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { RainExceedanceClimateSiteService } from './rainexceedanceclimatesite.service';
import { LoadLocalesRainExceedanceClimateSiteText } from './rainexceedanceclimatesite.locales';
import { Subscription } from 'rxjs';
import { RainExceedanceClimateSite } from '../../../models/generated/RainExceedanceClimateSite.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-rainexceedanceclimatesite',
  templateUrl: './rainexceedanceclimatesite.component.html',
  styleUrls: ['./rainexceedanceclimatesite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class RainExceedanceClimateSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public rainexceedanceclimatesiteService: RainExceedanceClimateSiteService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    if (this.IDToShow === rainexceedanceclimatesite.RainExceedanceClimateSiteID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    if (this.IDToShow === rainexceedanceclimatesite.RainExceedanceClimateSiteID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    if (this.IDToShow === rainexceedanceclimatesite.RainExceedanceClimateSiteID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = rainexceedanceclimatesite.RainExceedanceClimateSiteID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    if (this.IDToShow === rainexceedanceclimatesite.RainExceedanceClimateSiteID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = rainexceedanceclimatesite.RainExceedanceClimateSiteID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetRainExceedanceClimateSiteList() {
    this.sub = this.rainexceedanceclimatesiteService.GetRainExceedanceClimateSiteList().subscribe();
  }

  DeleteRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.sub = this.rainexceedanceclimatesiteService.DeleteRainExceedanceClimateSite(rainexceedanceclimatesite).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesRainExceedanceClimateSiteText(this.rainexceedanceclimatesiteService.rainexceedanceclimatesiteTextModel$);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }
}
