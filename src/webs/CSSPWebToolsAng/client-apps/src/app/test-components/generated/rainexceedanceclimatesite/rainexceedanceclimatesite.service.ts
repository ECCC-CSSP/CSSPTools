/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { RainExceedanceClimateSiteTextModel } from './rainexceedanceclimatesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesRainExceedanceClimateSiteText } from './rainexceedanceclimatesite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { RainExceedanceClimateSite } from '../../../models/generated/RainExceedanceClimateSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class RainExceedanceClimateSiteService {
  /* Variables */
  rainexceedanceclimatesiteTextModel$: BehaviorSubject<RainExceedanceClimateSiteTextModel> = new BehaviorSubject<RainExceedanceClimateSiteTextModel>(<RainExceedanceClimateSiteTextModel>{});
  rainexceedanceclimatesiteListModel$: BehaviorSubject<RainExceedanceClimateSite[]> = new BehaviorSubject<RainExceedanceClimateSite[]>(<RainExceedanceClimateSite[]>{});
  rainexceedanceclimatesiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  rainexceedanceclimatesitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  rainexceedanceclimatesitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  rainexceedanceclimatesiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesRainExceedanceClimateSiteText(this.rainexceedanceclimatesiteTextModel$);
    this.rainexceedanceclimatesiteTextModel$.next(<RainExceedanceClimateSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetRainExceedanceClimateSiteList() {
    this.httpClientService.BeforeHttpClient(this.rainexceedanceclimatesiteGetModel$);

    return this.httpClient.get<RainExceedanceClimateSite[]>('/api/RainExceedanceClimateSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesiteGetModel$, e);
      })))
    );
  }

  PutRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.httpClientService.BeforeHttpClient(this.rainexceedanceclimatesitePutModel$);

    return this.httpClient.put<RainExceedanceClimateSite>('/api/RainExceedanceClimateSite', rainexceedanceclimatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesitePutModel$, x, HttpClientCommand.Put, rainexceedanceclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesitePutModel$, e);
      })))
    );
  }

  PostRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.httpClientService.BeforeHttpClient(this.rainexceedanceclimatesitePostModel$);

    return this.httpClient.post<RainExceedanceClimateSite>('/api/RainExceedanceClimateSite', rainexceedanceclimatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesitePostModel$, x, HttpClientCommand.Post, rainexceedanceclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesitePostModel$, e);
      })))
    );
  }

  DeleteRainExceedanceClimateSite(rainexceedanceclimatesite: RainExceedanceClimateSite) {
    this.httpClientService.BeforeHttpClient(this.rainexceedanceclimatesiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/RainExceedanceClimateSite/${ rainexceedanceclimatesite.RainExceedanceClimateSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesiteDeleteModel$, x, HttpClientCommand.Delete, rainexceedanceclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<RainExceedanceClimateSite>(this.rainexceedanceclimatesiteListModel$, this.rainexceedanceclimatesiteDeleteModel$, e);
      })))
    );
  }
}
