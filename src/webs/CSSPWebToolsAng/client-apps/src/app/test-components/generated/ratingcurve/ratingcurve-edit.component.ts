/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { RatingCurveService } from './ratingcurve.service';
import { LoadLocalesRatingCurveText } from './ratingcurve.locales';
import { Subscription } from 'rxjs';
import { RatingCurve } from '../../../models/generated/RatingCurve.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-ratingcurve-edit',
  templateUrl: './ratingcurve-edit.component.html',
  styleUrls: ['./ratingcurve-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class RatingCurveEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  ratingcurveFormEdit: FormGroup;
  @Input() ratingcurve: RatingCurve = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public ratingcurveService: RatingCurveService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutRatingCurve(ratingcurve: RatingCurve) {
    this.sub = this.ratingcurveService.PutRatingCurve(ratingcurve).subscribe();
  }

  PostRatingCurve(ratingcurve: RatingCurve) {
    this.sub = this.ratingcurveService.PostRatingCurve(ratingcurve).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesRatingCurveText(this.ratingcurveService);
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.ratingcurve) {
      let formGroup: FormGroup = this.fb.group(
        {
          RatingCurveID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.ratingcurveService.ratingcurveListModel$.getValue()[0]?.RatingCurveID)),
              disabled: false
            }, [Validators.required]],
          HydrometricSiteID: [
            {
              value: this.ratingcurveService.ratingcurveListModel$.getValue()[0]?.HydrometricSiteID,
              disabled: false
            }, [Validators.required]],
          RatingCurveNumber: [
            {
              value: this.ratingcurveService.ratingcurveListModel$.getValue()[0]?.RatingCurveNumber,
              disabled: false
            }, [Validators.required, Validators.maxLength(50)]],
          LastUpdateDate_UTC: [
            {
              value: this.ratingcurveService.ratingcurveListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.ratingcurveService.ratingcurveListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.ratingcurveFormEdit = formGroup
    }
  }
}
