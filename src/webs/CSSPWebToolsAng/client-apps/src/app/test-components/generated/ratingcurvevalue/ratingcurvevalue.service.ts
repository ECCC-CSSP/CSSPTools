/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { RatingCurveValueTextModel, RatingCurveValueModel } from './ratingcurvevalue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesRatingCurveValueText } from './ratingcurvevalue.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { RatingCurveValue } from 'src/app/models/generated/RatingCurveValue.model';

@Injectable({
  providedIn: 'root'
})
export class RatingCurveValueService {
  ratingcurvevalueTextModel$: BehaviorSubject<RatingCurveValueTextModel> = new BehaviorSubject<RatingCurveValueTextModel>(<RatingCurveValueTextModel>{});
  ratingcurvevalueModel$: BehaviorSubject<RatingCurveValueModel> = new BehaviorSubject<RatingCurveValueModel>(<RatingCurveValueModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesRatingCurveValueText(this);
    this.UpdateRatingCurveValueText(<RatingCurveValueTextModel>{ Title: "Something2 for text" });
  }

  UpdateRatingCurveValueText(ratingcurvevalueTextModel: RatingCurveValueTextModel) {
    this.ratingcurvevalueTextModel$.next(<RatingCurveValueTextModel>{ ...this.ratingcurvevalueTextModel$.getValue(), ...ratingcurvevalueTextModel });
  }

  UpdateRatingCurveValueModel(ratingcurvevalueModel: RatingCurveValueModel) {
    this.ratingcurvevalueModel$.next(<RatingCurveValueModel>{ ...this.ratingcurvevalueModel$.getValue(), ...ratingcurvevalueModel });
  }

  GetRatingCurveValue(router: Router) {
    let oldURL = router.url;
    this.UpdateRatingCurveValueModel(<RatingCurveValueModel>{ Working: true, Error: null });

    return this.httpClient.get<RatingCurveValue[]>('/api/RatingCurveValue').pipe(
      map((x: any) => {
        console.debug(`RatingCurveValue OK. Return: ${x}`);
        this.ratingcurvevalueModel$.getValue().RatingCurveValueList = <RatingCurveValue[]>x;
        this.UpdateRatingCurveValueModel(this.ratingcurvevalueModel$.getValue());
        this.UpdateRatingCurveValueModel(<RatingCurveValueModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateRatingCurveValueModel(<RatingCurveValueModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`RatingCurveValue ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
