/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { ReportSectionService } from './reportsection.service';
import { LoadLocalesReportSectionText } from './reportsection.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { ReportSection } from '../../../models/generated/ReportSection.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-reportsection',
  templateUrl: './reportsection.component.html',
  styleUrls: ['./reportsection.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ReportSectionComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  reportsectionFormPut: FormGroup;
  reportsectionFormPost: FormGroup;

  constructor(public reportsectionService: ReportSectionService, public router: Router, public fb: FormBuilder) { }

  GetReportSectionList() {
    this.sub = this.reportsectionService.GetReportSectionList(this.router).subscribe();
  }

  PutReportSection(reportsection: ReportSection) {
    this.sub = this.reportsectionService.PutReportSection(reportsection, this.router).subscribe();
  }

  PostReportSection(reportsection: ReportSection) {
    this.sub = this.reportsectionService.PostReportSection(reportsection, this.router).subscribe();
  }

  DeleteReportSection(reportsection: ReportSection) {
    this.sub = this.reportsectionService.DeleteReportSection(reportsection, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesReportSectionText(this.reportsectionService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.reportsectionService.reportsectionList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          ReportSectionID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.reportsectionService.reportsectionList[0]?.ReportSectionID)),
              disabled: false
            }, [ Validators.required ]],
          ReportTypeID: [
            {
              value: this.reportsectionService.reportsectionList[0]?.ReportTypeID,
              disabled: false
            }, [ Validators.required ]],
          TVItemID: [
            {
              value: this.reportsectionService.reportsectionList[0]?.TVItemID,
              disabled: false
            }, [ Validators.required ]],
          Language: [
            {
              value: this.reportsectionService.reportsectionList[0]?.Language,
              disabled: false
            }, [ Validators.required ]],
          Ordinal: [
            {
              value: this.reportsectionService.reportsectionList[0]?.Ordinal,
              disabled: false
            }, [ Validators.required ]],
          IsStatic: [
            {
              value: this.reportsectionService.reportsectionList[0]?.IsStatic,
              disabled: false
            }, [ Validators.required ]],
          ParentReportSectionID: [
            {
              value: this.reportsectionService.reportsectionList[0]?.ParentReportSectionID,
              disabled: false
            }, [ Validators.required ]],
          Year: [
            {
              value: this.reportsectionService.reportsectionList[0]?.Year,
              disabled: false
            }, [ Validators.required ]],
          Locked: [
            {
              value: this.reportsectionService.reportsectionList[0]?.Locked,
              disabled: false
            }, [ Validators.required ]],
          TemplateReportSectionID: [
            {
              value: this.reportsectionService.reportsectionList[0]?.TemplateReportSectionID,
              disabled: false
            }, [ Validators.required ]],
          ReportSectionName: [
            {
              value: this.reportsectionService.reportsectionList[0]?.ReportSectionName,
              disabled: false
            }, [ Validators.required ]],
          ReportSectionText: [
            {
              value: this.reportsectionService.reportsectionList[0]?.ReportSectionText,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.reportsectionService.reportsectionList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.reportsectionService.reportsectionList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.reportsectionFormPost = formGroup
      }
      else {
        this.reportsectionFormPut = formGroup;
      }
    }
  }
}
