/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ReportSectionTextModel, ReportSectionModel } from './reportsection.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesReportSectionText } from './reportsection.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ReportSection } from 'src/app/models/generated/ReportSection.model';

@Injectable({
  providedIn: 'root'
})
export class ReportSectionService {
  reportsectionTextModel$: BehaviorSubject<ReportSectionTextModel> = new BehaviorSubject<ReportSectionTextModel>(<ReportSectionTextModel>{});
  reportsectionModel$: BehaviorSubject<ReportSectionModel> = new BehaviorSubject<ReportSectionModel>(<ReportSectionModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesReportSectionText(this);
    this.UpdateReportSectionText(<ReportSectionTextModel>{ Title: "Something2 for text" });
  }

  UpdateReportSectionText(reportsectionTextModel: ReportSectionTextModel) {
    this.reportsectionTextModel$.next(<ReportSectionTextModel>{ ...this.reportsectionTextModel$.getValue(), ...reportsectionTextModel });
  }

  UpdateReportSectionModel(reportsectionModel: ReportSectionModel) {
    this.reportsectionModel$.next(<ReportSectionModel>{ ...this.reportsectionModel$.getValue(), ...reportsectionModel });
  }

  GetReportSection(router: Router) {
    let oldURL = router.url;
    this.UpdateReportSectionModel(<ReportSectionModel>{ Working: true, Error: null });

    return this.httpClient.get<ReportSection[]>('/api/ReportSection').pipe(
      map((x: any) => {
        console.debug(`ReportSection OK. Return: ${x}`);
        this.reportsectionModel$.getValue().ReportSectionList = <ReportSection[]>x;
        this.UpdateReportSectionModel(this.reportsectionModel$.getValue());
        this.UpdateReportSectionModel(<ReportSectionModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateReportSectionModel(<ReportSectionModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ReportSection ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
