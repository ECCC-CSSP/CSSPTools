/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ReportSectionTextModel } from './reportsection.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesReportSectionText } from './reportsection.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ReportSection } from '../../../models/generated/ReportSection.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ReportSectionService {
  /* Variables */
  reportsectionTextModel$: BehaviorSubject<ReportSectionTextModel> = new BehaviorSubject<ReportSectionTextModel>(<ReportSectionTextModel>{});
  reportsectionListModel$: BehaviorSubject<ReportSection[]> = new BehaviorSubject<ReportSection[]>(<ReportSection[]>{});
  reportsectionGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reportsectionPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reportsectionPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reportsectionDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesReportSectionText(this.reportsectionTextModel$);
    this.reportsectionTextModel$.next(<ReportSectionTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetReportSectionList() {
    this.httpClientService.BeforeHttpClient(this.reportsectionGetModel$);

    return this.httpClient.get<ReportSection[]>('/api/ReportSection').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportSection>(this.reportsectionListModel$, this.reportsectionGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportSection>(this.reportsectionListModel$, this.reportsectionGetModel$, e);
      })))
    );
  }

  PutReportSection(reportsection: ReportSection) {
    this.httpClientService.BeforeHttpClient(this.reportsectionPutModel$);

    return this.httpClient.put<ReportSection>('/api/ReportSection', reportsection, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportSection>(this.reportsectionListModel$, this.reportsectionPutModel$, x, HttpClientCommand.Put, reportsection);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ReportSection>(this.reportsectionListModel$, this.reportsectionPutModel$, e);
      })))
    );
  }

  PostReportSection(reportsection: ReportSection) {
    this.httpClientService.BeforeHttpClient(this.reportsectionPostModel$);

    return this.httpClient.post<ReportSection>('/api/ReportSection', reportsection, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportSection>(this.reportsectionListModel$, this.reportsectionPostModel$, x, HttpClientCommand.Post, reportsection);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportSection>(this.reportsectionListModel$, this.reportsectionPostModel$, e);
      })))
    );
  }

  DeleteReportSection(reportsection: ReportSection) {
    this.httpClientService.BeforeHttpClient(this.reportsectionDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ReportSection/${ reportsection.ReportSectionID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportSection>(this.reportsectionListModel$, this.reportsectionDeleteModel$, x, HttpClientCommand.Delete, reportsection);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportSection>(this.reportsectionListModel$, this.reportsectionDeleteModel$, e);
      })))
    );
  }
}
