/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ReportTypeTextModel } from './reporttype.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesReportTypeText } from './reporttype.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ReportType } from '../../../models/generated/ReportType.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ReportTypeService {
  /* Variables */
  reporttypeTextModel$: BehaviorSubject<ReportTypeTextModel> = new BehaviorSubject<ReportTypeTextModel>(<ReportTypeTextModel>{});
  reporttypeListModel$: BehaviorSubject<ReportType[]> = new BehaviorSubject<ReportType[]>(<ReportType[]>{});
  reporttypeGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reporttypePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reporttypePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  reporttypeDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesReportTypeText(this.reporttypeTextModel$);
    this.reporttypeTextModel$.next(<ReportTypeTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetReportTypeList() {
    this.httpClientService.BeforeHttpClient(this.reporttypeGetModel$);

    return this.httpClient.get<ReportType[]>('/api/ReportType').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportType>(this.reporttypeListModel$, this.reporttypeGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportType>(this.reporttypeListModel$, this.reporttypeGetModel$, e);
      })))
    );
  }

  PutReportType(reporttype: ReportType) {
    this.httpClientService.BeforeHttpClient(this.reporttypePutModel$);

    return this.httpClient.put<ReportType>('/api/ReportType', reporttype, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportType>(this.reporttypeListModel$, this.reporttypePutModel$, x, HttpClientCommand.Put, reporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ReportType>(this.reporttypeListModel$, this.reporttypePutModel$, e);
      })))
    );
  }

  PostReportType(reporttype: ReportType) {
    this.httpClientService.BeforeHttpClient(this.reporttypePostModel$);

    return this.httpClient.post<ReportType>('/api/ReportType', reporttype, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportType>(this.reporttypeListModel$, this.reporttypePostModel$, x, HttpClientCommand.Post, reporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportType>(this.reporttypeListModel$, this.reporttypePostModel$, e);
      })))
    );
  }

  DeleteReportType(reporttype: ReportType) {
    this.httpClientService.BeforeHttpClient(this.reporttypeDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ReportType/${ reporttype.ReportTypeID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ReportType>(this.reporttypeListModel$, this.reporttypeDeleteModel$, x, HttpClientCommand.Delete, reporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ReportType>(this.reporttypeListModel$, this.reporttypeDeleteModel$, e);
      })))
    );
  }
}
