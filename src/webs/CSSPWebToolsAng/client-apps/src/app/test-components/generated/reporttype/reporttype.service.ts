/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ReportTypeTextModel, ReportTypeModel } from './reporttype.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesReportTypeText } from './reporttype.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ReportType } from 'src/app/models/generated/ReportType.model';

@Injectable({
  providedIn: 'root'
})
export class ReportTypeService {
  reporttypeTextModel$: BehaviorSubject<ReportTypeTextModel> = new BehaviorSubject<ReportTypeTextModel>(<ReportTypeTextModel>{});
  reporttypeModel$: BehaviorSubject<ReportTypeModel> = new BehaviorSubject<ReportTypeModel>(<ReportTypeModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesReportTypeText(this);
    this.UpdateReportTypeText(<ReportTypeTextModel>{ Title: "Something2 for text" });
  }

  UpdateReportTypeText(reporttypeTextModel: ReportTypeTextModel) {
    this.reporttypeTextModel$.next(<ReportTypeTextModel>{ ...this.reporttypeTextModel$.getValue(), ...reporttypeTextModel });
  }

  UpdateReportTypeModel(reporttypeModel: ReportTypeModel) {
    this.reporttypeModel$.next(<ReportTypeModel>{ ...this.reporttypeModel$.getValue(), ...reporttypeModel });
  }

  GetReportType(router: Router) {
    let oldURL = router.url;
    this.UpdateReportTypeModel(<ReportTypeModel>{ Working: true, Error: null });

    return this.httpClient.get<ReportType[]>('/api/ReportType').pipe(
      map((x: any) => {
        console.debug(`ReportType OK. Return: ${x}`);
        this.reporttypeModel$.getValue().ReportTypeList = <ReportType[]>x;
        this.UpdateReportTypeModel(this.reporttypeModel$.getValue());
        this.UpdateReportTypeModel(<ReportTypeModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateReportTypeModel(<ReportTypeModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ReportType ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
