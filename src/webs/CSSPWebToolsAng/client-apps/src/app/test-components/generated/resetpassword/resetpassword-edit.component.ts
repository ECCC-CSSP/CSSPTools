/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { ResetPasswordService } from './resetpassword.service';
import { LoadLocalesResetPasswordText } from './resetpassword.locales';
import { Subscription } from 'rxjs';
import { ResetPassword } from '../../../models/generated/ResetPassword.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-resetpassword-edit',
  templateUrl: './resetpassword-edit.component.html',
  styleUrls: ['./resetpassword-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ResetPasswordEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  resetpasswordFormEdit: FormGroup;
  @Input() resetpassword: ResetPassword = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public resetpasswordService: ResetPasswordService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutResetPassword(resetpassword: ResetPassword) {
    this.sub = this.resetpasswordService.PutResetPassword(resetpassword).subscribe();
  }

  PostResetPassword(resetpassword: ResetPassword) {
    this.sub = this.resetpasswordService.PostResetPassword(resetpassword).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.resetpassword) {
      let formGroup: FormGroup = this.fb.group(
        {
          ResetPasswordID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.resetpassword.ResetPasswordID)),
              disabled: false
            }, [Validators.required]],
          Email: [
            {
              value: this.resetpassword.Email,
              disabled: false
            }, [Validators.required, Validators.email, Validators.maxLength(256)]],
          ExpireDate_Local: [
            {
              value: this.resetpassword.ExpireDate_Local,
              disabled: false
            }, [Validators.required]],
          Code: [
            {
              value: this.resetpassword.Code,
              disabled: false
            }, [Validators.required, Validators.maxLength(8)]],
          LastUpdateDate_UTC: [
            {
              value: this.resetpassword.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.resetpassword.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.resetpasswordFormEdit = formGroup
    }
  }
}
