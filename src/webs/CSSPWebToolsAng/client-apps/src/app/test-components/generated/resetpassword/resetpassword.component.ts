/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { ResetPasswordService } from './resetpassword.service';
import { LoadLocalesResetPasswordText } from './resetpassword.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { ResetPassword } from '../../../models/generated/ResetPassword.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-resetpassword',
  templateUrl: './resetpassword.component.html',
  styleUrls: ['./resetpassword.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ResetPasswordComponent implements OnInit, OnDestroy {
  sub: Subscription;
  resetpasswordFormPut: FormGroup;
  resetpasswordFormPost: FormGroup;

  constructor(public resetpasswordService: ResetPasswordService, public router: Router, public fb: FormBuilder) { }

  GetResetPasswordList() {
    this.sub = this.resetpasswordService.GetResetPasswordList(this.router).subscribe();
  }

  PutResetPassword(resetpassword: ResetPassword) {
    this.sub = this.resetpasswordService.PutResetPassword(resetpassword, this.router).subscribe();
  }

  PostResetPassword(resetpassword: ResetPassword) {
    this.sub = this.resetpasswordService.PostResetPassword(resetpassword, this.router).subscribe();
  }

  DeleteResetPassword(resetpassword: ResetPassword) {
    this.sub = this.resetpasswordService.DeleteResetPassword(resetpassword, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesResetPasswordText(this.resetpasswordService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.resetpasswordService.resetpasswordList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          ResetPasswordID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.resetpasswordService.resetpasswordList[0]?.ResetPasswordID)),
              disabled: false
            }],
          Email: [
            {
              value: this.resetpasswordService.resetpasswordList[0]?.Email,
              disabled: false
            }],
          ExpireDate_Local: [
            {
              value: this.resetpasswordService.resetpasswordList[0]?.ExpireDate_Local,
              disabled: false
            }],
          Code: [
            {
              value: this.resetpasswordService.resetpasswordList[0]?.Code,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.resetpasswordService.resetpasswordList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.resetpasswordService.resetpasswordList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.resetpasswordFormPost = formGroup
      }
      else {
        this.resetpasswordFormPut = formGroup;
      }
    }
  }
}
