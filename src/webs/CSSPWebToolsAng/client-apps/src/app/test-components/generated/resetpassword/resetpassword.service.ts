/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ResetPasswordTextModel } from './resetpassword.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesResetPasswordText } from './resetpassword.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ResetPassword } from '../../../models/generated/ResetPassword.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class ResetPasswordService {
  /* Variables */
  resetpasswordTextModel$: BehaviorSubject<ResetPasswordTextModel> = new BehaviorSubject<ResetPasswordTextModel>(<ResetPasswordTextModel>{});
  resetpasswordListModel$: BehaviorSubject<ResetPassword[]> = new BehaviorSubject<ResetPassword[]>(<ResetPassword[]>{});
  resetpasswordGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  resetpasswordPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  resetpasswordPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  resetpasswordDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesResetPasswordText(this.resetpasswordTextModel$);
    this.resetpasswordTextModel$.next(<ResetPasswordTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetResetPasswordList() {
    this.httpClientService.BeforeHttpClient(this.resetpasswordGetModel$);

    return this.httpClient.get<ResetPassword[]>('/api/ResetPassword').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordGetModel$, e);
      })))
    );
  }

  PutResetPassword(resetpassword: ResetPassword) {
    this.httpClientService.BeforeHttpClient(this.resetpasswordPutModel$);

    return this.httpClient.put<ResetPassword>('/api/ResetPassword', resetpassword, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordPutModel$, x, HttpClientCommand.Put, resetpassword);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordPutModel$, e);
      })))
    );
  }

  PostResetPassword(resetpassword: ResetPassword) {
    this.httpClientService.BeforeHttpClient(this.resetpasswordPostModel$);

    return this.httpClient.post<ResetPassword>('/api/ResetPassword', resetpassword, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordPostModel$, x, HttpClientCommand.Post, resetpassword);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordPostModel$, e);
      })))
    );
  }

  DeleteResetPassword(resetpassword: ResetPassword) {
    this.httpClientService.BeforeHttpClient(this.resetpasswordDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/ResetPassword/${ resetpassword.ResetPasswordID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordDeleteModel$, x, HttpClientCommand.Delete, resetpassword);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<ResetPassword>(this.resetpasswordListModel$, this.resetpasswordDeleteModel$, e);
      })))
    );
  }
}
