/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { SamplingPlanService } from './samplingplan.service';
import { LoadLocalesSamplingPlanText } from './samplingplan.locales';
import { Subscription } from 'rxjs';
import { SampleTypeEnum_GetIDText } from '../../../enums/generated/SampleTypeEnum';
import { SamplingPlanTypeEnum_GetIDText } from '../../../enums/generated/SamplingPlanTypeEnum';
import { LabSheetTypeEnum_GetIDText } from '../../../enums/generated/LabSheetTypeEnum';
import { AnalyzeMethodEnum_GetIDText } from '../../../enums/generated/AnalyzeMethodEnum';
import { SampleMatrixEnum_GetIDText } from '../../../enums/generated/SampleMatrixEnum';
import { LaboratoryEnum_GetIDText } from '../../../enums/generated/LaboratoryEnum';
import { SamplingPlan } from '../../../models/generated/SamplingPlan.model';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-samplingplan',
  templateUrl: './samplingplan.component.html',
  styleUrls: ['./samplingplan.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SamplingPlanComponent implements OnInit, OnDestroy {
  sub: Subscription;
  IDToShow: number;
  showType?: HttpClientCommand = null;

  constructor(public samplingplanService: SamplingPlanService, private router: Router, private httpClientService: HttpClientService) {
    httpClientService.oldURL = router.url;
  }

  GetPutButtonColor(samplingplan: SamplingPlan) {
    if (this.IDToShow === samplingplan.SamplingPlanID && this.showType === HttpClientCommand.Put) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  GetPostButtonColor(samplingplan: SamplingPlan) {
    if (this.IDToShow === samplingplan.SamplingPlanID && this.showType === HttpClientCommand.Post) {
      return 'primary';
    }
    else {
      return 'basic';
    }
  }

  ShowPut(samplingplan: SamplingPlan) {
    if (this.IDToShow === samplingplan.SamplingPlanID && this.showType === HttpClientCommand.Put) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = samplingplan.SamplingPlanID;
      this.showType = HttpClientCommand.Put;
    }
  }

  ShowPost(samplingplan: SamplingPlan) {
    if (this.IDToShow === samplingplan.SamplingPlanID && this.showType === HttpClientCommand.Post) {
      this.IDToShow = 0;
      this.showType = null;
    }
    else {
      this.IDToShow = samplingplan.SamplingPlanID;
      this.showType = HttpClientCommand.Post;
    }
  }

  GetPutEnum() {
    return <number>HttpClientCommand.Put;
  }

  GetPostEnum() {
    return <number>HttpClientCommand.Post;
  }

  GetSamplingPlanList() {
    this.sub = this.samplingplanService.GetSamplingPlanList().subscribe();
  }

  DeleteSamplingPlan(samplingplan: SamplingPlan) {
    this.sub = this.samplingplanService.DeleteSamplingPlan(samplingplan).subscribe();
  }

  GetSampleTypeEnumText(enumID: number) {
    return SampleTypeEnum_GetIDText(enumID)
  }

  GetSamplingPlanTypeEnumText(enumID: number) {
    return SamplingPlanTypeEnum_GetIDText(enumID)
  }

  GetLabSheetTypeEnumText(enumID: number) {
    return LabSheetTypeEnum_GetIDText(enumID)
  }

  GetAnalyzeMethodEnumText(enumID: number) {
    return AnalyzeMethodEnum_GetIDText(enumID)
  }

  GetSampleMatrixEnumText(enumID: number) {
    return SampleMatrixEnum_GetIDText(enumID)
  }

  GetLaboratoryEnumText(enumID: number) {
    return LaboratoryEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesSamplingPlanText(this.samplingplanService.samplingplanTextModel$);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }
}
