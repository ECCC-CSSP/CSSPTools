/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { SamplingPlanEmailService } from './samplingplanemail.service';
import { LoadLocalesSamplingPlanEmailText } from './samplingplanemail.locales';
import { Subscription } from 'rxjs';
import { SamplingPlanEmail } from '../../../models/generated/SamplingPlanEmail.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-samplingplanemail-edit',
  templateUrl: './samplingplanemail-edit.component.html',
  styleUrls: ['./samplingplanemail-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SamplingPlanEmailEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  samplingplanemailFormEdit: FormGroup;
  @Input() samplingplanemail: SamplingPlanEmail = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public samplingplanemailService: SamplingPlanEmailService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutSamplingPlanEmail(samplingplanemail: SamplingPlanEmail) {
    this.sub = this.samplingplanemailService.PutSamplingPlanEmail(samplingplanemail).subscribe();
  }

  PostSamplingPlanEmail(samplingplanemail: SamplingPlanEmail) {
    this.sub = this.samplingplanemailService.PostSamplingPlanEmail(samplingplanemail).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesSamplingPlanEmailText(this.samplingplanemailService);
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.samplingplanemail) {
      let formGroup: FormGroup = this.fb.group(
        {
          SamplingPlanEmailID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.SamplingPlanEmailID)),
              disabled: false
            }, [  Validators.required ]],
          SamplingPlanID: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.SamplingPlanID,
              disabled: false
            }, [  Validators.required ]],
          Email: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.Email,
              disabled: false
            }, [  Validators.required, Validators.email, Validators.maxLength(150) ]],
          IsContractor: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.IsContractor,
              disabled: false
            }, [  Validators.required ]],
          LabSheetHasValueOver500: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LabSheetHasValueOver500,
              disabled: false
            }, [  Validators.required ]],
          LabSheetReceived: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LabSheetReceived,
              disabled: false
            }, [  Validators.required ]],
          LabSheetAccepted: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LabSheetAccepted,
              disabled: false
            }, [  Validators.required ]],
          LabSheetRejected: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LabSheetRejected,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.samplingplanemailService.samplingplanemailListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      this.samplingplanemailFormEdit = formGroup
    }
  }
}
