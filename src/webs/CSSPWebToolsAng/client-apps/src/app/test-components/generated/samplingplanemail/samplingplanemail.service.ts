/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SamplingPlanEmailTextModel } from './samplingplanemail.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSamplingPlanEmailText } from './samplingplanemail.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SamplingPlanEmail } from '../../../models/generated/SamplingPlanEmail.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class SamplingPlanEmailService {
  /* Variables */
  samplingplanemailTextModel$: BehaviorSubject<SamplingPlanEmailTextModel> = new BehaviorSubject<SamplingPlanEmailTextModel>(<SamplingPlanEmailTextModel>{});
  samplingplanemailListModel$: BehaviorSubject<SamplingPlanEmail[]> = new BehaviorSubject<SamplingPlanEmail[]>(<SamplingPlanEmail[]>{});
  samplingplanemailGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanemailPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanemailPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanemailDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesSamplingPlanEmailText(this.samplingplanemailTextModel$);
    this.samplingplanemailTextModel$.next(<SamplingPlanEmailTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetSamplingPlanEmailList() {
    this.httpClientService.BeforeHttpClient(this.samplingplanemailGetModel$);

    return this.httpClient.get<SamplingPlanEmail[]>('/api/SamplingPlanEmail').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailGetModel$, e);
      })))
    );
  }

  PutSamplingPlanEmail(samplingplanemail: SamplingPlanEmail) {
    this.httpClientService.BeforeHttpClient(this.samplingplanemailPutModel$);

    return this.httpClient.put<SamplingPlanEmail>('/api/SamplingPlanEmail', samplingplanemail, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailPutModel$, x, HttpClientCommand.Put, samplingplanemail);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailPutModel$, e);
      })))
    );
  }

  PostSamplingPlanEmail(samplingplanemail: SamplingPlanEmail) {
    this.httpClientService.BeforeHttpClient(this.samplingplanemailPostModel$);

    return this.httpClient.post<SamplingPlanEmail>('/api/SamplingPlanEmail', samplingplanemail, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailPostModel$, x, HttpClientCommand.Post, samplingplanemail);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailPostModel$, e);
      })))
    );
  }

  DeleteSamplingPlanEmail(samplingplanemail: SamplingPlanEmail) {
    this.httpClientService.BeforeHttpClient(this.samplingplanemailDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/SamplingPlanEmail/${ samplingplanemail.SamplingPlanEmailID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailDeleteModel$, x, HttpClientCommand.Delete, samplingplanemail);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanEmail>(this.samplingplanemailListModel$, this.samplingplanemailDeleteModel$, e);
      })))
    );
  }
}
