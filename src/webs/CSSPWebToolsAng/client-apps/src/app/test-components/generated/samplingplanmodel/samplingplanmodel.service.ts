/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SamplingPlanModelTextModel } from './samplingplanmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSamplingPlanModelText } from './samplingplanmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SamplingPlanModel } from '../../../models/generated/SamplingPlanModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class SamplingPlanModelService {
  /* Variables */
  samplingplanmodelTextModel$: BehaviorSubject<SamplingPlanModelTextModel> = new BehaviorSubject<SamplingPlanModelTextModel>(<SamplingPlanModelTextModel>{});
  samplingplanmodelListModel$: BehaviorSubject<SamplingPlanModel[]> = new BehaviorSubject<SamplingPlanModel[]>(<SamplingPlanModel[]>{});
  samplingplanmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplanmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesSamplingPlanModelText(this.samplingplanmodelTextModel$);
    this.samplingplanmodelTextModel$.next(<SamplingPlanModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetSamplingPlanModelList() {
    this.httpClientService.BeforeHttpClient(this.samplingplanmodelGetModel$);

    return this.httpClient.get<SamplingPlanModel[]>('/api/SamplingPlanModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelGetModel$, e);
      })))
    );
  }

  PutSamplingPlanModel(samplingplanmodel: SamplingPlanModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplanmodelPutModel$);

    return this.httpClient.put<SamplingPlanModel>('/api/SamplingPlanModel', samplingplanmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelPutModel$, x, HttpClientCommand.Put, samplingplanmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelPutModel$, e);
      })))
    );
  }

  PostSamplingPlanModel(samplingplanmodel: SamplingPlanModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplanmodelPostModel$);

    return this.httpClient.post<SamplingPlanModel>('/api/SamplingPlanModel', samplingplanmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelPostModel$, x, HttpClientCommand.Post, samplingplanmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelPostModel$, e);
      })))
    );
  }

  DeleteSamplingPlanModel(samplingplanmodel: SamplingPlanModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplanmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/SamplingPlanModel/${ samplingplanmodel.SamplingPlanModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelDeleteModel$, x, HttpClientCommand.Delete, samplingplanmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanModel>(this.samplingplanmodelListModel$, this.samplingplanmodelDeleteModel$, e);
      })))
    );
  }
}
