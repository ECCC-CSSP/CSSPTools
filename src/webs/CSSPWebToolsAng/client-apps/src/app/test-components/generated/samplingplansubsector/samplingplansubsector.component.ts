/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { SamplingPlanSubsectorService } from './samplingplansubsector.service';
import { LoadLocalesSamplingPlanSubsectorText } from './samplingplansubsector.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { SamplingPlanSubsector } from '../../../models/generated/SamplingPlanSubsector.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-samplingplansubsector',
  templateUrl: './samplingplansubsector.component.html',
  styleUrls: ['./samplingplansubsector.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SamplingPlanSubsectorComponent implements OnInit, OnDestroy {
  sub: Subscription;
  samplingplansubsectorFormPut: FormGroup;
  samplingplansubsectorFormPost: FormGroup;

  constructor(public samplingplansubsectorService: SamplingPlanSubsectorService, public router: Router, public fb: FormBuilder) { }

  GetSamplingPlanSubsectorList() {
    this.sub = this.samplingplansubsectorService.GetSamplingPlanSubsectorList(this.router).subscribe();
  }

  PutSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.PutSamplingPlanSubsector(samplingplansubsector, this.router).subscribe();
  }

  PostSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.PostSamplingPlanSubsector(samplingplansubsector, this.router).subscribe();
  }

  DeleteSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.DeleteSamplingPlanSubsector(samplingplansubsector, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesSamplingPlanSubsectorText(this.samplingplansubsectorService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.samplingplansubsectorService.samplingplansubsectorList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          SamplingPlanSubsectorID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.samplingplansubsectorService.samplingplansubsectorList[0]?.SamplingPlanSubsectorID ?? '')),
              disabled: false
            }, Validators.required],
          SamplingPlanID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorList[0]?.SamplingPlanID ?? '',
              disabled: false
            }, Validators.required],
          SubsectorTVItemID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorList[0]?.SubsectorTVItemID ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.samplingplansubsectorFormPost = formGroup
      }
      else {
        this.samplingplansubsectorFormPut = formGroup;
      }
    }
  }
}
