/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { SamplingPlanSubsectorService } from './samplingplansubsector.service';
import { LoadLocalesSamplingPlanSubsectorText } from './samplingplansubsector.locales';
import { Subscription } from 'rxjs';
import { SamplingPlanSubsector } from '../../../models/generated/SamplingPlanSubsector.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-samplingplansubsector',
  templateUrl: './samplingplansubsector.component.html',
  styleUrls: ['./samplingplansubsector.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SamplingPlanSubsectorComponent implements OnInit, OnDestroy {
  sub: Subscription;
  samplingplansubsectorFormPut: FormGroup;
  samplingplansubsectorFormPost: FormGroup;

  constructor(public samplingplansubsectorService: SamplingPlanSubsectorService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetSamplingPlanSubsectorList() {
    this.sub = this.samplingplansubsectorService.GetSamplingPlanSubsectorList().subscribe();
  }

  PutSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.PutSamplingPlanSubsector(samplingplansubsector).subscribe();
  }

  PostSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.PostSamplingPlanSubsector(samplingplansubsector).subscribe();
  }

  DeleteSamplingPlanSubsector(samplingplansubsector: SamplingPlanSubsector) {
    this.sub = this.samplingplansubsectorService.DeleteSamplingPlanSubsector(samplingplansubsector).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesSamplingPlanSubsectorText(this.samplingplansubsectorService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          SamplingPlanSubsectorID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue()[0]?.SamplingPlanSubsectorID)),
              disabled: false
            }, [  Validators.required ]],
          SamplingPlanID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue()[0]?.SamplingPlanID,
              disabled: false
            }, [  Validators.required ]],
          SubsectorTVItemID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue()[0]?.SubsectorTVItemID,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.samplingplansubsectorService.samplingplansubsectorListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.samplingplansubsectorFormPost = formGroup
      }
      else {
        this.samplingplansubsectorFormPut = formGroup;
      }
    }
  }
}
