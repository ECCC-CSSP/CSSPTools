/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SamplingPlanSubsectorTextModel, SamplingPlanSubsectorModel } from './samplingplansubsector.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSamplingPlanSubsectorText } from './samplingplansubsector.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SamplingPlanSubsector } from 'src/app/models/generated/SamplingPlanSubsector.model';

@Injectable({
  providedIn: 'root'
})
export class SamplingPlanSubsectorService {
  samplingplansubsectorTextModel$: BehaviorSubject<SamplingPlanSubsectorTextModel> = new BehaviorSubject<SamplingPlanSubsectorTextModel>(<SamplingPlanSubsectorTextModel>{});
  samplingplansubsectorModel$: BehaviorSubject<SamplingPlanSubsectorModel> = new BehaviorSubject<SamplingPlanSubsectorModel>(<SamplingPlanSubsectorModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesSamplingPlanSubsectorText(this);
    this.UpdateSamplingPlanSubsectorText(<SamplingPlanSubsectorTextModel>{ Title: "Something2 for text" });
  }

  UpdateSamplingPlanSubsectorText(samplingplansubsectorTextModel: SamplingPlanSubsectorTextModel) {
    this.samplingplansubsectorTextModel$.next(<SamplingPlanSubsectorTextModel>{ ...this.samplingplansubsectorTextModel$.getValue(), ...samplingplansubsectorTextModel });
  }

  UpdateSamplingPlanSubsectorModel(samplingplansubsectorModel: SamplingPlanSubsectorModel) {
    this.samplingplansubsectorModel$.next(<SamplingPlanSubsectorModel>{ ...this.samplingplansubsectorModel$.getValue(), ...samplingplansubsectorModel });
  }

  GetSamplingPlanSubsector(router: Router) {
    let oldURL = router.url;
    this.UpdateSamplingPlanSubsectorModel(<SamplingPlanSubsectorModel>{ Working: true, Error: null });

    return this.httpClient.get<SamplingPlanSubsector[]>('/api/SamplingPlanSubsector').pipe(
      map((x: any) => {
        console.debug(`SamplingPlanSubsector OK. Return: ${x}`);
        this.samplingplansubsectorModel$.getValue().SamplingPlanSubsectorList = <SamplingPlanSubsector[]>x;
        this.UpdateSamplingPlanSubsectorModel(this.samplingplansubsectorModel$.getValue());
        this.UpdateSamplingPlanSubsectorModel(<SamplingPlanSubsectorModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateSamplingPlanSubsectorModel(<SamplingPlanSubsectorModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`SamplingPlanSubsector ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
