/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SamplingPlanSubsectorModelTextModel } from './samplingplansubsectormodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSamplingPlanSubsectorModelText } from './samplingplansubsectormodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SamplingPlanSubsectorModel } from '../../../models/generated/SamplingPlanSubsectorModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class SamplingPlanSubsectorModelService {
  /* Variables */
  samplingplansubsectormodelTextModel$: BehaviorSubject<SamplingPlanSubsectorModelTextModel> = new BehaviorSubject<SamplingPlanSubsectorModelTextModel>(<SamplingPlanSubsectorModelTextModel>{});
  samplingplansubsectormodelListModel$: BehaviorSubject<SamplingPlanSubsectorModel[]> = new BehaviorSubject<SamplingPlanSubsectorModel[]>(<SamplingPlanSubsectorModel[]>{});
  samplingplansubsectormodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplansubsectormodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplansubsectormodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  samplingplansubsectormodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesSamplingPlanSubsectorModelText(this.samplingplansubsectormodelTextModel$);
    this.samplingplansubsectormodelTextModel$.next(<SamplingPlanSubsectorModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetSamplingPlanSubsectorModelList() {
    this.httpClientService.BeforeHttpClient(this.samplingplansubsectormodelGetModel$);

    return this.httpClient.get<SamplingPlanSubsectorModel[]>('/api/SamplingPlanSubsectorModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelGetModel$, e);
      })))
    );
  }

  PutSamplingPlanSubsectorModel(samplingplansubsectormodel: SamplingPlanSubsectorModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplansubsectormodelPutModel$);

    return this.httpClient.put<SamplingPlanSubsectorModel>('/api/SamplingPlanSubsectorModel', samplingplansubsectormodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelPutModel$, x, HttpClientCommand.Put, samplingplansubsectormodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelPutModel$, e);
      })))
    );
  }

  PostSamplingPlanSubsectorModel(samplingplansubsectormodel: SamplingPlanSubsectorModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplansubsectormodelPostModel$);

    return this.httpClient.post<SamplingPlanSubsectorModel>('/api/SamplingPlanSubsectorModel', samplingplansubsectormodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelPostModel$, x, HttpClientCommand.Post, samplingplansubsectormodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelPostModel$, e);
      })))
    );
  }

  DeleteSamplingPlanSubsectorModel(samplingplansubsectormodel: SamplingPlanSubsectorModel) {
    this.httpClientService.BeforeHttpClient(this.samplingplansubsectormodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/SamplingPlanSubsectorModel/${ samplingplansubsectormodel.SamplingPlanSubsectorModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelDeleteModel$, x, HttpClientCommand.Delete, samplingplansubsectormodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SamplingPlanSubsectorModel>(this.samplingplansubsectormodelListModel$, this.samplingplansubsectormodelDeleteModel$, e);
      })))
    );
  }
}
