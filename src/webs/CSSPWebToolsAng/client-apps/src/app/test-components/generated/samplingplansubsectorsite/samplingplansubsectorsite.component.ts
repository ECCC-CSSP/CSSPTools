/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { SamplingPlanSubsectorSiteService } from './samplingplansubsectorsite.service';
import { LoadLocalesSamplingPlanSubsectorSiteText } from './samplingplansubsectorsite.locales';
import { Subscription } from 'rxjs';
import { SamplingPlanSubsectorSite } from '../../../models/generated/SamplingPlanSubsectorSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-samplingplansubsectorsite',
  templateUrl: './samplingplansubsectorsite.component.html',
  styleUrls: ['./samplingplansubsectorsite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SamplingPlanSubsectorSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  samplingplansubsectorsiteFormPut: FormGroup;
  samplingplansubsectorsiteFormPost: FormGroup;

  constructor(public samplingplansubsectorsiteService: SamplingPlanSubsectorSiteService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetSamplingPlanSubsectorSiteList() {
    this.sub = this.samplingplansubsectorsiteService.GetSamplingPlanSubsectorSiteList().subscribe();
  }

  PutSamplingPlanSubsectorSite(samplingplansubsectorsite: SamplingPlanSubsectorSite) {
    this.sub = this.samplingplansubsectorsiteService.PutSamplingPlanSubsectorSite(samplingplansubsectorsite).subscribe();
  }

  PostSamplingPlanSubsectorSite(samplingplansubsectorsite: SamplingPlanSubsectorSite) {
    this.sub = this.samplingplansubsectorsiteService.PostSamplingPlanSubsectorSite(samplingplansubsectorsite).subscribe();
  }

  DeleteSamplingPlanSubsectorSite(samplingplansubsectorsite: SamplingPlanSubsectorSite) {
    this.sub = this.samplingplansubsectorsiteService.DeleteSamplingPlanSubsectorSite(samplingplansubsectorsite).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesSamplingPlanSubsectorSiteText(this.samplingplansubsectorsiteService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          SamplingPlanSubsectorSiteID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.SamplingPlanSubsectorSiteID)),
              disabled: false
            }, [  Validators.required ]],
          SamplingPlanSubsectorID: [
            {
              value: this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.SamplingPlanSubsectorID,
              disabled: false
            }, [  Validators.required ]],
          MWQMSiteTVItemID: [
            {
              value: this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.MWQMSiteTVItemID,
              disabled: false
            }, [  Validators.required ]],
          IsDuplicate: [
            {
              value: this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.IsDuplicate,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.samplingplansubsectorsiteService.samplingplansubsectorsiteListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.samplingplansubsectorsiteFormPost = formGroup
      }
      else {
        this.samplingplansubsectorsiteFormPut = formGroup;
      }
    }
  }
}
