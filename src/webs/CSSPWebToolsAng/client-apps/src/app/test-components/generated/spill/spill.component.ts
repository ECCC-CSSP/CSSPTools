/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { SpillService } from './spill.service';
import { LoadLocalesSpillText } from './spill.locales';
import { Subscription } from 'rxjs';
import { Spill } from '../../../models/generated/Spill.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientService } from '../../../services/http-client.service';
import { Router } from '@angular/router';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-spill',
  templateUrl: './spill.component.html',
  styleUrls: ['./spill.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SpillComponent implements OnInit, OnDestroy {
  sub: Subscription;
  spillFormPut: FormGroup;
  spillFormPost: FormGroup;

  constructor(public spillService: SpillService, private router: Router, private httpClientService: HttpClientService, private fb: FormBuilder) {
    httpClientService.oldURL = router.url;
  }

  GetSpillList() {
    this.sub = this.spillService.GetSpillList().subscribe();
  }

  PutSpill(spill: Spill) {
    this.sub = this.spillService.PutSpill(spill).subscribe();
  }

  PostSpill(spill: Spill) {
    this.sub = this.spillService.PostSpill(spill).subscribe();
  }

  DeleteSpill(spill: Spill) {
    this.sub = this.spillService.DeleteSpill(spill).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesSpillText(this.spillService);
    this.FillFormBuilderGroup(HttpClientCommand.Post);
    this.FillFormBuilderGroup(HttpClientCommand.Put);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.spillService.spillListModel$.getValue().length) {
      let formGroup: FormGroup = this.fb.group(
        {
          SpillID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.spillService.spillListModel$.getValue()[0]?.SpillID)),
              disabled: false
            }, [  Validators.required ]],
          MunicipalityTVItemID: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.MunicipalityTVItemID,
              disabled: false
            }, [  Validators.required ]],
          InfrastructureTVItemID: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.InfrastructureTVItemID,
              disabled: false
            }],
          StartDateTime_Local: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.StartDateTime_Local,
              disabled: false
            }, [  Validators.required ]],
          EndDateTime_Local: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.EndDateTime_Local,
              disabled: false
            }],
          AverageFlow_m3_day: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.AverageFlow_m3_day,
              disabled: false
            }, [  Validators.required, Validators.min(0), Validators.max(1000000) ]],
          LastUpdateDate_UTC: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [  Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.spillService.spillListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [  Validators.required ]],
        }
      );

      if (httpClientCommand === HttpClientCommand.Post) {
        this.spillFormPost = formGroup
      }
      else {
        this.spillFormPut = formGroup;
      }
    }
  }
}
