/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SpillTextModel } from './spill.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSpillText } from './spill.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Spill } from '../../../models/generated/Spill.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class SpillService {
  /* Variables */
  spillTextModel$: BehaviorSubject<SpillTextModel> = new BehaviorSubject<SpillTextModel>(<SpillTextModel>{});
  spillListModel$: BehaviorSubject<Spill[]> = new BehaviorSubject<Spill[]>(<Spill[]>{});
  spillGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spillPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spillPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spillDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesSpillText(this.spillTextModel$);
    this.spillTextModel$.next(<SpillTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetSpillList() {
    this.httpClientService.BeforeHttpClient(this.spillGetModel$);

    return this.httpClient.get<Spill[]>('/api/Spill').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Spill>(this.spillListModel$, this.spillGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Spill>(this.spillListModel$, this.spillGetModel$, e);
      })))
    );
  }

  PutSpill(spill: Spill) {
    this.httpClientService.BeforeHttpClient(this.spillPutModel$);

    return this.httpClient.put<Spill>('/api/Spill', spill, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Spill>(this.spillListModel$, this.spillPutModel$, x, HttpClientCommand.Put, spill);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<Spill>(this.spillListModel$, this.spillPutModel$, e);
      })))
    );
  }

  PostSpill(spill: Spill) {
    this.httpClientService.BeforeHttpClient(this.spillPostModel$);

    return this.httpClient.post<Spill>('/api/Spill', spill, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Spill>(this.spillListModel$, this.spillPostModel$, x, HttpClientCommand.Post, spill);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Spill>(this.spillListModel$, this.spillPostModel$, e);
      })))
    );
  }

  DeleteSpill(spill: Spill) {
    this.httpClientService.BeforeHttpClient(this.spillDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/Spill/${ spill.SpillID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Spill>(this.spillListModel$, this.spillDeleteModel$, x, HttpClientCommand.Delete, spill);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Spill>(this.spillListModel$, this.spillDeleteModel$, e);
      })))
    );
  }
}
