/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { SpillLanguageService } from './spilllanguage.service';
import { LoadLocalesSpillLanguageText } from './spilllanguage.locales';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { SpillLanguage } from '../../../models/generated/SpillLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enum-idandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-spilllanguage-edit',
  templateUrl: './spilllanguage-edit.component.html',
  styleUrls: ['./spilllanguage-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SpillLanguageEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusList: EnumIDAndText[];
  spilllanguageFormEdit: FormGroup;
  @Input() spilllanguage: SpillLanguage = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public spilllanguageService: SpillLanguageService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutSpillLanguage(spilllanguage: SpillLanguage) {
    this.sub = this.spilllanguageService.PutSpillLanguage(spilllanguage).subscribe();
  }

  PostSpillLanguage(spilllanguage: SpillLanguage) {
    this.sub = this.spilllanguageService.PostSpillLanguage(spilllanguage).subscribe();
  }

  ngOnInit(): void {
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusList = TranslationStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.spilllanguage) {
      let formGroup: FormGroup = this.fb.group(
        {
          SpillLanguageID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.spilllanguage.SpillLanguageID)),
              disabled: false
            }, [Validators.required]],
          SpillID: [
            {
              value: this.spilllanguage.SpillID,
              disabled: false
            }, [Validators.required]],
          Language: [
            {
              value: this.spilllanguage.Language,
              disabled: false
            }, [Validators.required]],
          SpillComment: [
            {
              value: this.spilllanguage.SpillComment,
              disabled: false
            }, [Validators.required]],
          TranslationStatus: [
            {
              value: this.spilllanguage.TranslationStatus,
              disabled: false
            }, [Validators.required]],
          LastUpdateDate_UTC: [
            {
              value: this.spilllanguage.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.spilllanguage.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.spilllanguageFormEdit = formGroup
    }
  }
}
