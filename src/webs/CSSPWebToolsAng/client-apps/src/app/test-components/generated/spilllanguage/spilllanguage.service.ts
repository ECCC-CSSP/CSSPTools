/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SpillLanguageTextModel } from './spilllanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSpillLanguageText } from './spilllanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SpillLanguage } from '../../../models/generated/SpillLanguage.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class SpillLanguageService {
  /* Variables */
  spilllanguageTextModel$: BehaviorSubject<SpillLanguageTextModel> = new BehaviorSubject<SpillLanguageTextModel>(<SpillLanguageTextModel>{});
  spilllanguageListModel$: BehaviorSubject<SpillLanguage[]> = new BehaviorSubject<SpillLanguage[]>(<SpillLanguage[]>{});
  spilllanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spilllanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spilllanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  spilllanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesSpillLanguageText(this.spilllanguageTextModel$);
    this.spilllanguageTextModel$.next(<SpillLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetSpillLanguageList() {
    this.httpClientService.BeforeHttpClient(this.spilllanguageGetModel$);

    return this.httpClient.get<SpillLanguage[]>('/api/SpillLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguageGetModel$, e);
      })))
    );
  }

  PutSpillLanguage(spilllanguage: SpillLanguage) {
    this.httpClientService.BeforeHttpClient(this.spilllanguagePutModel$);

    return this.httpClient.put<SpillLanguage>('/api/SpillLanguage', spilllanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguagePutModel$, x, HttpClientCommand.Put, spilllanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguagePutModel$, e);
      })))
    );
  }

  PostSpillLanguage(spilllanguage: SpillLanguage) {
    this.httpClientService.BeforeHttpClient(this.spilllanguagePostModel$);

    return this.httpClient.post<SpillLanguage>('/api/SpillLanguage', spilllanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguagePostModel$, x, HttpClientCommand.Post, spilllanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguagePostModel$, e);
      })))
    );
  }

  DeleteSpillLanguage(spilllanguage: SpillLanguage) {
    this.httpClientService.BeforeHttpClient(this.spilllanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/SpillLanguage/${ spilllanguage.SpillLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguageDeleteModel$, x, HttpClientCommand.Delete, spilllanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<SpillLanguage>(this.spilllanguageListModel$, this.spilllanguageDeleteModel$, e);
      })))
    );
  }
}
