/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TelTextModel } from './tel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTelText } from './tel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Tel } from '../../../models/generated/Tel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TelService {
  /* Variables */
  telTextModel$: BehaviorSubject<TelTextModel> = new BehaviorSubject<TelTextModel>(<TelTextModel>{});
  telListModel$: BehaviorSubject<Tel[]> = new BehaviorSubject<Tel[]>(<Tel[]>{});
  telGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTelText(this.telTextModel$);
    this.telTextModel$.next(<TelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTelList() {
    this.httpClientService.BeforeHttpClient(this.telGetModel$);

    return this.httpClient.get<Tel[]>('/api/Tel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Tel>(this.telListModel$, this.telGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Tel>(this.telListModel$, this.telGetModel$, e);
      })))
    );
  }

  PutTel(tel: Tel) {
    this.httpClientService.BeforeHttpClient(this.telPutModel$);

    return this.httpClient.put<Tel>('/api/Tel', tel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Tel>(this.telListModel$, this.telPutModel$, x, HttpClientCommand.Put, tel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<Tel>(this.telListModel$, this.telPutModel$, e);
      })))
    );
  }

  PostTel(tel: Tel) {
    this.httpClientService.BeforeHttpClient(this.telPostModel$);

    return this.httpClient.post<Tel>('/api/Tel', tel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Tel>(this.telListModel$, this.telPostModel$, x, HttpClientCommand.Post, tel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Tel>(this.telListModel$, this.telPostModel$, e);
      })))
    );
  }

  DeleteTel(tel: Tel) {
    this.httpClientService.BeforeHttpClient(this.telDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/Tel/${ tel.TelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<Tel>(this.telListModel$, this.telDeleteModel$, x, HttpClientCommand.Delete, tel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<Tel>(this.telListModel$, this.telDeleteModel$, e);
      })))
    );
  }
}
