/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TelModelTextModel } from './telmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTelModelText } from './telmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TelModel } from '../../../models/generated/TelModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TelModelService {
  /* Variables */
  telmodelTextModel$: BehaviorSubject<TelModelTextModel> = new BehaviorSubject<TelModelTextModel>(<TelModelTextModel>{});
  telmodelListModel$: BehaviorSubject<TelModel[]> = new BehaviorSubject<TelModel[]>(<TelModel[]>{});
  telmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  telmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTelModelText(this.telmodelTextModel$);
    this.telmodelTextModel$.next(<TelModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTelModelList() {
    this.httpClientService.BeforeHttpClient(this.telmodelGetModel$);

    return this.httpClient.get<TelModel[]>('/api/TelModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TelModel>(this.telmodelListModel$, this.telmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TelModel>(this.telmodelListModel$, this.telmodelGetModel$, e);
      })))
    );
  }

  PutTelModel(telmodel: TelModel) {
    this.httpClientService.BeforeHttpClient(this.telmodelPutModel$);

    return this.httpClient.put<TelModel>('/api/TelModel', telmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TelModel>(this.telmodelListModel$, this.telmodelPutModel$, x, HttpClientCommand.Put, telmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TelModel>(this.telmodelListModel$, this.telmodelPutModel$, e);
      })))
    );
  }

  PostTelModel(telmodel: TelModel) {
    this.httpClientService.BeforeHttpClient(this.telmodelPostModel$);

    return this.httpClient.post<TelModel>('/api/TelModel', telmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TelModel>(this.telmodelListModel$, this.telmodelPostModel$, x, HttpClientCommand.Post, telmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TelModel>(this.telmodelListModel$, this.telmodelPostModel$, e);
      })))
    );
  }

  DeleteTelModel(telmodel: TelModel) {
    this.httpClientService.BeforeHttpClient(this.telmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TelModel/${ telmodel.TelModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TelModel>(this.telmodelListModel$, this.telmodelDeleteModel$, x, HttpClientCommand.Delete, telmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TelModel>(this.telmodelListModel$, this.telmodelDeleteModel$, e);
      })))
    );
  }
}
