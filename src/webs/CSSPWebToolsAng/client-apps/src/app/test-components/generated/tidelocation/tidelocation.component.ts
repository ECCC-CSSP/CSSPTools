/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { TideLocationService } from './tidelocation.service';
import { LoadLocalesTideLocationText } from './tidelocation.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TideLocation } from '../../../models/generated/TideLocation.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-tidelocation',
  templateUrl: './tidelocation.component.html',
  styleUrls: ['./tidelocation.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TideLocationComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tidelocationFormPut: FormGroup;
  tidelocationFormPost: FormGroup;

  constructor(public tidelocationService: TideLocationService, public router: Router, public fb: FormBuilder) { }

  GetTideLocationList() {
    this.sub = this.tidelocationService.GetTideLocationList(this.router).subscribe();
  }

  PutTideLocation(tidelocation: TideLocation) {
    this.sub = this.tidelocationService.PutTideLocation(tidelocation, this.router).subscribe();
  }

  PostTideLocation(tidelocation: TideLocation) {
    this.sub = this.tidelocationService.PostTideLocation(tidelocation, this.router).subscribe();
  }

  DeleteTideLocation(tidelocation: TideLocation) {
    this.sub = this.tidelocationService.DeleteTideLocation(tidelocation, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesTideLocationText(this.tidelocationService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.tidelocationService.tidelocationList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          TideLocationID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.tidelocationService.tidelocationList[0]?.TideLocationID)),
              disabled: false
            }],
          Zone: [
            {
              value: this.tidelocationService.tidelocationList[0]?.Zone,
              disabled: false
            }],
          Name: [
            {
              value: this.tidelocationService.tidelocationList[0]?.Name,
              disabled: false
            }],
          Prov: [
            {
              value: this.tidelocationService.tidelocationList[0]?.Prov,
              disabled: false
            }],
          sid: [
            {
              value: this.tidelocationService.tidelocationList[0]?.sid,
              disabled: false
            }],
          Lat: [
            {
              value: this.tidelocationService.tidelocationList[0]?.Lat,
              disabled: false
            }],
          Lng: [
            {
              value: this.tidelocationService.tidelocationList[0]?.Lng,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.tidelocationService.tidelocationList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.tidelocationService.tidelocationList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.tidelocationFormPost = formGroup
      }
      else {
        this.tidelocationFormPut = formGroup;
      }
    }
  }
}
