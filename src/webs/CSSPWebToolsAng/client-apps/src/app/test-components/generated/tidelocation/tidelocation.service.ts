/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TideLocationTextModel } from './tidelocation.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTideLocationText } from './tidelocation.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TideLocation } from '../../../models/generated/TideLocation.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TideLocationService {
  /* Variables */
  tidelocationTextModel$: BehaviorSubject<TideLocationTextModel> = new BehaviorSubject<TideLocationTextModel>(<TideLocationTextModel>{});
  tidelocationListModel$: BehaviorSubject<TideLocation[]> = new BehaviorSubject<TideLocation[]>(<TideLocation[]>{});
  tidelocationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tidelocationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tidelocationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tidelocationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTideLocationText(this.tidelocationTextModel$);
    this.tidelocationTextModel$.next(<TideLocationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTideLocationList() {
    this.httpClientService.BeforeHttpClient(this.tidelocationGetModel$);

    return this.httpClient.get<TideLocation[]>('/api/TideLocation').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TideLocation>(this.tidelocationListModel$, this.tidelocationGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TideLocation>(this.tidelocationListModel$, this.tidelocationGetModel$, e);
      })))
    );
  }

  PutTideLocation(tidelocation: TideLocation) {
    this.httpClientService.BeforeHttpClient(this.tidelocationPutModel$);

    return this.httpClient.put<TideLocation>('/api/TideLocation', tidelocation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TideLocation>(this.tidelocationListModel$, this.tidelocationPutModel$, x, HttpClientCommand.Put, tidelocation);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TideLocation>(this.tidelocationListModel$, this.tidelocationPutModel$, e);
      })))
    );
  }

  PostTideLocation(tidelocation: TideLocation) {
    this.httpClientService.BeforeHttpClient(this.tidelocationPostModel$);

    return this.httpClient.post<TideLocation>('/api/TideLocation', tidelocation, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TideLocation>(this.tidelocationListModel$, this.tidelocationPostModel$, x, HttpClientCommand.Post, tidelocation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TideLocation>(this.tidelocationListModel$, this.tidelocationPostModel$, e);
      })))
    );
  }

  DeleteTideLocation(tidelocation: TideLocation) {
    this.httpClientService.BeforeHttpClient(this.tidelocationDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TideLocation/${ tidelocation.TideLocationID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TideLocation>(this.tidelocationListModel$, this.tidelocationDeleteModel$, x, HttpClientCommand.Delete, tidelocation);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TideLocation>(this.tidelocationListModel$, this.tidelocationDeleteModel$, e);
      })))
    );
  }
}
