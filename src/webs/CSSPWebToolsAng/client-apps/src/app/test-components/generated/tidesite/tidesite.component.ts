/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { TideSiteService } from './tidesite.service';
import { LoadLocalesTideSiteText } from './tidesite.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TideSite } from '../../../models/generated/TideSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-tidesite',
  templateUrl: './tidesite.component.html',
  styleUrls: ['./tidesite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TideSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tidesiteFormPut: FormGroup;
  tidesiteFormPost: FormGroup;

  constructor(public tidesiteService: TideSiteService, public router: Router, public fb: FormBuilder) { }

  GetTideSiteList() {
    this.sub = this.tidesiteService.GetTideSiteList(this.router).subscribe();
  }

  PutTideSite(tidesite: TideSite) {
    this.sub = this.tidesiteService.PutTideSite(tidesite, this.router).subscribe();
  }

  PostTideSite(tidesite: TideSite) {
    this.sub = this.tidesiteService.PostTideSite(tidesite, this.router).subscribe();
  }

  DeleteTideSite(tidesite: TideSite) {
    this.sub = this.tidesiteService.DeleteTideSite(tidesite, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesTideSiteText(this.tidesiteService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.tidesiteService.tidesiteList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          TideSiteID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.tidesiteService.tidesiteList[0]?.TideSiteID ?? '')),
              disabled: false
            }, Validators.required],
          TideSiteTVItemID: [
            {
              value: this.tidesiteService.tidesiteList[0]?.TideSiteTVItemID ?? '',
              disabled: false
            }, Validators.required],
          TideSiteName: [
            {
              value: this.tidesiteService.tidesiteList[0]?.TideSiteName ?? '',
              disabled: false
            }, Validators.required],
          Province: [
            {
              value: this.tidesiteService.tidesiteList[0]?.Province ?? '',
              disabled: false
            }, Validators.required],
          sid: [
            {
              value: this.tidesiteService.tidesiteList[0]?.sid ?? '',
              disabled: false
            }, Validators.required],
          Zone: [
            {
              value: this.tidesiteService.tidesiteList[0]?.Zone ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.tidesiteService.tidesiteList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.tidesiteService.tidesiteList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.tidesiteFormPost = formGroup
      }
      else {
        this.tidesiteFormPut = formGroup;
      }
    }
  }
}
