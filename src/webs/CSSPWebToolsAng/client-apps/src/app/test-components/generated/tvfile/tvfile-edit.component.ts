/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { TVFileService } from './tvfile.service';
import { LoadLocalesTVFileText } from './tvfile.locales';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { FilePurposeEnum_GetOrderedText } from '../../../enums/generated/FilePurposeEnum';
import { FileTypeEnum_GetOrderedText } from '../../../enums/generated/FileTypeEnum';
import { TVFile } from '../../../models/generated/TVFile.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enum-idandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-tvfile-edit',
  templateUrl: './tvfile-edit.component.html',
  styleUrls: ['./tvfile-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TVFileEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  templateTVTypeList: EnumIDAndText[];
  languageList: EnumIDAndText[];
  filePurposeList: EnumIDAndText[];
  fileTypeList: EnumIDAndText[];
  tvfileFormEdit: FormGroup;
  @Input() tvfile: TVFile = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public tvfileService: TVFileService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutTVFile(tvfile: TVFile) {
    this.sub = this.tvfileService.PutTVFile(tvfile).subscribe();
  }

  PostTVFile(tvfile: TVFile) {
    this.sub = this.tvfileService.PostTVFile(tvfile).subscribe();
  }

  ngOnInit(): void {
    this.templateTVTypeList = TVTypeEnum_GetOrderedText();
    this.languageList = LanguageEnum_GetOrderedText();
    this.filePurposeList = FilePurposeEnum_GetOrderedText();
    this.fileTypeList = FileTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.tvfile) {
      let formGroup: FormGroup = this.fb.group(
        {
          TVFileID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.tvfile.TVFileID)),
              disabled: false
            }, [Validators.required]],
          TVFileTVItemID: [
            {
              value: this.tvfile.TVFileTVItemID,
              disabled: false
            }, [Validators.required]],
          TemplateTVType: [
            {
              value: this.tvfile.TemplateTVType,
              disabled: false
            }],
          ReportTypeID: [
            {
              value: this.tvfile.ReportTypeID,
              disabled: false
            }],
          Parameters: [
            {
              value: this.tvfile.Parameters,
              disabled: false
            }],
          Year: [
            {
              value: this.tvfile.Year,
              disabled: false
            }, [Validators.min(1980), Validators.max(2050)]],
          Language: [
            {
              value: this.tvfile.Language,
              disabled: false
            }, [Validators.required]],
          FilePurpose: [
            {
              value: this.tvfile.FilePurpose,
              disabled: false
            }, [Validators.required]],
          FileType: [
            {
              value: this.tvfile.FileType,
              disabled: false
            }, [Validators.required]],
          FileSize_kb: [
            {
              value: this.tvfile.FileSize_kb,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(100000000)]],
          FileInfo: [
            {
              value: this.tvfile.FileInfo,
              disabled: false
            }],
          FileCreatedDate_UTC: [
            {
              value: this.tvfile.FileCreatedDate_UTC,
              disabled: false
            }, [Validators.required]],
          FromWater: [
            {
              value: this.tvfile.FromWater,
              disabled: false
            }],
          ClientFilePath: [
            {
              value: this.tvfile.ClientFilePath,
              disabled: false
            }, [Validators.maxLength(250)]],
          ServerFileName: [
            {
              value: this.tvfile.ServerFileName,
              disabled: false
            }, [Validators.required, Validators.maxLength(250)]],
          ServerFilePath: [
            {
              value: this.tvfile.ServerFilePath,
              disabled: false
            }, [Validators.required, Validators.maxLength(250)]],
          LastUpdateDate_UTC: [
            {
              value: this.tvfile.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.tvfile.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.tvfileFormEdit = formGroup
    }
  }
}
