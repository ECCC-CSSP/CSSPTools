/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { TVFileService } from './tvfile.service';
import { LoadLocalesTVFileText } from './tvfile.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { FilePurposeEnum_GetIDText, FilePurposeEnum_GetOrderedText } from '../../../enums/generated/FilePurposeEnum';
import { FileTypeEnum_GetIDText, FileTypeEnum_GetOrderedText } from '../../../enums/generated/FileTypeEnum';
import { TVFile } from '../../../models/generated/TVFile.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-tvfile',
  templateUrl: './tvfile.component.html',
  styleUrls: ['./tvfile.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TVFileComponent implements OnInit, OnDestroy {
  sub: Subscription;
  templateTVTypeList: EnumIDAndText[];
  languageList: EnumIDAndText[];
  filePurposeList: EnumIDAndText[];
  fileTypeList: EnumIDAndText[];
  tvfileFormPut: FormGroup;
  tvfileFormPost: FormGroup;

  constructor(public tvfileService: TVFileService, public router: Router, public fb: FormBuilder) { }

  GetTVFileList() {
    this.sub = this.tvfileService.GetTVFileList(this.router).subscribe();
  }

  PutTVFile(tvfile: TVFile) {
    this.sub = this.tvfileService.PutTVFile(tvfile, this.router).subscribe();
  }

  PostTVFile(tvfile: TVFile) {
    this.sub = this.tvfileService.PostTVFile(tvfile, this.router).subscribe();
  }

  DeleteTVFile(tvfile: TVFile) {
    this.sub = this.tvfileService.DeleteTVFile(tvfile, this.router).subscribe();
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetFilePurposeEnumText(enumID: number) {
    return FilePurposeEnum_GetIDText(enumID)
  }

  GetFileTypeEnumText(enumID: number) {
    return FileTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesTVFileText(this.tvfileService);
    this.templateTVTypeList = TVTypeEnum_GetOrderedText();
    this.languageList = LanguageEnum_GetOrderedText();
    this.filePurposeList = FilePurposeEnum_GetOrderedText();
    this.fileTypeList = FileTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.tvfileService.tvfileList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          TVFileID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.tvfileService.tvfileList[0]?.TVFileID)),
              disabled: false
            }, [ Validators.required ]],
          TVFileTVItemID: [
            {
              value: this.tvfileService.tvfileList[0]?.TVFileTVItemID,
              disabled: false
            }, [ Validators.required ]],
          TemplateTVType: [
            {
              value: this.tvfileService.tvfileList[0]?.TemplateTVType,
              disabled: false
            }, [ Validators.required ]],
          ReportTypeID: [
            {
              value: this.tvfileService.tvfileList[0]?.ReportTypeID,
              disabled: false
            }, [ Validators.required ]],
          Parameters: [
            {
              value: this.tvfileService.tvfileList[0]?.Parameters,
              disabled: false
            }, [ Validators.required ]],
          Year: [
            {
              value: this.tvfileService.tvfileList[0]?.Year,
              disabled: false
            }, [ Validators.required ]],
          Language: [
            {
              value: this.tvfileService.tvfileList[0]?.Language,
              disabled: false
            }, [ Validators.required ]],
          FilePurpose: [
            {
              value: this.tvfileService.tvfileList[0]?.FilePurpose,
              disabled: false
            }, [ Validators.required ]],
          FileType: [
            {
              value: this.tvfileService.tvfileList[0]?.FileType,
              disabled: false
            }, [ Validators.required ]],
          FileSize_kb: [
            {
              value: this.tvfileService.tvfileList[0]?.FileSize_kb,
              disabled: false
            }, [ Validators.required ]],
          FileInfo: [
            {
              value: this.tvfileService.tvfileList[0]?.FileInfo,
              disabled: false
            }, [ Validators.required ]],
          FileCreatedDate_UTC: [
            {
              value: this.tvfileService.tvfileList[0]?.FileCreatedDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          FromWater: [
            {
              value: this.tvfileService.tvfileList[0]?.FromWater,
              disabled: false
            }, [ Validators.required ]],
          ClientFilePath: [
            {
              value: this.tvfileService.tvfileList[0]?.ClientFilePath,
              disabled: false
            }, [ Validators.required ]],
          ServerFileName: [
            {
              value: this.tvfileService.tvfileList[0]?.ServerFileName,
              disabled: false
            }, [ Validators.required ]],
          ServerFilePath: [
            {
              value: this.tvfileService.tvfileList[0]?.ServerFilePath,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.tvfileService.tvfileList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.tvfileService.tvfileList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.tvfileFormPost = formGroup
      }
      else {
        this.tvfileFormPut = formGroup;
      }
    }
  }
}
