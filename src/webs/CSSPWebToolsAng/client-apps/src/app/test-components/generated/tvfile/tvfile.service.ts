/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVFileTextModel } from './tvfile.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVFileText } from './tvfile.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVFile } from '../../../models/generated/TVFile.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVFileService {
  /* Variables */
  tvfileTextModel$: BehaviorSubject<TVFileTextModel> = new BehaviorSubject<TVFileTextModel>(<TVFileTextModel>{});
  tvfileListModel$: BehaviorSubject<TVFile[]> = new BehaviorSubject<TVFile[]>(<TVFile[]>{});
  tvfileGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfileDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVFileText(this.tvfileTextModel$);
    this.tvfileTextModel$.next(<TVFileTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVFileList() {
    this.httpClientService.BeforeHttpClient(this.tvfileGetModel$);

    return this.httpClient.get<TVFile[]>('/api/TVFile').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFile>(this.tvfileListModel$, this.tvfileGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFile>(this.tvfileListModel$, this.tvfileGetModel$, e);
      })))
    );
  }

  PutTVFile(tvfile: TVFile) {
    this.httpClientService.BeforeHttpClient(this.tvfilePutModel$);

    return this.httpClient.put<TVFile>('/api/TVFile', tvfile, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFile>(this.tvfileListModel$, this.tvfilePutModel$, x, HttpClientCommand.Put, tvfile);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVFile>(this.tvfileListModel$, this.tvfilePutModel$, e);
      })))
    );
  }

  PostTVFile(tvfile: TVFile) {
    this.httpClientService.BeforeHttpClient(this.tvfilePostModel$);

    return this.httpClient.post<TVFile>('/api/TVFile', tvfile, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFile>(this.tvfileListModel$, this.tvfilePostModel$, x, HttpClientCommand.Post, tvfile);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFile>(this.tvfileListModel$, this.tvfilePostModel$, e);
      })))
    );
  }

  DeleteTVFile(tvfile: TVFile) {
    this.httpClientService.BeforeHttpClient(this.tvfileDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVFile/${ tvfile.TVFileID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFile>(this.tvfileListModel$, this.tvfileDeleteModel$, x, HttpClientCommand.Delete, tvfile);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFile>(this.tvfileListModel$, this.tvfileDeleteModel$, e);
      })))
    );
  }
}
