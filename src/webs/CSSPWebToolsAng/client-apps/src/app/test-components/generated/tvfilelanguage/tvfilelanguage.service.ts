/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVFileLanguageTextModel } from './tvfilelanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVFileLanguageText } from './tvfilelanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVFileLanguage } from '../../../models/generated/TVFileLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVFileLanguageService {
  /* Variables */
  tvfilelanguageTextModel$: BehaviorSubject<TVFileLanguageTextModel> = new BehaviorSubject<TVFileLanguageTextModel>(<TVFileLanguageTextModel>{});
  tvfilelanguageListModel$: BehaviorSubject<TVFileLanguage[]> = new BehaviorSubject<TVFileLanguage[]>(<TVFileLanguage[]>{});
  tvfilelanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilelanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilelanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilelanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVFileLanguageText(this.tvfilelanguageTextModel$);
    this.tvfilelanguageTextModel$.next(<TVFileLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVFileLanguageList() {
    this.httpClientService.BeforeHttpClient(this.tvfilelanguageGetModel$);

    return this.httpClient.get<TVFileLanguage[]>('/api/TVFileLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguageGetModel$, e);
      })))
    );
  }

  PutTVFileLanguage(tvfilelanguage: TVFileLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvfilelanguagePutModel$);

    return this.httpClient.put<TVFileLanguage>('/api/TVFileLanguage', tvfilelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguagePutModel$, x, HttpClientCommand.Put, tvfilelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguagePutModel$, e);
      })))
    );
  }

  PostTVFileLanguage(tvfilelanguage: TVFileLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvfilelanguagePostModel$);

    return this.httpClient.post<TVFileLanguage>('/api/TVFileLanguage', tvfilelanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguagePostModel$, x, HttpClientCommand.Post, tvfilelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguagePostModel$, e);
      })))
    );
  }

  DeleteTVFileLanguage(tvfilelanguage: TVFileLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvfilelanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVFileLanguage/${ tvfilelanguage.TVFileLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguageDeleteModel$, x, HttpClientCommand.Delete, tvfilelanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileLanguage>(this.tvfilelanguageListModel$, this.tvfilelanguageDeleteModel$, e);
      })))
    );
  }
}
