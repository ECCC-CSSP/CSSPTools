/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVFileModelTextModel } from './tvfilemodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVFileModelText } from './tvfilemodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVFileModel } from '../../../models/generated/TVFileModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVFileModelService {
  /* Variables */
  tvfilemodelTextModel$: BehaviorSubject<TVFileModelTextModel> = new BehaviorSubject<TVFileModelTextModel>(<TVFileModelTextModel>{});
  tvfilemodelListModel$: BehaviorSubject<TVFileModel[]> = new BehaviorSubject<TVFileModel[]>(<TVFileModel[]>{});
  tvfilemodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilemodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilemodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvfilemodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVFileModelText(this.tvfilemodelTextModel$);
    this.tvfilemodelTextModel$.next(<TVFileModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVFileModelList() {
    this.httpClientService.BeforeHttpClient(this.tvfilemodelGetModel$);

    return this.httpClient.get<TVFileModel[]>('/api/TVFileModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelGetModel$, e);
      })))
    );
  }

  PutTVFileModel(tvfilemodel: TVFileModel) {
    this.httpClientService.BeforeHttpClient(this.tvfilemodelPutModel$);

    return this.httpClient.put<TVFileModel>('/api/TVFileModel', tvfilemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelPutModel$, x, HttpClientCommand.Put, tvfilemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelPutModel$, e);
      })))
    );
  }

  PostTVFileModel(tvfilemodel: TVFileModel) {
    this.httpClientService.BeforeHttpClient(this.tvfilemodelPostModel$);

    return this.httpClient.post<TVFileModel>('/api/TVFileModel', tvfilemodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelPostModel$, x, HttpClientCommand.Post, tvfilemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelPostModel$, e);
      })))
    );
  }

  DeleteTVFileModel(tvfilemodel: TVFileModel) {
    this.httpClientService.BeforeHttpClient(this.tvfilemodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVFileModel/${ tvfilemodel.TVFileModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelDeleteModel$, x, HttpClientCommand.Delete, tvfilemodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVFileModel>(this.tvfilemodelListModel$, this.tvfilemodelDeleteModel$, e);
      })))
    );
  }
}
