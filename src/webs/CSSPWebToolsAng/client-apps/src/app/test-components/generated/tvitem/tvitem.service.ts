/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemTextModel } from './tvitem.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemText } from './tvitem.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItem } from '../../../models/generated/TVItem.model';
import { HttpRequestModel } from '../../../models/HttpRequest.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVItemService {
  /* Variables */
  tvitemTextModel$: BehaviorSubject<TVItemTextModel> = new BehaviorSubject<TVItemTextModel>(<TVItemTextModel>{});
  tvitemListModel$: BehaviorSubject<TVItem[]> = new BehaviorSubject<TVItem[]>(<TVItem[]>{});
  tvitemGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVItemText(this.tvitemTextModel$);
    this.tvitemTextModel$.next(<TVItemTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVItemList() {
    this.httpClientService.BeforeHttpClient(this.tvitemGetModel$);

    return this.httpClient.get<TVItem[]>('/api/TVItem').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItem>(this.tvitemListModel$, this.tvitemGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItem>(this.tvitemListModel$, this.tvitemGetModel$, e);
      })))
    );
  }

  PutTVItem(tvitem: TVItem) {
    this.httpClientService.BeforeHttpClient(this.tvitemPutModel$);

    return this.httpClient.put<TVItem>('/api/TVItem', tvitem, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItem>(this.tvitemListModel$, this.tvitemPutModel$, x, HttpClientCommand.Put, tvitem);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVItem>(this.tvitemListModel$, this.tvitemPutModel$, e);
      })))
    );
  }

  PostTVItem(tvitem: TVItem) {
    this.httpClientService.BeforeHttpClient(this.tvitemPostModel$);

    return this.httpClient.post<TVItem>('/api/TVItem', tvitem, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItem>(this.tvitemListModel$, this.tvitemPostModel$, x, HttpClientCommand.Post, tvitem);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItem>(this.tvitemListModel$, this.tvitemPostModel$, e);
      })))
    );
  }

  DeleteTVItem(tvitem: TVItem) {
    this.httpClientService.BeforeHttpClient(this.tvitemDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVItem/${ tvitem.TVItemID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItem>(this.tvitemListModel$, this.tvitemDeleteModel$, x, HttpClientCommand.Delete, tvitem);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItem>(this.tvitemListModel$, this.tvitemDeleteModel$, e);
      })))
    );
  }
}
