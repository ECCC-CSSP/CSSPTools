/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemLanguageTextModel } from './tvitemlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemLanguageText } from './tvitemlanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemLanguage } from '../../../models/generated/TVItemLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVItemLanguageService {
  /* Variables */
  tvitemlanguageTextModel$: BehaviorSubject<TVItemLanguageTextModel> = new BehaviorSubject<TVItemLanguageTextModel>(<TVItemLanguageTextModel>{});
  tvitemlanguageListModel$: BehaviorSubject<TVItemLanguage[]> = new BehaviorSubject<TVItemLanguage[]>(<TVItemLanguage[]>{});
  tvitemlanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemlanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemlanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemlanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVItemLanguageText(this.tvitemlanguageTextModel$);
    this.tvitemlanguageTextModel$.next(<TVItemLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVItemLanguageList() {
    this.httpClientService.BeforeHttpClient(this.tvitemlanguageGetModel$);

    return this.httpClient.get<TVItemLanguage[]>('/api/TVItemLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguageGetModel$, e);
      })))
    );
  }

  PutTVItemLanguage(tvitemlanguage: TVItemLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvitemlanguagePutModel$);

    return this.httpClient.put<TVItemLanguage>('/api/TVItemLanguage', tvitemlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguagePutModel$, x, HttpClientCommand.Put, tvitemlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguagePutModel$, e);
      })))
    );
  }

  PostTVItemLanguage(tvitemlanguage: TVItemLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvitemlanguagePostModel$);

    return this.httpClient.post<TVItemLanguage>('/api/TVItemLanguage', tvitemlanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguagePostModel$, x, HttpClientCommand.Post, tvitemlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguagePostModel$, e);
      })))
    );
  }

  DeleteTVItemLanguage(tvitemlanguage: TVItemLanguage) {
    this.httpClientService.BeforeHttpClient(this.tvitemlanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVItemLanguage/${ tvitemlanguage.TVItemLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguageDeleteModel$, x, HttpClientCommand.Delete, tvitemlanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemLanguage>(this.tvitemlanguageListModel$, this.tvitemlanguageDeleteModel$, e);
      })))
    );
  }
}
