/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemLanguageTextModel, TVItemLanguageModel } from './tvitemlanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemLanguageText } from './tvitemlanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemLanguage } from 'src/app/models/generated/TVItemLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class TVItemLanguageService {
  tvitemlanguageTextModel$: BehaviorSubject<TVItemLanguageTextModel> = new BehaviorSubject<TVItemLanguageTextModel>(<TVItemLanguageTextModel>{});
  tvitemlanguageModel$: BehaviorSubject<TVItemLanguageModel> = new BehaviorSubject<TVItemLanguageModel>(<TVItemLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVItemLanguageText(this);
    this.UpdateTVItemLanguageText(<TVItemLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVItemLanguageText(tvitemlanguageTextModel: TVItemLanguageTextModel) {
    this.tvitemlanguageTextModel$.next(<TVItemLanguageTextModel>{ ...this.tvitemlanguageTextModel$.getValue(), ...tvitemlanguageTextModel });
  }

  UpdateTVItemLanguageModel(tvitemlanguageModel: TVItemLanguageModel) {
    this.tvitemlanguageModel$.next(<TVItemLanguageModel>{ ...this.tvitemlanguageModel$.getValue(), ...tvitemlanguageModel });
  }

  GetTVItemLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateTVItemLanguageModel(<TVItemLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<TVItemLanguage[]>('/api/TVItemLanguage').pipe(
      map((x: any) => {
        console.debug(`TVItemLanguage OK. Return: ${x}`);
        this.tvitemlanguageModel$.getValue().TVItemLanguageList = <TVItemLanguage[]>x;
        this.UpdateTVItemLanguageModel(this.tvitemlanguageModel$.getValue());
        this.UpdateTVItemLanguageModel(<TVItemLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVItemLanguageModel(<TVItemLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVItemLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
