/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemModelTextModel } from './tvitemmodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemModelText } from './tvitemmodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemModel } from '../../../models/generated/TVItemModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVItemModelService {
  /* Variables */
  tvitemmodelTextModel$: BehaviorSubject<TVItemModelTextModel> = new BehaviorSubject<TVItemModelTextModel>(<TVItemModelTextModel>{});
  tvitemmodelListModel$: BehaviorSubject<TVItemModel[]> = new BehaviorSubject<TVItemModel[]>(<TVItemModel[]>{});
  tvitemmodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemmodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemmodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemmodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVItemModelText(this.tvitemmodelTextModel$);
    this.tvitemmodelTextModel$.next(<TVItemModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVItemModelList() {
    this.httpClientService.BeforeHttpClient(this.tvitemmodelGetModel$);

    return this.httpClient.get<TVItemModel[]>('/api/TVItemModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelGetModel$, e);
      })))
    );
  }

  PutTVItemModel(tvitemmodel: TVItemModel) {
    this.httpClientService.BeforeHttpClient(this.tvitemmodelPutModel$);

    return this.httpClient.put<TVItemModel>('/api/TVItemModel', tvitemmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelPutModel$, x, HttpClientCommand.Put, tvitemmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelPutModel$, e);
      })))
    );
  }

  PostTVItemModel(tvitemmodel: TVItemModel) {
    this.httpClientService.BeforeHttpClient(this.tvitemmodelPostModel$);

    return this.httpClient.post<TVItemModel>('/api/TVItemModel', tvitemmodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelPostModel$, x, HttpClientCommand.Post, tvitemmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelPostModel$, e);
      })))
    );
  }

  DeleteTVItemModel(tvitemmodel: TVItemModel) {
    this.httpClientService.BeforeHttpClient(this.tvitemmodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVItemModel/${ tvitemmodel.TVItemModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelDeleteModel$, x, HttpClientCommand.Delete, tvitemmodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemModel>(this.tvitemmodelListModel$, this.tvitemmodelDeleteModel$, e);
      })))
    );
  }
}
