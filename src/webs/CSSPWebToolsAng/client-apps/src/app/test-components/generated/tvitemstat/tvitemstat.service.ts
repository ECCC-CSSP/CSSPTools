/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemStatTextModel } from './tvitemstat.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemStatText } from './tvitemstat.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemStat } from '../../../models/generated/TVItemStat.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVItemStatService {
  /* Variables */
  tvitemstatTextModel$: BehaviorSubject<TVItemStatTextModel> = new BehaviorSubject<TVItemStatTextModel>(<TVItemStatTextModel>{});
  tvitemstatListModel$: BehaviorSubject<TVItemStat[]> = new BehaviorSubject<TVItemStat[]>(<TVItemStat[]>{});
  tvitemstatGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemstatPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemstatPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemstatDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVItemStatText(this);
    this.tvitemstatTextModel$.next(<TVItemStatTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVItemStatList() {
    this.httpClientService.BeforeHttpClient(this.tvitemstatGetModel$);

    return this.httpClient.get<TVItemStat[]>('/api/TVItemStat').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatGetModel$, e);
      })))
    );
  }

  PutTVItemStat(tvitemstat: TVItemStat) {
    this.httpClientService.BeforeHttpClient(this.tvitemstatPutModel$);

    return this.httpClient.put<TVItemStat>('/api/TVItemStat', tvitemstat, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatPutModel$, x, HttpClientCommand.Put, tvitemstat);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatPutModel$, e);
      })))
    );
  }

  PostTVItemStat(tvitemstat: TVItemStat) {
    this.httpClientService.BeforeHttpClient(this.tvitemstatPostModel$);

    return this.httpClient.post<TVItemStat>('/api/TVItemStat', tvitemstat, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatPostModel$, x, HttpClientCommand.Post, tvitemstat);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatPostModel$, e);
      })))
    );
  }

  DeleteTVItemStat(tvitemstat: TVItemStat) {
    this.httpClientService.BeforeHttpClient(this.tvitemstatDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVItemStat/${ tvitemstat.TVItemStatID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatDeleteModel$, x, HttpClientCommand.Delete, tvitemstat);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemStat>(this.tvitemstatListModel$, this.tvitemstatDeleteModel$, e);
      })))
    );
  }
}
