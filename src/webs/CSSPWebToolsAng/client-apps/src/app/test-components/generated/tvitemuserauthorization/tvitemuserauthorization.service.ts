/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemUserAuthorizationTextModel } from './tvitemuserauthorization.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemUserAuthorizationText } from './tvitemuserauthorization.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemUserAuthorization } from '../../../models/generated/TVItemUserAuthorization.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVItemUserAuthorizationService {
  /* Variables */
  tvitemuserauthorizationTextModel$: BehaviorSubject<TVItemUserAuthorizationTextModel> = new BehaviorSubject<TVItemUserAuthorizationTextModel>(<TVItemUserAuthorizationTextModel>{});
  tvitemuserauthorizationListModel$: BehaviorSubject<TVItemUserAuthorization[]> = new BehaviorSubject<TVItemUserAuthorization[]>(<TVItemUserAuthorization[]>{});
  tvitemuserauthorizationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemuserauthorizationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemuserauthorizationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvitemuserauthorizationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVItemUserAuthorizationText(this.tvitemuserauthorizationTextModel$);
    this.tvitemuserauthorizationTextModel$.next(<TVItemUserAuthorizationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVItemUserAuthorizationList() {
    this.httpClientService.BeforeHttpClient(this.tvitemuserauthorizationGetModel$);

    return this.httpClient.get<TVItemUserAuthorization[]>('/api/TVItemUserAuthorization').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationGetModel$, e);
      })))
    );
  }

  PutTVItemUserAuthorization(tvitemuserauthorization: TVItemUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvitemuserauthorizationPutModel$);

    return this.httpClient.put<TVItemUserAuthorization>('/api/TVItemUserAuthorization', tvitemuserauthorization, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationPutModel$, x, HttpClientCommand.Put, tvitemuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationPutModel$, e);
      })))
    );
  }

  PostTVItemUserAuthorization(tvitemuserauthorization: TVItemUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvitemuserauthorizationPostModel$);

    return this.httpClient.post<TVItemUserAuthorization>('/api/TVItemUserAuthorization', tvitemuserauthorization, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationPostModel$, x, HttpClientCommand.Post, tvitemuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationPostModel$, e);
      })))
    );
  }

  DeleteTVItemUserAuthorization(tvitemuserauthorization: TVItemUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvitemuserauthorizationDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVItemUserAuthorization/${ tvitemuserauthorization.TVItemUserAuthorizationID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationDeleteModel$, x, HttpClientCommand.Delete, tvitemuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVItemUserAuthorization>(this.tvitemuserauthorizationListModel$, this.tvitemuserauthorizationDeleteModel$, e);
      })))
    );
  }
}
