/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { TVTypeUserAuthorizationService } from './tvtypeuserauthorization.service';
import { LoadLocalesTVTypeUserAuthorizationText } from './tvtypeuserauthorization.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { TVAuthEnum_GetIDText, TVAuthEnum_GetOrderedText } from '../../../enums/generated/TVAuthEnum';
import { TVTypeUserAuthorization } from '../../../models/generated/TVTypeUserAuthorization.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-tvtypeuserauthorization',
  templateUrl: './tvtypeuserauthorization.component.html',
  styleUrls: ['./tvtypeuserauthorization.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class TVTypeUserAuthorizationComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  tVAuthList: EnumIDAndText[];
  tvtypeuserauthorizationFormPut: FormGroup;
  tvtypeuserauthorizationFormPost: FormGroup;

  constructor(public tvtypeuserauthorizationService: TVTypeUserAuthorizationService, public router: Router, public fb: FormBuilder) { }

  GetTVTypeUserAuthorizationList() {
    this.sub = this.tvtypeuserauthorizationService.GetTVTypeUserAuthorizationList(this.router).subscribe();
  }

  PutTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.sub = this.tvtypeuserauthorizationService.PutTVTypeUserAuthorization(tvtypeuserauthorization, this.router).subscribe();
  }

  PostTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.sub = this.tvtypeuserauthorizationService.PostTVTypeUserAuthorization(tvtypeuserauthorization, this.router).subscribe();
  }

  DeleteTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.sub = this.tvtypeuserauthorizationService.DeleteTVTypeUserAuthorization(tvtypeuserauthorization, this.router).subscribe();
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  GetTVAuthEnumText(enumID: number) {
    return TVAuthEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesTVTypeUserAuthorizationText(this.tvtypeuserauthorizationService);
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.tVAuthList = TVAuthEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.tvtypeuserauthorizationService.tvtypeuserauthorizationList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          TVTypeUserAuthorizationID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.TVTypeUserAuthorizationID ?? '')),
              disabled: false
            }, Validators.required],
          ContactTVItemID: [
            {
              value: this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.ContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
          TVType: [
            {
              value: this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.TVType ?? '',
              disabled: false
            }, Validators.required],
          TVAuth: [
            {
              value: this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.TVAuth ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.tvtypeuserauthorizationService.tvtypeuserauthorizationList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.tvtypeuserauthorizationFormPost = formGroup
      }
      else {
        this.tvtypeuserauthorizationFormPut = formGroup;
      }
    }
  }
}
