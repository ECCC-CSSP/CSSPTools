/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp5.0\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVTypeUserAuthorizationTextModel } from './tvtypeuserauthorization.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVTypeUserAuthorizationText } from './tvtypeuserauthorization.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVTypeUserAuthorization } from '../../../models/generated/TVTypeUserAuthorization.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class TVTypeUserAuthorizationService {
  /* Variables */
  tvtypeuserauthorizationTextModel$: BehaviorSubject<TVTypeUserAuthorizationTextModel> = new BehaviorSubject<TVTypeUserAuthorizationTextModel>(<TVTypeUserAuthorizationTextModel>{});
  tvtypeuserauthorizationListModel$: BehaviorSubject<TVTypeUserAuthorization[]> = new BehaviorSubject<TVTypeUserAuthorization[]>(<TVTypeUserAuthorization[]>{});
  tvtypeuserauthorizationGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvtypeuserauthorizationPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvtypeuserauthorizationPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  tvtypeuserauthorizationDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesTVTypeUserAuthorizationText(this.tvtypeuserauthorizationTextModel$);
    this.tvtypeuserauthorizationTextModel$.next(<TVTypeUserAuthorizationTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetTVTypeUserAuthorizationList() {
    this.httpClientService.BeforeHttpClient(this.tvtypeuserauthorizationGetModel$);

    return this.httpClient.get<TVTypeUserAuthorization[]>('/api/TVTypeUserAuthorization').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationGetModel$, e);
      })))
    );
  }

  PutTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvtypeuserauthorizationPutModel$);

    return this.httpClient.put<TVTypeUserAuthorization>('/api/TVTypeUserAuthorization', tvtypeuserauthorization, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationPutModel$, x, HttpClientCommand.Put, tvtypeuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationPutModel$, e);
      })))
    );
  }

  PostTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvtypeuserauthorizationPostModel$);

    return this.httpClient.post<TVTypeUserAuthorization>('/api/TVTypeUserAuthorization', tvtypeuserauthorization, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationPostModel$, x, HttpClientCommand.Post, tvtypeuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationPostModel$, e);
      })))
    );
  }

  DeleteTVTypeUserAuthorization(tvtypeuserauthorization: TVTypeUserAuthorization) {
    this.httpClientService.BeforeHttpClient(this.tvtypeuserauthorizationDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/TVTypeUserAuthorization/${ tvtypeuserauthorization.TVTypeUserAuthorizationID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationDeleteModel$, x, HttpClientCommand.Delete, tvtypeuserauthorization);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<TVTypeUserAuthorization>(this.tvtypeuserauthorizationListModel$, this.tvtypeuserauthorizationDeleteModel$, e);
      })))
    );
  }
}
