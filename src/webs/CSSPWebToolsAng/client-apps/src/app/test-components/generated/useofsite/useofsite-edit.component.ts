/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { UseOfSiteService } from './useofsite.service';
import { LoadLocalesUseOfSiteText } from './useofsite.locales';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { UseOfSite } from '../../../models/generated/UseOfSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-useofsite-edit',
  templateUrl: './useofsite-edit.component.html',
  styleUrls: ['./useofsite-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UseOfSiteEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  useofsiteFormEdit: FormGroup;
  @Input() useofsite: UseOfSite = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public useofsiteService: UseOfSiteService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PutUseOfSite(useofsite).subscribe();
  }

  PostUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PostUseOfSite(useofsite).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesUseOfSiteText(this.useofsiteService);
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.useofsite) {
      let formGroup: FormGroup = this.fb.group(
        {
          UseOfSiteID: [
            {
              value: (httpClientCommand === HttpClientCommand.Post ? 0 : (this.useofsiteService.useofsiteListModel$.getValue()[0]?.UseOfSiteID)),
              disabled: false
            }, [Validators.required]],
          SiteTVItemID: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.SiteTVItemID,
              disabled: false
            }, [Validators.required]],
          SubsectorTVItemID: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.SubsectorTVItemID,
              disabled: false
            }, [Validators.required]],
          TVType: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.TVType,
              disabled: false
            }, [Validators.required]],
          Ordinal: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Ordinal,
              disabled: false
            }, [Validators.required, Validators.min(0), Validators.max(1000)]],
          StartYear: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.StartYear,
              disabled: false
            }, [Validators.required, Validators.min(1980), Validators.max(2050)]],
          EndYear: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.EndYear,
              disabled: false
            }, [Validators.min(1980), Validators.max(2050)]],
          UseWeight: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.UseWeight,
              disabled: false
            }],
          Weight_perc: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Weight_perc,
              disabled: false
            }, [Validators.min(0), Validators.max(100)]],
          UseEquation: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.UseEquation,
              disabled: false
            }],
          Param1: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Param1,
              disabled: false
            }, [Validators.min(0), Validators.max(100)]],
          Param2: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Param2,
              disabled: false
            }, [Validators.min(0), Validators.max(100)]],
          Param3: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Param3,
              disabled: false
            }, [Validators.min(0), Validators.max(100)]],
          Param4: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.Param4,
              disabled: false
            }, [Validators.min(0), Validators.max(100)]],
          LastUpdateDate_UTC: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [Validators.required]],
          LastUpdateContactTVItemID: [
            {
              value: this.useofsiteService.useofsiteListModel$.getValue()[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.useofsiteFormEdit = formGroup
    }
  }
}
