/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { UseOfSiteService } from './useofsite.service';
import { LoadLocalesUseOfSiteText } from './useofsite.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { UseOfSite } from '../../../models/generated/UseOfSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-useofsite',
  templateUrl: './useofsite.component.html',
  styleUrls: ['./useofsite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UseOfSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  useofsiteFormPut: FormGroup;
  useofsiteFormPost: FormGroup;

  constructor(public useofsiteService: UseOfSiteService, public router: Router, public fb: FormBuilder) { }

  GetUseOfSiteList() {
    this.sub = this.useofsiteService.GetUseOfSiteList(this.router).subscribe();
  }

  PutUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PutUseOfSite(useofsite, this.router).subscribe();
  }

  PostUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PostUseOfSite(useofsite, this.router).subscribe();
  }

  DeleteUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.DeleteUseOfSite(useofsite, this.router).subscribe();
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesUseOfSiteText(this.useofsiteService);
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.useofsiteService.useofsiteList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          UseOfSiteID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.useofsiteService.useofsiteList[0]?.UseOfSiteID)),
              disabled: false
            }],
          SiteTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.SiteTVItemID,
              disabled: false
            }],
          SubsectorTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.SubsectorTVItemID,
              disabled: false
            }],
          TVType: [
            {
              value: this.useofsiteService.useofsiteList[0]?.TVType,
              disabled: false
            }],
          Ordinal: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Ordinal,
              disabled: false
            }],
          StartYear: [
            {
              value: this.useofsiteService.useofsiteList[0]?.StartYear,
              disabled: false
            }],
          EndYear: [
            {
              value: this.useofsiteService.useofsiteList[0]?.EndYear,
              disabled: false
            }],
          UseWeight: [
            {
              value: this.useofsiteService.useofsiteList[0]?.UseWeight,
              disabled: false
            }],
          Weight_perc: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Weight_perc,
              disabled: false
            }],
          UseEquation: [
            {
              value: this.useofsiteService.useofsiteList[0]?.UseEquation,
              disabled: false
            }],
          Param1: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param1,
              disabled: false
            }],
          Param2: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param2,
              disabled: false
            }],
          Param3: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param3,
              disabled: false
            }],
          Param4: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param4,
              disabled: false
            }],
          LastUpdateDate_UTC: [
            {
              value: this.useofsiteService.useofsiteList[0]?.LastUpdateDate_UTC,
              disabled: false
            }],
          LastUpdateContactTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.useofsiteFormPost = formGroup
      }
      else {
        this.useofsiteFormPut = formGroup;
      }
    }
  }
}
