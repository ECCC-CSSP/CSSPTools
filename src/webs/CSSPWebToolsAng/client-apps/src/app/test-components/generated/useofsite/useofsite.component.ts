/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { UseOfSiteService } from './useofsite.service';
import { LoadLocalesUseOfSiteText } from './useofsite.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { TVTypeEnum_GetIDText, TVTypeEnum_GetOrderedText } from '../../../enums/generated/TVTypeEnum';
import { UseOfSite } from '../../../models/generated/UseOfSite.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from 'src/app/models/enumidandtext.model';

@Component({
  selector: 'app-useofsite',
  templateUrl: './useofsite.component.html',
  styleUrls: ['./useofsite.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UseOfSiteComponent implements OnInit, OnDestroy {
  sub: Subscription;
  tVTypeList: EnumIDAndText[];
  useofsiteFormPut: FormGroup;
  useofsiteFormPost: FormGroup;

  constructor(public useofsiteService: UseOfSiteService, public router: Router, public fb: FormBuilder) { }

  GetUseOfSiteList() {
    this.sub = this.useofsiteService.GetUseOfSiteList(this.router).subscribe();
  }

  PutUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PutUseOfSite(useofsite, this.router).subscribe();
  }

  PostUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.PostUseOfSite(useofsite, this.router).subscribe();
  }

  DeleteUseOfSite(useofsite: UseOfSite) {
    this.sub = this.useofsiteService.DeleteUseOfSite(useofsite, this.router).subscribe();
  }

  GetTVTypeEnumText(enumID: number) {
    return TVTypeEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesUseOfSiteText(this.useofsiteService);
    this.tVTypeList = TVTypeEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.useofsiteService.useofsiteList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          UseOfSiteID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.useofsiteService.useofsiteList[0]?.UseOfSiteID ?? '')),
              disabled: false
            }, Validators.required],
          SiteTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.SiteTVItemID ?? '',
              disabled: false
            }, Validators.required],
          SubsectorTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.SubsectorTVItemID ?? '',
              disabled: false
            }, Validators.required],
          TVType: [
            {
              value: this.useofsiteService.useofsiteList[0]?.TVType ?? '',
              disabled: false
            }, Validators.required],
          Ordinal: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Ordinal ?? '',
              disabled: false
            }, Validators.required],
          StartYear: [
            {
              value: this.useofsiteService.useofsiteList[0]?.StartYear ?? '',
              disabled: false
            }, Validators.required],
          EndYear: [
            {
              value: this.useofsiteService.useofsiteList[0]?.EndYear ?? '',
              disabled: false
            }, Validators.required],
          UseWeight: [
            {
              value: this.useofsiteService.useofsiteList[0]?.UseWeight ?? '',
              disabled: false
            }, Validators.required],
          Weight_perc: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Weight_perc ?? '',
              disabled: false
            }, Validators.required],
          UseEquation: [
            {
              value: this.useofsiteService.useofsiteList[0]?.UseEquation ?? '',
              disabled: false
            }, Validators.required],
          Param1: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param1 ?? '',
              disabled: false
            }, Validators.required],
          Param2: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param2 ?? '',
              disabled: false
            }, Validators.required],
          Param3: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param3 ?? '',
              disabled: false
            }, Validators.required],
          Param4: [
            {
              value: this.useofsiteService.useofsiteList[0]?.Param4 ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.useofsiteService.useofsiteList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.useofsiteService.useofsiteList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.useofsiteFormPost = formGroup
      }
      else {
        this.useofsiteFormPut = formGroup;
      }
    }
  }
}
