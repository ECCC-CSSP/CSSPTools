/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { VPAmbientService } from './vpambient.service';
import { LoadLocalesVPAmbientText } from './vpambient.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { VPAmbient } from '../../../models/generated/VPAmbient.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-vpambient',
  templateUrl: './vpambient.component.html',
  styleUrls: ['./vpambient.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class VPAmbientComponent implements OnInit, OnDestroy {
  sub: Subscription;
  vpambientFormPut: FormGroup;
  vpambientFormPost: FormGroup;

  constructor(public vpambientService: VPAmbientService, public router: Router, public fb: FormBuilder) { }

  GetVPAmbientList() {
    this.sub = this.vpambientService.GetVPAmbientList(this.router).subscribe();
  }

  PutVPAmbient(vpambient: VPAmbient) {
    this.sub = this.vpambientService.PutVPAmbient(vpambient, this.router).subscribe();
  }

  PostVPAmbient(vpambient: VPAmbient) {
    this.sub = this.vpambientService.PostVPAmbient(vpambient, this.router).subscribe();
  }

  DeleteVPAmbient(vpambient: VPAmbient) {
    this.sub = this.vpambientService.DeleteVPAmbient(vpambient, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesVPAmbientText(this.vpambientService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.vpambientService.vpambientList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          VPAmbientID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.vpambientService.vpambientList[0]?.VPAmbientID)),
              disabled: false
            }, [ Validators.required ]],
          VPScenarioID: [
            {
              value: this.vpambientService.vpambientList[0]?.VPScenarioID,
              disabled: false
            }, [ Validators.required ]],
          Row: [
            {
              value: this.vpambientService.vpambientList[0]?.Row,
              disabled: false
            }, [ Validators.required ]],
          MeasurementDepth_m: [
            {
              value: this.vpambientService.vpambientList[0]?.MeasurementDepth_m,
              disabled: false
            }, [ Validators.required ]],
          CurrentSpeed_m_s: [
            {
              value: this.vpambientService.vpambientList[0]?.CurrentSpeed_m_s,
              disabled: false
            }, [ Validators.required ]],
          CurrentDirection_deg: [
            {
              value: this.vpambientService.vpambientList[0]?.CurrentDirection_deg,
              disabled: false
            }, [ Validators.required ]],
          AmbientSalinity_PSU: [
            {
              value: this.vpambientService.vpambientList[0]?.AmbientSalinity_PSU,
              disabled: false
            }, [ Validators.required ]],
          AmbientTemperature_C: [
            {
              value: this.vpambientService.vpambientList[0]?.AmbientTemperature_C,
              disabled: false
            }, [ Validators.required ]],
          BackgroundConcentration_MPN_100ml: [
            {
              value: this.vpambientService.vpambientList[0]?.BackgroundConcentration_MPN_100ml,
              disabled: false
            }, [ Validators.required ]],
          PollutantDecayRate_per_day: [
            {
              value: this.vpambientService.vpambientList[0]?.PollutantDecayRate_per_day,
              disabled: false
            }, [ Validators.required ]],
          FarFieldCurrentSpeed_m_s: [
            {
              value: this.vpambientService.vpambientList[0]?.FarFieldCurrentSpeed_m_s,
              disabled: false
            }, [ Validators.required ]],
          FarFieldCurrentDirection_deg: [
            {
              value: this.vpambientService.vpambientList[0]?.FarFieldCurrentDirection_deg,
              disabled: false
            }, [ Validators.required ]],
          FarFieldDiffusionCoefficient: [
            {
              value: this.vpambientService.vpambientList[0]?.FarFieldDiffusionCoefficient,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateDate_UTC: [
            {
              value: this.vpambientService.vpambientList[0]?.LastUpdateDate_UTC,
              disabled: false
            }, [ Validators.required ]],
          LastUpdateContactTVItemID: [
            {
              value: this.vpambientService.vpambientList[0]?.LastUpdateContactTVItemID,
              disabled: false
            }, [ Validators.required ]],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.vpambientFormPost = formGroup
      }
      else {
        this.vpambientFormPut = formGroup;
      }
    }
  }
}
