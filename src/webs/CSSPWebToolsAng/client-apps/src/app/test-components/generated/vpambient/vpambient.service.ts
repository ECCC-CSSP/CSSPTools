/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPAmbientTextModel, VPAmbientModel } from './vpambient.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPAmbientText } from './vpambient.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPAmbient } from 'src/app/models/generated/VPAmbient.model';

@Injectable({
  providedIn: 'root'
})
export class VPAmbientService {
  vpambientTextModel$: BehaviorSubject<VPAmbientTextModel> = new BehaviorSubject<VPAmbientTextModel>(<VPAmbientTextModel>{});
  vpambientModel$: BehaviorSubject<VPAmbientModel> = new BehaviorSubject<VPAmbientModel>(<VPAmbientModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPAmbientText(this);
    this.UpdateVPAmbientText(<VPAmbientTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPAmbientText(vpambientTextModel: VPAmbientTextModel) {
    this.vpambientTextModel$.next(<VPAmbientTextModel>{ ...this.vpambientTextModel$.getValue(), ...vpambientTextModel });
  }

  UpdateVPAmbientModel(vpambientModel: VPAmbientModel) {
    this.vpambientModel$.next(<VPAmbientModel>{ ...this.vpambientModel$.getValue(), ...vpambientModel });
  }

  GetVPAmbient(router: Router) {
    let oldURL = router.url;
    this.UpdateVPAmbientModel(<VPAmbientModel>{ Working: true, Error: null });

    return this.httpClient.get<VPAmbient[]>('/api/VPAmbient').pipe(
      map((x: any) => {
        console.debug(`VPAmbient OK. Return: ${x}`);
        this.vpambientModel$.getValue().VPAmbientList = <VPAmbient[]>x;
        this.UpdateVPAmbientModel(this.vpambientModel$.getValue());
        this.UpdateVPAmbientModel(<VPAmbientModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPAmbientModel(<VPAmbientModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPAmbient ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
