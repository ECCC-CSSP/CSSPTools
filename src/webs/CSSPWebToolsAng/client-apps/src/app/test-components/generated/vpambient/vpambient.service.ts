/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPAmbientTextModel } from './vpambient.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPAmbientText } from './vpambient.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPAmbient } from '../../../models/generated/VPAmbient.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class VPAmbientService {
  /* Variables */
  vpambientTextModel$: BehaviorSubject<VPAmbientTextModel> = new BehaviorSubject<VPAmbientTextModel>(<VPAmbientTextModel>{});
  vpambientListModel$: BehaviorSubject<VPAmbient[]> = new BehaviorSubject<VPAmbient[]>(<VPAmbient[]>{});
  vpambientGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpambientPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpambientPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpambientDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesVPAmbientText(this.vpambientTextModel$);
    this.vpambientTextModel$.next(<VPAmbientTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetVPAmbientList() {
    this.httpClientService.BeforeHttpClient(this.vpambientGetModel$);

    return this.httpClient.get<VPAmbient[]>('/api/VPAmbient').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPAmbient>(this.vpambientListModel$, this.vpambientGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPAmbient>(this.vpambientListModel$, this.vpambientGetModel$, e);
      })))
    );
  }

  PutVPAmbient(vpambient: VPAmbient) {
    this.httpClientService.BeforeHttpClient(this.vpambientPutModel$);

    return this.httpClient.put<VPAmbient>('/api/VPAmbient', vpambient, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPAmbient>(this.vpambientListModel$, this.vpambientPutModel$, x, HttpClientCommand.Put, vpambient);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<VPAmbient>(this.vpambientListModel$, this.vpambientPutModel$, e);
      })))
    );
  }

  PostVPAmbient(vpambient: VPAmbient) {
    this.httpClientService.BeforeHttpClient(this.vpambientPostModel$);

    return this.httpClient.post<VPAmbient>('/api/VPAmbient', vpambient, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPAmbient>(this.vpambientListModel$, this.vpambientPostModel$, x, HttpClientCommand.Post, vpambient);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPAmbient>(this.vpambientListModel$, this.vpambientPostModel$, e);
      })))
    );
  }

  DeleteVPAmbient(vpambient: VPAmbient) {
    this.httpClientService.BeforeHttpClient(this.vpambientDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/VPAmbient/${ vpambient.VPAmbientID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPAmbient>(this.vpambientListModel$, this.vpambientDeleteModel$, x, HttpClientCommand.Delete, vpambient);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPAmbient>(this.vpambientListModel$, this.vpambientDeleteModel$, e);
      })))
    );
  }
}
