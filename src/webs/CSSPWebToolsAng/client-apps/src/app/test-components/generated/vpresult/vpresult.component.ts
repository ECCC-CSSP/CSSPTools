/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { VPResultService } from './vpresult.service';
import { LoadLocalesVPResultText } from './vpresult.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { VPResult } from '../../../models/generated/VPResult.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-vpresult',
  templateUrl: './vpresult.component.html',
  styleUrls: ['./vpresult.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class VPResultComponent implements OnInit, OnDestroy {
  sub: Subscription;
  vpresultFormPut: FormGroup;
  vpresultFormPost: FormGroup;

  constructor(public vpresultService: VPResultService, public router: Router, public fb: FormBuilder) { }

  GetVPResultList() {
    this.sub = this.vpresultService.GetVPResultList(this.router).subscribe();
  }

  PutVPResult(vpresult: VPResult) {
    this.sub = this.vpresultService.PutVPResult(vpresult, this.router).subscribe();
  }

  PostVPResult(vpresult: VPResult) {
    this.sub = this.vpresultService.PostVPResult(vpresult, this.router).subscribe();
  }

  DeleteVPResult(vpresult: VPResult) {
    this.sub = this.vpresultService.DeleteVPResult(vpresult, this.router).subscribe();
  }

  ngOnInit(): void {
    LoadLocalesVPResultText(this.vpresultService);
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.vpresultService.vpresultList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          VPResultID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.vpresultService.vpresultList[0]?.VPResultID ?? '')),
              disabled: false
            }, Validators.required],
          VPScenarioID: [
            {
              value: this.vpresultService.vpresultList[0]?.VPScenarioID ?? '',
              disabled: false
            }, Validators.required],
          Ordinal: [
            {
              value: this.vpresultService.vpresultList[0]?.Ordinal ?? '',
              disabled: false
            }, Validators.required],
          Concentration_MPN_100ml: [
            {
              value: this.vpresultService.vpresultList[0]?.Concentration_MPN_100ml ?? '',
              disabled: false
            }, Validators.required],
          Dilution: [
            {
              value: this.vpresultService.vpresultList[0]?.Dilution ?? '',
              disabled: false
            }, Validators.required],
          FarFieldWidth_m: [
            {
              value: this.vpresultService.vpresultList[0]?.FarFieldWidth_m ?? '',
              disabled: false
            }, Validators.required],
          DispersionDistance_m: [
            {
              value: this.vpresultService.vpresultList[0]?.DispersionDistance_m ?? '',
              disabled: false
            }, Validators.required],
          TravelTime_hour: [
            {
              value: this.vpresultService.vpresultList[0]?.TravelTime_hour ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.vpresultService.vpresultList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.vpresultService.vpresultList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.vpresultFormPost = formGroup
      }
      else {
        this.vpresultFormPut = formGroup;
      }
    }
  }
}
