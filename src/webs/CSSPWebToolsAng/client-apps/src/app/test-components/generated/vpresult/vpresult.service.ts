/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPResultTextModel, VPResultModel } from './vpresult.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPResultText } from './vpresult.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPResult } from 'src/app/models/generated/VPResult.model';

@Injectable({
  providedIn: 'root'
})
export class VPResultService {
  vpresultTextModel$: BehaviorSubject<VPResultTextModel> = new BehaviorSubject<VPResultTextModel>(<VPResultTextModel>{});
  vpresultModel$: BehaviorSubject<VPResultModel> = new BehaviorSubject<VPResultModel>(<VPResultModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPResultText(this);
    this.UpdateVPResultText(<VPResultTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPResultText(vpresultTextModel: VPResultTextModel) {
    this.vpresultTextModel$.next(<VPResultTextModel>{ ...this.vpresultTextModel$.getValue(), ...vpresultTextModel });
  }

  UpdateVPResultModel(vpresultModel: VPResultModel) {
    this.vpresultModel$.next(<VPResultModel>{ ...this.vpresultModel$.getValue(), ...vpresultModel });
  }

  GetVPResult(router: Router) {
    let oldURL = router.url;
    this.UpdateVPResultModel(<VPResultModel>{ Working: true, Error: null });

    return this.httpClient.get<VPResult[]>('/api/VPResult').pipe(
      map((x: any) => {
        console.debug(`VPResult OK. Return: ${x}`);
        this.vpresultModel$.getValue().VPResultList = <VPResult[]>x;
        this.UpdateVPResultModel(this.vpresultModel$.getValue());
        this.UpdateVPResultModel(<VPResultModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPResultModel(<VPResultModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPResult ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
