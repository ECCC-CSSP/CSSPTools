/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPResultTextModel } from './vpresult.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPResultText } from './vpresult.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPResult } from '../../../models/generated/VPResult.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class VPResultService {
  /* Variables */
  vpresultTextModel$: BehaviorSubject<VPResultTextModel> = new BehaviorSubject<VPResultTextModel>(<VPResultTextModel>{});
  vpresultListModel$: BehaviorSubject<VPResult[]> = new BehaviorSubject<VPResult[]>(<VPResult[]>{});
  vpresultGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpresultPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpresultPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpresultDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesVPResultText(this.vpresultTextModel$);
    this.vpresultTextModel$.next(<VPResultTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetVPResultList() {
    this.httpClientService.BeforeHttpClient(this.vpresultGetModel$);

    return this.httpClient.get<VPResult[]>('/api/VPResult').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPResult>(this.vpresultListModel$, this.vpresultGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPResult>(this.vpresultListModel$, this.vpresultGetModel$, e);
      })))
    );
  }

  PutVPResult(vpresult: VPResult) {
    this.httpClientService.BeforeHttpClient(this.vpresultPutModel$);

    return this.httpClient.put<VPResult>('/api/VPResult', vpresult, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPResult>(this.vpresultListModel$, this.vpresultPutModel$, x, HttpClientCommand.Put, vpresult);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<VPResult>(this.vpresultListModel$, this.vpresultPutModel$, e);
      })))
    );
  }

  PostVPResult(vpresult: VPResult) {
    this.httpClientService.BeforeHttpClient(this.vpresultPostModel$);

    return this.httpClient.post<VPResult>('/api/VPResult', vpresult, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPResult>(this.vpresultListModel$, this.vpresultPostModel$, x, HttpClientCommand.Post, vpresult);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPResult>(this.vpresultListModel$, this.vpresultPostModel$, e);
      })))
    );
  }

  DeleteVPResult(vpresult: VPResult) {
    this.httpClientService.BeforeHttpClient(this.vpresultDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/VPResult/${ vpresult.VPResultID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPResult>(this.vpresultListModel$, this.vpresultDeleteModel$, x, HttpClientCommand.Delete, vpresult);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPResult>(this.vpresultListModel$, this.vpresultDeleteModel$, e);
      })))
    );
  }
}
