/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { VPScenarioService } from './vpscenario.service';
import { LoadLocalesVPScenarioText } from './vpscenario.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { ScenarioStatusEnum_GetIDText, ScenarioStatusEnum_GetOrderedText } from '../../../enums/generated/ScenarioStatusEnum';
import { VPScenario } from '../../../models/generated/VPScenario.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from 'src/app/models/enumidandtext.model';

@Component({
  selector: 'app-vpscenario',
  templateUrl: './vpscenario.component.html',
  styleUrls: ['./vpscenario.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class VPScenarioComponent implements OnInit, OnDestroy {
  sub: Subscription;
  vPScenarioStatusList: EnumIDAndText[];
  vpscenarioFormPut: FormGroup;
  vpscenarioFormPost: FormGroup;

  constructor(public vpscenarioService: VPScenarioService, public router: Router, public fb: FormBuilder) { }

  GetVPScenarioList() {
    this.sub = this.vpscenarioService.GetVPScenarioList(this.router).subscribe();
  }

  PutVPScenario(vpscenario: VPScenario) {
    this.sub = this.vpscenarioService.PutVPScenario(vpscenario, this.router).subscribe();
  }

  PostVPScenario(vpscenario: VPScenario) {
    this.sub = this.vpscenarioService.PostVPScenario(vpscenario, this.router).subscribe();
  }

  DeleteVPScenario(vpscenario: VPScenario) {
    this.sub = this.vpscenarioService.DeleteVPScenario(vpscenario, this.router).subscribe();
  }

  GetScenarioStatusEnumText(enumID: number) {
    return ScenarioStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesVPScenarioText(this.vpscenarioService);
    this.vPScenarioStatusList = VPScenarioStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.vpscenarioService.vpscenarioList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          VPScenarioID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.vpscenarioService.vpscenarioList[0]?.VPScenarioID ?? '')),
              disabled: false
            }, Validators.required],
          InfrastructureTVItemID: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.InfrastructureTVItemID ?? '',
              disabled: false
            }, Validators.required],
          VPScenarioStatus: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.VPScenarioStatus ?? '',
              disabled: false
            }, Validators.required],
          UseAsBestEstimate: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.UseAsBestEstimate ?? '',
              disabled: false
            }, Validators.required],
          EffluentFlow_m3_s: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.EffluentFlow_m3_s ?? '',
              disabled: false
            }, Validators.required],
          EffluentConcentration_MPN_100ml: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.EffluentConcentration_MPN_100ml ?? '',
              disabled: false
            }, Validators.required],
          FroudeNumber: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.FroudeNumber ?? '',
              disabled: false
            }, Validators.required],
          PortDiameter_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.PortDiameter_m ?? '',
              disabled: false
            }, Validators.required],
          PortDepth_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.PortDepth_m ?? '',
              disabled: false
            }, Validators.required],
          PortElevation_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.PortElevation_m ?? '',
              disabled: false
            }, Validators.required],
          VerticalAngle_deg: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.VerticalAngle_deg ?? '',
              disabled: false
            }, Validators.required],
          HorizontalAngle_deg: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.HorizontalAngle_deg ?? '',
              disabled: false
            }, Validators.required],
          NumberOfPorts: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.NumberOfPorts ?? '',
              disabled: false
            }, Validators.required],
          PortSpacing_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.PortSpacing_m ?? '',
              disabled: false
            }, Validators.required],
          AcuteMixZone_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.AcuteMixZone_m ?? '',
              disabled: false
            }, Validators.required],
          ChronicMixZone_m: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.ChronicMixZone_m ?? '',
              disabled: false
            }, Validators.required],
          EffluentSalinity_PSU: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.EffluentSalinity_PSU ?? '',
              disabled: false
            }, Validators.required],
          EffluentTemperature_C: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.EffluentTemperature_C ?? '',
              disabled: false
            }, Validators.required],
          EffluentVelocity_m_s: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.EffluentVelocity_m_s ?? '',
              disabled: false
            }, Validators.required],
          RawResults: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.RawResults ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.vpscenarioService.vpscenarioList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.vpscenarioFormPost = formGroup
      }
      else {
        this.vpscenarioFormPut = formGroup;
      }
    }
  }
}
