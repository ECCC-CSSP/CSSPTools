/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { VPScenarioLanguageService } from './vpscenariolanguage.service';
import { LoadLocalesVPScenarioLanguageText } from './vpscenariolanguage.locales';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { LanguageEnum_GetIDText, LanguageEnum_GetOrderedText } from '../../../enums/generated/LanguageEnum';
import { TranslationStatusEnum_GetIDText, TranslationStatusEnum_GetOrderedText } from '../../../enums/generated/TranslationStatusEnum';
import { VPScenarioLanguage } from '../../../models/generated/VPScenarioLanguage.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { EnumIDAndText } from '../../../models/enumidandtext.model';

@Component({
  selector: 'app-vpscenariolanguage',
  templateUrl: './vpscenariolanguage.component.html',
  styleUrls: ['./vpscenariolanguage.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class VPScenarioLanguageComponent implements OnInit, OnDestroy {
  sub: Subscription;
  languageList: EnumIDAndText[];
  translationStatusList: EnumIDAndText[];
  vpscenariolanguageFormPut: FormGroup;
  vpscenariolanguageFormPost: FormGroup;

  constructor(public vpscenariolanguageService: VPScenarioLanguageService, public router: Router, public fb: FormBuilder) { }

  GetVPScenarioLanguageList() {
    this.sub = this.vpscenariolanguageService.GetVPScenarioLanguageList(this.router).subscribe();
  }

  PutVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.sub = this.vpscenariolanguageService.PutVPScenarioLanguage(vpscenariolanguage, this.router).subscribe();
  }

  PostVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.sub = this.vpscenariolanguageService.PostVPScenarioLanguage(vpscenariolanguage, this.router).subscribe();
  }

  DeleteVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.sub = this.vpscenariolanguageService.DeleteVPScenarioLanguage(vpscenariolanguage, this.router).subscribe();
  }

  GetLanguageEnumText(enumID: number) {
    return LanguageEnum_GetIDText(enumID)
  }

  GetTranslationStatusEnumText(enumID: number) {
    return TranslationStatusEnum_GetIDText(enumID)
  }

  ngOnInit(): void {
    LoadLocalesVPScenarioLanguageText(this.vpscenariolanguageService);
    this.languageList = LanguageEnum_GetOrderedText();
    this.translationStatusList = TranslationStatusEnum_GetOrderedText();
    this.FillFormBuilderGroup('Add');
    this.FillFormBuilderGroup('Update');
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  FillFormBuilderGroup(AddOrUpdate: string) {
    if (this.vpscenariolanguageService.vpscenariolanguageList.length) {
      let formGroup: FormGroup = this.fb.group(
        {
          VPScenarioLanguageID: [
            {
              value: (AddOrUpdate === 'Add' ? 0 : (this.vpscenariolanguageService.vpscenariolanguageList[0]?.VPScenarioLanguageID ?? '')),
              disabled: false
            }, Validators.required],
          VPScenarioID: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.VPScenarioID ?? '',
              disabled: false
            }, Validators.required],
          Language: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.Language ?? '',
              disabled: false
            }, Validators.required],
          VPScenarioName: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.VPScenarioName ?? '',
              disabled: false
            }, Validators.required],
          TranslationStatus: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.TranslationStatus ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateDate_UTC: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.LastUpdateDate_UTC ?? '',
              disabled: false
            }, Validators.required],
          LastUpdateContactTVItemID: [
            {
              value: this.vpscenariolanguageService.vpscenariolanguageList[0]?.LastUpdateContactTVItemID ?? '',
              disabled: false
            }, Validators.required],
        }
      );

      if (AddOrUpdate === 'Add') {
        this.vpscenariolanguageFormPost = formGroup
      }
      else {
        this.vpscenariolanguageFormPut = formGroup;
      }
    }
  }
}
