/*
 * Auto generated from C:\CSSPTools\src\codegen\Tests\_package\netcoreapp3.1\testhost.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPScenarioLanguageTextModel } from './vpscenariolanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPScenarioLanguageText } from './vpscenariolanguage.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPScenarioLanguage } from '../../../models/generated/VPScenarioLanguage.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class VPScenarioLanguageService {
  /* Variables */
  vpscenariolanguageTextModel$: BehaviorSubject<VPScenarioLanguageTextModel> = new BehaviorSubject<VPScenarioLanguageTextModel>(<VPScenarioLanguageTextModel>{});
  vpscenariolanguageListModel$: BehaviorSubject<VPScenarioLanguage[]> = new BehaviorSubject<VPScenarioLanguage[]>(<VPScenarioLanguage[]>{});
  vpscenariolanguageGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariolanguagePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariolanguagePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariolanguageDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesVPScenarioLanguageText(this.vpscenariolanguageTextModel$);
    this.vpscenariolanguageTextModel$.next(<VPScenarioLanguageTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetVPScenarioLanguageList() {
    this.httpClientService.BeforeHttpClient(this.vpscenariolanguageGetModel$);

    return this.httpClient.get<VPScenarioLanguage[]>('/api/VPScenarioLanguage').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguageGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguageGetModel$, e);
      })))
    );
  }

  PutVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.httpClientService.BeforeHttpClient(this.vpscenariolanguagePutModel$);

    return this.httpClient.put<VPScenarioLanguage>('/api/VPScenarioLanguage', vpscenariolanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguagePutModel$, x, HttpClientCommand.Put, vpscenariolanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguagePutModel$, e);
      })))
    );
  }

  PostVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.httpClientService.BeforeHttpClient(this.vpscenariolanguagePostModel$);

    return this.httpClient.post<VPScenarioLanguage>('/api/VPScenarioLanguage', vpscenariolanguage, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguagePostModel$, x, HttpClientCommand.Post, vpscenariolanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguagePostModel$, e);
      })))
    );
  }

  DeleteVPScenarioLanguage(vpscenariolanguage: VPScenarioLanguage) {
    this.httpClientService.BeforeHttpClient(this.vpscenariolanguageDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/VPScenarioLanguage/${ vpscenariolanguage.VPScenarioLanguageID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguageDeleteModel$, x, HttpClientCommand.Delete, vpscenariolanguage);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioLanguage>(this.vpscenariolanguageListModel$, this.vpscenariolanguageDeleteModel$, e);
      })))
    );
  }
}
