/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPScenarioModelTextModel } from './vpscenariomodel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPScenarioModelText } from './vpscenariomodel.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPScenarioModel } from '../../../models/generated/VPScenarioModel.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class VPScenarioModelService {
  /* Variables */
  vpscenariomodelTextModel$: BehaviorSubject<VPScenarioModelTextModel> = new BehaviorSubject<VPScenarioModelTextModel>(<VPScenarioModelTextModel>{});
  vpscenariomodelListModel$: BehaviorSubject<VPScenarioModel[]> = new BehaviorSubject<VPScenarioModel[]>(<VPScenarioModel[]>{});
  vpscenariomodelGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariomodelPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariomodelPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  vpscenariomodelDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesVPScenarioModelText(this.vpscenariomodelTextModel$);
    this.vpscenariomodelTextModel$.next(<VPScenarioModelTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetVPScenarioModelList() {
    this.httpClientService.BeforeHttpClient(this.vpscenariomodelGetModel$);

    return this.httpClient.get<VPScenarioModel[]>('/api/VPScenarioModel').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelGetModel$, e);
      })))
    );
  }

  PutVPScenarioModel(vpscenariomodel: VPScenarioModel) {
    this.httpClientService.BeforeHttpClient(this.vpscenariomodelPutModel$);

    return this.httpClient.put<VPScenarioModel>('/api/VPScenarioModel', vpscenariomodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelPutModel$, x, HttpClientCommand.Put, vpscenariomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelPutModel$, e);
      })))
    );
  }

  PostVPScenarioModel(vpscenariomodel: VPScenarioModel) {
    this.httpClientService.BeforeHttpClient(this.vpscenariomodelPostModel$);

    return this.httpClient.post<VPScenarioModel>('/api/VPScenarioModel', vpscenariomodel, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelPostModel$, x, HttpClientCommand.Post, vpscenariomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelPostModel$, e);
      })))
    );
  }

  DeleteVPScenarioModel(vpscenariomodel: VPScenarioModel) {
    this.httpClientService.BeforeHttpClient(this.vpscenariomodelDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/VPScenarioModel/${ vpscenariomodel.VPScenarioModelID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelDeleteModel$, x, HttpClientCommand.Delete, vpscenariomodel);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<VPScenarioModel>(this.vpscenariomodelListModel$, this.vpscenariomodelDeleteModel$, e);
      })))
    );
  }
}
