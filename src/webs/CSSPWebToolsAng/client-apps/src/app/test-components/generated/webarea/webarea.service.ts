/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebAreaTextModel } from './webarea.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebAreaText } from './webarea.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebArea } from '../../../models/generated/WebArea.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebAreaService {
  /* Variables */
  webareaTextModel$: BehaviorSubject<WebAreaTextModel> = new BehaviorSubject<WebAreaTextModel>(<WebAreaTextModel>{});
  webareaListModel$: BehaviorSubject<WebArea[]> = new BehaviorSubject<WebArea[]>(<WebArea[]>{});
  webareaGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webareaPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webareaPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webareaDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebAreaText(this.webareaTextModel$);
    this.webareaTextModel$.next(<WebAreaTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebAreaList() {
    this.httpClientService.BeforeHttpClient(this.webareaGetModel$);

    return this.httpClient.get<WebArea[]>('/api/WebArea').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebArea>(this.webareaListModel$, this.webareaGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebArea>(this.webareaListModel$, this.webareaGetModel$, e);
      })))
    );
  }

  PutWebArea(webarea: WebArea) {
    this.httpClientService.BeforeHttpClient(this.webareaPutModel$);

    return this.httpClient.put<WebArea>('/api/WebArea', webarea, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebArea>(this.webareaListModel$, this.webareaPutModel$, x, HttpClientCommand.Put, webarea);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebArea>(this.webareaListModel$, this.webareaPutModel$, e);
      })))
    );
  }

  PostWebArea(webarea: WebArea) {
    this.httpClientService.BeforeHttpClient(this.webareaPostModel$);

    return this.httpClient.post<WebArea>('/api/WebArea', webarea, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebArea>(this.webareaListModel$, this.webareaPostModel$, x, HttpClientCommand.Post, webarea);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebArea>(this.webareaListModel$, this.webareaPostModel$, e);
      })))
    );
  }

  DeleteWebArea(webarea: WebArea) {
    this.httpClientService.BeforeHttpClient(this.webareaDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebArea/${ webarea.WebAreaID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebArea>(this.webareaListModel$, this.webareaDeleteModel$, x, HttpClientCommand.Delete, webarea);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebArea>(this.webareaListModel$, this.webareaDeleteModel$, e);
      })))
    );
  }
}
