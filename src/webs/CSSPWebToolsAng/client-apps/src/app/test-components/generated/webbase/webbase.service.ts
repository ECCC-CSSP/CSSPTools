/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebBaseTextModel } from './webbase.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebBaseText } from './webbase.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebBase } from '../../../models/generated/WebBase.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebBaseService {
  /* Variables */
  webbaseTextModel$: BehaviorSubject<WebBaseTextModel> = new BehaviorSubject<WebBaseTextModel>(<WebBaseTextModel>{});
  webbaseListModel$: BehaviorSubject<WebBase[]> = new BehaviorSubject<WebBase[]>(<WebBase[]>{});
  webbaseGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webbasePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webbasePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webbaseDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebBaseText(this.webbaseTextModel$);
    this.webbaseTextModel$.next(<WebBaseTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebBaseList() {
    this.httpClientService.BeforeHttpClient(this.webbaseGetModel$);

    return this.httpClient.get<WebBase[]>('/api/WebBase').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebBase>(this.webbaseListModel$, this.webbaseGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebBase>(this.webbaseListModel$, this.webbaseGetModel$, e);
      })))
    );
  }

  PutWebBase(webbase: WebBase) {
    this.httpClientService.BeforeHttpClient(this.webbasePutModel$);

    return this.httpClient.put<WebBase>('/api/WebBase', webbase, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebBase>(this.webbaseListModel$, this.webbasePutModel$, x, HttpClientCommand.Put, webbase);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebBase>(this.webbaseListModel$, this.webbasePutModel$, e);
      })))
    );
  }

  PostWebBase(webbase: WebBase) {
    this.httpClientService.BeforeHttpClient(this.webbasePostModel$);

    return this.httpClient.post<WebBase>('/api/WebBase', webbase, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebBase>(this.webbaseListModel$, this.webbasePostModel$, x, HttpClientCommand.Post, webbase);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebBase>(this.webbaseListModel$, this.webbasePostModel$, e);
      })))
    );
  }

  DeleteWebBase(webbase: WebBase) {
    this.httpClientService.BeforeHttpClient(this.webbaseDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebBase/${ webbase.WebBaseID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebBase>(this.webbaseListModel$, this.webbaseDeleteModel$, x, HttpClientCommand.Delete, webbase);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebBase>(this.webbaseListModel$, this.webbaseDeleteModel$, e);
      })))
    );
  }
}
