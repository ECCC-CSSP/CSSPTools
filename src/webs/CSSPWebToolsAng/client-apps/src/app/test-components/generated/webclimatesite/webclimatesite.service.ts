/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebClimateSiteTextModel } from './webclimatesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebClimateSiteText } from './webclimatesite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebClimateSite } from '../../../models/generated/WebClimateSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebClimateSiteService {
  /* Variables */
  webclimatesiteTextModel$: BehaviorSubject<WebClimateSiteTextModel> = new BehaviorSubject<WebClimateSiteTextModel>(<WebClimateSiteTextModel>{});
  webclimatesiteListModel$: BehaviorSubject<WebClimateSite[]> = new BehaviorSubject<WebClimateSite[]>(<WebClimateSite[]>{});
  webclimatesiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webclimatesitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webclimatesitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webclimatesiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebClimateSiteText(this.webclimatesiteTextModel$);
    this.webclimatesiteTextModel$.next(<WebClimateSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebClimateSiteList() {
    this.httpClientService.BeforeHttpClient(this.webclimatesiteGetModel$);

    return this.httpClient.get<WebClimateSite[]>('/api/WebClimateSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesiteGetModel$, e);
      })))
    );
  }

  PutWebClimateSite(webclimatesite: WebClimateSite) {
    this.httpClientService.BeforeHttpClient(this.webclimatesitePutModel$);

    return this.httpClient.put<WebClimateSite>('/api/WebClimateSite', webclimatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesitePutModel$, x, HttpClientCommand.Put, webclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesitePutModel$, e);
      })))
    );
  }

  PostWebClimateSite(webclimatesite: WebClimateSite) {
    this.httpClientService.BeforeHttpClient(this.webclimatesitePostModel$);

    return this.httpClient.post<WebClimateSite>('/api/WebClimateSite', webclimatesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesitePostModel$, x, HttpClientCommand.Post, webclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesitePostModel$, e);
      })))
    );
  }

  DeleteWebClimateSite(webclimatesite: WebClimateSite) {
    this.httpClientService.BeforeHttpClient(this.webclimatesiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebClimateSite/${ webclimatesite.WebClimateSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesiteDeleteModel$, x, HttpClientCommand.Delete, webclimatesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebClimateSite>(this.webclimatesiteListModel$, this.webclimatesiteDeleteModel$, e);
      })))
    );
  }
}
