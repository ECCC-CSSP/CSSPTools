/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebContactTextModel } from './webcontact.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebContactText } from './webcontact.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebContact } from '../../../models/generated/WebContact.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebContactService {
  /* Variables */
  webcontactTextModel$: BehaviorSubject<WebContactTextModel> = new BehaviorSubject<WebContactTextModel>(<WebContactTextModel>{});
  webcontactListModel$: BehaviorSubject<WebContact[]> = new BehaviorSubject<WebContact[]>(<WebContact[]>{});
  webcontactGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcontactPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcontactPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcontactDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebContactText(this.webcontactTextModel$);
    this.webcontactTextModel$.next(<WebContactTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebContactList() {
    this.httpClientService.BeforeHttpClient(this.webcontactGetModel$);

    return this.httpClient.get<WebContact[]>('/api/WebContact').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebContact>(this.webcontactListModel$, this.webcontactGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebContact>(this.webcontactListModel$, this.webcontactGetModel$, e);
      })))
    );
  }

  PutWebContact(webcontact: WebContact) {
    this.httpClientService.BeforeHttpClient(this.webcontactPutModel$);

    return this.httpClient.put<WebContact>('/api/WebContact', webcontact, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebContact>(this.webcontactListModel$, this.webcontactPutModel$, x, HttpClientCommand.Put, webcontact);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebContact>(this.webcontactListModel$, this.webcontactPutModel$, e);
      })))
    );
  }

  PostWebContact(webcontact: WebContact) {
    this.httpClientService.BeforeHttpClient(this.webcontactPostModel$);

    return this.httpClient.post<WebContact>('/api/WebContact', webcontact, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebContact>(this.webcontactListModel$, this.webcontactPostModel$, x, HttpClientCommand.Post, webcontact);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebContact>(this.webcontactListModel$, this.webcontactPostModel$, e);
      })))
    );
  }

  DeleteWebContact(webcontact: WebContact) {
    this.httpClientService.BeforeHttpClient(this.webcontactDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebContact/${ webcontact.WebContactID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebContact>(this.webcontactListModel$, this.webcontactDeleteModel$, x, HttpClientCommand.Delete, webcontact);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebContact>(this.webcontactListModel$, this.webcontactDeleteModel$, e);
      })))
    );
  }
}
