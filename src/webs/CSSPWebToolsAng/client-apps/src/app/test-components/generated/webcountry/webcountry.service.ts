/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebCountryTextModel } from './webcountry.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebCountryText } from './webcountry.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebCountry } from '../../../models/generated/WebCountry.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebCountryService {
  /* Variables */
  webcountryTextModel$: BehaviorSubject<WebCountryTextModel> = new BehaviorSubject<WebCountryTextModel>(<WebCountryTextModel>{});
  webcountryListModel$: BehaviorSubject<WebCountry[]> = new BehaviorSubject<WebCountry[]>(<WebCountry[]>{});
  webcountryGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcountryPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcountryPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webcountryDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebCountryText(this.webcountryTextModel$);
    this.webcountryTextModel$.next(<WebCountryTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebCountryList() {
    this.httpClientService.BeforeHttpClient(this.webcountryGetModel$);

    return this.httpClient.get<WebCountry[]>('/api/WebCountry').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebCountry>(this.webcountryListModel$, this.webcountryGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebCountry>(this.webcountryListModel$, this.webcountryGetModel$, e);
      })))
    );
  }

  PutWebCountry(webcountry: WebCountry) {
    this.httpClientService.BeforeHttpClient(this.webcountryPutModel$);

    return this.httpClient.put<WebCountry>('/api/WebCountry', webcountry, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebCountry>(this.webcountryListModel$, this.webcountryPutModel$, x, HttpClientCommand.Put, webcountry);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebCountry>(this.webcountryListModel$, this.webcountryPutModel$, e);
      })))
    );
  }

  PostWebCountry(webcountry: WebCountry) {
    this.httpClientService.BeforeHttpClient(this.webcountryPostModel$);

    return this.httpClient.post<WebCountry>('/api/WebCountry', webcountry, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebCountry>(this.webcountryListModel$, this.webcountryPostModel$, x, HttpClientCommand.Post, webcountry);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebCountry>(this.webcountryListModel$, this.webcountryPostModel$, e);
      })))
    );
  }

  DeleteWebCountry(webcountry: WebCountry) {
    this.httpClientService.BeforeHttpClient(this.webcountryDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebCountry/${ webcountry.WebCountryID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebCountry>(this.webcountryListModel$, this.webcountryDeleteModel$, x, HttpClientCommand.Delete, webcountry);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebCountry>(this.webcountryListModel$, this.webcountryDeleteModel$, e);
      })))
    );
  }
}
