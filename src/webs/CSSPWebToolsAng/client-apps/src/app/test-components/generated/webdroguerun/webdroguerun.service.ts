/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebDrogueRunTextModel } from './webdroguerun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebDrogueRunText } from './webdroguerun.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebDrogueRun } from '../../../models/generated/WebDrogueRun.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebDrogueRunService {
  /* Variables */
  webdroguerunTextModel$: BehaviorSubject<WebDrogueRunTextModel> = new BehaviorSubject<WebDrogueRunTextModel>(<WebDrogueRunTextModel>{});
  webdroguerunListModel$: BehaviorSubject<WebDrogueRun[]> = new BehaviorSubject<WebDrogueRun[]>(<WebDrogueRun[]>{});
  webdroguerunGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webdroguerunPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webdroguerunPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webdroguerunDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebDrogueRunText(this.webdroguerunTextModel$);
    this.webdroguerunTextModel$.next(<WebDrogueRunTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebDrogueRunList() {
    this.httpClientService.BeforeHttpClient(this.webdroguerunGetModel$);

    return this.httpClient.get<WebDrogueRun[]>('/api/WebDrogueRun').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunGetModel$, e);
      })))
    );
  }

  PutWebDrogueRun(webdroguerun: WebDrogueRun) {
    this.httpClientService.BeforeHttpClient(this.webdroguerunPutModel$);

    return this.httpClient.put<WebDrogueRun>('/api/WebDrogueRun', webdroguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunPutModel$, x, HttpClientCommand.Put, webdroguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunPutModel$, e);
      })))
    );
  }

  PostWebDrogueRun(webdroguerun: WebDrogueRun) {
    this.httpClientService.BeforeHttpClient(this.webdroguerunPostModel$);

    return this.httpClient.post<WebDrogueRun>('/api/WebDrogueRun', webdroguerun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunPostModel$, x, HttpClientCommand.Post, webdroguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunPostModel$, e);
      })))
    );
  }

  DeleteWebDrogueRun(webdroguerun: WebDrogueRun) {
    this.httpClientService.BeforeHttpClient(this.webdroguerunDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebDrogueRun/${ webdroguerun.WebDrogueRunID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunDeleteModel$, x, HttpClientCommand.Delete, webdroguerun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebDrogueRun>(this.webdroguerunListModel$, this.webdroguerunDeleteModel$, e);
      })))
    );
  }
}
