/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebHydrometricDataValueTextModel } from './webhydrometricdatavalue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebHydrometricDataValueText } from './webhydrometricdatavalue.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebHydrometricDataValue } from '../../../models/generated/WebHydrometricDataValue.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebHydrometricDataValueService {
  /* Variables */
  webhydrometricdatavalueTextModel$: BehaviorSubject<WebHydrometricDataValueTextModel> = new BehaviorSubject<WebHydrometricDataValueTextModel>(<WebHydrometricDataValueTextModel>{});
  webhydrometricdatavalueListModel$: BehaviorSubject<WebHydrometricDataValue[]> = new BehaviorSubject<WebHydrometricDataValue[]>(<WebHydrometricDataValue[]>{});
  webhydrometricdatavalueGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricdatavaluePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricdatavaluePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricdatavalueDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebHydrometricDataValueText(this.webhydrometricdatavalueTextModel$);
    this.webhydrometricdatavalueTextModel$.next(<WebHydrometricDataValueTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebHydrometricDataValueList() {
    this.httpClientService.BeforeHttpClient(this.webhydrometricdatavalueGetModel$);

    return this.httpClient.get<WebHydrometricDataValue[]>('/api/WebHydrometricDataValue').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavalueGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavalueGetModel$, e);
      })))
    );
  }

  PutWebHydrometricDataValue(webhydrometricdatavalue: WebHydrometricDataValue) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricdatavaluePutModel$);

    return this.httpClient.put<WebHydrometricDataValue>('/api/WebHydrometricDataValue', webhydrometricdatavalue, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavaluePutModel$, x, HttpClientCommand.Put, webhydrometricdatavalue);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavaluePutModel$, e);
      })))
    );
  }

  PostWebHydrometricDataValue(webhydrometricdatavalue: WebHydrometricDataValue) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricdatavaluePostModel$);

    return this.httpClient.post<WebHydrometricDataValue>('/api/WebHydrometricDataValue', webhydrometricdatavalue, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavaluePostModel$, x, HttpClientCommand.Post, webhydrometricdatavalue);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavaluePostModel$, e);
      })))
    );
  }

  DeleteWebHydrometricDataValue(webhydrometricdatavalue: WebHydrometricDataValue) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricdatavalueDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebHydrometricDataValue/${ webhydrometricdatavalue.WebHydrometricDataValueID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavalueDeleteModel$, x, HttpClientCommand.Delete, webhydrometricdatavalue);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricDataValue>(this.webhydrometricdatavalueListModel$, this.webhydrometricdatavalueDeleteModel$, e);
      })))
    );
  }
}
