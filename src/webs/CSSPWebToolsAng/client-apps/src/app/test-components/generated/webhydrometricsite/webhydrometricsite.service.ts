/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebHydrometricSiteTextModel } from './webhydrometricsite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebHydrometricSiteText } from './webhydrometricsite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebHydrometricSite } from '../../../models/generated/WebHydrometricSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebHydrometricSiteService {
  /* Variables */
  webhydrometricsiteTextModel$: BehaviorSubject<WebHydrometricSiteTextModel> = new BehaviorSubject<WebHydrometricSiteTextModel>(<WebHydrometricSiteTextModel>{});
  webhydrometricsiteListModel$: BehaviorSubject<WebHydrometricSite[]> = new BehaviorSubject<WebHydrometricSite[]>(<WebHydrometricSite[]>{});
  webhydrometricsiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricsitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricsitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webhydrometricsiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebHydrometricSiteText(this.webhydrometricsiteTextModel$);
    this.webhydrometricsiteTextModel$.next(<WebHydrometricSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebHydrometricSiteList() {
    this.httpClientService.BeforeHttpClient(this.webhydrometricsiteGetModel$);

    return this.httpClient.get<WebHydrometricSite[]>('/api/WebHydrometricSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsiteGetModel$, e);
      })))
    );
  }

  PutWebHydrometricSite(webhydrometricsite: WebHydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricsitePutModel$);

    return this.httpClient.put<WebHydrometricSite>('/api/WebHydrometricSite', webhydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsitePutModel$, x, HttpClientCommand.Put, webhydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsitePutModel$, e);
      })))
    );
  }

  PostWebHydrometricSite(webhydrometricsite: WebHydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricsitePostModel$);

    return this.httpClient.post<WebHydrometricSite>('/api/WebHydrometricSite', webhydrometricsite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsitePostModel$, x, HttpClientCommand.Post, webhydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsitePostModel$, e);
      })))
    );
  }

  DeleteWebHydrometricSite(webhydrometricsite: WebHydrometricSite) {
    this.httpClientService.BeforeHttpClient(this.webhydrometricsiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebHydrometricSite/${ webhydrometricsite.WebHydrometricSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsiteDeleteModel$, x, HttpClientCommand.Delete, webhydrometricsite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebHydrometricSite>(this.webhydrometricsiteListModel$, this.webhydrometricsiteDeleteModel$, e);
      })))
    );
  }
}
