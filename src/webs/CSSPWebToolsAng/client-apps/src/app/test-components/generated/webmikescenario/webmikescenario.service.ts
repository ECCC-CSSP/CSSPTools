/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebMikeScenarioTextModel } from './webmikescenario.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebMikeScenarioText } from './webmikescenario.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebMikeScenario } from '../../../models/generated/WebMikeScenario.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebMikeScenarioService {
  /* Variables */
  webmikescenarioTextModel$: BehaviorSubject<WebMikeScenarioTextModel> = new BehaviorSubject<WebMikeScenarioTextModel>(<WebMikeScenarioTextModel>{});
  webmikescenarioListModel$: BehaviorSubject<WebMikeScenario[]> = new BehaviorSubject<WebMikeScenario[]>(<WebMikeScenario[]>{});
  webmikescenarioGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmikescenarioPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmikescenarioPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmikescenarioDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebMikeScenarioText(this.webmikescenarioTextModel$);
    this.webmikescenarioTextModel$.next(<WebMikeScenarioTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebMikeScenarioList() {
    this.httpClientService.BeforeHttpClient(this.webmikescenarioGetModel$);

    return this.httpClient.get<WebMikeScenario[]>('/api/WebMikeScenario').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioGetModel$, e);
      })))
    );
  }

  PutWebMikeScenario(webmikescenario: WebMikeScenario) {
    this.httpClientService.BeforeHttpClient(this.webmikescenarioPutModel$);

    return this.httpClient.put<WebMikeScenario>('/api/WebMikeScenario', webmikescenario, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioPutModel$, x, HttpClientCommand.Put, webmikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioPutModel$, e);
      })))
    );
  }

  PostWebMikeScenario(webmikescenario: WebMikeScenario) {
    this.httpClientService.BeforeHttpClient(this.webmikescenarioPostModel$);

    return this.httpClient.post<WebMikeScenario>('/api/WebMikeScenario', webmikescenario, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioPostModel$, x, HttpClientCommand.Post, webmikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioPostModel$, e);
      })))
    );
  }

  DeleteWebMikeScenario(webmikescenario: WebMikeScenario) {
    this.httpClientService.BeforeHttpClient(this.webmikescenarioDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebMikeScenario/${ webmikescenario.WebMikeScenarioID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioDeleteModel$, x, HttpClientCommand.Delete, webmikescenario);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMikeScenario>(this.webmikescenarioListModel$, this.webmikescenarioDeleteModel$, e);
      })))
    );
  }
}
