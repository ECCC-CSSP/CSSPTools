/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebMunicipalityTextModel } from './webmunicipality.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebMunicipalityText } from './webmunicipality.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebMunicipality } from '../../../models/generated/WebMunicipality.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebMunicipalityService {
  /* Variables */
  webmunicipalityTextModel$: BehaviorSubject<WebMunicipalityTextModel> = new BehaviorSubject<WebMunicipalityTextModel>(<WebMunicipalityTextModel>{});
  webmunicipalityListModel$: BehaviorSubject<WebMunicipality[]> = new BehaviorSubject<WebMunicipality[]>(<WebMunicipality[]>{});
  webmunicipalityGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmunicipalityPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmunicipalityPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmunicipalityDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebMunicipalityText(this.webmunicipalityTextModel$);
    this.webmunicipalityTextModel$.next(<WebMunicipalityTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebMunicipalityList() {
    this.httpClientService.BeforeHttpClient(this.webmunicipalityGetModel$);

    return this.httpClient.get<WebMunicipality[]>('/api/WebMunicipality').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityGetModel$, e);
      })))
    );
  }

  PutWebMunicipality(webmunicipality: WebMunicipality) {
    this.httpClientService.BeforeHttpClient(this.webmunicipalityPutModel$);

    return this.httpClient.put<WebMunicipality>('/api/WebMunicipality', webmunicipality, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityPutModel$, x, HttpClientCommand.Put, webmunicipality);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityPutModel$, e);
      })))
    );
  }

  PostWebMunicipality(webmunicipality: WebMunicipality) {
    this.httpClientService.BeforeHttpClient(this.webmunicipalityPostModel$);

    return this.httpClient.post<WebMunicipality>('/api/WebMunicipality', webmunicipality, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityPostModel$, x, HttpClientCommand.Post, webmunicipality);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityPostModel$, e);
      })))
    );
  }

  DeleteWebMunicipality(webmunicipality: WebMunicipality) {
    this.httpClientService.BeforeHttpClient(this.webmunicipalityDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebMunicipality/${ webmunicipality.WebMunicipalityID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityDeleteModel$, x, HttpClientCommand.Delete, webmunicipality);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMunicipality>(this.webmunicipalityListModel$, this.webmunicipalityDeleteModel$, e);
      })))
    );
  }
}
