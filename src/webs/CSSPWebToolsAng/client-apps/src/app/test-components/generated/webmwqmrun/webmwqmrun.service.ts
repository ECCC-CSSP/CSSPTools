/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebMWQMRunTextModel } from './webmwqmrun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebMWQMRunText } from './webmwqmrun.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebMWQMRun } from '../../../models/generated/WebMWQMRun.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebMWQMRunService {
  /* Variables */
  webmwqmrunTextModel$: BehaviorSubject<WebMWQMRunTextModel> = new BehaviorSubject<WebMWQMRunTextModel>(<WebMWQMRunTextModel>{});
  webmwqmrunListModel$: BehaviorSubject<WebMWQMRun[]> = new BehaviorSubject<WebMWQMRun[]>(<WebMWQMRun[]>{});
  webmwqmrunGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmwqmrunPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmwqmrunPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webmwqmrunDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebMWQMRunText(this.webmwqmrunTextModel$);
    this.webmwqmrunTextModel$.next(<WebMWQMRunTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebMWQMRunList() {
    this.httpClientService.BeforeHttpClient(this.webmwqmrunGetModel$);

    return this.httpClient.get<WebMWQMRun[]>('/api/WebMWQMRun').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunGetModel$, e);
      })))
    );
  }

  PutWebMWQMRun(webmwqmrun: WebMWQMRun) {
    this.httpClientService.BeforeHttpClient(this.webmwqmrunPutModel$);

    return this.httpClient.put<WebMWQMRun>('/api/WebMWQMRun', webmwqmrun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunPutModel$, x, HttpClientCommand.Put, webmwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunPutModel$, e);
      })))
    );
  }

  PostWebMWQMRun(webmwqmrun: WebMWQMRun) {
    this.httpClientService.BeforeHttpClient(this.webmwqmrunPostModel$);

    return this.httpClient.post<WebMWQMRun>('/api/WebMWQMRun', webmwqmrun, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunPostModel$, x, HttpClientCommand.Post, webmwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunPostModel$, e);
      })))
    );
  }

  DeleteWebMWQMRun(webmwqmrun: WebMWQMRun) {
    this.httpClientService.BeforeHttpClient(this.webmwqmrunDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebMWQMRun/${ webmwqmrun.WebMWQMRunID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunDeleteModel$, x, HttpClientCommand.Delete, webmwqmrun);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebMWQMRun>(this.webmwqmrunListModel$, this.webmwqmrunDeleteModel$, e);
      })))
    );
  }
}
