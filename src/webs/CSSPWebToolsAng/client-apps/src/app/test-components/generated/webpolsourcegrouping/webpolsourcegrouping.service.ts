/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebPolSourceGroupingTextModel } from './webpolsourcegrouping.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebPolSourceGroupingText } from './webpolsourcegrouping.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebPolSourceGrouping } from '../../../models/generated/WebPolSourceGrouping.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebPolSourceGroupingService {
  /* Variables */
  webpolsourcegroupingTextModel$: BehaviorSubject<WebPolSourceGroupingTextModel> = new BehaviorSubject<WebPolSourceGroupingTextModel>(<WebPolSourceGroupingTextModel>{});
  webpolsourcegroupingListModel$: BehaviorSubject<WebPolSourceGrouping[]> = new BehaviorSubject<WebPolSourceGrouping[]>(<WebPolSourceGrouping[]>{});
  webpolsourcegroupingGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcegroupingPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcegroupingPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcegroupingDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebPolSourceGroupingText(this.webpolsourcegroupingTextModel$);
    this.webpolsourcegroupingTextModel$.next(<WebPolSourceGroupingTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebPolSourceGroupingList() {
    this.httpClientService.BeforeHttpClient(this.webpolsourcegroupingGetModel$);

    return this.httpClient.get<WebPolSourceGrouping[]>('/api/WebPolSourceGrouping').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingGetModel$, e);
      })))
    );
  }

  PutWebPolSourceGrouping(webpolsourcegrouping: WebPolSourceGrouping) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcegroupingPutModel$);

    return this.httpClient.put<WebPolSourceGrouping>('/api/WebPolSourceGrouping', webpolsourcegrouping, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingPutModel$, x, HttpClientCommand.Put, webpolsourcegrouping);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingPutModel$, e);
      })))
    );
  }

  PostWebPolSourceGrouping(webpolsourcegrouping: WebPolSourceGrouping) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcegroupingPostModel$);

    return this.httpClient.post<WebPolSourceGrouping>('/api/WebPolSourceGrouping', webpolsourcegrouping, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingPostModel$, x, HttpClientCommand.Post, webpolsourcegrouping);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingPostModel$, e);
      })))
    );
  }

  DeleteWebPolSourceGrouping(webpolsourcegrouping: WebPolSourceGrouping) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcegroupingDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebPolSourceGrouping/${ webpolsourcegrouping.WebPolSourceGroupingID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingDeleteModel$, x, HttpClientCommand.Delete, webpolsourcegrouping);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceGrouping>(this.webpolsourcegroupingListModel$, this.webpolsourcegroupingDeleteModel$, e);
      })))
    );
  }
}
