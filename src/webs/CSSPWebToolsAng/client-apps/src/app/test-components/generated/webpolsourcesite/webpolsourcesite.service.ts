/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebPolSourceSiteTextModel } from './webpolsourcesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebPolSourceSiteText } from './webpolsourcesite.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebPolSourceSite } from '../../../models/generated/WebPolSourceSite.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebPolSourceSiteService {
  /* Variables */
  webpolsourcesiteTextModel$: BehaviorSubject<WebPolSourceSiteTextModel> = new BehaviorSubject<WebPolSourceSiteTextModel>(<WebPolSourceSiteTextModel>{});
  webpolsourcesiteListModel$: BehaviorSubject<WebPolSourceSite[]> = new BehaviorSubject<WebPolSourceSite[]>(<WebPolSourceSite[]>{});
  webpolsourcesiteGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcesitePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcesitePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webpolsourcesiteDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebPolSourceSiteText(this.webpolsourcesiteTextModel$);
    this.webpolsourcesiteTextModel$.next(<WebPolSourceSiteTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebPolSourceSiteList() {
    this.httpClientService.BeforeHttpClient(this.webpolsourcesiteGetModel$);

    return this.httpClient.get<WebPolSourceSite[]>('/api/WebPolSourceSite').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesiteGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesiteGetModel$, e);
      })))
    );
  }

  PutWebPolSourceSite(webpolsourcesite: WebPolSourceSite) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcesitePutModel$);

    return this.httpClient.put<WebPolSourceSite>('/api/WebPolSourceSite', webpolsourcesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesitePutModel$, x, HttpClientCommand.Put, webpolsourcesite);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesitePutModel$, e);
      })))
    );
  }

  PostWebPolSourceSite(webpolsourcesite: WebPolSourceSite) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcesitePostModel$);

    return this.httpClient.post<WebPolSourceSite>('/api/WebPolSourceSite', webpolsourcesite, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesitePostModel$, x, HttpClientCommand.Post, webpolsourcesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesitePostModel$, e);
      })))
    );
  }

  DeleteWebPolSourceSite(webpolsourcesite: WebPolSourceSite) {
    this.httpClientService.BeforeHttpClient(this.webpolsourcesiteDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebPolSourceSite/${ webpolsourcesite.WebPolSourceSiteID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesiteDeleteModel$, x, HttpClientCommand.Delete, webpolsourcesite);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebPolSourceSite>(this.webpolsourcesiteListModel$, this.webpolsourcesiteDeleteModel$, e);
      })))
    );
  }
}
