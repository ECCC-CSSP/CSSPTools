/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebProvinceTextModel } from './webprovince.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebProvinceText } from './webprovince.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebProvince } from '../../../models/generated/WebProvince.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebProvinceService {
  /* Variables */
  webprovinceTextModel$: BehaviorSubject<WebProvinceTextModel> = new BehaviorSubject<WebProvinceTextModel>(<WebProvinceTextModel>{});
  webprovinceListModel$: BehaviorSubject<WebProvince[]> = new BehaviorSubject<WebProvince[]>(<WebProvince[]>{});
  webprovinceGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webprovincePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webprovincePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webprovinceDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebProvinceText(this.webprovinceTextModel$);
    this.webprovinceTextModel$.next(<WebProvinceTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebProvinceList() {
    this.httpClientService.BeforeHttpClient(this.webprovinceGetModel$);

    return this.httpClient.get<WebProvince[]>('/api/WebProvince').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebProvince>(this.webprovinceListModel$, this.webprovinceGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebProvince>(this.webprovinceListModel$, this.webprovinceGetModel$, e);
      })))
    );
  }

  PutWebProvince(webprovince: WebProvince) {
    this.httpClientService.BeforeHttpClient(this.webprovincePutModel$);

    return this.httpClient.put<WebProvince>('/api/WebProvince', webprovince, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebProvince>(this.webprovinceListModel$, this.webprovincePutModel$, x, HttpClientCommand.Put, webprovince);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebProvince>(this.webprovinceListModel$, this.webprovincePutModel$, e);
      })))
    );
  }

  PostWebProvince(webprovince: WebProvince) {
    this.httpClientService.BeforeHttpClient(this.webprovincePostModel$);

    return this.httpClient.post<WebProvince>('/api/WebProvince', webprovince, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebProvince>(this.webprovinceListModel$, this.webprovincePostModel$, x, HttpClientCommand.Post, webprovince);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebProvince>(this.webprovinceListModel$, this.webprovincePostModel$, e);
      })))
    );
  }

  DeleteWebProvince(webprovince: WebProvince) {
    this.httpClientService.BeforeHttpClient(this.webprovinceDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebProvince/${ webprovince.WebProvinceID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebProvince>(this.webprovinceListModel$, this.webprovinceDeleteModel$, x, HttpClientCommand.Delete, webprovince);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebProvince>(this.webprovinceListModel$, this.webprovinceDeleteModel$, e);
      })))
    );
  }
}
