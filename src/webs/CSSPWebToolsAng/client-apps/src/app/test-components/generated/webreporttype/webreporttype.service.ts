/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebReportTypeTextModel } from './webreporttype.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebReportTypeText } from './webreporttype.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebReportType } from '../../../models/generated/WebReportType.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebReportTypeService {
  /* Variables */
  webreporttypeTextModel$: BehaviorSubject<WebReportTypeTextModel> = new BehaviorSubject<WebReportTypeTextModel>(<WebReportTypeTextModel>{});
  webreporttypeListModel$: BehaviorSubject<WebReportType[]> = new BehaviorSubject<WebReportType[]>(<WebReportType[]>{});
  webreporttypeGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webreporttypePutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webreporttypePostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webreporttypeDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebReportTypeText(this.webreporttypeTextModel$);
    this.webreporttypeTextModel$.next(<WebReportTypeTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebReportTypeList() {
    this.httpClientService.BeforeHttpClient(this.webreporttypeGetModel$);

    return this.httpClient.get<WebReportType[]>('/api/WebReportType').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebReportType>(this.webreporttypeListModel$, this.webreporttypeGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebReportType>(this.webreporttypeListModel$, this.webreporttypeGetModel$, e);
      })))
    );
  }

  PutWebReportType(webreporttype: WebReportType) {
    this.httpClientService.BeforeHttpClient(this.webreporttypePutModel$);

    return this.httpClient.put<WebReportType>('/api/WebReportType', webreporttype, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebReportType>(this.webreporttypeListModel$, this.webreporttypePutModel$, x, HttpClientCommand.Put, webreporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebReportType>(this.webreporttypeListModel$, this.webreporttypePutModel$, e);
      })))
    );
  }

  PostWebReportType(webreporttype: WebReportType) {
    this.httpClientService.BeforeHttpClient(this.webreporttypePostModel$);

    return this.httpClient.post<WebReportType>('/api/WebReportType', webreporttype, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebReportType>(this.webreporttypeListModel$, this.webreporttypePostModel$, x, HttpClientCommand.Post, webreporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebReportType>(this.webreporttypeListModel$, this.webreporttypePostModel$, e);
      })))
    );
  }

  DeleteWebReportType(webreporttype: WebReportType) {
    this.httpClientService.BeforeHttpClient(this.webreporttypeDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebReportType/${ webreporttype.WebReportTypeID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebReportType>(this.webreporttypeListModel$, this.webreporttypeDeleteModel$, x, HttpClientCommand.Delete, webreporttype);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebReportType>(this.webreporttypeListModel$, this.webreporttypeDeleteModel$, e);
      })))
    );
  }
}
