/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebRootTextModel } from './webroot.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebRootText } from './webroot.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebRoot } from '../../../models/generated/WebRoot.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebRootService {
  /* Variables */
  webrootTextModel$: BehaviorSubject<WebRootTextModel> = new BehaviorSubject<WebRootTextModel>(<WebRootTextModel>{});
  webrootListModel$: BehaviorSubject<WebRoot[]> = new BehaviorSubject<WebRoot[]>(<WebRoot[]>{});
  webrootGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webrootPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webrootPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  webrootDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebRootText(this.webrootTextModel$);
    this.webrootTextModel$.next(<WebRootTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebRootList() {
    this.httpClientService.BeforeHttpClient(this.webrootGetModel$);

    return this.httpClient.get<WebRoot[]>('/api/WebRoot').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebRoot>(this.webrootListModel$, this.webrootGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebRoot>(this.webrootListModel$, this.webrootGetModel$, e);
      })))
    );
  }

  PutWebRoot(webroot: WebRoot) {
    this.httpClientService.BeforeHttpClient(this.webrootPutModel$);

    return this.httpClient.put<WebRoot>('/api/WebRoot', webroot, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebRoot>(this.webrootListModel$, this.webrootPutModel$, x, HttpClientCommand.Put, webroot);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebRoot>(this.webrootListModel$, this.webrootPutModel$, e);
      })))
    );
  }

  PostWebRoot(webroot: WebRoot) {
    this.httpClientService.BeforeHttpClient(this.webrootPostModel$);

    return this.httpClient.post<WebRoot>('/api/WebRoot', webroot, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebRoot>(this.webrootListModel$, this.webrootPostModel$, x, HttpClientCommand.Post, webroot);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebRoot>(this.webrootListModel$, this.webrootPostModel$, e);
      })))
    );
  }

  DeleteWebRoot(webroot: WebRoot) {
    this.httpClientService.BeforeHttpClient(this.webrootDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebRoot/${ webroot.WebRootID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebRoot>(this.webrootListModel$, this.webrootDeleteModel$, x, HttpClientCommand.Delete, webroot);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebRoot>(this.webrootListModel$, this.webrootDeleteModel$, e);
      })))
    );
  }
}
