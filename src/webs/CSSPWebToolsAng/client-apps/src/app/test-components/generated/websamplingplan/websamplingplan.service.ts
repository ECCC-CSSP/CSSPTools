/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebSamplingPlanTextModel } from './websamplingplan.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebSamplingPlanText } from './websamplingplan.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebSamplingPlan } from '../../../models/generated/WebSamplingPlan.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebSamplingPlanService {
  /* Variables */
  websamplingplanTextModel$: BehaviorSubject<WebSamplingPlanTextModel> = new BehaviorSubject<WebSamplingPlanTextModel>(<WebSamplingPlanTextModel>{});
  websamplingplanListModel$: BehaviorSubject<WebSamplingPlan[]> = new BehaviorSubject<WebSamplingPlan[]>(<WebSamplingPlan[]>{});
  websamplingplanGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websamplingplanPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websamplingplanPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websamplingplanDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebSamplingPlanText(this.websamplingplanTextModel$);
    this.websamplingplanTextModel$.next(<WebSamplingPlanTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebSamplingPlanList() {
    this.httpClientService.BeforeHttpClient(this.websamplingplanGetModel$);

    return this.httpClient.get<WebSamplingPlan[]>('/api/WebSamplingPlan').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanGetModel$, e);
      })))
    );
  }

  PutWebSamplingPlan(websamplingplan: WebSamplingPlan) {
    this.httpClientService.BeforeHttpClient(this.websamplingplanPutModel$);

    return this.httpClient.put<WebSamplingPlan>('/api/WebSamplingPlan', websamplingplan, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanPutModel$, x, HttpClientCommand.Put, websamplingplan);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanPutModel$, e);
      })))
    );
  }

  PostWebSamplingPlan(websamplingplan: WebSamplingPlan) {
    this.httpClientService.BeforeHttpClient(this.websamplingplanPostModel$);

    return this.httpClient.post<WebSamplingPlan>('/api/WebSamplingPlan', websamplingplan, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanPostModel$, x, HttpClientCommand.Post, websamplingplan);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanPostModel$, e);
      })))
    );
  }

  DeleteWebSamplingPlan(websamplingplan: WebSamplingPlan) {
    this.httpClientService.BeforeHttpClient(this.websamplingplanDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebSamplingPlan/${ websamplingplan.WebSamplingPlanID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanDeleteModel$, x, HttpClientCommand.Delete, websamplingplan);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSamplingPlan>(this.websamplingplanListModel$, this.websamplingplanDeleteModel$, e);
      })))
    );
  }
}
