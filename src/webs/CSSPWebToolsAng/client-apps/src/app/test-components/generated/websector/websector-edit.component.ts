/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, Input } from '@angular/core';
import { WebSectorService } from './websector.service';
import { LoadLocalesWebSectorText } from './websector.locales';
import { Subscription } from 'rxjs';
import { WebSector } from '../../../models/generated/WebSector.model';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpClientCommand } from '../../../enums/app.enums';

@Component({
  selector: 'app-websector-edit',
  templateUrl: './websector-edit.component.html',
  styleUrls: ['./websector-edit.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class WebSectorEditComponent implements OnInit, OnDestroy {
  sub: Subscription;
  websectorFormEdit: FormGroup;
  @Input() websector: WebSector = null;
  @Input() httpClientCommand: HttpClientCommand = HttpClientCommand.Put;

  constructor(public websectorService: WebSectorService, private fb: FormBuilder) {
  }

  GetPut() {
    return this.httpClientCommand == HttpClientCommand.Put ? true : false;
  }

  PutWebSector(websector: WebSector) {
    this.sub = this.websectorService.PutWebSector(websector).subscribe();
  }

  PostWebSector(websector: WebSector) {
    this.sub = this.websectorService.PostWebSector(websector).subscribe();
  }

  ngOnInit(): void {
    this.FillFormBuilderGroup(this.httpClientCommand);
  }

  ngOnDestroy() {
    this.sub?.unsubscribe();
  }

  FillFormBuilderGroup(httpClientCommand: HttpClientCommand) {
    if (this.websector) {
      let formGroup: FormGroup = this.fb.group(
        {
          TVItemSubsectorList: [
            {
              value: this.websector.TVItemSubsectorList,
              disabled: false
            }, [Validators.required]],
          TVItemLanguageSubsectorList: [
            {
              value: this.websector.TVItemLanguageSubsectorList,
              disabled: false
            }, [Validators.required]],
          TVItemStatSubsectorList: [
            {
              value: this.websector.TVItemStatSubsectorList,
              disabled: false
            }, [Validators.required]],
          MapInfoSubsectorList: [
            {
              value: this.websector.MapInfoSubsectorList,
              disabled: false
            }, [Validators.required]],
          MapInfoPointSubsectorList: [
            {
              value: this.websector.MapInfoPointSubsectorList,
              disabled: false
            }, [Validators.required]],
          TVItemMikeScenarioList: [
            {
              value: this.websector.TVItemMikeScenarioList,
              disabled: false
            }, [Validators.required]],
          TVItemLanguageMikeScenarioList: [
            {
              value: this.websector.TVItemLanguageMikeScenarioList,
              disabled: false
            }, [Validators.required]],
          TVItemStatMikeScenarioList: [
            {
              value: this.websector.TVItemStatMikeScenarioList,
              disabled: false
            }, [Validators.required]],
          MapInfoMikeScenarioList: [
            {
              value: this.websector.MapInfoMikeScenarioList,
              disabled: false
            }, [Validators.required]],
          MapInfoPointMikeScenarioList: [
            {
              value: this.websector.MapInfoPointMikeScenarioList,
              disabled: false
            }, [Validators.required]],
          TVItem: [
            {
              value: this.websector.TVItem,
              disabled: false
            }, [Validators.required]],
          TVItemLanguageList: [
            {
              value: this.websector.TVItemLanguageList,
              disabled: false
            }, [Validators.required]],
          TVItemLinkList: [
            {
              value: this.websector.TVItemLinkList,
              disabled: false
            }, [Validators.required]],
          TVItemStatList: [
            {
              value: this.websector.TVItemStatList,
              disabled: false
            }, [Validators.required]],
          MapInfoList: [
            {
              value: this.websector.MapInfoList,
              disabled: false
            }, [Validators.required]],
          MapInfoPointList: [
            {
              value: this.websector.MapInfoPointList,
              disabled: false
            }, [Validators.required]],
          TVFileList: [
            {
              value: this.websector.TVFileList,
              disabled: false
            }, [Validators.required]],
          TVFileLanguageList: [
            {
              value: this.websector.TVFileLanguageList,
              disabled: false
            }, [Validators.required]],
        }
      );

      this.websectorFormEdit = formGroup
    }
  }
}
