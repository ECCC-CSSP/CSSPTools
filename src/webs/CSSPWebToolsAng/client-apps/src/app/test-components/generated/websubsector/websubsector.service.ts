/*
 * Auto generated from C:\CSSPTools\src\codegen\_package\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { WebSubsectorTextModel } from './websubsector.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesWebSubsectorText } from './websubsector.locales';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { WebSubsector } from '../../../models/generated/WebSubsector.model';
import { HttpRequestModel } from '../../../models/http.model';
import { HttpClientService } from '../../../services/http-client.service';
import { HttpClientCommand } from '../../../enums/app.enums';

@Injectable({
  providedIn: 'root'
})
export class WebSubsectorService {
  /* Variables */
  websubsectorTextModel$: BehaviorSubject<WebSubsectorTextModel> = new BehaviorSubject<WebSubsectorTextModel>(<WebSubsectorTextModel>{});
  websubsectorListModel$: BehaviorSubject<WebSubsector[]> = new BehaviorSubject<WebSubsector[]>(<WebSubsector[]>{});
  websubsectorGetModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websubsectorPutModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websubsectorPostModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});
  websubsectorDeleteModel$: BehaviorSubject<HttpRequestModel> = new BehaviorSubject<HttpRequestModel>(<HttpRequestModel>{});

  /* Constructors */
  constructor(private httpClient: HttpClient, private httpClientService: HttpClientService) {
    LoadLocalesWebSubsectorText(this.websubsectorTextModel$);
    this.websubsectorTextModel$.next(<WebSubsectorTextModel>{ Title: "Something2 for text" });
  }

  /* Functions public */
  GetWebSubsectorList() {
    this.httpClientService.BeforeHttpClient(this.websubsectorGetModel$);

    return this.httpClient.get<WebSubsector[]>('/api/WebSubsector').pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSubsector>(this.websubsectorListModel$, this.websubsectorGetModel$, x, HttpClientCommand.Get, null);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSubsector>(this.websubsectorListModel$, this.websubsectorGetModel$, e);
      })))
    );
  }

  PutWebSubsector(websubsector: WebSubsector) {
    this.httpClientService.BeforeHttpClient(this.websubsectorPutModel$);

    return this.httpClient.put<WebSubsector>('/api/WebSubsector', websubsector, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSubsector>(this.websubsectorListModel$, this.websubsectorPutModel$, x, HttpClientCommand.Put, websubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
       this.httpClientService.DoCatchError<WebSubsector>(this.websubsectorListModel$, this.websubsectorPutModel$, e);
      })))
    );
  }

  PostWebSubsector(websubsector: WebSubsector) {
    this.httpClientService.BeforeHttpClient(this.websubsectorPostModel$);

    return this.httpClient.post<WebSubsector>('/api/WebSubsector', websubsector, { headers: new HttpHeaders() }).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSubsector>(this.websubsectorListModel$, this.websubsectorPostModel$, x, HttpClientCommand.Post, websubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSubsector>(this.websubsectorListModel$, this.websubsectorPostModel$, e);
      })))
    );
  }

  DeleteWebSubsector(websubsector: WebSubsector) {
    this.httpClientService.BeforeHttpClient(this.websubsectorDeleteModel$);

    return this.httpClient.delete<boolean>(`/api/WebSubsector/${ websubsector.WebSubsectorID }`).pipe(
      map((x: any) => {
        this.httpClientService.DoSuccess<WebSubsector>(this.websubsectorListModel$, this.websubsectorDeleteModel$, x, HttpClientCommand.Delete, websubsector);
      }),
      catchError(e => of(e).pipe(map(e => {
        this.httpClientService.DoCatchError<WebSubsector>(this.websubsectorListModel$, this.websubsectorDeleteModel$, e);
      })))
    );
  }
}
