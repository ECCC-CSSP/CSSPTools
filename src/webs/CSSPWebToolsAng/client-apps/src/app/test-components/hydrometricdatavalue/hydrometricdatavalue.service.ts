/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { HydrometricDataValueTextModel, HydrometricDataValueModel } from './hydrometricdatavalue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesHydrometricDataValueText } from './hydrometricdatavalue.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { HydrometricDataValue } from 'src/app/models/generated/HydrometricDataValue.model';

@Injectable({
  providedIn: 'root'
})
export class HydrometricDataValueService {
  hydrometricdatavalueTextModel$: BehaviorSubject<HydrometricDataValueTextModel> = new BehaviorSubject<HydrometricDataValueTextModel>(<HydrometricDataValueTextModel>{});
  hydrometricdatavalueModel$: BehaviorSubject<HydrometricDataValueModel> = new BehaviorSubject<HydrometricDataValueModel>(<HydrometricDataValueModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesHydrometricDataValueText(this);
    this.UpdateHydrometricDataValueText(<HydrometricDataValueTextModel>{ Title: "Something2 for text" });
  }

  UpdateHydrometricDataValueText(hydrometricdatavalueTextModel: HydrometricDataValueTextModel) {
    this.hydrometricdatavalueTextModel$.next(<HydrometricDataValueTextModel>{ ...this.hydrometricdatavalueTextModel$.getValue(), ...hydrometricdatavalueTextModel });
  }

  UpdateHydrometricDataValueModel(hydrometricdatavalueModel: HydrometricDataValueModel) {
    this.hydrometricdatavalueModel$.next(<HydrometricDataValueModel>{ ...this.hydrometricdatavalueModel$.getValue(), ...hydrometricdatavalueModel });
  }

  GetHydrometricDataValue(router: Router) {
    let oldURL = router.url;
    this.UpdateHydrometricDataValueModel(<HydrometricDataValueModel>{ Working: true, Error: null });

    return this.httpClient.get<HydrometricDataValue[]>('/api/HydrometricDataValue').pipe(
      map((x: any) => {
        console.debug(`HydrometricDataValue OK. Return: ${x}`);
        this.hydrometricdatavalueModel$.getValue().HydrometricDataValueList = <HydrometricDataValue[]>x;
        this.UpdateHydrometricDataValueModel(this.hydrometricdatavalueModel$.getValue());
        this.UpdateHydrometricDataValueModel(<HydrometricDataValueModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateHydrometricDataValueModel(<HydrometricDataValueModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`HydrometricDataValue ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
