/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { InfrastructureTextModel, InfrastructureModel } from './infrastructure.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesInfrastructureText } from './infrastructure.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Infrastructure } from 'src/app/models/generated/Infrastructure.model';

@Injectable({
  providedIn: 'root'
})
export class InfrastructureService {
  infrastructureTextModel$: BehaviorSubject<InfrastructureTextModel> = new BehaviorSubject<InfrastructureTextModel>(<InfrastructureTextModel>{});
  infrastructureModel$: BehaviorSubject<InfrastructureModel> = new BehaviorSubject<InfrastructureModel>(<InfrastructureModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesInfrastructureText(this);
    this.UpdateInfrastructureText(<InfrastructureTextModel>{ Title: "Something2 for text" });
  }

  UpdateInfrastructureText(infrastructureTextModel: InfrastructureTextModel) {
    this.infrastructureTextModel$.next(<InfrastructureTextModel>{ ...this.infrastructureTextModel$.getValue(), ...infrastructureTextModel });
  }

  UpdateInfrastructureModel(infrastructureModel: InfrastructureModel) {
    this.infrastructureModel$.next(<InfrastructureModel>{ ...this.infrastructureModel$.getValue(), ...infrastructureModel });
  }

  GetInfrastructure(router: Router) {
    let oldURL = router.url;
    this.UpdateInfrastructureModel(<InfrastructureModel>{ Working: true, Error: null });

    return this.httpClient.get<Infrastructure[]>('/api/Infrastructure').pipe(
      map((x: any) => {
        console.debug(`Infrastructure OK. Return: ${x}`);
        this.infrastructureModel$.getValue().InfrastructureList = <Infrastructure[]>x;
        this.UpdateInfrastructureModel(this.infrastructureModel$.getValue());
        this.UpdateInfrastructureModel(<InfrastructureModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateInfrastructureModel(<InfrastructureModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Infrastructure ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
