/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { InfrastructureLanguageTextModel, InfrastructureLanguageModel } from './infrastructurelanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesInfrastructureLanguageText } from './infrastructurelanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { InfrastructureLanguage } from 'src/app/models/generated/InfrastructureLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class InfrastructureLanguageService {
  infrastructurelanguageTextModel$: BehaviorSubject<InfrastructureLanguageTextModel> = new BehaviorSubject<InfrastructureLanguageTextModel>(<InfrastructureLanguageTextModel>{});
  infrastructurelanguageModel$: BehaviorSubject<InfrastructureLanguageModel> = new BehaviorSubject<InfrastructureLanguageModel>(<InfrastructureLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesInfrastructureLanguageText(this);
    this.UpdateInfrastructureLanguageText(<InfrastructureLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateInfrastructureLanguageText(infrastructurelanguageTextModel: InfrastructureLanguageTextModel) {
    this.infrastructurelanguageTextModel$.next(<InfrastructureLanguageTextModel>{ ...this.infrastructurelanguageTextModel$.getValue(), ...infrastructurelanguageTextModel });
  }

  UpdateInfrastructureLanguageModel(infrastructurelanguageModel: InfrastructureLanguageModel) {
    this.infrastructurelanguageModel$.next(<InfrastructureLanguageModel>{ ...this.infrastructurelanguageModel$.getValue(), ...infrastructurelanguageModel });
  }

  GetInfrastructureLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateInfrastructureLanguageModel(<InfrastructureLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<InfrastructureLanguage[]>('/api/InfrastructureLanguage').pipe(
      map((x: any) => {
        console.debug(`InfrastructureLanguage OK. Return: ${x}`);
        this.infrastructurelanguageModel$.getValue().InfrastructureLanguageList = <InfrastructureLanguage[]>x;
        this.UpdateInfrastructureLanguageModel(this.infrastructurelanguageModel$.getValue());
        this.UpdateInfrastructureLanguageModel(<InfrastructureLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateInfrastructureLanguageModel(<InfrastructureLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`InfrastructureLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
