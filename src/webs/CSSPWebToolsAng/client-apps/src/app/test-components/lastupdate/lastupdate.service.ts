/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { LastUpdateTextModel, LastUpdateModel } from './lastupdate.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesLastUpdateText } from './lastupdate.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { LastUpdate } from 'src/app/models/generated/LastUpdate.model';

@Injectable({
  providedIn: 'root'
})
export class LastUpdateService {
  lastupdateTextModel$: BehaviorSubject<LastUpdateTextModel> = new BehaviorSubject<LastUpdateTextModel>(<LastUpdateTextModel>{});
  lastupdateModel$: BehaviorSubject<LastUpdateModel> = new BehaviorSubject<LastUpdateModel>(<LastUpdateModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesLastUpdateText(this);
    this.UpdateLastUpdateText(<LastUpdateTextModel>{ Title: "Something2 for text" });
  }

  UpdateLastUpdateText(lastupdateTextModel: LastUpdateTextModel) {
    this.lastupdateTextModel$.next(<LastUpdateTextModel>{ ...this.lastupdateTextModel$.getValue(), ...lastupdateTextModel });
  }

  UpdateLastUpdateModel(lastupdateModel: LastUpdateModel) {
    this.lastupdateModel$.next(<LastUpdateModel>{ ...this.lastupdateModel$.getValue(), ...lastupdateModel });
  }

  GetLastUpdate(router: Router) {
    let oldURL = router.url;
    this.UpdateLastUpdateModel(<LastUpdateModel>{ Working: true, Error: null });

    return this.httpClient.get<LastUpdate[]>('/api/LastUpdate').pipe(
      map((x: any) => {
        console.debug(`LastUpdate OK. Return: ${x}`);
        this.lastupdateModel$.getValue().LastUpdateList = <LastUpdate[]>x;
        this.UpdateLastUpdateModel(this.lastupdateModel$.getValue());
        this.UpdateLastUpdateModel(<LastUpdateModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateLastUpdateModel(<LastUpdateModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`LastUpdate ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
