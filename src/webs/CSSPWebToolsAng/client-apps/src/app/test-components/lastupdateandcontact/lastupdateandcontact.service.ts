/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { LastUpdateAndContactTextModel, LastUpdateAndContactModel } from './lastupdateandcontact.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesLastUpdateAndContactText } from './lastupdateandcontact.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { LastUpdateAndContact } from 'src/app/models/generated/LastUpdateAndContact.model';

@Injectable({
  providedIn: 'root'
})
export class LastUpdateAndContactService {
  lastupdateandcontactTextModel$: BehaviorSubject<LastUpdateAndContactTextModel> = new BehaviorSubject<LastUpdateAndContactTextModel>(<LastUpdateAndContactTextModel>{});
  lastupdateandcontactModel$: BehaviorSubject<LastUpdateAndContactModel> = new BehaviorSubject<LastUpdateAndContactModel>(<LastUpdateAndContactModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesLastUpdateAndContactText(this);
    this.UpdateLastUpdateAndContactText(<LastUpdateAndContactTextModel>{ Title: "Something2 for text" });
  }

  UpdateLastUpdateAndContactText(lastupdateandcontactTextModel: LastUpdateAndContactTextModel) {
    this.lastupdateandcontactTextModel$.next(<LastUpdateAndContactTextModel>{ ...this.lastupdateandcontactTextModel$.getValue(), ...lastupdateandcontactTextModel });
  }

  UpdateLastUpdateAndContactModel(lastupdateandcontactModel: LastUpdateAndContactModel) {
    this.lastupdateandcontactModel$.next(<LastUpdateAndContactModel>{ ...this.lastupdateandcontactModel$.getValue(), ...lastupdateandcontactModel });
  }

  GetLastUpdateAndContact(router: Router) {
    let oldURL = router.url;
    this.UpdateLastUpdateAndContactModel(<LastUpdateAndContactModel>{ Working: true, Error: null });

    return this.httpClient.get<LastUpdateAndContact[]>('/api/LastUpdateAndContact').pipe(
      map((x: any) => {
        console.debug(`LastUpdateAndContact OK. Return: ${x}`);
        this.lastupdateandcontactModel$.getValue().LastUpdateAndContactList = <LastUpdateAndContact[]>x;
        this.UpdateLastUpdateAndContactModel(this.lastupdateandcontactModel$.getValue());
        this.UpdateLastUpdateAndContactModel(<LastUpdateAndContactModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateLastUpdateAndContactModel(<LastUpdateAndContactModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`LastUpdateAndContact ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
