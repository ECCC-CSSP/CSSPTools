/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MapInfoPointTextModel, MapInfoPointModel } from './mapinfopoint.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMapInfoPointText } from './mapinfopoint.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MapInfoPoint } from 'src/app/models/generated/MapInfoPoint.model';

@Injectable({
  providedIn: 'root'
})
export class MapInfoPointService {
  mapinfopointTextModel$: BehaviorSubject<MapInfoPointTextModel> = new BehaviorSubject<MapInfoPointTextModel>(<MapInfoPointTextModel>{});
  mapinfopointModel$: BehaviorSubject<MapInfoPointModel> = new BehaviorSubject<MapInfoPointModel>(<MapInfoPointModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMapInfoPointText(this);
    this.UpdateMapInfoPointText(<MapInfoPointTextModel>{ Title: "Something2 for text" });
  }

  UpdateMapInfoPointText(mapinfopointTextModel: MapInfoPointTextModel) {
    this.mapinfopointTextModel$.next(<MapInfoPointTextModel>{ ...this.mapinfopointTextModel$.getValue(), ...mapinfopointTextModel });
  }

  UpdateMapInfoPointModel(mapinfopointModel: MapInfoPointModel) {
    this.mapinfopointModel$.next(<MapInfoPointModel>{ ...this.mapinfopointModel$.getValue(), ...mapinfopointModel });
  }

  GetMapInfoPoint(router: Router) {
    let oldURL = router.url;
    this.UpdateMapInfoPointModel(<MapInfoPointModel>{ Working: true, Error: null });

    return this.httpClient.get<MapInfoPoint[]>('/api/MapInfoPoint').pipe(
      map((x: any) => {
        console.debug(`MapInfoPoint OK. Return: ${x}`);
        this.mapinfopointModel$.getValue().MapInfoPointList = <MapInfoPoint[]>x;
        this.UpdateMapInfoPointModel(this.mapinfopointModel$.getValue());
        this.UpdateMapInfoPointModel(<MapInfoPointModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMapInfoPointModel(<MapInfoPointModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MapInfoPoint ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
