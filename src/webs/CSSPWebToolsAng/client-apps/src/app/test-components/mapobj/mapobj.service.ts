/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MapObjTextModel, MapObjModel } from './mapobj.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMapObjText } from './mapobj.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MapObj } from 'src/app/models/generated/MapObj.model';

@Injectable({
  providedIn: 'root'
})
export class MapObjService {
  mapobjTextModel$: BehaviorSubject<MapObjTextModel> = new BehaviorSubject<MapObjTextModel>(<MapObjTextModel>{});
  mapobjModel$: BehaviorSubject<MapObjModel> = new BehaviorSubject<MapObjModel>(<MapObjModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMapObjText(this);
    this.UpdateMapObjText(<MapObjTextModel>{ Title: "Something2 for text" });
  }

  UpdateMapObjText(mapobjTextModel: MapObjTextModel) {
    this.mapobjTextModel$.next(<MapObjTextModel>{ ...this.mapobjTextModel$.getValue(), ...mapobjTextModel });
  }

  UpdateMapObjModel(mapobjModel: MapObjModel) {
    this.mapobjModel$.next(<MapObjModel>{ ...this.mapobjModel$.getValue(), ...mapobjModel });
  }

  GetMapObj(router: Router) {
    let oldURL = router.url;
    this.UpdateMapObjModel(<MapObjModel>{ Working: true, Error: null });

    return this.httpClient.get<MapObj[]>('/api/MapObj').pipe(
      map((x: any) => {
        console.debug(`MapObj OK. Return: ${x}`);
        this.mapobjModel$.getValue().MapObjList = <MapObj[]>x;
        this.UpdateMapObjModel(this.mapobjModel$.getValue());
        this.UpdateMapObjModel(<MapObjModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMapObjModel(<MapObjModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MapObj ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
