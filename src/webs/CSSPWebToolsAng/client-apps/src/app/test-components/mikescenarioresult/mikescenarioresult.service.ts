/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MikeScenarioResultTextModel, MikeScenarioResultModel } from './mikescenarioresult.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMikeScenarioResultText } from './mikescenarioresult.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MikeScenarioResult } from 'src/app/models/generated/MikeScenarioResult.model';

@Injectable({
  providedIn: 'root'
})
export class MikeScenarioResultService {
  mikescenarioresultTextModel$: BehaviorSubject<MikeScenarioResultTextModel> = new BehaviorSubject<MikeScenarioResultTextModel>(<MikeScenarioResultTextModel>{});
  mikescenarioresultModel$: BehaviorSubject<MikeScenarioResultModel> = new BehaviorSubject<MikeScenarioResultModel>(<MikeScenarioResultModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMikeScenarioResultText(this);
    this.UpdateMikeScenarioResultText(<MikeScenarioResultTextModel>{ Title: "Something2 for text" });
  }

  UpdateMikeScenarioResultText(mikescenarioresultTextModel: MikeScenarioResultTextModel) {
    this.mikescenarioresultTextModel$.next(<MikeScenarioResultTextModel>{ ...this.mikescenarioresultTextModel$.getValue(), ...mikescenarioresultTextModel });
  }

  UpdateMikeScenarioResultModel(mikescenarioresultModel: MikeScenarioResultModel) {
    this.mikescenarioresultModel$.next(<MikeScenarioResultModel>{ ...this.mikescenarioresultModel$.getValue(), ...mikescenarioresultModel });
  }

  GetMikeScenarioResult(router: Router) {
    let oldURL = router.url;
    this.UpdateMikeScenarioResultModel(<MikeScenarioResultModel>{ Working: true, Error: null });

    return this.httpClient.get<MikeScenarioResult[]>('/api/MikeScenarioResult').pipe(
      map((x: any) => {
        console.debug(`MikeScenarioResult OK. Return: ${x}`);
        this.mikescenarioresultModel$.getValue().MikeScenarioResultList = <MikeScenarioResult[]>x;
        this.UpdateMikeScenarioResultModel(this.mikescenarioresultModel$.getValue());
        this.UpdateMikeScenarioResultModel(<MikeScenarioResultModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMikeScenarioResultModel(<MikeScenarioResultModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MikeScenarioResult ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
