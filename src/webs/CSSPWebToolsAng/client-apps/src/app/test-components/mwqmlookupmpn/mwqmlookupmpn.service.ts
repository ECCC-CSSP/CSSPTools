/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMLookupMPNTextModel, MWQMLookupMPNModel } from './mwqmlookupmpn.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMLookupMPNText } from './mwqmlookupmpn.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMLookupMPN } from 'src/app/models/generated/MWQMLookupMPN.model';

@Injectable({
  providedIn: 'root'
})
export class MWQMLookupMPNService {
  mwqmlookupmpnTextModel$: BehaviorSubject<MWQMLookupMPNTextModel> = new BehaviorSubject<MWQMLookupMPNTextModel>(<MWQMLookupMPNTextModel>{});
  mwqmlookupmpnModel$: BehaviorSubject<MWQMLookupMPNModel> = new BehaviorSubject<MWQMLookupMPNModel>(<MWQMLookupMPNModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMWQMLookupMPNText(this);
    this.UpdateMWQMLookupMPNText(<MWQMLookupMPNTextModel>{ Title: "Something2 for text" });
  }

  UpdateMWQMLookupMPNText(mwqmlookupmpnTextModel: MWQMLookupMPNTextModel) {
    this.mwqmlookupmpnTextModel$.next(<MWQMLookupMPNTextModel>{ ...this.mwqmlookupmpnTextModel$.getValue(), ...mwqmlookupmpnTextModel });
  }

  UpdateMWQMLookupMPNModel(mwqmlookupmpnModel: MWQMLookupMPNModel) {
    this.mwqmlookupmpnModel$.next(<MWQMLookupMPNModel>{ ...this.mwqmlookupmpnModel$.getValue(), ...mwqmlookupmpnModel });
  }

  GetMWQMLookupMPN(router: Router) {
    let oldURL = router.url;
    this.UpdateMWQMLookupMPNModel(<MWQMLookupMPNModel>{ Working: true, Error: null });

    return this.httpClient.get<MWQMLookupMPN[]>('/api/MWQMLookupMPN').pipe(
      map((x: any) => {
        console.debug(`MWQMLookupMPN OK. Return: ${x}`);
        this.mwqmlookupmpnModel$.getValue().MWQMLookupMPNList = <MWQMLookupMPN[]>x;
        this.UpdateMWQMLookupMPNModel(this.mwqmlookupmpnModel$.getValue());
        this.UpdateMWQMLookupMPNModel(<MWQMLookupMPNModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMWQMLookupMPNModel(<MWQMLookupMPNModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MWQMLookupMPN ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
