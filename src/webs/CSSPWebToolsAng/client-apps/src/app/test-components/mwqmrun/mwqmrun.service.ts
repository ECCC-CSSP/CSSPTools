/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMRunTextModel, MWQMRunModel } from './mwqmrun.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMRunText } from './mwqmrun.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMRun } from 'src/app/models/generated/MWQMRun.model';

@Injectable({
  providedIn: 'root'
})
export class MWQMRunService {
  mwqmrunTextModel$: BehaviorSubject<MWQMRunTextModel> = new BehaviorSubject<MWQMRunTextModel>(<MWQMRunTextModel>{});
  mwqmrunModel$: BehaviorSubject<MWQMRunModel> = new BehaviorSubject<MWQMRunModel>(<MWQMRunModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMWQMRunText(this);
    this.UpdateMWQMRunText(<MWQMRunTextModel>{ Title: "Something2 for text" });
  }

  UpdateMWQMRunText(mwqmrunTextModel: MWQMRunTextModel) {
    this.mwqmrunTextModel$.next(<MWQMRunTextModel>{ ...this.mwqmrunTextModel$.getValue(), ...mwqmrunTextModel });
  }

  UpdateMWQMRunModel(mwqmrunModel: MWQMRunModel) {
    this.mwqmrunModel$.next(<MWQMRunModel>{ ...this.mwqmrunModel$.getValue(), ...mwqmrunModel });
  }

  GetMWQMRun(router: Router) {
    let oldURL = router.url;
    this.UpdateMWQMRunModel(<MWQMRunModel>{ Working: true, Error: null });

    return this.httpClient.get<MWQMRun[]>('/api/MWQMRun').pipe(
      map((x: any) => {
        console.debug(`MWQMRun OK. Return: ${x}`);
        this.mwqmrunModel$.getValue().MWQMRunList = <MWQMRun[]>x;
        this.UpdateMWQMRunModel(this.mwqmrunModel$.getValue());
        this.UpdateMWQMRunModel(<MWQMRunModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMWQMRunModel(<MWQMRunModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MWQMRun ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
