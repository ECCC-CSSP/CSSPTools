/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { MWQMSampleTextModel, MWQMSampleModel } from './mwqmsample.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesMWQMSampleText } from './mwqmsample.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { MWQMSample } from 'src/app/models/generated/MWQMSample.model';

@Injectable({
  providedIn: 'root'
})
export class MWQMSampleService {
  mwqmsampleTextModel$: BehaviorSubject<MWQMSampleTextModel> = new BehaviorSubject<MWQMSampleTextModel>(<MWQMSampleTextModel>{});
  mwqmsampleModel$: BehaviorSubject<MWQMSampleModel> = new BehaviorSubject<MWQMSampleModel>(<MWQMSampleModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesMWQMSampleText(this);
    this.UpdateMWQMSampleText(<MWQMSampleTextModel>{ Title: "Something2 for text" });
  }

  UpdateMWQMSampleText(mwqmsampleTextModel: MWQMSampleTextModel) {
    this.mwqmsampleTextModel$.next(<MWQMSampleTextModel>{ ...this.mwqmsampleTextModel$.getValue(), ...mwqmsampleTextModel });
  }

  UpdateMWQMSampleModel(mwqmsampleModel: MWQMSampleModel) {
    this.mwqmsampleModel$.next(<MWQMSampleModel>{ ...this.mwqmsampleModel$.getValue(), ...mwqmsampleModel });
  }

  GetMWQMSample(router: Router) {
    let oldURL = router.url;
    this.UpdateMWQMSampleModel(<MWQMSampleModel>{ Working: true, Error: null });

    return this.httpClient.get<MWQMSample[]>('/api/MWQMSample').pipe(
      map((x: any) => {
        console.debug(`MWQMSample OK. Return: ${x}`);
        this.mwqmsampleModel$.getValue().MWQMSampleList = <MWQMSample[]>x;
        this.UpdateMWQMSampleModel(this.mwqmsampleModel$.getValue());
        this.UpdateMWQMSampleModel(<MWQMSampleModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateMWQMSampleModel(<MWQMSampleModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`MWQMSample ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
