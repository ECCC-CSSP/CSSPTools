/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { NewContactTextModel, NewContactModel } from './newcontact.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesNewContactText } from './newcontact.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { NewContact } from 'src/app/models/generated/NewContact.model';

@Injectable({
  providedIn: 'root'
})
export class NewContactService {
  newcontactTextModel$: BehaviorSubject<NewContactTextModel> = new BehaviorSubject<NewContactTextModel>(<NewContactTextModel>{});
  newcontactModel$: BehaviorSubject<NewContactModel> = new BehaviorSubject<NewContactModel>(<NewContactModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesNewContactText(this);
    this.UpdateNewContactText(<NewContactTextModel>{ Title: "Something2 for text" });
  }

  UpdateNewContactText(newcontactTextModel: NewContactTextModel) {
    this.newcontactTextModel$.next(<NewContactTextModel>{ ...this.newcontactTextModel$.getValue(), ...newcontactTextModel });
  }

  UpdateNewContactModel(newcontactModel: NewContactModel) {
    this.newcontactModel$.next(<NewContactModel>{ ...this.newcontactModel$.getValue(), ...newcontactModel });
  }

  GetNewContact(router: Router) {
    let oldURL = router.url;
    this.UpdateNewContactModel(<NewContactModel>{ Working: true, Error: null });

    return this.httpClient.get<NewContact[]>('/api/NewContact').pipe(
      map((x: any) => {
        console.debug(`NewContact OK. Return: ${x}`);
        this.newcontactModel$.getValue().NewContactList = <NewContact[]>x;
        this.UpdateNewContactModel(this.newcontactModel$.getValue());
        this.UpdateNewContactModel(<NewContactModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateNewContactModel(<NewContactModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`NewContact ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
