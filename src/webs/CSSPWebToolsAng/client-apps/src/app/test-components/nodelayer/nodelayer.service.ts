/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { NodeLayerTextModel, NodeLayerModel } from './nodelayer.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesNodeLayerText } from './nodelayer.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { NodeLayer } from 'src/app/models/generated/NodeLayer.model';

@Injectable({
  providedIn: 'root'
})
export class NodeLayerService {
  nodelayerTextModel$: BehaviorSubject<NodeLayerTextModel> = new BehaviorSubject<NodeLayerTextModel>(<NodeLayerTextModel>{});
  nodelayerModel$: BehaviorSubject<NodeLayerModel> = new BehaviorSubject<NodeLayerModel>(<NodeLayerModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesNodeLayerText(this);
    this.UpdateNodeLayerText(<NodeLayerTextModel>{ Title: "Something2 for text" });
  }

  UpdateNodeLayerText(nodelayerTextModel: NodeLayerTextModel) {
    this.nodelayerTextModel$.next(<NodeLayerTextModel>{ ...this.nodelayerTextModel$.getValue(), ...nodelayerTextModel });
  }

  UpdateNodeLayerModel(nodelayerModel: NodeLayerModel) {
    this.nodelayerModel$.next(<NodeLayerModel>{ ...this.nodelayerModel$.getValue(), ...nodelayerModel });
  }

  GetNodeLayer(router: Router) {
    let oldURL = router.url;
    this.UpdateNodeLayerModel(<NodeLayerModel>{ Working: true, Error: null });

    return this.httpClient.get<NodeLayer[]>('/api/NodeLayer').pipe(
      map((x: any) => {
        console.debug(`NodeLayer OK. Return: ${x}`);
        this.nodelayerModel$.getValue().NodeLayerList = <NodeLayer[]>x;
        this.UpdateNodeLayerModel(this.nodelayerModel$.getValue());
        this.UpdateNodeLayerModel(<NodeLayerModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateNodeLayerModel(<NodeLayerModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`NodeLayer ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
