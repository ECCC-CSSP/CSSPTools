/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceObservationTextModel, PolSourceObservationModel } from './polsourceobservation.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceObservationText } from './polsourceobservation.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceObservation } from 'src/app/models/generated/PolSourceObservation.model';

@Injectable({
  providedIn: 'root'
})
export class PolSourceObservationService {
  polsourceobservationTextModel$: BehaviorSubject<PolSourceObservationTextModel> = new BehaviorSubject<PolSourceObservationTextModel>(<PolSourceObservationTextModel>{});
  polsourceobservationModel$: BehaviorSubject<PolSourceObservationModel> = new BehaviorSubject<PolSourceObservationModel>(<PolSourceObservationModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesPolSourceObservationText(this);
    this.UpdatePolSourceObservationText(<PolSourceObservationTextModel>{ Title: "Something2 for text" });
  }

  UpdatePolSourceObservationText(polsourceobservationTextModel: PolSourceObservationTextModel) {
    this.polsourceobservationTextModel$.next(<PolSourceObservationTextModel>{ ...this.polsourceobservationTextModel$.getValue(), ...polsourceobservationTextModel });
  }

  UpdatePolSourceObservationModel(polsourceobservationModel: PolSourceObservationModel) {
    this.polsourceobservationModel$.next(<PolSourceObservationModel>{ ...this.polsourceobservationModel$.getValue(), ...polsourceobservationModel });
  }

  GetPolSourceObservation(router: Router) {
    let oldURL = router.url;
    this.UpdatePolSourceObservationModel(<PolSourceObservationModel>{ Working: true, Error: null });

    return this.httpClient.get<PolSourceObservation[]>('/api/PolSourceObservation').pipe(
      map((x: any) => {
        console.debug(`PolSourceObservation OK. Return: ${x}`);
        this.polsourceobservationModel$.getValue().PolSourceObservationList = <PolSourceObservation[]>x;
        this.UpdatePolSourceObservationModel(this.polsourceobservationModel$.getValue());
        this.UpdatePolSourceObservationModel(<PolSourceObservationModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdatePolSourceObservationModel(<PolSourceObservationModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`PolSourceObservation ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
