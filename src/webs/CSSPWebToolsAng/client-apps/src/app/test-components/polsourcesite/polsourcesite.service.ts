/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceSiteTextModel, PolSourceSiteModel } from './polsourcesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceSiteText } from './polsourcesite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceSite } from 'src/app/models/generated/PolSourceSite.model';

@Injectable({
  providedIn: 'root'
})
export class PolSourceSiteService {
  polsourcesiteTextModel$: BehaviorSubject<PolSourceSiteTextModel> = new BehaviorSubject<PolSourceSiteTextModel>(<PolSourceSiteTextModel>{});
  polsourcesiteModel$: BehaviorSubject<PolSourceSiteModel> = new BehaviorSubject<PolSourceSiteModel>(<PolSourceSiteModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesPolSourceSiteText(this);
    this.UpdatePolSourceSiteText(<PolSourceSiteTextModel>{ Title: "Something2 for text" });
  }

  UpdatePolSourceSiteText(polsourcesiteTextModel: PolSourceSiteTextModel) {
    this.polsourcesiteTextModel$.next(<PolSourceSiteTextModel>{ ...this.polsourcesiteTextModel$.getValue(), ...polsourcesiteTextModel });
  }

  UpdatePolSourceSiteModel(polsourcesiteModel: PolSourceSiteModel) {
    this.polsourcesiteModel$.next(<PolSourceSiteModel>{ ...this.polsourcesiteModel$.getValue(), ...polsourcesiteModel });
  }

  GetPolSourceSite(router: Router) {
    let oldURL = router.url;
    this.UpdatePolSourceSiteModel(<PolSourceSiteModel>{ Working: true, Error: null });

    return this.httpClient.get<PolSourceSite[]>('/api/PolSourceSite').pipe(
      map((x: any) => {
        console.debug(`PolSourceSite OK. Return: ${x}`);
        this.polsourcesiteModel$.getValue().PolSourceSiteList = <PolSourceSite[]>x;
        this.UpdatePolSourceSiteModel(this.polsourcesiteModel$.getValue());
        this.UpdatePolSourceSiteModel(<PolSourceSiteModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdatePolSourceSiteModel(<PolSourceSiteModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`PolSourceSite ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
