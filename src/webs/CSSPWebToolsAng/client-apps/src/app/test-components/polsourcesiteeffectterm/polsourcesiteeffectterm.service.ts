/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolSourceSiteEffectTermTextModel, PolSourceSiteEffectTermModel } from './polsourcesiteeffectterm.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolSourceSiteEffectTermText } from './polsourcesiteeffectterm.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolSourceSiteEffectTerm } from 'src/app/models/generated/PolSourceSiteEffectTerm.model';

@Injectable({
  providedIn: 'root'
})
export class PolSourceSiteEffectTermService {
  polsourcesiteeffecttermTextModel$: BehaviorSubject<PolSourceSiteEffectTermTextModel> = new BehaviorSubject<PolSourceSiteEffectTermTextModel>(<PolSourceSiteEffectTermTextModel>{});
  polsourcesiteeffecttermModel$: BehaviorSubject<PolSourceSiteEffectTermModel> = new BehaviorSubject<PolSourceSiteEffectTermModel>(<PolSourceSiteEffectTermModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesPolSourceSiteEffectTermText(this);
    this.UpdatePolSourceSiteEffectTermText(<PolSourceSiteEffectTermTextModel>{ Title: "Something2 for text" });
  }

  UpdatePolSourceSiteEffectTermText(polsourcesiteeffecttermTextModel: PolSourceSiteEffectTermTextModel) {
    this.polsourcesiteeffecttermTextModel$.next(<PolSourceSiteEffectTermTextModel>{ ...this.polsourcesiteeffecttermTextModel$.getValue(), ...polsourcesiteeffecttermTextModel });
  }

  UpdatePolSourceSiteEffectTermModel(polsourcesiteeffecttermModel: PolSourceSiteEffectTermModel) {
    this.polsourcesiteeffecttermModel$.next(<PolSourceSiteEffectTermModel>{ ...this.polsourcesiteeffecttermModel$.getValue(), ...polsourcesiteeffecttermModel });
  }

  GetPolSourceSiteEffectTerm(router: Router) {
    let oldURL = router.url;
    this.UpdatePolSourceSiteEffectTermModel(<PolSourceSiteEffectTermModel>{ Working: true, Error: null });

    return this.httpClient.get<PolSourceSiteEffectTerm[]>('/api/PolSourceSiteEffectTerm').pipe(
      map((x: any) => {
        console.debug(`PolSourceSiteEffectTerm OK. Return: ${x}`);
        this.polsourcesiteeffecttermModel$.getValue().PolSourceSiteEffectTermList = <PolSourceSiteEffectTerm[]>x;
        this.UpdatePolSourceSiteEffectTermModel(this.polsourcesiteeffecttermModel$.getValue());
        this.UpdatePolSourceSiteEffectTermModel(<PolSourceSiteEffectTermModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdatePolSourceSiteEffectTermModel(<PolSourceSiteEffectTermModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`PolSourceSiteEffectTerm ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
