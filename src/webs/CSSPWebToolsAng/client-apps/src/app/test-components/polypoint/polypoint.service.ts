/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { PolyPointTextModel, PolyPointModel } from './polypoint.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesPolyPointText } from './polypoint.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { PolyPoint } from 'src/app/models/generated/PolyPoint.model';

@Injectable({
  providedIn: 'root'
})
export class PolyPointService {
  polypointTextModel$: BehaviorSubject<PolyPointTextModel> = new BehaviorSubject<PolyPointTextModel>(<PolyPointTextModel>{});
  polypointModel$: BehaviorSubject<PolyPointModel> = new BehaviorSubject<PolyPointModel>(<PolyPointModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesPolyPointText(this);
    this.UpdatePolyPointText(<PolyPointTextModel>{ Title: "Something2 for text" });
  }

  UpdatePolyPointText(polypointTextModel: PolyPointTextModel) {
    this.polypointTextModel$.next(<PolyPointTextModel>{ ...this.polypointTextModel$.getValue(), ...polypointTextModel });
  }

  UpdatePolyPointModel(polypointModel: PolyPointModel) {
    this.polypointModel$.next(<PolyPointModel>{ ...this.polypointModel$.getValue(), ...polypointModel });
  }

  GetPolyPoint(router: Router) {
    let oldURL = router.url;
    this.UpdatePolyPointModel(<PolyPointModel>{ Working: true, Error: null });

    return this.httpClient.get<PolyPoint[]>('/api/PolyPoint').pipe(
      map((x: any) => {
        console.debug(`PolyPoint OK. Return: ${x}`);
        this.polypointModel$.getValue().PolyPointList = <PolyPoint[]>x;
        this.UpdatePolyPointModel(this.polypointModel$.getValue());
        this.UpdatePolyPointModel(<PolyPointModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdatePolyPointModel(<PolyPointModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`PolyPoint ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
