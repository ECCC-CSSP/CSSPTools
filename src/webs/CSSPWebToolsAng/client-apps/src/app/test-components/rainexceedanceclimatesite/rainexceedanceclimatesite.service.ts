/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { RainExceedanceClimateSiteTextModel, RainExceedanceClimateSiteModel } from './rainexceedanceclimatesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesRainExceedanceClimateSiteText } from './rainexceedanceclimatesite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { RainExceedanceClimateSite } from 'src/app/models/generated/RainExceedanceClimateSite.model';

@Injectable({
  providedIn: 'root'
})
export class RainExceedanceClimateSiteService {
  rainexceedanceclimatesiteTextModel$: BehaviorSubject<RainExceedanceClimateSiteTextModel> = new BehaviorSubject<RainExceedanceClimateSiteTextModel>(<RainExceedanceClimateSiteTextModel>{});
  rainexceedanceclimatesiteModel$: BehaviorSubject<RainExceedanceClimateSiteModel> = new BehaviorSubject<RainExceedanceClimateSiteModel>(<RainExceedanceClimateSiteModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesRainExceedanceClimateSiteText(this);
    this.UpdateRainExceedanceClimateSiteText(<RainExceedanceClimateSiteTextModel>{ Title: "Something2 for text" });
  }

  UpdateRainExceedanceClimateSiteText(rainexceedanceclimatesiteTextModel: RainExceedanceClimateSiteTextModel) {
    this.rainexceedanceclimatesiteTextModel$.next(<RainExceedanceClimateSiteTextModel>{ ...this.rainexceedanceclimatesiteTextModel$.getValue(), ...rainexceedanceclimatesiteTextModel });
  }

  UpdateRainExceedanceClimateSiteModel(rainexceedanceclimatesiteModel: RainExceedanceClimateSiteModel) {
    this.rainexceedanceclimatesiteModel$.next(<RainExceedanceClimateSiteModel>{ ...this.rainexceedanceclimatesiteModel$.getValue(), ...rainexceedanceclimatesiteModel });
  }

  GetRainExceedanceClimateSite(router: Router) {
    let oldURL = router.url;
    this.UpdateRainExceedanceClimateSiteModel(<RainExceedanceClimateSiteModel>{ Working: true, Error: null });

    return this.httpClient.get<RainExceedanceClimateSite[]>('/api/RainExceedanceClimateSite').pipe(
      map((x: any) => {
        console.debug(`RainExceedanceClimateSite OK. Return: ${x}`);
        this.rainexceedanceclimatesiteModel$.getValue().RainExceedanceClimateSiteList = <RainExceedanceClimateSite[]>x;
        this.UpdateRainExceedanceClimateSiteModel(this.rainexceedanceclimatesiteModel$.getValue());
        this.UpdateRainExceedanceClimateSiteModel(<RainExceedanceClimateSiteModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateRainExceedanceClimateSiteModel(<RainExceedanceClimateSiteModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`RainExceedanceClimateSite ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
