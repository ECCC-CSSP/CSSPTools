/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { ResetPasswordTextModel, ResetPasswordModel } from './resetpassword.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesResetPasswordText } from './resetpassword.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { ResetPassword } from 'src/app/models/generated/ResetPassword.model';

@Injectable({
  providedIn: 'root'
})
export class ResetPasswordService {
  resetpasswordTextModel$: BehaviorSubject<ResetPasswordTextModel> = new BehaviorSubject<ResetPasswordTextModel>(<ResetPasswordTextModel>{});
  resetpasswordModel$: BehaviorSubject<ResetPasswordModel> = new BehaviorSubject<ResetPasswordModel>(<ResetPasswordModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesResetPasswordText(this);
    this.UpdateResetPasswordText(<ResetPasswordTextModel>{ Title: "Something2 for text" });
  }

  UpdateResetPasswordText(resetpasswordTextModel: ResetPasswordTextModel) {
    this.resetpasswordTextModel$.next(<ResetPasswordTextModel>{ ...this.resetpasswordTextModel$.getValue(), ...resetpasswordTextModel });
  }

  UpdateResetPasswordModel(resetpasswordModel: ResetPasswordModel) {
    this.resetpasswordModel$.next(<ResetPasswordModel>{ ...this.resetpasswordModel$.getValue(), ...resetpasswordModel });
  }

  GetResetPassword(router: Router) {
    let oldURL = router.url;
    this.UpdateResetPasswordModel(<ResetPasswordModel>{ Working: true, Error: null });

    return this.httpClient.get<ResetPassword[]>('/api/ResetPassword').pipe(
      map((x: any) => {
        console.debug(`ResetPassword OK. Return: ${x}`);
        this.resetpasswordModel$.getValue().ResetPasswordList = <ResetPassword[]>x;
        this.UpdateResetPasswordModel(this.resetpasswordModel$.getValue());
        this.UpdateResetPasswordModel(<ResetPasswordModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateResetPasswordModel(<ResetPasswordModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`ResetPassword ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
