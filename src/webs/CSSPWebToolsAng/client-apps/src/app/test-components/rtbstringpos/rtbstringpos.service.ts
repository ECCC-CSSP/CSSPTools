/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { RTBStringPosTextModel, RTBStringPosModel } from './rtbstringpos.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesRTBStringPosText } from './rtbstringpos.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { RTBStringPos } from 'src/app/models/generated/RTBStringPos.model';

@Injectable({
  providedIn: 'root'
})
export class RTBStringPosService {
  rtbstringposTextModel$: BehaviorSubject<RTBStringPosTextModel> = new BehaviorSubject<RTBStringPosTextModel>(<RTBStringPosTextModel>{});
  rtbstringposModel$: BehaviorSubject<RTBStringPosModel> = new BehaviorSubject<RTBStringPosModel>(<RTBStringPosModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesRTBStringPosText(this);
    this.UpdateRTBStringPosText(<RTBStringPosTextModel>{ Title: "Something2 for text" });
  }

  UpdateRTBStringPosText(rtbstringposTextModel: RTBStringPosTextModel) {
    this.rtbstringposTextModel$.next(<RTBStringPosTextModel>{ ...this.rtbstringposTextModel$.getValue(), ...rtbstringposTextModel });
  }

  UpdateRTBStringPosModel(rtbstringposModel: RTBStringPosModel) {
    this.rtbstringposModel$.next(<RTBStringPosModel>{ ...this.rtbstringposModel$.getValue(), ...rtbstringposModel });
  }

  GetRTBStringPos(router: Router) {
    let oldURL = router.url;
    this.UpdateRTBStringPosModel(<RTBStringPosModel>{ Working: true, Error: null });

    return this.httpClient.get<RTBStringPos[]>('/api/RTBStringPos').pipe(
      map((x: any) => {
        console.debug(`RTBStringPos OK. Return: ${x}`);
        this.rtbstringposModel$.getValue().RTBStringPosList = <RTBStringPos[]>x;
        this.UpdateRTBStringPosModel(this.rtbstringposModel$.getValue());
        this.UpdateRTBStringPosModel(<RTBStringPosModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateRTBStringPosModel(<RTBStringPosModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`RTBStringPos ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
