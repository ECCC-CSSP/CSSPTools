/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SearchTagAndTermsTextModel, SearchTagAndTermsModel } from './searchtagandterms.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSearchTagAndTermsText } from './searchtagandterms.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SearchTagAndTerms } from 'src/app/models/generated/SearchTagAndTerms.model';

@Injectable({
  providedIn: 'root'
})
export class SearchTagAndTermsService {
  searchtagandtermsTextModel$: BehaviorSubject<SearchTagAndTermsTextModel> = new BehaviorSubject<SearchTagAndTermsTextModel>(<SearchTagAndTermsTextModel>{});
  searchtagandtermsModel$: BehaviorSubject<SearchTagAndTermsModel> = new BehaviorSubject<SearchTagAndTermsModel>(<SearchTagAndTermsModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesSearchTagAndTermsText(this);
    this.UpdateSearchTagAndTermsText(<SearchTagAndTermsTextModel>{ Title: "Something2 for text" });
  }

  UpdateSearchTagAndTermsText(searchtagandtermsTextModel: SearchTagAndTermsTextModel) {
    this.searchtagandtermsTextModel$.next(<SearchTagAndTermsTextModel>{ ...this.searchtagandtermsTextModel$.getValue(), ...searchtagandtermsTextModel });
  }

  UpdateSearchTagAndTermsModel(searchtagandtermsModel: SearchTagAndTermsModel) {
    this.searchtagandtermsModel$.next(<SearchTagAndTermsModel>{ ...this.searchtagandtermsModel$.getValue(), ...searchtagandtermsModel });
  }

  GetSearchTagAndTerms(router: Router) {
    let oldURL = router.url;
    this.UpdateSearchTagAndTermsModel(<SearchTagAndTermsModel>{ Working: true, Error: null });

    return this.httpClient.get<SearchTagAndTerms[]>('/api/SearchTagAndTerms').pipe(
      map((x: any) => {
        console.debug(`SearchTagAndTerms OK. Return: ${x}`);
        this.searchtagandtermsModel$.getValue().SearchTagAndTermsList = <SearchTagAndTerms[]>x;
        this.UpdateSearchTagAndTermsModel(this.searchtagandtermsModel$.getValue());
        this.UpdateSearchTagAndTermsModel(<SearchTagAndTermsModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateSearchTagAndTermsModel(<SearchTagAndTermsModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`SearchTagAndTerms ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
