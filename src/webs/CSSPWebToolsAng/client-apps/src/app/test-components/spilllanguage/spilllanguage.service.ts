/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { SpillLanguageTextModel, SpillLanguageModel } from './spilllanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesSpillLanguageText } from './spilllanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { SpillLanguage } from 'src/app/models/generated/SpillLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class SpillLanguageService {
  spilllanguageTextModel$: BehaviorSubject<SpillLanguageTextModel> = new BehaviorSubject<SpillLanguageTextModel>(<SpillLanguageTextModel>{});
  spilllanguageModel$: BehaviorSubject<SpillLanguageModel> = new BehaviorSubject<SpillLanguageModel>(<SpillLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesSpillLanguageText(this);
    this.UpdateSpillLanguageText(<SpillLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateSpillLanguageText(spilllanguageTextModel: SpillLanguageTextModel) {
    this.spilllanguageTextModel$.next(<SpillLanguageTextModel>{ ...this.spilllanguageTextModel$.getValue(), ...spilllanguageTextModel });
  }

  UpdateSpillLanguageModel(spilllanguageModel: SpillLanguageModel) {
    this.spilllanguageModel$.next(<SpillLanguageModel>{ ...this.spilllanguageModel$.getValue(), ...spilllanguageModel });
  }

  GetSpillLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateSpillLanguageModel(<SpillLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<SpillLanguage[]>('/api/SpillLanguage').pipe(
      map((x: any) => {
        console.debug(`SpillLanguage OK. Return: ${x}`);
        this.spilllanguageModel$.getValue().SpillLanguageList = <SpillLanguage[]>x;
        this.UpdateSpillLanguageModel(this.spilllanguageModel$.getValue());
        this.UpdateSpillLanguageModel(<SpillLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateSpillLanguageModel(<SpillLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`SpillLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
