/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TelTextModel, TelModel } from './tel.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTelText } from './tel.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Tel } from 'src/app/models/generated/Tel.model';

@Injectable({
  providedIn: 'root'
})
export class TelService {
  telTextModel$: BehaviorSubject<TelTextModel> = new BehaviorSubject<TelTextModel>(<TelTextModel>{});
  telModel$: BehaviorSubject<TelModel> = new BehaviorSubject<TelModel>(<TelModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTelText(this);
    this.UpdateTelText(<TelTextModel>{ Title: "Something2 for text" });
  }

  UpdateTelText(telTextModel: TelTextModel) {
    this.telTextModel$.next(<TelTextModel>{ ...this.telTextModel$.getValue(), ...telTextModel });
  }

  UpdateTelModel(telModel: TelModel) {
    this.telModel$.next(<TelModel>{ ...this.telModel$.getValue(), ...telModel });
  }

  GetTel(router: Router) {
    let oldURL = router.url;
    this.UpdateTelModel(<TelModel>{ Working: true, Error: null });

    return this.httpClient.get<Tel[]>('/api/Tel').pipe(
      map((x: any) => {
        console.debug(`Tel OK. Return: ${x}`);
        this.telModel$.getValue().TelList = <Tel[]>x;
        this.UpdateTelModel(this.telModel$.getValue());
        this.UpdateTelModel(<TelModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTelModel(<TelModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Tel ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
