/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TideDataValueTextModel, TideDataValueModel } from './tidedatavalue.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTideDataValueText } from './tidedatavalue.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TideDataValue } from 'src/app/models/generated/TideDataValue.model';

@Injectable({
  providedIn: 'root'
})
export class TideDataValueService {
  tidedatavalueTextModel$: BehaviorSubject<TideDataValueTextModel> = new BehaviorSubject<TideDataValueTextModel>(<TideDataValueTextModel>{});
  tidedatavalueModel$: BehaviorSubject<TideDataValueModel> = new BehaviorSubject<TideDataValueModel>(<TideDataValueModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTideDataValueText(this);
    this.UpdateTideDataValueText(<TideDataValueTextModel>{ Title: "Something2 for text" });
  }

  UpdateTideDataValueText(tidedatavalueTextModel: TideDataValueTextModel) {
    this.tidedatavalueTextModel$.next(<TideDataValueTextModel>{ ...this.tidedatavalueTextModel$.getValue(), ...tidedatavalueTextModel });
  }

  UpdateTideDataValueModel(tidedatavalueModel: TideDataValueModel) {
    this.tidedatavalueModel$.next(<TideDataValueModel>{ ...this.tidedatavalueModel$.getValue(), ...tidedatavalueModel });
  }

  GetTideDataValue(router: Router) {
    let oldURL = router.url;
    this.UpdateTideDataValueModel(<TideDataValueModel>{ Working: true, Error: null });

    return this.httpClient.get<TideDataValue[]>('/api/TideDataValue').pipe(
      map((x: any) => {
        console.debug(`TideDataValue OK. Return: ${x}`);
        this.tidedatavalueModel$.getValue().TideDataValueList = <TideDataValue[]>x;
        this.UpdateTideDataValueModel(this.tidedatavalueModel$.getValue());
        this.UpdateTideDataValueModel(<TideDataValueModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTideDataValueModel(<TideDataValueModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TideDataValue ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
