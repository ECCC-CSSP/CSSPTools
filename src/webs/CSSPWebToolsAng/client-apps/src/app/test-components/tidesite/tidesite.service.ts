/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TideSiteTextModel, TideSiteModel } from './tidesite.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTideSiteText } from './tidesite.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TideSite } from 'src/app/models/generated/TideSite.model';

@Injectable({
  providedIn: 'root'
})
export class TideSiteService {
  tidesiteTextModel$: BehaviorSubject<TideSiteTextModel> = new BehaviorSubject<TideSiteTextModel>(<TideSiteTextModel>{});
  tidesiteModel$: BehaviorSubject<TideSiteModel> = new BehaviorSubject<TideSiteModel>(<TideSiteModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTideSiteText(this);
    this.UpdateTideSiteText(<TideSiteTextModel>{ Title: "Something2 for text" });
  }

  UpdateTideSiteText(tidesiteTextModel: TideSiteTextModel) {
    this.tidesiteTextModel$.next(<TideSiteTextModel>{ ...this.tidesiteTextModel$.getValue(), ...tidesiteTextModel });
  }

  UpdateTideSiteModel(tidesiteModel: TideSiteModel) {
    this.tidesiteModel$.next(<TideSiteModel>{ ...this.tidesiteModel$.getValue(), ...tidesiteModel });
  }

  GetTideSite(router: Router) {
    let oldURL = router.url;
    this.UpdateTideSiteModel(<TideSiteModel>{ Working: true, Error: null });

    return this.httpClient.get<TideSite[]>('/api/TideSite').pipe(
      map((x: any) => {
        console.debug(`TideSite OK. Return: ${x}`);
        this.tidesiteModel$.getValue().TideSiteList = <TideSite[]>x;
        this.UpdateTideSiteModel(this.tidesiteModel$.getValue());
        this.UpdateTideSiteModel(<TideSiteModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTideSiteModel(<TideSiteModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TideSite ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
