/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVFullTextTextModel, TVFullTextModel } from './tvfulltext.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVFullTextText } from './tvfulltext.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVFullText } from 'src/app/models/generated/TVFullText.model';

@Injectable({
  providedIn: 'root'
})
export class TVFullTextService {
  tvfulltextTextModel$: BehaviorSubject<TVFullTextTextModel> = new BehaviorSubject<TVFullTextTextModel>(<TVFullTextTextModel>{});
  tvfulltextModel$: BehaviorSubject<TVFullTextModel> = new BehaviorSubject<TVFullTextModel>(<TVFullTextModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVFullTextText(this);
    this.UpdateTVFullTextText(<TVFullTextTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVFullTextText(tvfulltextTextModel: TVFullTextTextModel) {
    this.tvfulltextTextModel$.next(<TVFullTextTextModel>{ ...this.tvfulltextTextModel$.getValue(), ...tvfulltextTextModel });
  }

  UpdateTVFullTextModel(tvfulltextModel: TVFullTextModel) {
    this.tvfulltextModel$.next(<TVFullTextModel>{ ...this.tvfulltextModel$.getValue(), ...tvfulltextModel });
  }

  GetTVFullText(router: Router) {
    let oldURL = router.url;
    this.UpdateTVFullTextModel(<TVFullTextModel>{ Working: true, Error: null });

    return this.httpClient.get<TVFullText[]>('/api/TVFullText').pipe(
      map((x: any) => {
        console.debug(`TVFullText OK. Return: ${x}`);
        this.tvfulltextModel$.getValue().TVFullTextList = <TVFullText[]>x;
        this.UpdateTVFullTextModel(this.tvfulltextModel$.getValue());
        this.UpdateTVFullTextModel(<TVFullTextModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVFullTextModel(<TVFullTextModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVFullText ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
