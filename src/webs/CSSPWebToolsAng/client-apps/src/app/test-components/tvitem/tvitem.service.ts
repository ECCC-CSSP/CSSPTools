/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemTextModel, TVItemModel } from './tvitem.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemText } from './tvitem.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItem } from 'src/app/models/generated/TVItem.model';

@Injectable({
  providedIn: 'root'
})
export class TVItemService {
  tvitemTextModel$: BehaviorSubject<TVItemTextModel> = new BehaviorSubject<TVItemTextModel>(<TVItemTextModel>{});
  tvitemModel$: BehaviorSubject<TVItemModel> = new BehaviorSubject<TVItemModel>(<TVItemModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVItemText(this);
    this.UpdateTVItemText(<TVItemTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVItemText(tvitemTextModel: TVItemTextModel) {
    this.tvitemTextModel$.next(<TVItemTextModel>{ ...this.tvitemTextModel$.getValue(), ...tvitemTextModel });
  }

  UpdateTVItemModel(tvitemModel: TVItemModel) {
    this.tvitemModel$.next(<TVItemModel>{ ...this.tvitemModel$.getValue(), ...tvitemModel });
  }

  GetTVItem(router: Router) {
    let oldURL = router.url;
    this.UpdateTVItemModel(<TVItemModel>{ Working: true, Error: null });

    return this.httpClient.get<TVItem[]>('/api/TVItem').pipe(
      map((x: any) => {
        console.debug(`TVItem OK. Return: ${x}`);
        this.tvitemModel$.getValue().TVItemList = <TVItem[]>x;
        this.UpdateTVItemModel(this.tvitemModel$.getValue());
        this.UpdateTVItemModel(<TVItemModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVItemModel(<TVItemModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVItem ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
