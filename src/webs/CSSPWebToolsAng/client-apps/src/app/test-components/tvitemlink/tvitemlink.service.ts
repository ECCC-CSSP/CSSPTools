/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemLinkTextModel, TVItemLinkModel } from './tvitemlink.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemLinkText } from './tvitemlink.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemLink } from 'src/app/models/generated/TVItemLink.model';

@Injectable({
  providedIn: 'root'
})
export class TVItemLinkService {
  tvitemlinkTextModel$: BehaviorSubject<TVItemLinkTextModel> = new BehaviorSubject<TVItemLinkTextModel>(<TVItemLinkTextModel>{});
  tvitemlinkModel$: BehaviorSubject<TVItemLinkModel> = new BehaviorSubject<TVItemLinkModel>(<TVItemLinkModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVItemLinkText(this);
    this.UpdateTVItemLinkText(<TVItemLinkTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVItemLinkText(tvitemlinkTextModel: TVItemLinkTextModel) {
    this.tvitemlinkTextModel$.next(<TVItemLinkTextModel>{ ...this.tvitemlinkTextModel$.getValue(), ...tvitemlinkTextModel });
  }

  UpdateTVItemLinkModel(tvitemlinkModel: TVItemLinkModel) {
    this.tvitemlinkModel$.next(<TVItemLinkModel>{ ...this.tvitemlinkModel$.getValue(), ...tvitemlinkModel });
  }

  GetTVItemLink(router: Router) {
    let oldURL = router.url;
    this.UpdateTVItemLinkModel(<TVItemLinkModel>{ Working: true, Error: null });

    return this.httpClient.get<TVItemLink[]>('/api/TVItemLink').pipe(
      map((x: any) => {
        console.debug(`TVItemLink OK. Return: ${x}`);
        this.tvitemlinkModel$.getValue().TVItemLinkList = <TVItemLink[]>x;
        this.UpdateTVItemLinkModel(this.tvitemlinkModel$.getValue());
        this.UpdateTVItemLinkModel(<TVItemLinkModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVItemLinkModel(<TVItemLinkModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVItemLink ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
