/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemStatTextModel, TVItemStatModel } from './tvitemstat.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemStatText } from './tvitemstat.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemStat } from 'src/app/models/generated/TVItemStat.model';

@Injectable({
  providedIn: 'root'
})
export class TVItemStatService {
  tvitemstatTextModel$: BehaviorSubject<TVItemStatTextModel> = new BehaviorSubject<TVItemStatTextModel>(<TVItemStatTextModel>{});
  tvitemstatModel$: BehaviorSubject<TVItemStatModel> = new BehaviorSubject<TVItemStatModel>(<TVItemStatModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVItemStatText(this);
    this.UpdateTVItemStatText(<TVItemStatTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVItemStatText(tvitemstatTextModel: TVItemStatTextModel) {
    this.tvitemstatTextModel$.next(<TVItemStatTextModel>{ ...this.tvitemstatTextModel$.getValue(), ...tvitemstatTextModel });
  }

  UpdateTVItemStatModel(tvitemstatModel: TVItemStatModel) {
    this.tvitemstatModel$.next(<TVItemStatModel>{ ...this.tvitemstatModel$.getValue(), ...tvitemstatModel });
  }

  GetTVItemStat(router: Router) {
    let oldURL = router.url;
    this.UpdateTVItemStatModel(<TVItemStatModel>{ Working: true, Error: null });

    return this.httpClient.get<TVItemStat[]>('/api/TVItemStat').pipe(
      map((x: any) => {
        console.debug(`TVItemStat OK. Return: ${x}`);
        this.tvitemstatModel$.getValue().TVItemStatList = <TVItemStat[]>x;
        this.UpdateTVItemStatModel(this.tvitemstatModel$.getValue());
        this.UpdateTVItemStatModel(<TVItemStatModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVItemStatModel(<TVItemStatModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVItemStat ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
