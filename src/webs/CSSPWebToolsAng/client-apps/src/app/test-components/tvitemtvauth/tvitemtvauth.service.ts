/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVItemTVAuthTextModel, TVItemTVAuthModel } from './tvitemtvauth.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVItemTVAuthText } from './tvitemtvauth.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVItemTVAuth } from 'src/app/models/generated/TVItemTVAuth.model';

@Injectable({
  providedIn: 'root'
})
export class TVItemTVAuthService {
  tvitemtvauthTextModel$: BehaviorSubject<TVItemTVAuthTextModel> = new BehaviorSubject<TVItemTVAuthTextModel>(<TVItemTVAuthTextModel>{});
  tvitemtvauthModel$: BehaviorSubject<TVItemTVAuthModel> = new BehaviorSubject<TVItemTVAuthModel>(<TVItemTVAuthModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVItemTVAuthText(this);
    this.UpdateTVItemTVAuthText(<TVItemTVAuthTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVItemTVAuthText(tvitemtvauthTextModel: TVItemTVAuthTextModel) {
    this.tvitemtvauthTextModel$.next(<TVItemTVAuthTextModel>{ ...this.tvitemtvauthTextModel$.getValue(), ...tvitemtvauthTextModel });
  }

  UpdateTVItemTVAuthModel(tvitemtvauthModel: TVItemTVAuthModel) {
    this.tvitemtvauthModel$.next(<TVItemTVAuthModel>{ ...this.tvitemtvauthModel$.getValue(), ...tvitemtvauthModel });
  }

  GetTVItemTVAuth(router: Router) {
    let oldURL = router.url;
    this.UpdateTVItemTVAuthModel(<TVItemTVAuthModel>{ Working: true, Error: null });

    return this.httpClient.get<TVItemTVAuth[]>('/api/TVItemTVAuth').pipe(
      map((x: any) => {
        console.debug(`TVItemTVAuth OK. Return: ${x}`);
        this.tvitemtvauthModel$.getValue().TVItemTVAuthList = <TVItemTVAuth[]>x;
        this.UpdateTVItemTVAuthModel(this.tvitemtvauthModel$.getValue());
        this.UpdateTVItemTVAuthModel(<TVItemTVAuthModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVItemTVAuthModel(<TVItemTVAuthModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVItemTVAuth ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
