/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { TVLocationTextModel, TVLocationModel } from './tvlocation.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesTVLocationText } from './tvlocation.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { TVLocation } from 'src/app/models/generated/TVLocation.model';

@Injectable({
  providedIn: 'root'
})
export class TVLocationService {
  tvlocationTextModel$: BehaviorSubject<TVLocationTextModel> = new BehaviorSubject<TVLocationTextModel>(<TVLocationTextModel>{});
  tvlocationModel$: BehaviorSubject<TVLocationModel> = new BehaviorSubject<TVLocationModel>(<TVLocationModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesTVLocationText(this);
    this.UpdateTVLocationText(<TVLocationTextModel>{ Title: "Something2 for text" });
  }

  UpdateTVLocationText(tvlocationTextModel: TVLocationTextModel) {
    this.tvlocationTextModel$.next(<TVLocationTextModel>{ ...this.tvlocationTextModel$.getValue(), ...tvlocationTextModel });
  }

  UpdateTVLocationModel(tvlocationModel: TVLocationModel) {
    this.tvlocationModel$.next(<TVLocationModel>{ ...this.tvlocationModel$.getValue(), ...tvlocationModel });
  }

  GetTVLocation(router: Router) {
    let oldURL = router.url;
    this.UpdateTVLocationModel(<TVLocationModel>{ Working: true, Error: null });

    return this.httpClient.get<TVLocation[]>('/api/TVLocation').pipe(
      map((x: any) => {
        console.debug(`TVLocation OK. Return: ${x}`);
        this.tvlocationModel$.getValue().TVLocationList = <TVLocation[]>x;
        this.UpdateTVLocationModel(this.tvlocationModel$.getValue());
        this.UpdateTVLocationModel(<TVLocationModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateTVLocationModel(<TVLocationModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`TVLocation ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
