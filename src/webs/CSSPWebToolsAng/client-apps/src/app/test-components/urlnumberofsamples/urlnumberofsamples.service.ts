/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { URLNumberOfSamplesTextModel, URLNumberOfSamplesModel } from './urlnumberofsamples.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesURLNumberOfSamplesText } from './urlnumberofsamples.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { URLNumberOfSamples } from 'src/app/models/generated/URLNumberOfSamples.model';

@Injectable({
  providedIn: 'root'
})
export class URLNumberOfSamplesService {
  urlnumberofsamplesTextModel$: BehaviorSubject<URLNumberOfSamplesTextModel> = new BehaviorSubject<URLNumberOfSamplesTextModel>(<URLNumberOfSamplesTextModel>{});
  urlnumberofsamplesModel$: BehaviorSubject<URLNumberOfSamplesModel> = new BehaviorSubject<URLNumberOfSamplesModel>(<URLNumberOfSamplesModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesURLNumberOfSamplesText(this);
    this.UpdateURLNumberOfSamplesText(<URLNumberOfSamplesTextModel>{ Title: "Something2 for text" });
  }

  UpdateURLNumberOfSamplesText(urlnumberofsamplesTextModel: URLNumberOfSamplesTextModel) {
    this.urlnumberofsamplesTextModel$.next(<URLNumberOfSamplesTextModel>{ ...this.urlnumberofsamplesTextModel$.getValue(), ...urlnumberofsamplesTextModel });
  }

  UpdateURLNumberOfSamplesModel(urlnumberofsamplesModel: URLNumberOfSamplesModel) {
    this.urlnumberofsamplesModel$.next(<URLNumberOfSamplesModel>{ ...this.urlnumberofsamplesModel$.getValue(), ...urlnumberofsamplesModel });
  }

  GetURLNumberOfSamples(router: Router) {
    let oldURL = router.url;
    this.UpdateURLNumberOfSamplesModel(<URLNumberOfSamplesModel>{ Working: true, Error: null });

    return this.httpClient.get<URLNumberOfSamples[]>('/api/URLNumberOfSamples').pipe(
      map((x: any) => {
        console.debug(`URLNumberOfSamples OK. Return: ${x}`);
        this.urlnumberofsamplesModel$.getValue().URLNumberOfSamplesList = <URLNumberOfSamples[]>x;
        this.UpdateURLNumberOfSamplesModel(this.urlnumberofsamplesModel$.getValue());
        this.UpdateURLNumberOfSamplesModel(<URLNumberOfSamplesModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateURLNumberOfSamplesModel(<URLNumberOfSamplesModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`URLNumberOfSamples ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
