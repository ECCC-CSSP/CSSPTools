/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VectorTextModel, VectorModel } from './vector.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVectorText } from './vector.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Vector } from 'src/app/models/generated/Vector.model';

@Injectable({
  providedIn: 'root'
})
export class VectorService {
  vectorTextModel$: BehaviorSubject<VectorTextModel> = new BehaviorSubject<VectorTextModel>(<VectorTextModel>{});
  vectorModel$: BehaviorSubject<VectorModel> = new BehaviorSubject<VectorModel>(<VectorModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVectorText(this);
    this.UpdateVectorText(<VectorTextModel>{ Title: "Something2 for text" });
  }

  UpdateVectorText(vectorTextModel: VectorTextModel) {
    this.vectorTextModel$.next(<VectorTextModel>{ ...this.vectorTextModel$.getValue(), ...vectorTextModel });
  }

  UpdateVectorModel(vectorModel: VectorModel) {
    this.vectorModel$.next(<VectorModel>{ ...this.vectorModel$.getValue(), ...vectorModel });
  }

  GetVector(router: Router) {
    let oldURL = router.url;
    this.UpdateVectorModel(<VectorModel>{ Working: true, Error: null });

    return this.httpClient.get<Vector[]>('/api/Vector').pipe(
      map((x: any) => {
        console.debug(`Vector OK. Return: ${x}`);
        this.vectorModel$.getValue().VectorList = <Vector[]>x;
        this.UpdateVectorModel(this.vectorModel$.getValue());
        this.UpdateVectorModel(<VectorModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVectorModel(<VectorModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`Vector ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
