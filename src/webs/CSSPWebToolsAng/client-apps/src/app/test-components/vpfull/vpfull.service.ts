/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPFullTextModel, VPFullModel } from './vpfull.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPFullText } from './vpfull.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPFull } from 'src/app/models/generated/VPFull.model';

@Injectable({
  providedIn: 'root'
})
export class VPFullService {
  vpfullTextModel$: BehaviorSubject<VPFullTextModel> = new BehaviorSubject<VPFullTextModel>(<VPFullTextModel>{});
  vpfullModel$: BehaviorSubject<VPFullModel> = new BehaviorSubject<VPFullModel>(<VPFullModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPFullText(this);
    this.UpdateVPFullText(<VPFullTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPFullText(vpfullTextModel: VPFullTextModel) {
    this.vpfullTextModel$.next(<VPFullTextModel>{ ...this.vpfullTextModel$.getValue(), ...vpfullTextModel });
  }

  UpdateVPFullModel(vpfullModel: VPFullModel) {
    this.vpfullModel$.next(<VPFullModel>{ ...this.vpfullModel$.getValue(), ...vpfullModel });
  }

  GetVPFull(router: Router) {
    let oldURL = router.url;
    this.UpdateVPFullModel(<VPFullModel>{ Working: true, Error: null });

    return this.httpClient.get<VPFull[]>('/api/VPFull').pipe(
      map((x: any) => {
        console.debug(`VPFull OK. Return: ${x}`);
        this.vpfullModel$.getValue().VPFullList = <VPFull[]>x;
        this.UpdateVPFullModel(this.vpfullModel$.getValue());
        this.UpdateVPFullModel(<VPFullModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPFullModel(<VPFullModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPFull ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
