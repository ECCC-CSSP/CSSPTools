/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPResValuesTextModel, VPResValuesModel } from './vpresvalues.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPResValuesText } from './vpresvalues.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPResValues } from 'src/app/models/generated/VPResValues.model';

@Injectable({
  providedIn: 'root'
})
export class VPResValuesService {
  vpresvaluesTextModel$: BehaviorSubject<VPResValuesTextModel> = new BehaviorSubject<VPResValuesTextModel>(<VPResValuesTextModel>{});
  vpresvaluesModel$: BehaviorSubject<VPResValuesModel> = new BehaviorSubject<VPResValuesModel>(<VPResValuesModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPResValuesText(this);
    this.UpdateVPResValuesText(<VPResValuesTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPResValuesText(vpresvaluesTextModel: VPResValuesTextModel) {
    this.vpresvaluesTextModel$.next(<VPResValuesTextModel>{ ...this.vpresvaluesTextModel$.getValue(), ...vpresvaluesTextModel });
  }

  UpdateVPResValuesModel(vpresvaluesModel: VPResValuesModel) {
    this.vpresvaluesModel$.next(<VPResValuesModel>{ ...this.vpresvaluesModel$.getValue(), ...vpresvaluesModel });
  }

  GetVPResValues(router: Router) {
    let oldURL = router.url;
    this.UpdateVPResValuesModel(<VPResValuesModel>{ Working: true, Error: null });

    return this.httpClient.get<VPResValues[]>('/api/VPResValues').pipe(
      map((x: any) => {
        console.debug(`VPResValues OK. Return: ${x}`);
        this.vpresvaluesModel$.getValue().VPResValuesList = <VPResValues[]>x;
        this.UpdateVPResValuesModel(this.vpresvaluesModel$.getValue());
        this.UpdateVPResValuesModel(<VPResValuesModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPResValuesModel(<VPResValuesModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPResValues ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
