/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPScenarioTextModel, VPScenarioModel } from './vpscenario.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPScenarioText } from './vpscenario.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPScenario } from 'src/app/models/generated/VPScenario.model';

@Injectable({
  providedIn: 'root'
})
export class VPScenarioService {
  vpscenarioTextModel$: BehaviorSubject<VPScenarioTextModel> = new BehaviorSubject<VPScenarioTextModel>(<VPScenarioTextModel>{});
  vpscenarioModel$: BehaviorSubject<VPScenarioModel> = new BehaviorSubject<VPScenarioModel>(<VPScenarioModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPScenarioText(this);
    this.UpdateVPScenarioText(<VPScenarioTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPScenarioText(vpscenarioTextModel: VPScenarioTextModel) {
    this.vpscenarioTextModel$.next(<VPScenarioTextModel>{ ...this.vpscenarioTextModel$.getValue(), ...vpscenarioTextModel });
  }

  UpdateVPScenarioModel(vpscenarioModel: VPScenarioModel) {
    this.vpscenarioModel$.next(<VPScenarioModel>{ ...this.vpscenarioModel$.getValue(), ...vpscenarioModel });
  }

  GetVPScenario(router: Router) {
    let oldURL = router.url;
    this.UpdateVPScenarioModel(<VPScenarioModel>{ Working: true, Error: null });

    return this.httpClient.get<VPScenario[]>('/api/VPScenario').pipe(
      map((x: any) => {
        console.debug(`VPScenario OK. Return: ${x}`);
        this.vpscenarioModel$.getValue().VPScenarioList = <VPScenario[]>x;
        this.UpdateVPScenarioModel(this.vpscenarioModel$.getValue());
        this.UpdateVPScenarioModel(<VPScenarioModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPScenarioModel(<VPScenarioModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPScenario ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
