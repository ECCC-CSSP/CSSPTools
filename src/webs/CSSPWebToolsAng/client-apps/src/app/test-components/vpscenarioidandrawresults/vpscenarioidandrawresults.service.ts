/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPScenarioIDAndRawResultsTextModel, VPScenarioIDAndRawResultsModel } from './vpscenarioidandrawresults.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPScenarioIDAndRawResultsText } from './vpscenarioidandrawresults.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPScenarioIDAndRawResults } from 'src/app/models/generated/VPScenarioIDAndRawResults.model';

@Injectable({
  providedIn: 'root'
})
export class VPScenarioIDAndRawResultsService {
  vpscenarioidandrawresultsTextModel$: BehaviorSubject<VPScenarioIDAndRawResultsTextModel> = new BehaviorSubject<VPScenarioIDAndRawResultsTextModel>(<VPScenarioIDAndRawResultsTextModel>{});
  vpscenarioidandrawresultsModel$: BehaviorSubject<VPScenarioIDAndRawResultsModel> = new BehaviorSubject<VPScenarioIDAndRawResultsModel>(<VPScenarioIDAndRawResultsModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPScenarioIDAndRawResultsText(this);
    this.UpdateVPScenarioIDAndRawResultsText(<VPScenarioIDAndRawResultsTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPScenarioIDAndRawResultsText(vpscenarioidandrawresultsTextModel: VPScenarioIDAndRawResultsTextModel) {
    this.vpscenarioidandrawresultsTextModel$.next(<VPScenarioIDAndRawResultsTextModel>{ ...this.vpscenarioidandrawresultsTextModel$.getValue(), ...vpscenarioidandrawresultsTextModel });
  }

  UpdateVPScenarioIDAndRawResultsModel(vpscenarioidandrawresultsModel: VPScenarioIDAndRawResultsModel) {
    this.vpscenarioidandrawresultsModel$.next(<VPScenarioIDAndRawResultsModel>{ ...this.vpscenarioidandrawresultsModel$.getValue(), ...vpscenarioidandrawresultsModel });
  }

  GetVPScenarioIDAndRawResults(router: Router) {
    let oldURL = router.url;
    this.UpdateVPScenarioIDAndRawResultsModel(<VPScenarioIDAndRawResultsModel>{ Working: true, Error: null });

    return this.httpClient.get<VPScenarioIDAndRawResults[]>('/api/VPScenarioIDAndRawResults').pipe(
      map((x: any) => {
        console.debug(`VPScenarioIDAndRawResults OK. Return: ${x}`);
        this.vpscenarioidandrawresultsModel$.getValue().VPScenarioIDAndRawResultsList = <VPScenarioIDAndRawResults[]>x;
        this.UpdateVPScenarioIDAndRawResultsModel(this.vpscenarioidandrawresultsModel$.getValue());
        this.UpdateVPScenarioIDAndRawResultsModel(<VPScenarioIDAndRawResultsModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPScenarioIDAndRawResultsModel(<VPScenarioIDAndRawResultsModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPScenarioIDAndRawResults ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
