/*
 * Auto generated from C:\CSSPTools\src\codegen\AngularComponentsGenerated\bin\Debug\netcoreapp3.1\AngularComponentsGenerated.exe
 *
 * Do not edit this file.
 *
 */

import { Injectable } from '@angular/core';
import { VPScenarioLanguageTextModel, VPScenarioLanguageModel } from './vpscenariolanguage.models';
import { BehaviorSubject, of } from 'rxjs';
import { LoadLocalesVPScenarioLanguageText } from './vpscenariolanguage.locales';
import { Router } from '@angular/router';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { VPScenarioLanguage } from 'src/app/models/generated/VPScenarioLanguage.model';

@Injectable({
  providedIn: 'root'
})
export class VPScenarioLanguageService {
  vpscenariolanguageTextModel$: BehaviorSubject<VPScenarioLanguageTextModel> = new BehaviorSubject<VPScenarioLanguageTextModel>(<VPScenarioLanguageTextModel>{});
  vpscenariolanguageModel$: BehaviorSubject<VPScenarioLanguageModel> = new BehaviorSubject<VPScenarioLanguageModel>(<VPScenarioLanguageModel>{});

  constructor(private httpClient: HttpClient) {
    LoadLocalesVPScenarioLanguageText(this);
    this.UpdateVPScenarioLanguageText(<VPScenarioLanguageTextModel>{ Title: "Something2 for text" });
  }

  UpdateVPScenarioLanguageText(vpscenariolanguageTextModel: VPScenarioLanguageTextModel) {
    this.vpscenariolanguageTextModel$.next(<VPScenarioLanguageTextModel>{ ...this.vpscenariolanguageTextModel$.getValue(), ...vpscenariolanguageTextModel });
  }

  UpdateVPScenarioLanguageModel(vpscenariolanguageModel: VPScenarioLanguageModel) {
    this.vpscenariolanguageModel$.next(<VPScenarioLanguageModel>{ ...this.vpscenariolanguageModel$.getValue(), ...vpscenariolanguageModel });
  }

  GetVPScenarioLanguage(router: Router) {
    let oldURL = router.url;
    this.UpdateVPScenarioLanguageModel(<VPScenarioLanguageModel>{ Working: true, Error: null });

    return this.httpClient.get<VPScenarioLanguage[]>('/api/VPScenarioLanguage').pipe(
      map((x: any) => {
        console.debug(`VPScenarioLanguage OK. Return: ${x}`);
        this.vpscenariolanguageModel$.getValue().VPScenarioLanguageList = <VPScenarioLanguage[]>x;
        this.UpdateVPScenarioLanguageModel(this.vpscenariolanguageModel$.getValue());
        this.UpdateVPScenarioLanguageModel(<VPScenarioLanguageModel>{ Working: false, Error: null });
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      }),
      catchError(e => of(e).pipe(map(e => {
        this.UpdateVPScenarioLanguageModel(<VPScenarioLanguageModel>{ Working: false, Error: <HttpErrorResponse>e });
        console.debug(`VPScenarioLanguage ERROR. Return: ${<HttpErrorResponse>e}`);
        router.navigateByUrl('', { skipLocationChange: true }).then(() => {
          router.navigate([`/${oldURL}`]);
        });
      })))
    );
  }
}
